
lab1_group18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003730  08003730  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003730  08003730  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003730  08003730  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000074  080037ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080037ac  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002278  00000000  00000000  0002ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005546  00000000  00000000  0002ed05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e8  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000292dc  00000000  00000000  00034e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008eb4  00000000  00000000  0005e124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb23b  00000000  00000000  00066fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00162213  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e8  00000000  00000000  001622dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003510 	.word	0x08003510

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	08003510 	.word	0x08003510

080001fc <kalman>:
 * s7:	p
 * s8:	k
 */

kalman:	// (kalman_state* kstate, float measurement)
	vstmdb		sp!, {s3-s8}	// push
 80001fc:	ed6d 1a06 	vpush	{s3-s8}
	vldmia		r0, {s4-s8}	// multiple load floating point number from the struct input
 8000200:	ec90 2a05 	vldmia	r0, {s4-s8}
	vadd.f32	s7, s7, s4	// p=p+q
 8000204:	ee73 3a82 	vadd.f32	s7, s7, s4
	vadd.f32	s3, s7, s5	// r3 as a intermediate value, r3=p+r
 8000208:	ee73 1aa2 	vadd.f32	s3, s7, s5
	vdiv.f32	s8, s7, s3	// k=p/(p+r)
 800020c:	ee83 4aa1 	vdiv.f32	s8, s7, s3
	vsub.f32	s3, s0, s6	// r3 = measurement-x
 8000210:	ee70 1a43 	vsub.f32	s3, s0, s6
	vmla.f32	s6, s8, s3	// x = x + k*(measurement-x))
 8000214:	ee04 3a21 	vmla.f32	s6, s8, s3
	vmov.f32	s3, #1.0
 8000218:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	vsub.f32	s3, s3, s8	// r3=1-k
 800021c:	ee71 1ac4 	vsub.f32	s3, s3, s8
	vmul.f32	s7, s3, s7	// p=(1-k)*p
 8000220:	ee61 3aa3 	vmul.f32	s7, s3, s7

	vstmia		r0, {s4-s8}	// store all values back
 8000224:	ec80 2a05 	vstmia	r0, {s4-s8}

	vmov.f32	s0, s6		// return x
 8000228:	eeb0 0a43 	vmov.f32	s0, s6
	vldmia		sp!, {s3-s8}	// pop
 800022c:	ecfd 1a06 	vpop	{s3-s8}
	bx			lr
 8000230:	4770      	bx	lr
	...

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0x44>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b90b      	cbnz	r3, 8000bb6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000bb4:	4770      	bx	lr
{
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <HAL_InitTick+0x48>)
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bca:	f000 f87f 	bl	8000ccc <HAL_SYSTICK_Config>
 8000bce:	b968      	cbnz	r0, 8000bec <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	2c0f      	cmp	r4, #15
 8000bd2:	d901      	bls.n	8000bd8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e00a      	b.n	8000bee <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4621      	mov	r1, r4
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 f840 	bl	8000c64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_InitTick+0x4c>)
 8000be6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2000      	movs	r0, #0
 8000bea:	e000      	b.n	8000bee <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
}
 8000bee:	bd10      	pop	{r4, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_Init>:
{
 8000bfc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f81e 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ffd1 	bl	8000bac <HAL_InitTick>
 8000c0a:	b110      	cbz	r0, 8000c12 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000c0c:	2401      	movs	r4, #1
}
 8000c0e:	4620      	mov	r0, r4
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	4604      	mov	r4, r0
    HAL_MspInit();
 8000c14:	f000 ff64 	bl	8001ae0 <HAL_MspInit>
 8000c18:	e7f9      	b.n	8000c0e <HAL_Init+0x12>
	...

08000c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x14>)
 8000c22:	6811      	ldr	r1, [r2, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000090 	.word	0x20000090

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000090 	.word	0x20000090

08000c40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	0200      	lsls	r0, r0, #8
 8000c4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c52:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c5c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_NVIC_SetPriority+0x60>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6e:	f1c3 0407 	rsb	r4, r3, #7
 8000c72:	2c04      	cmp	r4, #4
 8000c74:	bf28      	it	cs
 8000c76:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c78:	1d1d      	adds	r5, r3, #4
 8000c7a:	2d06      	cmp	r5, #6
 8000c7c:	d918      	bls.n	8000cb0 <HAL_NVIC_SetPriority+0x4c>
 8000c7e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000c84:	fa05 f404 	lsl.w	r4, r5, r4
 8000c88:	ea21 0104 	bic.w	r1, r1, r4
 8000c8c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8e:	fa05 f303 	lsl.w	r3, r5, r3
 8000c92:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c96:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	db0b      	blt.n	8000cb4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	0109      	lsls	r1, r1, #4
 8000c9e:	b2c9      	uxtb	r1, r1
 8000ca0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ca4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ca8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cac:	bc30      	pop	{r4, r5}
 8000cae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e7e5      	b.n	8000c80 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	f000 000f 	and.w	r0, r0, #15
 8000cb8:	0109      	lsls	r1, r1, #4
 8000cba:	b2c9      	uxtb	r1, r1
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <HAL_NVIC_SetPriority+0x64>)
 8000cbe:	5419      	strb	r1, [r3, r0]
 8000cc0:	e7f4      	b.n	8000cac <HAL_NVIC_SetPriority+0x48>
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	e000ed14 	.word	0xe000ed14

08000ccc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	3801      	subs	r0, #1
 8000cce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd2:	d20a      	bcs.n	8000cea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_SYSTICK_Config+0x24>)
 8000cd6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_SYSTICK_Config+0x28>)
 8000cda:	21f0      	movs	r1, #240	; 0xf0
 8000cdc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_PWREx_GetVoltageRange+0x20>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d00:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000d04:	d004      	beq.n	8000d10 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000d06:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8000d0a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8000d0e:	d100      	bne.n	8000d12 <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000d10:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000d12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d16:	e7fb      	b.n	8000d10 <HAL_PWREx_GetVoltageRange+0x18>
 8000d18:	40007000 	.word	0x40007000

08000d1c <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d136      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2c:	d008      	beq.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d2e:	4a3b      	ldr	r2, [pc, #236]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d30:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d40:	4a36      	ldr	r2, [pc, #216]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	6813      	ldr	r3, [r2, #0]
 8000d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	fb03 f302 	mul.w	r3, r3, r2
 8000d64:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d6e:	e000      	b.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8000d70:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d72:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d74:	6952      	ldr	r2, [r2, #20]
 8000d76:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d7a:	d001      	beq.n	8000d80 <HAL_PWREx_ControlVoltageScaling+0x64>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f7      	bne.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000d88:	d144      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d8e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000d92:	d008      	beq.n	8000da6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000da2:	2000      	movs	r0, #0
 8000da4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db2:	d008      	beq.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000db6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000dc8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	6813      	ldr	r3, [r2, #0]
 8000dd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2332      	movs	r3, #50	; 0x32
 8000de6:	fb03 f302 	mul.w	r3, r3, r2
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	0c9b      	lsrs	r3, r3, #18
 8000df2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df4:	e000      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8000df6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000dfa:	6952      	ldr	r2, [r2, #20]
 8000dfc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000e00:	d001      	beq.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0xea>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f7      	bne.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e0e:	d103      	bne.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
 8000e12:	4770      	bx	lr
        return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	4770      	bx	lr
        return HAL_TIMEOUT;
 8000e18:	2003      	movs	r0, #3
}
 8000e1a:	4770      	bx	lr
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <RCC_GetSysClockFreqFromPLLSource>:
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d01d      	beq.n	8000e70 <RCC_GetSysClockFreqFromPLLSource+0x48>
  uint32_t msirange = 0U;
 8000e34:	2300      	movs	r3, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e38:	68d2      	ldr	r2, [r2, #12]
 8000e3a:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 8000e3e:	2a02      	cmp	r2, #2
 8000e40:	d029      	beq.n	8000e96 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8000e42:	2a03      	cmp	r2, #3
 8000e44:	d100      	bne.n	8000e48 <RCC_GetSysClockFreqFromPLLSource+0x20>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <RCC_GetSysClockFreqFromPLLSource+0x78>)
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e4a:	68d0      	ldr	r0, [r2, #12]
 8000e4c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8000e50:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000e52:	68d1      	ldr	r1, [r2, #12]
 8000e54:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000e58:	fb03 f301 	mul.w	r3, r3, r1
 8000e5c:	fbb3 f0f0 	udiv	r0, r3, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e60:	68d3      	ldr	r3, [r2, #12]
 8000e62:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000e66:	3301      	adds	r3, #1
 8000e68:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8000e6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e6e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f013 0f08 	tst.w	r3, #8
 8000e78:	d108      	bne.n	8000e8c <RCC_GetSysClockFreqFromPLLSource+0x64>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e80:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <RCC_GetSysClockFreqFromPLLSource+0x7c>)
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	e7d4      	b.n	8000e36 <RCC_GetSysClockFreqFromPLLSource+0xe>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e94:	e7f6      	b.n	8000e84 <RCC_GetSysClockFreqFromPLLSource+0x5c>
  switch (pllsource)
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000e98:	e7d6      	b.n	8000e48 <RCC_GetSysClockFreqFromPLLSource+0x20>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	007a1200 	.word	0x007a1200
 8000ea4:	080036dc 	.word	0x080036dc
 8000ea8:	00f42400 	.word	0x00f42400

08000eac <RCC_SetFlashLatencyFromMSIRange>:
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000eba:	d00a      	beq.n	8000ed2 <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8000ebc:	f7ff ff1c 	bl	8000cf8 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000ec4:	d016      	beq.n	8000ef4 <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8000ec6:	2c7f      	cmp	r4, #127	; 0x7f
 8000ec8:	d81e      	bhi.n	8000f08 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8000eca:	2c70      	cmp	r4, #112	; 0x70
 8000ecc:	d02b      	beq.n	8000f26 <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000ece:	2100      	movs	r1, #0
 8000ed0:	e01b      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4d17      	ldr	r5, [pc, #92]	; (8000f30 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8000ed4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	65ab      	str	r3, [r5, #88]	; 0x58
 8000edc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ee6:	f7ff ff07 	bl	8000cf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000eea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ef2:	e7e5      	b.n	8000ec0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000ef4:	2c80      	cmp	r4, #128	; 0x80
 8000ef6:	d903      	bls.n	8000f00 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 8000ef8:	2ca0      	cmp	r4, #160	; 0xa0
 8000efa:	d903      	bls.n	8000f04 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000efc:	2102      	movs	r1, #2
 8000efe:	e004      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f00:	2100      	movs	r1, #0
 8000f02:	e002      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f04:	2101      	movs	r1, #1
 8000f06:	e000      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8000f08:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	f023 030f 	bic.w	r3, r3, #15
 8000f12:	430b      	orrs	r3, r1
 8000f14:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d104      	bne.n	8000f2a <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 8000f20:	2000      	movs	r0, #0
}
 8000f22:	b003      	add	sp, #12
 8000f24:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f26:	2101      	movs	r1, #1
 8000f28:	e7ef      	b.n	8000f0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	e7f9      	b.n	8000f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f38:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f3a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3c:	68d2      	ldr	r2, [r2, #12]
 8000f3e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f42:	f013 030c 	ands.w	r3, r3, #12
 8000f46:	d00a      	beq.n	8000f5e <HAL_RCC_GetSysClockFreq+0x26>
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d006      	beq.n	8000f5a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d01f      	beq.n	8000f90 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f54:	2000      	movs	r0, #0
 8000f56:	4602      	mov	r2, r0
 8000f58:	e010      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f5a:	2a01      	cmp	r2, #1
 8000f5c:	d1f6      	bne.n	8000f4c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	f012 0f08 	tst.w	r2, #8
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f6a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000f6e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8000f72:	491b      	ldr	r1, [pc, #108]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000f74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f78:	b143      	cbz	r3, 8000f8c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f7a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f7c:	2b0c      	cmp	r3, #12
 8000f7e:	d00d      	beq.n	8000f9c <HAL_RCC_GetSysClockFreq+0x64>
}
 8000f80:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000f8a:	e7f2      	b.n	8000f72 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e7f5      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f92:	2200      	movs	r2, #0
 8000f94:	e7f2      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f98:	2200      	movs	r2, #0
 8000f9a:	e7ef      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d016      	beq.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x9e>
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d100      	bne.n	8000fae <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fb0:	68d8      	ldr	r0, [r3, #12]
 8000fb2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8000fb6:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000fb8:	68d9      	ldr	r1, [r3, #12]
 8000fba:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000fbe:	fb02 f201 	mul.w	r2, r2, r1
 8000fc2:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fc6:	68d8      	ldr	r0, [r3, #12]
 8000fc8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000fcc:	3001      	adds	r0, #1
 8000fce:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8000fd0:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8000fd4:	e7d4      	b.n	8000f80 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8000fd6:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0xac>)
 8000fd8:	e7e9      	b.n	8000fae <HAL_RCC_GetSysClockFreq+0x76>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	080036dc 	.word	0x080036dc
 8000fe4:	00f42400 	.word	0x00f42400
 8000fe8:	007a1200 	.word	0x007a1200

08000fec <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8000fec:	2800      	cmp	r0, #0
 8000fee:	f000 832d 	beq.w	800164c <HAL_RCC_OscConfig+0x660>
{
 8000ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff8:	4bae      	ldr	r3, [pc, #696]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8000ffa:	689d      	ldr	r5, [r3, #8]
 8000ffc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001000:	68de      	ldr	r6, [r3, #12]
 8001002:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001006:	6803      	ldr	r3, [r0, #0]
 8001008:	f013 0f10 	tst.w	r3, #16
 800100c:	d05a      	beq.n	80010c4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800100e:	b1e5      	cbz	r5, 800104a <HAL_RCC_OscConfig+0x5e>
 8001010:	2d0c      	cmp	r5, #12
 8001012:	d018      	beq.n	8001046 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001014:	69a3      	ldr	r3, [r4, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80bb 	beq.w	8001192 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800101c:	4aa5      	ldr	r2, [pc, #660]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001026:	f7ff fe05 	bl	8000c34 <HAL_GetTick>
 800102a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800102c:	4ba1      	ldr	r3, [pc, #644]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f013 0f02 	tst.w	r3, #2
 8001034:	f040 809a 	bne.w	800116c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001038:	f7ff fdfc 	bl	8000c34 <HAL_GetTick>
 800103c:	1bc0      	subs	r0, r0, r7
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f4      	bls.n	800102c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e30d      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001046:	2e01      	cmp	r6, #1
 8001048:	d1e4      	bne.n	8001014 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104a:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f013 0f02 	tst.w	r3, #2
 8001052:	d003      	beq.n	800105c <HAL_RCC_OscConfig+0x70>
 8001054:	69a3      	ldr	r3, [r4, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 82fa 	beq.w	8001650 <HAL_RCC_OscConfig+0x664>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105c:	6a20      	ldr	r0, [r4, #32]
 800105e:	4b95      	ldr	r3, [pc, #596]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f013 0f08 	tst.w	r3, #8
 8001066:	d05b      	beq.n	8001120 <HAL_RCC_OscConfig+0x134>
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001070:	4298      	cmp	r0, r3
 8001072:	d85c      	bhi.n	800112e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f042 0208 	orr.w	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001084:	6a21      	ldr	r1, [r4, #32]
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001090:	69e1      	ldr	r1, [r4, #28]
 8001092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001096:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001098:	2d00      	cmp	r5, #0
 800109a:	d060      	beq.n	800115e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800109c:	f7ff ff4c 	bl	8000f38 <HAL_RCC_GetSysClockFreq>
 80010a0:	4b84      	ldr	r3, [pc, #528]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010a8:	4a83      	ldr	r2, [pc, #524]	; (80012b8 <HAL_RCC_OscConfig+0x2cc>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	40d8      	lsrs	r0, r3
 80010b2:	4b82      	ldr	r3, [pc, #520]	; (80012bc <HAL_RCC_OscConfig+0x2d0>)
 80010b4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80010b6:	4b82      	ldr	r3, [pc, #520]	; (80012c0 <HAL_RCC_OscConfig+0x2d4>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	f7ff fd77 	bl	8000bac <HAL_InitTick>
        if(status != HAL_OK)
 80010be:	2800      	cmp	r0, #0
 80010c0:	f040 82cf 	bne.w	8001662 <HAL_RCC_OscConfig+0x676>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	f013 0f01 	tst.w	r3, #1
 80010ca:	f000 8081 	beq.w	80011d0 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010ce:	2d08      	cmp	r5, #8
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x1d2>
 80010d2:	2d0c      	cmp	r5, #12
 80010d4:	d071      	beq.n	80011ba <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	f000 8097 	beq.w	800120e <HAL_RCC_OscConfig+0x222>
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	f000 8099 	beq.w	800121a <HAL_RCC_OscConfig+0x22e>
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010f8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8099 	beq.w	8001234 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8001102:	f7ff fd97 	bl	8000c34 <HAL_GetTick>
 8001106:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001108:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001110:	d15e      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff fd8f 	bl	8000c34 <HAL_GetTick>
 8001116:	1bc0      	subs	r0, r0, r7
 8001118:	2864      	cmp	r0, #100	; 0x64
 800111a:	d9f5      	bls.n	8001108 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800111c:	2003      	movs	r0, #3
 800111e:	e2a0      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001120:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112c:	e7a0      	b.n	8001070 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800112e:	f7ff febd 	bl	8000eac <RCC_SetFlashLatencyFromMSIRange>
 8001132:	2800      	cmp	r0, #0
 8001134:	f040 828e 	bne.w	8001654 <HAL_RCC_OscConfig+0x668>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f042 0208 	orr.w	r2, r2, #8
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001148:	6a21      	ldr	r1, [r4, #32]
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001154:	69e1      	ldr	r1, [r4, #28]
 8001156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	e79e      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800115e:	6a20      	ldr	r0, [r4, #32]
 8001160:	f7ff fea4 	bl	8000eac <RCC_SetFlashLatencyFromMSIRange>
 8001164:	2800      	cmp	r0, #0
 8001166:	d099      	beq.n	800109c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	e27a      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116c:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f042 0208 	orr.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800117c:	6a21      	ldr	r1, [r4, #32]
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001188:	69e1      	ldr	r1, [r4, #28]
 800118a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	e798      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8001192:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001194:	6813      	ldr	r3, [r2, #0]
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800119c:	f7ff fd4a 	bl	8000c34 <HAL_GetTick>
 80011a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a2:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f013 0f02 	tst.w	r3, #2
 80011aa:	d08b      	beq.n	80010c4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fd42 	bl	8000c34 <HAL_GetTick>
 80011b0:	1bc0      	subs	r0, r0, r7
 80011b2:	2802      	cmp	r0, #2
 80011b4:	d9f5      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80011b6:	2003      	movs	r0, #3
 80011b8:	e253      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ba:	2e03      	cmp	r6, #3
 80011bc:	d18b      	bne.n	80010d6 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011c6:	d003      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1e4>
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8244 	beq.w	8001658 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	f013 0f02 	tst.w	r3, #2
 80011d6:	d04f      	beq.n	8001278 <HAL_RCC_OscConfig+0x28c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011d8:	2d04      	cmp	r5, #4
 80011da:	d03c      	beq.n	8001256 <HAL_RCC_OscConfig+0x26a>
 80011dc:	2d0c      	cmp	r5, #12
 80011de:	d038      	beq.n	8001252 <HAL_RCC_OscConfig+0x266>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e0:	68e3      	ldr	r3, [r4, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d077      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011f0:	f7ff fd20 	bl	8000c34 <HAL_GetTick>
 80011f4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011fe:	d161      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fd18 	bl	8000c34 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	2802      	cmp	r0, #2
 8001208:	d9f5      	bls.n	80011f6 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800120a:	2003      	movs	r0, #3
 800120c:	e229      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e76f      	b.n	80010fa <HAL_RCC_OscConfig+0x10e>
 800121a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e762      	b.n	80010fa <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001234:	f7ff fcfe 	bl	8000c34 <HAL_GetTick>
 8001238:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001242:	d0c5      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcf6 	bl	8000c34 <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	2864      	cmp	r0, #100	; 0x64
 800124c:	d9f5      	bls.n	800123a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800124e:	2003      	movs	r0, #3
 8001250:	e207      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001252:	2e02      	cmp	r6, #2
 8001254:	d1c4      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800125e:	d003      	beq.n	8001268 <HAL_RCC_OscConfig+0x27c>
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 81fa 	beq.w	800165c <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800126a:	6853      	ldr	r3, [r2, #4]
 800126c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001270:	6921      	ldr	r1, [r4, #16]
 8001272:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001276:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	f013 0f08 	tst.w	r3, #8
 800127e:	d055      	beq.n	800132c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001280:	6963      	ldr	r3, [r4, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d03b      	beq.n	80012fe <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 8001288:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001294:	f7ff fcce 	bl	8000c34 <HAL_GetTick>
 8001298:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_RCC_OscConfig+0x2c8>)
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	f013 0f02 	tst.w	r3, #2
 80012a4:	d142      	bne.n	800132c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fcc5 	bl	8000c34 <HAL_GetTick>
 80012aa:	1b80      	subs	r0, r0, r6
 80012ac:	2802      	cmp	r0, #2
 80012ae:	d9f4      	bls.n	800129a <HAL_RCC_OscConfig+0x2ae>
          return HAL_TIMEOUT;
 80012b0:	2003      	movs	r0, #3
 80012b2:	e1d6      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
 80012b4:	40021000 	.word	0x40021000
 80012b8:	080036cc 	.word	0x080036cc
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4ab7      	ldr	r2, [pc, #732]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80012c6:	6853      	ldr	r3, [r2, #4]
 80012c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80012cc:	6921      	ldr	r1, [r4, #16]
 80012ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80012d2:	6053      	str	r3, [r2, #4]
 80012d4:	e7d0      	b.n	8001278 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4ab3      	ldr	r2, [pc, #716]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80012d8:	6813      	ldr	r3, [r2, #0]
 80012da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012e0:	f7ff fca8 	bl	8000c34 <HAL_GetTick>
 80012e4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e6:	4baf      	ldr	r3, [pc, #700]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012ee:	d0c3      	beq.n	8001278 <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fca0 	bl	8000c34 <HAL_GetTick>
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9f5      	bls.n	80012e6 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80012fa:	2003      	movs	r0, #3
 80012fc:	e1b1      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_LSI_DISABLE();
 80012fe:	4aa9      	ldr	r2, [pc, #676]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001300:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800130c:	f7ff fc92 	bl	8000c34 <HAL_GetTick>
 8001310:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001312:	4ba4      	ldr	r3, [pc, #656]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001318:	f013 0f02 	tst.w	r3, #2
 800131c:	d006      	beq.n	800132c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc89 	bl	8000c34 <HAL_GetTick>
 8001322:	1b80      	subs	r0, r0, r6
 8001324:	2802      	cmp	r0, #2
 8001326:	d9f4      	bls.n	8001312 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8001328:	2003      	movs	r0, #3
 800132a:	e19a      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	f013 0f04 	tst.w	r3, #4
 8001332:	d07a      	beq.n	800142a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001334:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800133c:	d136      	bne.n	80013ac <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b99      	ldr	r3, [pc, #612]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001342:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001352:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001354:	4b94      	ldr	r3, [pc, #592]	; (80015a8 <HAL_RCC_OscConfig+0x5bc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f413 7f80 	tst.w	r3, #256	; 0x100
 800135c:	d028      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d039      	beq.n	80013d8 <HAL_RCC_OscConfig+0x3ec>
 8001364:	2b05      	cmp	r3, #5
 8001366:	d03f      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3fc>
 8001368:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800136a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001376:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d03d      	beq.n	8001404 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8001388:	f7ff fc54 	bl	8000c34 <HAL_GetTick>
 800138c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800138e:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001394:	f013 0f02 	tst.w	r3, #2
 8001398:	d146      	bne.n	8001428 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fc4b 	bl	8000c34 <HAL_GetTick>
 800139e:	1bc0      	subs	r0, r0, r7
 80013a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a4:	4298      	cmp	r0, r3
 80013a6:	d9f2      	bls.n	800138e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80013a8:	2003      	movs	r0, #3
 80013aa:	e15a      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
    FlagStatus       pwrclkchanged = RESET;
 80013ac:	2600      	movs	r6, #0
 80013ae:	e7d1      	b.n	8001354 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013b0:	4a7d      	ldr	r2, [pc, #500]	; (80015a8 <HAL_RCC_OscConfig+0x5bc>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013ba:	f7ff fc3b 	bl	8000c34 <HAL_GetTick>
 80013be:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c0:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <HAL_RCC_OscConfig+0x5bc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013c8:	d1c9      	bne.n	800135e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fc33 	bl	8000c34 <HAL_GetTick>
 80013ce:	1bc0      	subs	r0, r0, r7
 80013d0:	2802      	cmp	r0, #2
 80013d2:	d9f5      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80013d4:	2003      	movs	r0, #3
 80013d6:	e144      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	4a72      	ldr	r2, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80013da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e6:	e7cc      	b.n	8001382 <HAL_RCC_OscConfig+0x396>
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80013ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013ee:	f042 0204 	orr.w	r2, r2, #4
 80013f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80013f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001402:	e7be      	b.n	8001382 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8001404:	f7ff fc16 	bl	8000c34 <HAL_GetTick>
 8001408:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001410:	f013 0f02 	tst.w	r3, #2
 8001414:	d008      	beq.n	8001428 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fc0d 	bl	8000c34 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001420:	4298      	cmp	r0, r3
 8001422:	d9f2      	bls.n	800140a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e11c      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
    if(pwrclkchanged == SET)
 8001428:	b9e6      	cbnz	r6, 8001464 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	f013 0f20 	tst.w	r3, #32
 8001430:	d035      	beq.n	800149e <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001434:	b1e3      	cbz	r3, 8001470 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001438:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001444:	f7ff fbf6 	bl	8000c34 <HAL_GetTick>
 8001448:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800144c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001450:	f013 0f02 	tst.w	r3, #2
 8001454:	d123      	bne.n	800149e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001456:	f7ff fbed 	bl	8000c34 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2802      	cmp	r0, #2
 800145e:	d9f4      	bls.n	800144a <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e0fe      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001464:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001466:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800146c:	6593      	str	r3, [r2, #88]	; 0x58
 800146e:	e7dc      	b.n	800142a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001472:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800147e:	f7ff fbd9 	bl	8000c34 <HAL_GetTick>
 8001482:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800148a:	f013 0f02 	tst.w	r3, #2
 800148e:	d006      	beq.n	800149e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001490:	f7ff fbd0 	bl	8000c34 <HAL_GetTick>
 8001494:	1b80      	subs	r0, r0, r6
 8001496:	2802      	cmp	r0, #2
 8001498:	d9f4      	bls.n	8001484 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800149a:	2003      	movs	r0, #3
 800149c:	e0e1      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800149e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80dd 	beq.w	8001660 <HAL_RCC_OscConfig+0x674>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d027      	beq.n	80014fa <HAL_RCC_OscConfig+0x50e>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014aa:	2d0c      	cmp	r5, #12
 80014ac:	f000 80df 	beq.w	800166e <HAL_RCC_OscConfig+0x682>
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014b8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 80014c0:	d104      	bne.n	80014cc <HAL_RCC_OscConfig+0x4e0>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014c2:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80014c4:	68d3      	ldr	r3, [r2, #12]
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014cc:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80014ce:	68d3      	ldr	r3, [r2, #12]
 80014d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80014da:	f7ff fbab 	bl	8000c34 <HAL_GetTick>
 80014de:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014e8:	f000 80ae 	beq.w	8001648 <HAL_RCC_OscConfig+0x65c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fba2 	bl	8000c34 <HAL_GetTick>
 80014f0:	1b00      	subs	r0, r0, r4
 80014f2:	2802      	cmp	r0, #2
 80014f4:	d9f4      	bls.n	80014e0 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 80014f6:	2003      	movs	r0, #3
 80014f8:	e0b3      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
      pll_config = RCC->PLLCFGR;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	f003 0103 	and.w	r1, r3, #3
 8001502:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001504:	4291      	cmp	r1, r2
 8001506:	d00f      	beq.n	8001528 <HAL_RCC_OscConfig+0x53c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001508:	2d0c      	cmp	r5, #12
 800150a:	f000 80ac 	beq.w	8001666 <HAL_RCC_OscConfig+0x67a>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001516:	f040 80a8 	bne.w	800166a <HAL_RCC_OscConfig+0x67e>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001522:	d02b      	beq.n	800157c <HAL_RCC_OscConfig+0x590>
            return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
 8001526:	e09c      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800152c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800152e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001530:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001534:	d1e8      	bne.n	8001508 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001536:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800153a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800153c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001540:	d1e2      	bne.n	8001508 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001542:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001546:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001548:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800154c:	d1dc      	bne.n	8001508 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001552:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001554:	0852      	lsrs	r2, r2, #1
 8001556:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001558:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800155c:	d1d4      	bne.n	8001508 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800155e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001562:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001564:	0852      	lsrs	r2, r2, #1
 8001566:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001568:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800156c:	d1cc      	bne.n	8001508 <HAL_RCC_OscConfig+0x51c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001576:	d04d      	beq.n	8001614 <HAL_RCC_OscConfig+0x628>
  return HAL_OK;
 8001578:	2000      	movs	r0, #0
 800157a:	e072      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
            __HAL_RCC_PLL_DISABLE();
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001584:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001586:	f7ff fb55 	bl	8000c34 <HAL_GetTick>
 800158a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_OscConfig+0x5b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001594:	d00a      	beq.n	80015ac <HAL_RCC_OscConfig+0x5c0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb4d 	bl	8000c34 <HAL_GetTick>
 800159a:	1b40      	subs	r0, r0, r5
 800159c:	2802      	cmp	r0, #2
 800159e:	d9f5      	bls.n	800158c <HAL_RCC_OscConfig+0x5a0>
                return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
 80015a2:	e05e      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	4a31      	ldr	r2, [pc, #196]	; (8001674 <HAL_RCC_OscConfig+0x688>)
 80015ae:	68d3      	ldr	r3, [r2, #12]
 80015b0:	4931      	ldr	r1, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x68c>)
 80015b2:	4019      	ands	r1, r3
 80015b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015b8:	3801      	subs	r0, #1
 80015ba:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80015be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80015c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80015c6:	0840      	lsrs	r0, r0, #1
 80015c8:	3801      	subs	r0, #1
 80015ca:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80015ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80015d0:	0840      	lsrs	r0, r0, #1
 80015d2:	3801      	subs	r0, #1
 80015d4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80015d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015da:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80015de:	430b      	orrs	r3, r1
 80015e0:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015ea:	68d3      	ldr	r3, [r2, #12]
 80015ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80015f2:	f7ff fb1f 	bl	8000c34 <HAL_GetTick>
 80015f6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_OscConfig+0x688>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x624>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb17 	bl	8000c34 <HAL_GetTick>
 8001606:	1b00      	subs	r0, r0, r4
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f5      	bls.n	80015f8 <HAL_RCC_OscConfig+0x60c>
                return HAL_TIMEOUT;
 800160c:	2003      	movs	r0, #3
 800160e:	e028      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 8001610:	2000      	movs	r0, #0
 8001612:	e026      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x688>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800161c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001624:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001626:	f7ff fb05 	bl	8000c34 <HAL_GetTick>
 800162a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x688>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x658>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff fafd 	bl	8000c34 <HAL_GetTick>
 800163a:	1b03      	subs	r3, r0, r4
 800163c:	2b02      	cmp	r3, #2
 800163e:	d9f5      	bls.n	800162c <HAL_RCC_OscConfig+0x640>
              return HAL_TIMEOUT;
 8001640:	2003      	movs	r0, #3
 8001642:	e00e      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 8001644:	2000      	movs	r0, #0
 8001646:	e00c      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
 8001648:	2000      	movs	r0, #0
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
    return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
}
 800164e:	4770      	bx	lr
        return HAL_ERROR;
 8001650:	2001      	movs	r0, #1
 8001652:	e006      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
            return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
 8001656:	e004      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 8001658:	2001      	movs	r0, #1
 800165a:	e002      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 800165c:	2001      	movs	r0, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 8001660:	2000      	movs	r0, #0
}
 8001662:	b003      	add	sp, #12
 8001664:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	e7fb      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
            return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
 800166c:	e7f9      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
 8001670:	e7f7      	b.n	8001662 <HAL_RCC_OscConfig+0x676>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	019d800c 	.word	0x019d800c

0800167c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800167c:	2800      	cmp	r0, #0
 800167e:	f000 80db 	beq.w	8001838 <HAL_RCC_ClockConfig+0x1bc>
{
 8001682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001684:	460c      	mov	r4, r1
 8001686:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	428b      	cmp	r3, r1
 8001692:	d20b      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001694:	4a6c      	ldr	r2, [pc, #432]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	430b      	orrs	r3, r1
 800169e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a0:	6813      	ldr	r3, [r2, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	428b      	cmp	r3, r1
 80016a8:	f040 80c8 	bne.w	800183c <HAL_RCC_ClockConfig+0x1c0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ac:	682e      	ldr	r6, [r5, #0]
 80016ae:	f016 0601 	ands.w	r6, r6, #1
 80016b2:	d074      	beq.n	800179e <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b4:	686b      	ldr	r3, [r5, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d00d      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x5a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d034      	beq.n	8001728 <HAL_RCC_ClockConfig+0xac>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d146      	bne.n	8001750 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f013 0f02 	tst.w	r3, #2
 80016d0:	d130      	bne.n	8001734 <HAL_RCC_ClockConfig+0xb8>
          return HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
 80016d4:	e0a7      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x68>
        return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
 80016e2:	e0a0      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80016e4:	f7ff fba0 	bl	8000e28 <RCC_GetSysClockFreqFromPLLSource>
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_ClockConfig+0x1d4>)
 80016ea:	4298      	cmp	r0, r3
 80016ec:	d937      	bls.n	800175e <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016ee:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80016f6:	d108      	bne.n	800170a <HAL_RCC_ClockConfig+0x8e>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016f8:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80016fa:	6893      	ldr	r3, [r2, #8]
 80016fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001706:	2680      	movs	r6, #128	; 0x80
 8001708:	e02e      	b.n	8001768 <HAL_RCC_ClockConfig+0xec>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800170a:	682e      	ldr	r6, [r5, #0]
 800170c:	f016 0602 	ands.w	r6, r6, #2
 8001710:	d02a      	beq.n	8001768 <HAL_RCC_ClockConfig+0xec>
 8001712:	68ab      	ldr	r3, [r5, #8]
 8001714:	bb2b      	cbnz	r3, 8001762 <HAL_RCC_ClockConfig+0xe6>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001716:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001718:	6893      	ldr	r3, [r2, #8]
 800171a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800171e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001722:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001724:	2680      	movs	r6, #128	; 0x80
 8001726:	e01f      	b.n	8001768 <HAL_RCC_ClockConfig+0xec>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001730:	f000 8086 	beq.w	8001840 <HAL_RCC_ClockConfig+0x1c4>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001734:	f7ff fc00 	bl	8000f38 <HAL_RCC_GetSysClockFreq>
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_RCC_ClockConfig+0x1d4>)
 800173a:	4298      	cmp	r0, r3
 800173c:	d913      	bls.n	8001766 <HAL_RCC_ClockConfig+0xea>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800173e:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001740:	6893      	ldr	r3, [r2, #8]
 8001742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174a:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800174c:	2680      	movs	r6, #128	; 0x80
 800174e:	e00b      	b.n	8001768 <HAL_RCC_ClockConfig+0xec>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001758:	d1ec      	bne.n	8001734 <HAL_RCC_ClockConfig+0xb8>
          return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	e063      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800175e:	2600      	movs	r6, #0
 8001760:	e002      	b.n	8001768 <HAL_RCC_ClockConfig+0xec>
 8001762:	2600      	movs	r6, #0
 8001764:	e000      	b.n	8001768 <HAL_RCC_ClockConfig+0xec>
 8001766:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001768:	4a38      	ldr	r2, [pc, #224]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 800176a:	6893      	ldr	r3, [r2, #8]
 800176c:	f023 0303 	bic.w	r3, r3, #3
 8001770:	6869      	ldr	r1, [r5, #4]
 8001772:	430b      	orrs	r3, r1
 8001774:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001776:	f7ff fa5d 	bl	8000c34 <HAL_GetTick>
 800177a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	686a      	ldr	r2, [r5, #4]
 8001786:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x122>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7ff fa52 	bl	8000c34 <HAL_GetTick>
 8001790:	1bc0      	subs	r0, r0, r7
 8001792:	f241 3388 	movw	r3, #5000	; 0x1388
 8001796:	4298      	cmp	r0, r3
 8001798:	d9f0      	bls.n	800177c <HAL_RCC_ClockConfig+0x100>
        return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e043      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	f013 0f02 	tst.w	r3, #2
 80017a4:	d040      	beq.n	8001828 <HAL_RCC_ClockConfig+0x1ac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a6:	4a29      	ldr	r2, [pc, #164]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80017a8:	6893      	ldr	r3, [r2, #8]
 80017aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ae:	68a9      	ldr	r1, [r5, #8]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	42a3      	cmp	r3, r4
 80017be:	d90a      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	4323      	orrs	r3, r4
 80017ca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017cc:	6813      	ldr	r3, [r2, #0]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	d136      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1c8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d6:	682b      	ldr	r3, [r5, #0]
 80017d8:	f013 0f04 	tst.w	r3, #4
 80017dc:	d006      	beq.n	80017ec <HAL_RCC_ClockConfig+0x170>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80017e0:	6893      	ldr	r3, [r2, #8]
 80017e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017e6:	68e9      	ldr	r1, [r5, #12]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	f013 0f08 	tst.w	r3, #8
 80017f2:	d007      	beq.n	8001804 <HAL_RCC_ClockConfig+0x188>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f4:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 80017f6:	6893      	ldr	r3, [r2, #8]
 80017f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80017fc:	6929      	ldr	r1, [r5, #16]
 80017fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001802:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001804:	f7ff fb98 	bl	8000f38 <HAL_RCC_GetSysClockFreq>
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001810:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_RCC_ClockConfig+0x1d8>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	40d8      	lsrs	r0, r3
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_RCC_ClockConfig+0x1dc>)
 800181c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_RCC_ClockConfig+0x1e0>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f7ff f9c3 	bl	8000bac <HAL_InitTick>
}
 8001826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8001828:	2e80      	cmp	r6, #128	; 0x80
 800182a:	d1c3      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 800182e:	6893      	ldr	r3, [r2, #8]
 8001830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001834:	6093      	str	r3, [r2, #8]
 8001836:	e7bd      	b.n	80017b4 <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
}
 800183a:	4770      	bx	lr
      return HAL_ERROR;
 800183c:	2001      	movs	r0, #1
 800183e:	e7f2      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
          return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7f0      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
      return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	e7ee      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
 8001848:	40022000 	.word	0x40022000
 800184c:	40021000 	.word	0x40021000
 8001850:	04c4b400 	.word	0x04c4b400
 8001854:	080036cc 	.word	0x080036cc
 8001858:	20000008 	.word	0x20000008
 800185c:	20000004 	.word	0x20000004

08001860 <Kalmanfilter>:
#include <math.h>

/*
 * Kalman filter function that uses the assembly subroutine
 */
int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8001860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001864:	4682      	mov	sl, r0
 8001866:	4689      	mov	r9, r1
 8001868:	4690      	mov	r8, r2
 800186a:	461f      	mov	r7, r3
	for (int i=0; i<Length; i++) {
 800186c:	2400      	movs	r4, #0
 800186e:	42bc      	cmp	r4, r7
 8001870:	da0c      	bge.n	800188c <Kalmanfilter+0x2c>
		OutputArray[i] = kalman(kstate, InputArray[i]);
 8001872:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 8001876:	eb09 0584 	add.w	r5, r9, r4, lsl #2
 800187a:	ed96 0a00 	vldr	s0, [r6]
 800187e:	4640      	mov	r0, r8
 8001880:	f7fe fcbc 	bl	80001fc <kalman>
 8001884:	ed85 0a00 	vstr	s0, [r5]
	for (int i=0; i<Length; i++) {
 8001888:	3401      	adds	r4, #1
 800188a:	e7f0      	b.n	800186e <Kalmanfilter+0xe>
	}
	return 0;
}
 800188c:	2000      	movs	r0, #0
 800188e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001892 <kalman_c>:

/*
 * Kalman filter rewritten in C
 */
float kalman_c(kalman_state* state, float measurement) {
	state->p += state->q;
 8001892:	edd0 7a00 	vldr	s15, [r0]
 8001896:	ed90 7a03 	vldr	s14, [r0, #12]
 800189a:	ee77 7a87 	vadd.f32	s15, s15, s14
	state->k = state->p / (state->p + state->r);
 800189e:	ed90 7a01 	vldr	s14, [r0, #4]
 80018a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018aa:	edc0 6a04 	vstr	s13, [r0, #16]
	state->x = state->x + state->k * (measurement - state->x);
 80018ae:	ed90 7a02 	vldr	s14, [r0, #8]
 80018b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80018b6:	ee26 0a80 	vmul.f32	s0, s13, s0
 80018ba:	ee37 0a00 	vadd.f32	s0, s14, s0
 80018be:	ed80 0a02 	vstr	s0, [r0, #8]
	state->p = (1 - state->k) * state->p;
 80018c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018c6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80018ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ce:	edc0 7a03 	vstr	s15, [r0, #12]

	return state->x;
}
 80018d2:	4770      	bx	lr

080018d4 <Kalmanfilter_c>:
int Kalmanfilter_c(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 80018d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d8:	4682      	mov	sl, r0
 80018da:	4689      	mov	r9, r1
 80018dc:	4690      	mov	r8, r2
 80018de:	461f      	mov	r7, r3
	for (int i=0; i<Length; i++) {
 80018e0:	2400      	movs	r4, #0
 80018e2:	42bc      	cmp	r4, r7
 80018e4:	da0c      	bge.n	8001900 <Kalmanfilter_c+0x2c>
		OutputArray[i] = kalman_c(kstate, InputArray[i]);
 80018e6:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 80018ea:	eb09 0584 	add.w	r5, r9, r4, lsl #2
 80018ee:	ed96 0a00 	vldr	s0, [r6]
 80018f2:	4640      	mov	r0, r8
 80018f4:	f7ff ffcd 	bl	8001892 <kalman_c>
 80018f8:	ed85 0a00 	vstr	s0, [r5]
	for (int i=0; i<Length; i++) {
 80018fc:	3401      	adds	r4, #1
 80018fe:	e7f0      	b.n	80018e2 <Kalmanfilter_c+0xe>
}
 8001900:	2000      	movs	r0, #0
 8001902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001906 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x2>

0800190a <SystemClock_Config>:
{
 800190a:	b500      	push	{lr}
 800190c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	2244      	movs	r2, #68	; 0x44
 8001910:	2100      	movs	r1, #0
 8001912:	a805      	add	r0, sp, #20
 8001914:	f001 f8a2 	bl	8002a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	2000      	movs	r0, #0
 800191a:	9000      	str	r0, [sp, #0]
 800191c:	9001      	str	r0, [sp, #4]
 800191e:	9002      	str	r0, [sp, #8]
 8001920:	9003      	str	r0, [sp, #12]
 8001922:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001924:	f7ff f9fa 	bl	8000d1c <HAL_PWREx_ControlVoltageScaling>
 8001928:	bb20      	cbnz	r0, 8001974 <SystemClock_Config+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800192a:	2310      	movs	r3, #16
 800192c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800192e:	2201      	movs	r2, #1
 8001930:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001936:	2360      	movs	r3, #96	; 0x60
 8001938:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
 800193c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800193e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001940:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001942:	223c      	movs	r2, #60	; 0x3c
 8001944:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001946:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001948:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800194a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	a805      	add	r0, sp, #20
 800194e:	f7ff fb4d 	bl	8000fec <HAL_RCC_OscConfig>
 8001952:	b988      	cbnz	r0, 8001978 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2303      	movs	r3, #3
 800195a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001960:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001962:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001964:	2105      	movs	r1, #5
 8001966:	4668      	mov	r0, sp
 8001968:	f7ff fe88 	bl	800167c <HAL_RCC_ClockConfig>
 800196c:	b930      	cbnz	r0, 800197c <SystemClock_Config+0x72>
}
 800196e:	b017      	add	sp, #92	; 0x5c
 8001970:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001974:	f7ff ffc7 	bl	8001906 <Error_Handler>
    Error_Handler();
 8001978:	f7ff ffc5 	bl	8001906 <Error_Handler>
    Error_Handler();
 800197c:	f7ff ffc3 	bl	8001906 <Error_Handler>

08001980 <main>:
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001984:	b0fd      	sub	sp, #500	; 0x1f4
 8001986:	af02      	add	r7, sp, #8
  HAL_Init();
 8001988:	f7ff f938 	bl	8000bfc <HAL_Init>
  SystemClock_Config();
 800198c:	f7ff ffbd 	bl	800190a <SystemClock_Config>
  struct kalman_state testState = {0.1, 0.1, 5.0, 0.1, 0};
 8001990:	f507 74ea 	add.w	r4, r7, #468	; 0x1d4
 8001994:	4d50      	ldr	r5, [pc, #320]	; (8001ad8 <main+0x158>)
 8001996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199a:	682b      	ldr	r3, [r5, #0]
 800199c:	6023      	str	r3, [r4, #0]
  for (int i=0; i<5; i++) {
 800199e:	2400      	movs	r4, #0
 80019a0:	e008      	b.n	80019b4 <main+0x34>
	  output[i] = kalman(&testState, (float)i);	// execute kalman filter with testState and i as measurement input
 80019a2:	ee07 4a90 	vmov	s15, r4
 80019a6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80019aa:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 80019ae:	f7fe fc25 	bl	80001fc <kalman>
  for (int i=0; i<5; i++) {
 80019b2:	3401      	adds	r4, #1
 80019b4:	2c04      	cmp	r4, #4
 80019b6:	ddf4      	ble.n	80019a2 <main+0x22>
  const float test_array[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991};	// provided values
 80019b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019bc:	4947      	ldr	r1, [pc, #284]	; (8001adc <main+0x15c>)
 80019be:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80019c2:	f001 f83d 	bl	8002a40 <memcpy>
  float asm_output[array_len];
 80019c6:	b0e4      	sub	sp, #400	; 0x190
 80019c8:	ad02      	add	r5, sp, #8
  float c_output[array_len];
 80019ca:	b0e4      	sub	sp, #400	; 0x190
 80019cc:	ab02      	add	r3, sp, #8
 80019ce:	60fb      	str	r3, [r7, #12]
  float c_sub_results[array_len];
 80019d0:	b0e4      	sub	sp, #400	; 0x190
 80019d2:	f10d 0908 	add.w	r9, sp, #8
  float c_corr_results[2*array_len-1];
 80019d6:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80019da:	f10d 0b08 	add.w	fp, sp, #8
  float c_conv_results[2*array_len-1];
 80019de:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80019e2:	f10d 0a08 	add.w	sl, sp, #8
  float32_t cmsis_sub_results[array_len];
 80019e6:	b0e4      	sub	sp, #400	; 0x190
 80019e8:	f10d 0808 	add.w	r8, sp, #8
  float32_t cmsis_corr_results[2*array_len-1];
 80019ec:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80019f0:	ab02      	add	r3, sp, #8
 80019f2:	60bb      	str	r3, [r7, #8]
  float32_t cmsis_conv_results[2*array_len-1];
 80019f4:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80019f8:	ab02      	add	r3, sp, #8
 80019fa:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < 100; i++) {
 80019fc:	2600      	movs	r6, #0
 80019fe:	e066      	b.n	8001ace <main+0x14e>
	struct kalman_state state_asm = {0.1, 0.1, 5.0, 0.1, 0};
 8001a00:	4c35      	ldr	r4, [pc, #212]	; (8001ad8 <main+0x158>)
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	469c      	mov	ip, r3
 8001a08:	46a6      	mov	lr, r4
 8001a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001a0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a12:	f8de e000 	ldr.w	lr, [lr]
 8001a16:	f8cc e000 	str.w	lr, [ip]
	struct kalman_state state_c = {0.1, 0.1, 5.0, 0.1, 0};
 8001a1a:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a24:	f8cc e000 	str.w	lr, [ip]
	Kalmanfilter(test_array, asm_output, &state_asm, array_len);
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	f107 0214 	add.w	r2, r7, #20
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a34:	f7ff ff14 	bl	8001860 <Kalmanfilter>
	Kalmanfilter_c(test_array, c_output, &state_c, array_len);
 8001a38:	2364      	movs	r3, #100	; 0x64
 8001a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a44:	f7ff ff46 	bl	80018d4 <Kalmanfilter_c>
	vec_sub(test_array, asm_output, c_sub_results, array_len);
 8001a48:	2364      	movs	r3, #100	; 0x64
 8001a4a:	464a      	mov	r2, r9
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a52:	f000 f873 	bl	8001b3c <vec_sub>
	c_mean = vec_mean(c_sub_results, array_len);
 8001a56:	2164      	movs	r1, #100	; 0x64
 8001a58:	4648      	mov	r0, r9
 8001a5a:	f000 f885 	bl	8001b68 <vec_mean>
	c_sd = vec_sd(c_sub_results, array_len);
 8001a5e:	2164      	movs	r1, #100	; 0x64
 8001a60:	4648      	mov	r0, r9
 8001a62:	f000 f897 	bl	8001b94 <vec_sd>
	vec_correlation(test_array, asm_output, c_corr_results, array_len);
 8001a66:	2364      	movs	r3, #100	; 0x64
 8001a68:	465a      	mov	r2, fp
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a70:	f000 f8c6 	bl	8001c00 <vec_correlation>
	vec_convolution(test_array, asm_output, c_conv_results, array_len);
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	4652      	mov	r2, sl
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a7e:	f000 f8ed 	bl	8001c5c <vec_convolution>
	arm_sub_f32(test_array, asm_output, cmsis_sub_results, (uint32_t)array_len);
 8001a82:	2364      	movs	r3, #100	; 0x64
 8001a84:	4642      	mov	r2, r8
 8001a86:	4629      	mov	r1, r5
 8001a88:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a8c:	f000 ff54 	bl	8002938 <arm_sub_f32>
	arm_mean_f32(cmsis_sub_results, (uint32_t)array_len, &cmsis_mean);
 8001a90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a94:	2164      	movs	r1, #100	; 0x64
 8001a96:	4640      	mov	r0, r8
 8001a98:	f000 f9c0 	bl	8001e1c <arm_mean_f32>
	arm_std_f32(cmsis_sub_results, (uint32_t)array_len, &cmsis_sd);
 8001a9c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001aa0:	2164      	movs	r1, #100	; 0x64
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	f000 f930 	bl	8001d08 <arm_std_f32>
	arm_correlate_f32(test_array, (uint32_t)array_len, asm_output, (uint32_t)array_len, cmsis_corr_results);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	462a      	mov	r2, r5
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001ab6:	f000 f9ef 	bl	8001e98 <arm_correlate_f32>
	arm_conv_f32(test_array, (uint32_t)array_len, asm_output, (uint32_t)array_len, cmsis_conv_results);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2364      	movs	r3, #100	; 0x64
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001ac8:	f000 fc9c 	bl	8002404 <arm_conv_f32>
  for (int i = 0; i < 100; i++) {
 8001acc:	3601      	adds	r6, #1
 8001ace:	2e63      	cmp	r6, #99	; 0x63
 8001ad0:	dd96      	ble.n	8001a00 <main+0x80>
	  __asm__ ("nop");	// used as the breakpoint for debugging
 8001ad2:	bf00      	nop
  while (1)
 8001ad4:	e7fd      	b.n	8001ad2 <main+0x152>
 8001ad6:	bf00      	nop
 8001ad8:	08003528 	.word	0x08003528
 8001adc:	0800353c 	.word	0x0800353c

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_MspInit+0x2c>)
 8001ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	661a      	str	r2, [r3, #96]	; 0x60
 8001aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aee:	f002 0201 	and.w	r2, r2, #1
 8001af2:	9200      	str	r2, [sp, #0]
 8001af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001afc:	659a      	str	r2, [r3, #88]	; 0x58
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b08:	b002      	add	sp, #8
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000

08001b10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler>

08001b12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler>

08001b14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler>

08001b16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler>

08001b18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler>

08001b1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b22:	f7ff f87b 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b26:	bd08      	pop	{r3, pc}

08001b28 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <SystemInit+0x10>)
 8001b2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <vec_sub>:
#include "vector_operations.h"

/*
 * calculate the difference between two vectors without using cmsis
 */
void vec_sub(float* op1, float* op2, float* result, int length) {
 8001b3c:	b430      	push	{r4, r5}
	for (int i=0; i<length; i++) {
 8001b3e:	2400      	movs	r4, #0
 8001b40:	429c      	cmp	r4, r3
 8001b42:	da0f      	bge.n	8001b64 <vec_sub+0x28>
		result[i] = op1[i] - op2[i];
 8001b44:	eb00 0584 	add.w	r5, r0, r4, lsl #2
 8001b48:	edd5 7a00 	vldr	s15, [r5]
 8001b4c:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 8001b50:	ed95 7a00 	vldr	s14, [r5]
 8001b54:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 8001b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5c:	edc5 7a00 	vstr	s15, [r5]
	for (int i=0; i<length; i++) {
 8001b60:	3401      	adds	r4, #1
 8001b62:	e7ed      	b.n	8001b40 <vec_sub+0x4>
	}
}
 8001b64:	bc30      	pop	{r4, r5}
 8001b66:	4770      	bx	lr

08001b68 <vec_mean>:
 * calculate the mean of a vector input without using cmsis
 */
float vec_mean(float* input, int length) {
	float sum = 0;

	for (int i=0; i<length; i++) {
 8001b68:	2300      	movs	r3, #0
	float sum = 0;
 8001b6a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001b90 <vec_mean+0x28>
	for (int i=0; i<length; i++) {
 8001b6e:	428b      	cmp	r3, r1
 8001b70:	da07      	bge.n	8001b82 <vec_mean+0x1a>
		sum += input[i];
 8001b72:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001b76:	ed92 7a00 	vldr	s14, [r2]
 8001b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i=0; i<length; i++) {
 8001b7e:	3301      	adds	r3, #1
 8001b80:	e7f5      	b.n	8001b6e <vec_mean+0x6>
	}

	return sum/length;
 8001b82:	ee07 1a10 	vmov	s14, r1
 8001b86:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 8001b8a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001b8e:	4770      	bx	lr
 8001b90:	00000000 	.word	0x00000000

08001b94 <vec_sd>:

/*
 * calculate the standard deviation of a vector without using cmsis
 */
float vec_sd(float* input, int length) {
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	ed2d 8b02 	vpush	{d8}
 8001b9a:	4606      	mov	r6, r0
 8001b9c:	460d      	mov	r5, r1
	float mean = vec_mean(input, length);
 8001b9e:	f7ff ffe3 	bl	8001b68 <vec_mean>
 8001ba2:	eef0 8a40 	vmov.f32	s17, s0
	float var = 0;

	for (int i=0; i<length; i++) {
 8001ba6:	2400      	movs	r4, #0
	float var = 0;
 8001ba8:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8001bfc <vec_sd+0x68>
	for (int i=0; i<length; i++) {
 8001bac:	42ac      	cmp	r4, r5
 8001bae:	da0d      	bge.n	8001bcc <vec_sd+0x38>
		var += powf(input[i]-mean, 2);
 8001bb0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8001bb4:	ed93 0a00 	vldr	s0, [r3]
 8001bb8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bbc:	ee30 0a68 	vsub.f32	s0, s0, s17
 8001bc0:	f000 ff88 	bl	8002ad4 <powf>
 8001bc4:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i=0; i<length; i++) {
 8001bc8:	3401      	adds	r4, #1
 8001bca:	e7ef      	b.n	8001bac <vec_sd+0x18>
	}

	return sqrt(var/length);
 8001bcc:	ee07 5a90 	vmov	s15, r5
 8001bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd4:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8001bd8:	ee17 0a90 	vmov	r0, s15
 8001bdc:	f7fe fc8e 	bl	80004fc <__aeabi_f2d>
 8001be0:	ec41 0b10 	vmov	d0, r0, r1
 8001be4:	f000 ff42 	bl	8002a6c <sqrt>
 8001be8:	ec51 0b10 	vmov	r0, r1, d0
 8001bec:	f7fe ff8e 	bl	8000b0c <__aeabi_d2f>
}
 8001bf0:	ee00 0a10 	vmov	s0, r0
 8001bf4:	ecbd 8b02 	vpop	{d8}
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
 8001bfa:	bf00      	nop
 8001bfc:	00000000 	.word	0x00000000

08001c00 <vec_correlation>:

/*
 * calculate the correlation between two vectors without using cmsis
 */
void vec_correlation(float* in1, float* in2, float* result, int length) {
 8001c00:	b4f0      	push	{r4, r5, r6, r7}
	for (int n = 0; n < 2*length - 1; n++) {
 8001c02:	2700      	movs	r7, #0
 8001c04:	e01b      	b.n	8001c3e <vec_correlation+0x3e>
		result[n] = 0;
		for (int k = 0; k < length; k++) {
			result[n] += (k < length ? in1[k] : 0) * ((length-1-n+k) < length ? in2[(length-1-n+k)] : 0);
 8001c06:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c58 <vec_correlation+0x58>
 8001c0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c12:	edc6 7a00 	vstr	s15, [r6]
		for (int k = 0; k < length; k++) {
 8001c16:	3501      	adds	r5, #1
 8001c18:	429d      	cmp	r5, r3
 8001c1a:	da0f      	bge.n	8001c3c <vec_correlation+0x3c>
			result[n] += (k < length ? in1[k] : 0) * ((length-1-n+k) < length ? in2[(length-1-n+k)] : 0);
 8001c1c:	edd6 7a00 	vldr	s15, [r6]
 8001c20:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 8001c24:	edd4 6a00 	vldr	s13, [r4]
 8001c28:	1e5c      	subs	r4, r3, #1
 8001c2a:	1be4      	subs	r4, r4, r7
 8001c2c:	442c      	add	r4, r5
 8001c2e:	429c      	cmp	r4, r3
 8001c30:	dae9      	bge.n	8001c06 <vec_correlation+0x6>
 8001c32:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8001c36:	ed94 7a00 	vldr	s14, [r4]
 8001c3a:	e7e6      	b.n	8001c0a <vec_correlation+0xa>
	for (int n = 0; n < 2*length - 1; n++) {
 8001c3c:	3701      	adds	r7, #1
 8001c3e:	005c      	lsls	r4, r3, #1
 8001c40:	3c01      	subs	r4, #1
 8001c42:	42bc      	cmp	r4, r7
 8001c44:	dd05      	ble.n	8001c52 <vec_correlation+0x52>
		result[n] = 0;
 8001c46:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001c4a:	2400      	movs	r4, #0
 8001c4c:	6034      	str	r4, [r6, #0]
		for (int k = 0; k < length; k++) {
 8001c4e:	2500      	movs	r5, #0
 8001c50:	e7e2      	b.n	8001c18 <vec_correlation+0x18>
		}
	}
}
 8001c52:	bcf0      	pop	{r4, r5, r6, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000

08001c5c <vec_convolution>:

/*
 * calculate the convolution between two vectore without using cmsis
 */
void vec_convolution(float* in1, float* in2, float* result, int length) {
 8001c5c:	b4f0      	push	{r4, r5, r6, r7}
	for (int n = 0; n < 2*length - 1; n++) {
 8001c5e:	2700      	movs	r7, #0
 8001c60:	e019      	b.n	8001c96 <vec_convolution+0x3a>
		result[n] = 0;
		for (int k = 0; k < length; k++) {
			result[n] += (k < length ? in1[k] : 0) * (n - k < length ? in2[n - k] : 0);
 8001c62:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001cb0 <vec_convolution+0x54>
 8001c66:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c6e:	edc6 7a00 	vstr	s15, [r6]
		for (int k = 0; k < length; k++) {
 8001c72:	3401      	adds	r4, #1
 8001c74:	429c      	cmp	r4, r3
 8001c76:	da0d      	bge.n	8001c94 <vec_convolution+0x38>
			result[n] += (k < length ? in1[k] : 0) * (n - k < length ? in2[n - k] : 0);
 8001c78:	edd6 7a00 	vldr	s15, [r6]
 8001c7c:	eb00 0584 	add.w	r5, r0, r4, lsl #2
 8001c80:	edd5 6a00 	vldr	s13, [r5]
 8001c84:	1b3d      	subs	r5, r7, r4
 8001c86:	429d      	cmp	r5, r3
 8001c88:	daeb      	bge.n	8001c62 <vec_convolution+0x6>
 8001c8a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8001c8e:	ed95 7a00 	vldr	s14, [r5]
 8001c92:	e7e8      	b.n	8001c66 <vec_convolution+0xa>
	for (int n = 0; n < 2*length - 1; n++) {
 8001c94:	3701      	adds	r7, #1
 8001c96:	005c      	lsls	r4, r3, #1
 8001c98:	3c01      	subs	r4, #1
 8001c9a:	42bc      	cmp	r4, r7
 8001c9c:	dd05      	ble.n	8001caa <vec_convolution+0x4e>
		result[n] = 0;
 8001c9e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	6034      	str	r4, [r6, #0]
		for (int k = 0; k < length; k++) {
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	e7e4      	b.n	8001c74 <vec_convolution+0x18>
		}
	}
}
 8001caa:	bcf0      	pop	{r4, r5, r6, r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	00000000 	.word	0x00000000

08001cb4 <Reset_Handler>:
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopForever+0x2>
 8001cb8:	f7ff ff36 	bl	8001b28 <SystemInit>
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <LoopForever+0x6>)
 8001cbe:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <LoopForever+0xa>)
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <LoopForever+0xe>)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:
 8001cc6:	58d4      	ldr	r4, [r2, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:
 8001ccc:	18c4      	adds	r4, r0, r3
 8001cce:	428c      	cmp	r4, r1
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <LoopForever+0x12>)
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	; (8001d00 <LoopForever+0x16>)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:
 8001cde:	42a2      	cmp	r2, r4
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>
 8001ce2:	f000 fe89 	bl	80029f8 <__libc_init_array>
 8001ce6:	f7ff fe4b 	bl	8001980 <main>

08001cea <LoopForever>:
 8001cea:	e7fe      	b.n	8001cea <LoopForever>
 8001cec:	200a0000 	.word	0x200a0000
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000074 	.word	0x20000074
 8001cf8:	08003738 	.word	0x08003738
 8001cfc:	20000074 	.word	0x20000074
 8001d00:	20000094 	.word	0x20000094

08001d04 <ADC1_IRQHandler>:
 8001d04:	e7fe      	b.n	8001d04 <ADC1_IRQHandler>
	...

08001d08 <arm_std_f32>:
 8001d08:	2901      	cmp	r1, #1
 8001d0a:	d97d      	bls.n	8001e08 <arm_std_f32+0x100>
 8001d0c:	b530      	push	{r4, r5, lr}
 8001d0e:	ed2d 8b02 	vpush	{d8}
 8001d12:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001e18 <arm_std_f32+0x110>
 8001d16:	088d      	lsrs	r5, r1, #2
 8001d18:	b083      	sub	sp, #12
 8001d1a:	eef0 4a47 	vmov.f32	s9, s14
 8001d1e:	d028      	beq.n	8001d72 <arm_std_f32+0x6a>
 8001d20:	f100 0310 	add.w	r3, r0, #16
 8001d24:	462c      	mov	r4, r5
 8001d26:	ed53 7a04 	vldr	s15, [r3, #-16]
 8001d2a:	ed13 5a03 	vldr	s10, [r3, #-12]
 8001d2e:	ed53 5a02 	vldr	s11, [r3, #-8]
 8001d32:	ed13 6a01 	vldr	s12, [r3, #-4]
 8001d36:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001d3a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8001d3e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001d42:	ee65 6a05 	vmul.f32	s13, s10, s10
 8001d46:	ee77 7a85 	vadd.f32	s15, s15, s10
 8001d4a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8001d4e:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8001d52:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001d56:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001d5a:	ee26 7a06 	vmul.f32	s14, s12, s12
 8001d5e:	3c01      	subs	r4, #1
 8001d60:	ee77 4a86 	vadd.f32	s9, s15, s12
 8001d64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d68:	f103 0310 	add.w	r3, r3, #16
 8001d6c:	d1db      	bne.n	8001d26 <arm_std_f32+0x1e>
 8001d6e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001d72:	f011 0303 	ands.w	r3, r1, #3
 8001d76:	d01b      	beq.n	8001db0 <arm_std_f32+0xa8>
 8001d78:	edd0 7a00 	vldr	s15, [r0]
 8001d7c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001d80:	3b01      	subs	r3, #1
 8001d82:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001d86:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d8a:	d011      	beq.n	8001db0 <arm_std_f32+0xa8>
 8001d8c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001d90:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001d9a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d9e:	d007      	beq.n	8001db0 <arm_std_f32+0xa8>
 8001da0:	edd0 7a02 	vldr	s15, [r0, #8]
 8001da4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001da8:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001dac:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001db0:	ee07 1a90 	vmov	s15, r1
 8001db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001dbc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8001dc0:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8001dc4:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8001dc8:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8001dcc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001dd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001dd4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001dd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	db0c      	blt.n	8001dfc <arm_std_f32+0xf4>
 8001de2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8001dee:	d40e      	bmi.n	8001e0e <arm_std_f32+0x106>
 8001df0:	ed82 8a00 	vstr	s16, [r2]
 8001df4:	b003      	add	sp, #12
 8001df6:	ecbd 8b02 	vpop	{d8}
 8001dfa:	bd30      	pop	{r4, r5, pc}
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	b003      	add	sp, #12
 8001e02:	ecbd 8b02 	vpop	{d8}
 8001e06:	bd30      	pop	{r4, r5, pc}
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4770      	bx	lr
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	f000 fef8 	bl	8002c04 <sqrtf>
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	e7eb      	b.n	8001df0 <arm_std_f32+0xe8>
 8001e18:	00000000 	.word	0x00000000

08001e1c <arm_mean_f32>:
 8001e1c:	b430      	push	{r4, r5}
 8001e1e:	088d      	lsrs	r5, r1, #2
 8001e20:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001e94 <arm_mean_f32+0x78>
 8001e24:	d018      	beq.n	8001e58 <arm_mean_f32+0x3c>
 8001e26:	f100 0310 	add.w	r3, r0, #16
 8001e2a:	462c      	mov	r4, r5
 8001e2c:	ed53 5a04 	vldr	s11, [r3, #-16]
 8001e30:	ed13 6a03 	vldr	s12, [r3, #-12]
 8001e34:	ed53 6a02 	vldr	s13, [r3, #-8]
 8001e38:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001e3c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001e40:	3c01      	subs	r4, #1
 8001e42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001e46:	f103 0310 	add.w	r3, r3, #16
 8001e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e52:	d1eb      	bne.n	8001e2c <arm_mean_f32+0x10>
 8001e54:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001e58:	f011 0303 	ands.w	r3, r1, #3
 8001e5c:	d00f      	beq.n	8001e7e <arm_mean_f32+0x62>
 8001e5e:	ed90 7a00 	vldr	s14, [r0]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	d009      	beq.n	8001e7e <arm_mean_f32+0x62>
 8001e6a:	ed90 7a01 	vldr	s14, [r0, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e74:	bf1c      	itt	ne
 8001e76:	ed90 7a02 	vldrne	s14, [r0, #8]
 8001e7a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8001e7e:	ee07 1a10 	vmov	s14, r1
 8001e82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e86:	bc30      	pop	{r4, r5}
 8001e88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e8c:	edc2 6a00 	vstr	s13, [r2]
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	00000000 	.word	0x00000000

08001e98 <arm_correlate_f32>:
 8001e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	b08d      	sub	sp, #52	; 0x34
 8001ea0:	f0c0 824c 	bcc.w	800233c <arm_correlate_f32+0x4a4>
 8001ea4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8001ea6:	eba1 0c03 	sub.w	ip, r1, r3
 8001eaa:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8001eae:	f04f 0e04 	mov.w	lr, #4
 8001eb2:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8001eb6:	3101      	adds	r1, #1
 8001eb8:	1ac9      	subs	r1, r1, r3
 8001eba:	3c01      	subs	r4, #1
 8001ebc:	1e5e      	subs	r6, r3, #1
 8001ebe:	9102      	str	r1, [sp, #8]
 8001ec0:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8001ec4:	f000 8294 	beq.w	80023f0 <arm_correlate_f32+0x558>
 8001ec8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002018 <arm_correlate_f32+0x180>
 8001ecc:	f1a1 0804 	sub.w	r8, r1, #4
 8001ed0:	46e1      	mov	r9, ip
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	2401      	movs	r4, #1
 8001ed6:	f014 0703 	ands.w	r7, r4, #3
 8001eda:	d01b      	beq.n	8001f14 <arm_correlate_f32+0x7c>
 8001edc:	ed91 7a00 	vldr	s14, [r1]
 8001ee0:	edd5 6a00 	vldr	s13, [r5]
 8001ee4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001ee8:	3f01      	subs	r7, #1
 8001eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eee:	d011      	beq.n	8001f14 <arm_correlate_f32+0x7c>
 8001ef0:	ed91 7a01 	vldr	s14, [r1, #4]
 8001ef4:	edd5 6a01 	vldr	s13, [r5, #4]
 8001ef8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001efc:	2f01      	cmp	r7, #1
 8001efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f02:	d007      	beq.n	8001f14 <arm_correlate_f32+0x7c>
 8001f04:	ed95 7a02 	vldr	s14, [r5, #8]
 8001f08:	edd1 6a02 	vldr	s13, [r1, #8]
 8001f0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f14:	1c67      	adds	r7, r4, #1
 8001f16:	42bb      	cmp	r3, r7
 8001f18:	edc9 7a00 	vstr	s15, [r9]
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	44f1      	add	r9, lr
 8001f20:	d03a      	beq.n	8001f98 <arm_correlate_f32+0x100>
 8001f22:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8001f26:	f000 8267 	beq.w	80023f8 <arm_correlate_f32+0x560>
 8001f2a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8001f2e:	f100 0110 	add.w	r1, r0, #16
 8001f32:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002018 <arm_correlate_f32+0x180>
 8001f36:	eb01 050a 	add.w	r5, r1, sl
 8001f3a:	f108 0410 	add.w	r4, r8, #16
 8001f3e:	ed11 7a04 	vldr	s14, [r1, #-16]
 8001f42:	ed54 3a04 	vldr	s7, [r4, #-16]
 8001f46:	ed11 6a03 	vldr	s12, [r1, #-12]
 8001f4a:	ed14 4a03 	vldr	s8, [r4, #-12]
 8001f4e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8001f52:	ed54 4a02 	vldr	s9, [r4, #-8]
 8001f56:	ed51 5a01 	vldr	s11, [r1, #-4]
 8001f5a:	ed14 5a01 	vldr	s10, [r4, #-4]
 8001f5e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001f62:	ee26 6a04 	vmul.f32	s12, s12, s8
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8001f6e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f72:	ee65 6a85 	vmul.f32	s13, s11, s10
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	3110      	adds	r1, #16
 8001f7c:	428d      	cmp	r5, r1
 8001f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f82:	f104 0410 	add.w	r4, r4, #16
 8001f86:	d1da      	bne.n	8001f3e <arm_correlate_f32+0xa6>
 8001f88:	eb00 050a 	add.w	r5, r0, sl
 8001f8c:	eb08 010a 	add.w	r1, r8, sl
 8001f90:	f1a8 0804 	sub.w	r8, r8, #4
 8001f94:	463c      	mov	r4, r7
 8001f96:	e79e      	b.n	8001ed6 <arm_correlate_f32+0x3e>
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	fb0e cc04 	mla	ip, lr, r4, ip
 8001f9e:	f240 81dd 	bls.w	800235c <arm_correlate_f32+0x4c4>
 8001fa2:	9b02      	ldr	r3, [sp, #8]
 8001fa4:	0899      	lsrs	r1, r3, #2
 8001fa6:	9103      	str	r1, [sp, #12]
 8001fa8:	f000 8220 	beq.w	80023ec <arm_correlate_f32+0x554>
 8001fac:	08bb      	lsrs	r3, r7, #2
 8001fae:	f007 0403 	and.w	r4, r7, #3
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	f103 0b0c 	add.w	fp, r3, #12
 8001fba:	18d5      	adds	r5, r2, r3
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	0109      	lsls	r1, r1, #4
 8001fc0:	9306      	str	r3, [sp, #24]
 8001fc2:	f100 080c 	add.w	r8, r0, #12
 8001fc6:	9401      	str	r4, [sp, #4]
 8001fc8:	9104      	str	r1, [sp, #16]
 8001fca:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8001fce:	4441      	add	r1, r8
 8001fd0:	f102 0310 	add.w	r3, r2, #16
 8001fd4:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8001fd8:	9e06      	ldr	r6, [sp, #24]
 8001fda:	9405      	str	r4, [sp, #20]
 8001fdc:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8001fe0:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8001fe4:	46e1      	mov	r9, ip
 8001fe6:	4483      	add	fp, r0
 8001fe8:	460f      	mov	r7, r1
 8001fea:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fec:	469c      	mov	ip, r3
 8001fee:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002018 <arm_correlate_f32+0x180>
 8001ff2:	ed58 1a03 	vldr	s3, [r8, #-12]
 8001ff6:	ed18 2a02 	vldr	s4, [r8, #-8]
 8001ffa:	ed58 2a01 	vldr	s5, [r8, #-4]
 8001ffe:	ed98 0a00 	vldr	s0, [r8]
 8002002:	9900      	ldr	r1, [sp, #0]
 8002004:	eef0 5a46 	vmov.f32	s11, s12
 8002008:	eeb0 5a46 	vmov.f32	s10, s12
 800200c:	eef0 4a46 	vmov.f32	s9, s12
 8002010:	4663      	mov	r3, ip
 8002012:	4642      	mov	r2, r8
 8002014:	e005      	b.n	8002022 <arm_correlate_f32+0x18a>
 8002016:	bf00      	nop
 8002018:	00000000 	.word	0x00000000
 800201c:	ed90 0a04 	vldr	s0, [r0, #16]
 8002020:	3210      	adds	r2, #16
 8002022:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002026:	ed13 7a03 	vldr	s14, [r3, #-12]
 800202a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800202e:	ed13 1a01 	vldr	s2, [r3, #-4]
 8002032:	ee62 3a26 	vmul.f32	s7, s4, s13
 8002036:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800203a:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800203e:	edd2 1a01 	vldr	s3, [r2, #4]
 8002042:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002046:	ee22 3a07 	vmul.f32	s6, s4, s14
 800204a:	ee33 5a85 	vadd.f32	s10, s7, s10
 800204e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8002052:	ee62 3a87 	vmul.f32	s7, s5, s14
 8002056:	ee20 4a07 	vmul.f32	s8, s0, s14
 800205a:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800205e:	ee36 6a86 	vadd.f32	s12, s13, s12
 8002062:	ed92 2a02 	vldr	s4, [r2, #8]
 8002066:	ee27 7a21 	vmul.f32	s14, s14, s3
 800206a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800206e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002072:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002076:	ee33 3a24 	vadd.f32	s6, s6, s9
 800207a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800207e:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8002082:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8002086:	edd2 2a03 	vldr	s5, [r2, #12]
 800208a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800208e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002096:	ee74 4a83 	vadd.f32	s9, s9, s6
 800209a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800209e:	ee61 3a81 	vmul.f32	s7, s3, s2
 80020a2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80020a6:	ee22 7a01 	vmul.f32	s14, s4, s2
 80020aa:	ee21 6a22 	vmul.f32	s12, s2, s5
 80020ae:	3901      	subs	r1, #1
 80020b0:	f103 0310 	add.w	r3, r3, #16
 80020b4:	ee70 4a24 	vadd.f32	s9, s0, s9
 80020b8:	ee33 5a85 	vadd.f32	s10, s7, s10
 80020bc:	ee77 5a25 	vadd.f32	s11, s14, s11
 80020c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80020c4:	4610      	mov	r0, r2
 80020c6:	d1a9      	bne.n	800201c <arm_correlate_f32+0x184>
 80020c8:	9b01      	ldr	r3, [sp, #4]
 80020ca:	b3f3      	cbz	r3, 800214a <arm_correlate_f32+0x2b2>
 80020cc:	edd5 7a00 	vldr	s15, [r5]
 80020d0:	ed9b 4a00 	vldr	s8, [fp]
 80020d4:	ee61 6aa7 	vmul.f32	s13, s3, s15
 80020d8:	ee62 3a27 	vmul.f32	s7, s4, s15
 80020dc:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80020e0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80020e4:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80020e8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80020ec:	ee75 5a87 	vadd.f32	s11, s11, s14
 80020f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80020f4:	b34e      	cbz	r6, 800214a <arm_correlate_f32+0x2b2>
 80020f6:	edd5 7a01 	vldr	s15, [r5, #4]
 80020fa:	eddb 6a01 	vldr	s13, [fp, #4]
 80020fe:	ee22 7a27 	vmul.f32	s14, s4, s15
 8002102:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8002106:	ee67 3a84 	vmul.f32	s7, s15, s8
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	2e01      	cmp	r6, #1
 8002110:	ee74 4a87 	vadd.f32	s9, s9, s14
 8002114:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002118:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800211c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002120:	d013      	beq.n	800214a <arm_correlate_f32+0x2b2>
 8002122:	ed95 7a02 	vldr	s14, [r5, #8]
 8002126:	eddb 3a02 	vldr	s7, [fp, #8]
 800212a:	ee62 7a87 	vmul.f32	s15, s5, s14
 800212e:	ee27 4a04 	vmul.f32	s8, s14, s8
 8002132:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002136:	ee27 7a23 	vmul.f32	s14, s14, s7
 800213a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800213e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8002142:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002146:	ee36 6a07 	vadd.f32	s12, s12, s14
 800214a:	f108 0810 	add.w	r8, r8, #16
 800214e:	eb09 020e 	add.w	r2, r9, lr
 8002152:	eb0a 030e 	add.w	r3, sl, lr
 8002156:	4547      	cmp	r7, r8
 8002158:	edc9 4a00 	vstr	s9, [r9]
 800215c:	f10b 0b10 	add.w	fp, fp, #16
 8002160:	ed82 5a00 	vstr	s10, [r2]
 8002164:	44a1      	add	r9, r4
 8002166:	edca 5a00 	vstr	s11, [sl]
 800216a:	ed83 6a00 	vstr	s12, [r3]
 800216e:	44a2      	add	sl, r4
 8002170:	f47f af3d 	bne.w	8001fee <arm_correlate_f32+0x156>
 8002174:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8002178:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 800217c:	9b03      	ldr	r3, [sp, #12]
 800217e:	9c05      	ldr	r4, [sp, #20]
 8002180:	9904      	ldr	r1, [sp, #16]
 8002182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002184:	fb04 cc03 	mla	ip, r4, r3, ip
 8002188:	4401      	add	r1, r0
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	460d      	mov	r5, r1
 800218e:	9303      	str	r3, [sp, #12]
 8002190:	9b02      	ldr	r3, [sp, #8]
 8002192:	f013 0303 	ands.w	r3, r3, #3
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	d071      	beq.n	800227e <arm_correlate_f32+0x3e6>
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	9205      	str	r2, [sp, #20]
 800219e:	f007 0403 	and.w	r4, r7, #3
 80021a2:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 80021a6:	1c4f      	adds	r7, r1, #1
 80021a8:	1859      	adds	r1, r3, r1
 80021aa:	1d03      	adds	r3, r0, #4
 80021ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80021b0:	9400      	str	r4, [sp, #0]
 80021b2:	f102 0110 	add.w	r1, r2, #16
 80021b6:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80021ba:	3c01      	subs	r4, #1
 80021bc:	e9cd 6003 	strd	r6, r0, [sp, #12]
 80021c0:	eb02 090a 	add.w	r9, r2, sl
 80021c4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80021c8:	46e0      	mov	r8, ip
 80021ca:	4618      	mov	r0, r3
 80021cc:	460e      	mov	r6, r1
 80021ce:	4622      	mov	r2, r4
 80021d0:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8002018 <arm_correlate_f32+0x180>
 80021d4:	f105 0110 	add.w	r1, r5, #16
 80021d8:	4633      	mov	r3, r6
 80021da:	465c      	mov	r4, fp
 80021dc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80021e0:	ed53 3a04 	vldr	s7, [r3, #-16]
 80021e4:	ed11 6a03 	vldr	s12, [r1, #-12]
 80021e8:	ed13 4a03 	vldr	s8, [r3, #-12]
 80021ec:	ed51 6a02 	vldr	s13, [r1, #-8]
 80021f0:	ed53 4a02 	vldr	s9, [r3, #-8]
 80021f4:	ed51 5a01 	vldr	s11, [r1, #-4]
 80021f8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80021fc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002200:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002208:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800220c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002210:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	3c01      	subs	r4, #1
 800221a:	f101 0110 	add.w	r1, r1, #16
 800221e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002222:	f103 0310 	add.w	r3, r3, #16
 8002226:	d1d9      	bne.n	80021dc <arm_correlate_f32+0x344>
 8002228:	9b00      	ldr	r3, [sp, #0]
 800222a:	4455      	add	r5, sl
 800222c:	b1d3      	cbz	r3, 8002264 <arm_correlate_f32+0x3cc>
 800222e:	ed99 7a00 	vldr	s14, [r9]
 8002232:	edd5 6a00 	vldr	s13, [r5]
 8002236:	ee27 7a26 	vmul.f32	s14, s14, s13
 800223a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800223e:	b18a      	cbz	r2, 8002264 <arm_correlate_f32+0x3cc>
 8002240:	ed99 7a01 	vldr	s14, [r9, #4]
 8002244:	edd5 6a01 	vldr	s13, [r5, #4]
 8002248:	ee27 7a26 	vmul.f32	s14, s14, s13
 800224c:	2a01      	cmp	r2, #1
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	d007      	beq.n	8002264 <arm_correlate_f32+0x3cc>
 8002254:	ed95 7a02 	vldr	s14, [r5, #8]
 8002258:	edd9 6a02 	vldr	s13, [r9, #8]
 800225c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002264:	463d      	mov	r5, r7
 8002266:	3704      	adds	r7, #4
 8002268:	42b8      	cmp	r0, r7
 800226a:	edc8 7a00 	vstr	s15, [r8]
 800226e:	44f0      	add	r8, lr
 8002270:	d1ae      	bne.n	80021d0 <arm_correlate_f32+0x338>
 8002272:	9b01      	ldr	r3, [sp, #4]
 8002274:	9a05      	ldr	r2, [sp, #20]
 8002276:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 800227a:	fb0e cc03 	mla	ip, lr, r3, ip
 800227e:	9b02      	ldr	r3, [sp, #8]
 8002280:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002284:	08b5      	lsrs	r5, r6, #2
 8002286:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8002018 <arm_correlate_f32+0x180>
 800228a:	f000 80ac 	beq.w	80023e6 <arm_correlate_f32+0x54e>
 800228e:	f100 0110 	add.w	r1, r0, #16
 8002292:	f102 0310 	add.w	r3, r2, #16
 8002296:	462c      	mov	r4, r5
 8002298:	ed51 6a04 	vldr	s13, [r1, #-16]
 800229c:	ed53 3a04 	vldr	s7, [r3, #-16]
 80022a0:	ed11 7a03 	vldr	s14, [r1, #-12]
 80022a4:	ed13 4a03 	vldr	s8, [r3, #-12]
 80022a8:	ed51 7a02 	vldr	s15, [r1, #-8]
 80022ac:	ed53 4a02 	vldr	s9, [r3, #-8]
 80022b0:	ed11 6a01 	vldr	s12, [r1, #-4]
 80022b4:	ed13 5a01 	vldr	s10, [r3, #-4]
 80022b8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80022bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80022c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80022c4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80022c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80022cc:	ee66 6a05 	vmul.f32	s13, s12, s10
 80022d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022d4:	3c01      	subs	r4, #1
 80022d6:	f101 0110 	add.w	r1, r1, #16
 80022da:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80022de:	f103 0310 	add.w	r3, r3, #16
 80022e2:	d1d9      	bne.n	8002298 <arm_correlate_f32+0x400>
 80022e4:	012d      	lsls	r5, r5, #4
 80022e6:	1941      	adds	r1, r0, r5
 80022e8:	4415      	add	r5, r2
 80022ea:	f016 0303 	ands.w	r3, r6, #3
 80022ee:	d01b      	beq.n	8002328 <arm_correlate_f32+0x490>
 80022f0:	edd5 7a00 	vldr	s15, [r5]
 80022f4:	ed91 7a00 	vldr	s14, [r1]
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	3b01      	subs	r3, #1
 80022fe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002302:	d011      	beq.n	8002328 <arm_correlate_f32+0x490>
 8002304:	edd5 7a01 	vldr	s15, [r5, #4]
 8002308:	ed91 7a01 	vldr	s14, [r1, #4]
 800230c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002310:	2b01      	cmp	r3, #1
 8002312:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002316:	d007      	beq.n	8002328 <arm_correlate_f32+0x490>
 8002318:	edd1 7a02 	vldr	s15, [r1, #8]
 800231c:	ed95 7a02 	vldr	s14, [r5, #8]
 8002320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002324:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002328:	3e01      	subs	r6, #1
 800232a:	edcc 5a00 	vstr	s11, [ip]
 800232e:	f100 0004 	add.w	r0, r0, #4
 8002332:	44f4      	add	ip, lr
 8002334:	d1a6      	bne.n	8002284 <arm_correlate_f32+0x3ec>
 8002336:	b00d      	add	sp, #52	; 0x34
 8002338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002340:	4606      	mov	r6, r0
 8002342:	3c02      	subs	r4, #2
 8002344:	4610      	mov	r0, r2
 8002346:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002348:	440c      	add	r4, r1
 800234a:	460d      	mov	r5, r1
 800234c:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8002350:	4619      	mov	r1, r3
 8002352:	4632      	mov	r2, r6
 8002354:	f06f 0e03 	mvn.w	lr, #3
 8002358:	462b      	mov	r3, r5
 800235a:	e5aa      	b.n	8001eb2 <arm_correlate_f32+0x1a>
 800235c:	9902      	ldr	r1, [sp, #8]
 800235e:	2900      	cmp	r1, #0
 8002360:	d090      	beq.n	8002284 <arm_correlate_f32+0x3ec>
 8002362:	9902      	ldr	r1, [sp, #8]
 8002364:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8002018 <arm_correlate_f32+0x180>
 8002368:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800236c:	eb00 0708 	add.w	r7, r0, r8
 8002370:	4601      	mov	r1, r0
 8002372:	4665      	mov	r5, ip
 8002374:	e020      	b.n	80023b8 <arm_correlate_f32+0x520>
 8002376:	edd2 7a00 	vldr	s15, [r2]
 800237a:	ecb4 7a01 	vldmia	r4!, {s14}
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002386:	b18e      	cbz	r6, 80023ac <arm_correlate_f32+0x514>
 8002388:	ed92 7a01 	vldr	s14, [r2, #4]
 800238c:	edd1 6a01 	vldr	s13, [r1, #4]
 8002390:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002394:	2b02      	cmp	r3, #2
 8002396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800239a:	d007      	beq.n	80023ac <arm_correlate_f32+0x514>
 800239c:	ed91 7a02 	vldr	s14, [r1, #8]
 80023a0:	edd2 6a02 	vldr	s13, [r2, #8]
 80023a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ac:	42bc      	cmp	r4, r7
 80023ae:	edc5 7a00 	vstr	s15, [r5]
 80023b2:	4621      	mov	r1, r4
 80023b4:	4475      	add	r5, lr
 80023b6:	d00b      	beq.n	80023d0 <arm_correlate_f32+0x538>
 80023b8:	460c      	mov	r4, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1db      	bne.n	8002376 <arm_correlate_f32+0x4de>
 80023be:	1d0c      	adds	r4, r1, #4
 80023c0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002400 <arm_correlate_f32+0x568>
 80023c4:	42bc      	cmp	r4, r7
 80023c6:	edc5 7a00 	vstr	s15, [r5]
 80023ca:	4621      	mov	r1, r4
 80023cc:	4475      	add	r5, lr
 80023ce:	d1f3      	bne.n	80023b8 <arm_correlate_f32+0x520>
 80023d0:	9b02      	ldr	r3, [sp, #8]
 80023d2:	4440      	add	r0, r8
 80023d4:	fb0e cc03 	mla	ip, lr, r3, ip
 80023d8:	2e00      	cmp	r6, #0
 80023da:	d0ac      	beq.n	8002336 <arm_correlate_f32+0x49e>
 80023dc:	08b5      	lsrs	r5, r6, #2
 80023de:	eddf 5a08 	vldr	s11, [pc, #32]	; 8002400 <arm_correlate_f32+0x568>
 80023e2:	f47f af54 	bne.w	800228e <arm_correlate_f32+0x3f6>
 80023e6:	4615      	mov	r5, r2
 80023e8:	4601      	mov	r1, r0
 80023ea:	e77e      	b.n	80022ea <arm_correlate_f32+0x452>
 80023ec:	4605      	mov	r5, r0
 80023ee:	e6cf      	b.n	8002190 <arm_correlate_f32+0x2f8>
 80023f0:	9902      	ldr	r1, [sp, #8]
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d1b5      	bne.n	8002362 <arm_correlate_f32+0x4ca>
 80023f6:	e79e      	b.n	8002336 <arm_correlate_f32+0x49e>
 80023f8:	eddf 7a01 	vldr	s15, [pc, #4]	; 8002400 <arm_correlate_f32+0x568>
 80023fc:	4605      	mov	r5, r0
 80023fe:	e5c7      	b.n	8001f90 <arm_correlate_f32+0xf8>
 8002400:	00000000 	.word	0x00000000

08002404 <arm_conv_f32>:
 8002404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002408:	b08b      	sub	sp, #44	; 0x2c
 800240a:	4299      	cmp	r1, r3
 800240c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800240e:	d205      	bcs.n	800241c <arm_conv_f32+0x18>
 8002410:	4606      	mov	r6, r0
 8002412:	460c      	mov	r4, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	4632      	mov	r2, r6
 800241a:	4623      	mov	r3, r4
 800241c:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8002420:	3101      	adds	r1, #1
 8002422:	1ac9      	subs	r1, r1, r3
 8002424:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002428:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800242c:	9101      	str	r1, [sp, #4]
 800242e:	1e59      	subs	r1, r3, #1
 8002430:	eb02 070b 	add.w	r7, r2, fp
 8002434:	f000 8277 	beq.w	8002926 <arm_conv_f32+0x522>
 8002438:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80026f8 <arm_conv_f32+0x2f4>
 800243c:	f102 0904 	add.w	r9, r2, #4
 8002440:	46aa      	mov	sl, r5
 8002442:	4680      	mov	r8, r0
 8002444:	2401      	movs	r4, #1
 8002446:	f014 0603 	ands.w	r6, r4, #3
 800244a:	d01b      	beq.n	8002484 <arm_conv_f32+0x80>
 800244c:	ed92 7a00 	vldr	s14, [r2]
 8002450:	edd8 6a00 	vldr	s13, [r8]
 8002454:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002458:	3e01      	subs	r6, #1
 800245a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245e:	d011      	beq.n	8002484 <arm_conv_f32+0x80>
 8002460:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002464:	edd8 6a01 	vldr	s13, [r8, #4]
 8002468:	ee27 7a26 	vmul.f32	s14, s14, s13
 800246c:	2e01      	cmp	r6, #1
 800246e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002472:	d007      	beq.n	8002484 <arm_conv_f32+0x80>
 8002474:	ed98 7a02 	vldr	s14, [r8, #8]
 8002478:	ed52 6a02 	vldr	s13, [r2, #-8]
 800247c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	3401      	adds	r4, #1
 8002486:	42a3      	cmp	r3, r4
 8002488:	ecea 7a01 	vstmia	sl!, {s15}
 800248c:	464a      	mov	r2, r9
 800248e:	d03a      	beq.n	8002506 <arm_conv_f32+0x102>
 8002490:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8002494:	f000 824c 	beq.w	8002930 <arm_conv_f32+0x52c>
 8002498:	f100 0210 	add.w	r2, r0, #16
 800249c:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80024a0:	eddf 7a95 	vldr	s15, [pc, #596]	; 80026f8 <arm_conv_f32+0x2f4>
 80024a4:	eb02 0c08 	add.w	ip, r2, r8
 80024a8:	f1a9 0610 	sub.w	r6, r9, #16
 80024ac:	ed12 7a04 	vldr	s14, [r2, #-16]
 80024b0:	edd6 3a04 	vldr	s7, [r6, #16]
 80024b4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80024b8:	ed96 4a03 	vldr	s8, [r6, #12]
 80024bc:	ed52 6a02 	vldr	s13, [r2, #-8]
 80024c0:	edd6 4a02 	vldr	s9, [r6, #8]
 80024c4:	ed52 5a01 	vldr	s11, [r2, #-4]
 80024c8:	ed96 5a01 	vldr	s10, [r6, #4]
 80024cc:	ee27 7a23 	vmul.f32	s14, s14, s7
 80024d0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80024dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80024e0:	ee65 6a85 	vmul.f32	s13, s11, s10
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	3210      	adds	r2, #16
 80024ea:	4594      	cmp	ip, r2
 80024ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f0:	f1a6 0610 	sub.w	r6, r6, #16
 80024f4:	d1da      	bne.n	80024ac <arm_conv_f32+0xa8>
 80024f6:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80024fa:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80024fe:	4480      	add	r8, r0
 8002500:	f109 0904 	add.w	r9, r9, #4
 8002504:	e79f      	b.n	8002446 <arm_conv_f32+0x42>
 8002506:	2b03      	cmp	r3, #3
 8002508:	445d      	add	r5, fp
 800250a:	f240 80e9 	bls.w	80026e0 <arm_conv_f32+0x2dc>
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	089a      	lsrs	r2, r3, #2
 8002512:	9202      	str	r2, [sp, #8]
 8002514:	f000 8203 	beq.w	800291e <arm_conv_f32+0x51a>
 8002518:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800251c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	f004 0603 	and.w	r6, r4, #3
 8002526:	9203      	str	r2, [sp, #12]
 8002528:	f1a3 0a10 	sub.w	sl, r3, #16
 800252c:	f1a3 020c 	sub.w	r2, r3, #12
 8002530:	3b08      	subs	r3, #8
 8002532:	9204      	str	r2, [sp, #16]
 8002534:	9305      	str	r3, [sp, #20]
 8002536:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 800253a:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800253e:	9a03      	ldr	r2, [sp, #12]
 8002540:	f100 0c1c 	add.w	ip, r0, #28
 8002544:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8002548:	464c      	mov	r4, r9
 800254a:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800254e:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8002552:	f1a7 0310 	sub.w	r3, r7, #16
 8002556:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800255a:	eb05 0b02 	add.w	fp, r5, r2
 800255e:	461f      	mov	r7, r3
 8002560:	3510      	adds	r5, #16
 8002562:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80026f8 <arm_conv_f32+0x2f4>
 8002566:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 800256a:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 800256e:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8002572:	eeb0 5a46 	vmov.f32	s10, s12
 8002576:	eef0 4a46 	vmov.f32	s9, s12
 800257a:	eef0 5a46 	vmov.f32	s11, s12
 800257e:	463a      	mov	r2, r7
 8002580:	4663      	mov	r3, ip
 8002582:	4641      	mov	r1, r8
 8002584:	edd2 6a04 	vldr	s13, [r2, #16]
 8002588:	ed13 0a04 	vldr	s0, [r3, #-16]
 800258c:	ed92 7a03 	vldr	s14, [r2, #12]
 8002590:	edd2 7a02 	vldr	s15, [r2, #8]
 8002594:	edd2 0a01 	vldr	s1, [r2, #4]
 8002598:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800259c:	ee62 3a26 	vmul.f32	s7, s4, s13
 80025a0:	ee61 2a26 	vmul.f32	s5, s2, s13
 80025a4:	ed13 1a03 	vldr	s2, [r3, #-12]
 80025a8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80025ac:	ee21 4a87 	vmul.f32	s8, s3, s14
 80025b0:	ee73 4a24 	vadd.f32	s9, s6, s9
 80025b4:	ee33 5a85 	vadd.f32	s10, s7, s10
 80025b8:	ee22 3a07 	vmul.f32	s6, s4, s14
 80025bc:	ed53 1a02 	vldr	s3, [r3, #-8]
 80025c0:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80025c4:	ee36 6a86 	vadd.f32	s12, s13, s12
 80025c8:	ee60 3a07 	vmul.f32	s7, s0, s14
 80025cc:	ee27 7a01 	vmul.f32	s14, s14, s2
 80025d0:	ee33 3a24 	vadd.f32	s6, s6, s9
 80025d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80025d8:	ee74 2a22 	vadd.f32	s5, s8, s5
 80025dc:	ee60 4a27 	vmul.f32	s9, s0, s15
 80025e0:	ee22 4a27 	vmul.f32	s8, s4, s15
 80025e4:	ee73 3a85 	vadd.f32	s7, s7, s10
 80025e8:	ed13 2a01 	vldr	s4, [r3, #-4]
 80025ec:	ee21 5a27 	vmul.f32	s10, s2, s15
 80025f0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80025f4:	ee74 4a83 	vadd.f32	s9, s9, s6
 80025f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025fc:	ee34 4a22 	vadd.f32	s8, s8, s5
 8002600:	ee60 5a20 	vmul.f32	s11, s0, s1
 8002604:	ee21 3a20 	vmul.f32	s6, s2, s1
 8002608:	ee35 5a23 	vadd.f32	s10, s10, s7
 800260c:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8002610:	ee20 6a82 	vmul.f32	s12, s1, s4
 8002614:	3901      	subs	r1, #1
 8002616:	f1a2 0210 	sub.w	r2, r2, #16
 800261a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800261e:	ee73 4a24 	vadd.f32	s9, s6, s9
 8002622:	ee37 5a05 	vadd.f32	s10, s14, s10
 8002626:	ee36 6a27 	vadd.f32	s12, s12, s15
 800262a:	f103 0310 	add.w	r3, r3, #16
 800262e:	d1a9      	bne.n	8002584 <arm_conv_f32+0x180>
 8002630:	eb0a 030c 	add.w	r3, sl, ip
 8002634:	2e00      	cmp	r6, #0
 8002636:	d042      	beq.n	80026be <arm_conv_f32+0x2ba>
 8002638:	edde 7a00 	vldr	s15, [lr]
 800263c:	ed93 4a00 	vldr	s8, [r3]
 8002640:	ee61 6a27 	vmul.f32	s13, s2, s15
 8002644:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8002648:	ee22 7a27 	vmul.f32	s14, s4, s15
 800264c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002650:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002654:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8002658:	ee35 5a07 	vadd.f32	s10, s10, s14
 800265c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002660:	eb09 030c 	add.w	r3, r9, ip
 8002664:	b35c      	cbz	r4, 80026be <arm_conv_f32+0x2ba>
 8002666:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800266a:	edd3 6a00 	vldr	s13, [r3]
 800266e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8002672:	ee22 3a27 	vmul.f32	s6, s4, s15
 8002676:	ee67 3a84 	vmul.f32	s7, s15, s8
 800267a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267e:	2c01      	cmp	r4, #1
 8002680:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002684:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002688:	ee35 5a23 	vadd.f32	s10, s10, s7
 800268c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002690:	eb00 030c 	add.w	r3, r0, ip
 8002694:	d013      	beq.n	80026be <arm_conv_f32+0x2ba>
 8002696:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800269a:	edd3 3a00 	vldr	s7, [r3]
 800269e:	ee62 7a07 	vmul.f32	s15, s4, s14
 80026a2:	ee27 4a04 	vmul.f32	s8, s14, s8
 80026a6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80026aa:	ee27 7a23 	vmul.f32	s14, s14, s7
 80026ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80026b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80026b6:	ee35 5a26 	vadd.f32	s10, s10, s13
 80026ba:	ee36 6a07 	vadd.f32	s12, s12, s14
 80026be:	45ab      	cmp	fp, r5
 80026c0:	ed45 5a04 	vstr	s11, [r5, #-16]
 80026c4:	ed45 4a03 	vstr	s9, [r5, #-12]
 80026c8:	ed05 5a02 	vstr	s10, [r5, #-8]
 80026cc:	ed05 6a01 	vstr	s12, [r5, #-4]
 80026d0:	f10c 0c10 	add.w	ip, ip, #16
 80026d4:	f105 0310 	add.w	r3, r5, #16
 80026d8:	f000 809e 	beq.w	8002818 <arm_conv_f32+0x414>
 80026dc:	461d      	mov	r5, r3
 80026de:	e740      	b.n	8002562 <arm_conv_f32+0x15e>
 80026e0:	9a01      	ldr	r2, [sp, #4]
 80026e2:	46ac      	mov	ip, r5
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d037      	beq.n	8002758 <arm_conv_f32+0x354>
 80026e8:	9a01      	ldr	r2, [sp, #4]
 80026ea:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80026f8 <arm_conv_f32+0x2f4>
 80026ee:	0096      	lsls	r6, r2, #2
 80026f0:	eb05 0c06 	add.w	ip, r5, r6
 80026f4:	4604      	mov	r4, r0
 80026f6:	e021      	b.n	800273c <arm_conv_f32+0x338>
 80026f8:	00000000 	.word	0x00000000
 80026fc:	edd7 7a00 	vldr	s15, [r7]
 8002700:	ecb2 7a01 	vldmia	r2!, {s14}
 8002704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002708:	ee77 7a86 	vadd.f32	s15, s15, s12
 800270c:	b189      	cbz	r1, 8002732 <arm_conv_f32+0x32e>
 800270e:	ed17 7a01 	vldr	s14, [r7, #-4]
 8002712:	edd4 6a01 	vldr	s13, [r4, #4]
 8002716:	ee27 7a26 	vmul.f32	s14, s14, s13
 800271a:	2b02      	cmp	r3, #2
 800271c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002720:	d007      	beq.n	8002732 <arm_conv_f32+0x32e>
 8002722:	ed94 7a02 	vldr	s14, [r4, #8]
 8002726:	ed57 6a02 	vldr	s13, [r7, #-8]
 800272a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800272e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002732:	ece5 7a01 	vstmia	r5!, {s15}
 8002736:	4565      	cmp	r5, ip
 8002738:	4614      	mov	r4, r2
 800273a:	d00a      	beq.n	8002752 <arm_conv_f32+0x34e>
 800273c:	4622      	mov	r2, r4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1dc      	bne.n	80026fc <arm_conv_f32+0x2f8>
 8002742:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80026f8 <arm_conv_f32+0x2f4>
 8002746:	ece5 7a01 	vstmia	r5!, {s15}
 800274a:	1d22      	adds	r2, r4, #4
 800274c:	4565      	cmp	r5, ip
 800274e:	4614      	mov	r4, r2
 8002750:	d1f4      	bne.n	800273c <arm_conv_f32+0x338>
 8002752:	4430      	add	r0, r6
 8002754:	2900      	cmp	r1, #0
 8002756:	d059      	beq.n	800280c <arm_conv_f32+0x408>
 8002758:	088d      	lsrs	r5, r1, #2
 800275a:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80026f8 <arm_conv_f32+0x2f4>
 800275e:	d058      	beq.n	8002812 <arm_conv_f32+0x40e>
 8002760:	f100 0210 	add.w	r2, r0, #16
 8002764:	f1a7 0310 	sub.w	r3, r7, #16
 8002768:	462c      	mov	r4, r5
 800276a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800276e:	edd3 3a04 	vldr	s7, [r3, #16]
 8002772:	ed12 7a03 	vldr	s14, [r2, #-12]
 8002776:	ed93 4a03 	vldr	s8, [r3, #12]
 800277a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800277e:	edd3 4a02 	vldr	s9, [r3, #8]
 8002782:	ed12 6a01 	vldr	s12, [r2, #-4]
 8002786:	ed93 5a01 	vldr	s10, [r3, #4]
 800278a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800278e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002792:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002796:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800279a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800279e:	ee66 6a05 	vmul.f32	s13, s12, s10
 80027a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027a6:	3c01      	subs	r4, #1
 80027a8:	f102 0210 	add.w	r2, r2, #16
 80027ac:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80027b0:	f1a3 0310 	sub.w	r3, r3, #16
 80027b4:	d1d9      	bne.n	800276a <arm_conv_f32+0x366>
 80027b6:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80027ba:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80027be:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80027c2:	f011 0203 	ands.w	r2, r1, #3
 80027c6:	d01b      	beq.n	8002800 <arm_conv_f32+0x3fc>
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ed95 7a00 	vldr	s14, [r5]
 80027d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d4:	3a01      	subs	r2, #1
 80027d6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80027da:	d011      	beq.n	8002800 <arm_conv_f32+0x3fc>
 80027dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80027e0:	ed95 7a01 	vldr	s14, [r5, #4]
 80027e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e8:	2a01      	cmp	r2, #1
 80027ea:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80027ee:	d007      	beq.n	8002800 <arm_conv_f32+0x3fc>
 80027f0:	edd5 7a02 	vldr	s15, [r5, #8]
 80027f4:	ed13 7a02 	vldr	s14, [r3, #-8]
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002800:	3901      	subs	r1, #1
 8002802:	ecec 5a01 	vstmia	ip!, {s11}
 8002806:	f100 0004 	add.w	r0, r0, #4
 800280a:	d1a5      	bne.n	8002758 <arm_conv_f32+0x354>
 800280c:	b00b      	add	sp, #44	; 0x2c
 800280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002812:	463b      	mov	r3, r7
 8002814:	4605      	mov	r5, r0
 8002816:	e7d4      	b.n	80027c2 <arm_conv_f32+0x3be>
 8002818:	9b02      	ldr	r3, [sp, #8]
 800281a:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	9b03      	ldr	r3, [sp, #12]
 8002824:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8002828:	4403      	add	r3, r0
 800282a:	465d      	mov	r5, fp
 800282c:	469e      	mov	lr, r3
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	f013 0c03 	ands.w	ip, r3, #3
 8002834:	d075      	beq.n	8002922 <arm_conv_f32+0x51e>
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800283c:	f004 0403 	and.w	r4, r4, #3
 8002840:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8002844:	f103 0801 	add.w	r8, r3, #1
 8002848:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800284c:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8002850:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8002854:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002858:	f1a7 0210 	sub.w	r2, r7, #16
 800285c:	4618      	mov	r0, r3
 800285e:	465b      	mov	r3, fp
 8002860:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8002864:	468b      	mov	fp, r1
 8002866:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800286a:	4621      	mov	r1, r4
 800286c:	4617      	mov	r7, r2
 800286e:	461c      	mov	r4, r3
 8002870:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80026f8 <arm_conv_f32+0x2f4>
 8002874:	f10e 0210 	add.w	r2, lr, #16
 8002878:	463b      	mov	r3, r7
 800287a:	4656      	mov	r6, sl
 800287c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8002880:	edd3 3a04 	vldr	s7, [r3, #16]
 8002884:	ed12 6a03 	vldr	s12, [r2, #-12]
 8002888:	ed93 4a03 	vldr	s8, [r3, #12]
 800288c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002890:	edd3 4a02 	vldr	s9, [r3, #8]
 8002894:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002898:	ed93 5a01 	vldr	s10, [r3, #4]
 800289c:	ee27 7a23 	vmul.f32	s14, s14, s7
 80028a0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80028ac:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028b0:	ee65 6a85 	vmul.f32	s13, s11, s10
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	3e01      	subs	r6, #1
 80028ba:	f102 0210 	add.w	r2, r2, #16
 80028be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c2:	f1a3 0310 	sub.w	r3, r3, #16
 80028c6:	d1d9      	bne.n	800287c <arm_conv_f32+0x478>
 80028c8:	4486      	add	lr, r0
 80028ca:	b1d1      	cbz	r1, 8002902 <arm_conv_f32+0x4fe>
 80028cc:	ed99 7a00 	vldr	s14, [r9]
 80028d0:	edde 6a00 	vldr	s13, [lr]
 80028d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80028d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028dc:	b18c      	cbz	r4, 8002902 <arm_conv_f32+0x4fe>
 80028de:	ed19 7a01 	vldr	s14, [r9, #-4]
 80028e2:	edde 6a01 	vldr	s13, [lr, #4]
 80028e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80028ea:	2c01      	cmp	r4, #1
 80028ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f0:	d007      	beq.n	8002902 <arm_conv_f32+0x4fe>
 80028f2:	ed9e 7a02 	vldr	s14, [lr, #8]
 80028f6:	ed59 6a02 	vldr	s13, [r9, #-8]
 80028fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80028fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002902:	ece5 7a01 	vstmia	r5!, {s15}
 8002906:	4565      	cmp	r5, ip
 8002908:	46c6      	mov	lr, r8
 800290a:	f108 0804 	add.w	r8, r8, #4
 800290e:	d1af      	bne.n	8002870 <arm_conv_f32+0x46c>
 8002910:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8002914:	4659      	mov	r1, fp
 8002916:	9b01      	ldr	r3, [sp, #4]
 8002918:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800291c:	e71c      	b.n	8002758 <arm_conv_f32+0x354>
 800291e:	4686      	mov	lr, r0
 8002920:	e785      	b.n	800282e <arm_conv_f32+0x42a>
 8002922:	46ac      	mov	ip, r5
 8002924:	e7f7      	b.n	8002916 <arm_conv_f32+0x512>
 8002926:	9a01      	ldr	r2, [sp, #4]
 8002928:	2a00      	cmp	r2, #0
 800292a:	f47f aedd 	bne.w	80026e8 <arm_conv_f32+0x2e4>
 800292e:	e76d      	b.n	800280c <arm_conv_f32+0x408>
 8002930:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80026f8 <arm_conv_f32+0x2f4>
 8002934:	4680      	mov	r8, r0
 8002936:	e5e3      	b.n	8002500 <arm_conv_f32+0xfc>

08002938 <arm_sub_f32>:
 8002938:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800293c:	b4f0      	push	{r4, r5, r6, r7}
 800293e:	d033      	beq.n	80029a8 <arm_sub_f32+0x70>
 8002940:	f100 0610 	add.w	r6, r0, #16
 8002944:	f101 0510 	add.w	r5, r1, #16
 8002948:	f102 0410 	add.w	r4, r2, #16
 800294c:	4667      	mov	r7, ip
 800294e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002952:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800295a:	3f01      	subs	r7, #1
 800295c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002960:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002964:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800296c:	f106 0610 	add.w	r6, r6, #16
 8002970:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002974:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002978:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800297c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002980:	f105 0510 	add.w	r5, r5, #16
 8002984:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002988:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800298c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002994:	f104 0410 	add.w	r4, r4, #16
 8002998:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800299c:	d1d7      	bne.n	800294e <arm_sub_f32+0x16>
 800299e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80029a2:	4420      	add	r0, r4
 80029a4:	4421      	add	r1, r4
 80029a6:	4422      	add	r2, r4
 80029a8:	f013 0303 	ands.w	r3, r3, #3
 80029ac:	d01b      	beq.n	80029e6 <arm_sub_f32+0xae>
 80029ae:	edd0 7a00 	vldr	s15, [r0]
 80029b2:	ed91 7a00 	vldr	s14, [r1]
 80029b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ba:	3b01      	subs	r3, #1
 80029bc:	edc2 7a00 	vstr	s15, [r2]
 80029c0:	d011      	beq.n	80029e6 <arm_sub_f32+0xae>
 80029c2:	edd0 7a01 	vldr	s15, [r0, #4]
 80029c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80029ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80029d4:	d007      	beq.n	80029e6 <arm_sub_f32+0xae>
 80029d6:	edd0 7a02 	vldr	s15, [r0, #8]
 80029da:	ed91 7a02 	vldr	s14, [r1, #8]
 80029de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e2:	edc2 7a02 	vstr	s15, [r2, #8]
 80029e6:	bcf0      	pop	{r4, r5, r6, r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <__errno>:
 80029ec:	4b01      	ldr	r3, [pc, #4]	; (80029f4 <__errno+0x8>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4d0d      	ldr	r5, [pc, #52]	; (8002a30 <__libc_init_array+0x38>)
 80029fc:	4c0d      	ldr	r4, [pc, #52]	; (8002a34 <__libc_init_array+0x3c>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	2600      	movs	r6, #0
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	4d0b      	ldr	r5, [pc, #44]	; (8002a38 <__libc_init_array+0x40>)
 8002a0a:	4c0c      	ldr	r4, [pc, #48]	; (8002a3c <__libc_init_array+0x44>)
 8002a0c:	f000 fd80 	bl	8003510 <_init>
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	2600      	movs	r6, #0
 8002a16:	42a6      	cmp	r6, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a20:	4798      	blx	r3
 8002a22:	3601      	adds	r6, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2a:	4798      	blx	r3
 8002a2c:	3601      	adds	r6, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08003730 	.word	0x08003730
 8002a34:	08003730 	.word	0x08003730
 8002a38:	08003730 	.word	0x08003730
 8002a3c:	08003734 	.word	0x08003734

08002a40 <memcpy>:
 8002a40:	440a      	add	r2, r1
 8002a42:	4291      	cmp	r1, r2
 8002a44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002a48:	d100      	bne.n	8002a4c <memcpy+0xc>
 8002a4a:	4770      	bx	lr
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a56:	4291      	cmp	r1, r2
 8002a58:	d1f9      	bne.n	8002a4e <memcpy+0xe>
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <memset>:
 8002a5c:	4402      	add	r2, r0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d100      	bne.n	8002a66 <memset+0xa>
 8002a64:	4770      	bx	lr
 8002a66:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6a:	e7f9      	b.n	8002a60 <memset+0x4>

08002a6c <sqrt>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	ed2d 8b02 	vpush	{d8}
 8002a72:	ec55 4b10 	vmov	r4, r5, d0
 8002a76:	f000 f8eb 	bl	8002c50 <__ieee754_sqrt>
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <sqrt+0x64>)
 8002a7c:	eeb0 8a40 	vmov.f32	s16, s0
 8002a80:	eef0 8a60 	vmov.f32	s17, s1
 8002a84:	f993 3000 	ldrsb.w	r3, [r3]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	d019      	beq.n	8002ac0 <sqrt+0x54>
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	462b      	mov	r3, r5
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fe f824 	bl	8000ae0 <__aeabi_dcmpun>
 8002a98:	b990      	cbnz	r0, 8002ac0 <sqrt+0x54>
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f7fd fff5 	bl	8000a90 <__aeabi_dcmplt>
 8002aa6:	b158      	cbz	r0, 8002ac0 <sqrt+0x54>
 8002aa8:	f7ff ffa0 	bl	80029ec <__errno>
 8002aac:	2321      	movs	r3, #33	; 0x21
 8002aae:	6003      	str	r3, [r0, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fd fea2 	bl	8000800 <__aeabi_ddiv>
 8002abc:	ec41 0b18 	vmov	d8, r0, r1
 8002ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ac4:	eef0 0a68 	vmov.f32	s1, s17
 8002ac8:	ecbd 8b02 	vpop	{d8}
 8002acc:	bd38      	pop	{r3, r4, r5, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000070 	.word	0x20000070

08002ad4 <powf>:
 8002ad4:	b508      	push	{r3, lr}
 8002ad6:	ed2d 8b04 	vpush	{d8-d9}
 8002ada:	eeb0 9a40 	vmov.f32	s18, s0
 8002ade:	eef0 8a60 	vmov.f32	s17, s1
 8002ae2:	f000 f969 	bl	8002db8 <__ieee754_powf>
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <powf+0x120>)
 8002ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8002aec:	3301      	adds	r3, #1
 8002aee:	eeb0 8a40 	vmov.f32	s16, s0
 8002af2:	d012      	beq.n	8002b1a <powf+0x46>
 8002af4:	eef4 8a68 	vcmp.f32	s17, s17
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d60d      	bvs.n	8002b1a <powf+0x46>
 8002afe:	eeb4 9a49 	vcmp.f32	s18, s18
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	d70d      	bvc.n	8002b24 <powf+0x50>
 8002b08:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b14:	bf08      	it	eq
 8002b16:	eeb0 8a67 	vmoveq.f32	s16, s15
 8002b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8002b1e:	ecbd 8b04 	vpop	{d8-d9}
 8002b22:	bd08      	pop	{r3, pc}
 8002b24:	eddf 9a34 	vldr	s19, [pc, #208]	; 8002bf8 <powf+0x124>
 8002b28:	eeb4 9a69 	vcmp.f32	s18, s19
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d116      	bne.n	8002b60 <powf+0x8c>
 8002b32:	eef4 8a69 	vcmp.f32	s17, s19
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	d057      	beq.n	8002bec <powf+0x118>
 8002b3c:	eeb0 0a68 	vmov.f32	s0, s17
 8002b40:	f000 fc04 	bl	800334c <finitef>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d0e8      	beq.n	8002b1a <powf+0x46>
 8002b48:	eef4 8ae9 	vcmpe.f32	s17, s19
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	d5e3      	bpl.n	8002b1a <powf+0x46>
 8002b52:	f7ff ff4b 	bl	80029ec <__errno>
 8002b56:	2321      	movs	r3, #33	; 0x21
 8002b58:	6003      	str	r3, [r0, #0]
 8002b5a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8002bfc <powf+0x128>
 8002b5e:	e7dc      	b.n	8002b1a <powf+0x46>
 8002b60:	f000 fbf4 	bl	800334c <finitef>
 8002b64:	bb50      	cbnz	r0, 8002bbc <powf+0xe8>
 8002b66:	eeb0 0a49 	vmov.f32	s0, s18
 8002b6a:	f000 fbef 	bl	800334c <finitef>
 8002b6e:	b328      	cbz	r0, 8002bbc <powf+0xe8>
 8002b70:	eeb0 0a68 	vmov.f32	s0, s17
 8002b74:	f000 fbea 	bl	800334c <finitef>
 8002b78:	b300      	cbz	r0, 8002bbc <powf+0xe8>
 8002b7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	d706      	bvc.n	8002b92 <powf+0xbe>
 8002b84:	f7ff ff32 	bl	80029ec <__errno>
 8002b88:	2321      	movs	r3, #33	; 0x21
 8002b8a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8002b8e:	6003      	str	r3, [r0, #0]
 8002b90:	e7c3      	b.n	8002b1a <powf+0x46>
 8002b92:	f7ff ff2b 	bl	80029ec <__errno>
 8002b96:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002b9a:	2322      	movs	r3, #34	; 0x22
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	6003      	str	r3, [r0, #0]
 8002ba2:	d508      	bpl.n	8002bb6 <powf+0xe2>
 8002ba4:	eeb0 0a68 	vmov.f32	s0, s17
 8002ba8:	f000 fbe4 	bl	8003374 <rintf>
 8002bac:	eeb4 0a68 	vcmp.f32	s0, s17
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d1d1      	bne.n	8002b5a <powf+0x86>
 8002bb6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8002c00 <powf+0x12c>
 8002bba:	e7ae      	b.n	8002b1a <powf+0x46>
 8002bbc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d1a9      	bne.n	8002b1a <powf+0x46>
 8002bc6:	eeb0 0a49 	vmov.f32	s0, s18
 8002bca:	f000 fbbf 	bl	800334c <finitef>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d0a3      	beq.n	8002b1a <powf+0x46>
 8002bd2:	eeb0 0a68 	vmov.f32	s0, s17
 8002bd6:	f000 fbb9 	bl	800334c <finitef>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d09d      	beq.n	8002b1a <powf+0x46>
 8002bde:	f7ff ff05 	bl	80029ec <__errno>
 8002be2:	2322      	movs	r3, #34	; 0x22
 8002be4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8002bf8 <powf+0x124>
 8002be8:	6003      	str	r3, [r0, #0]
 8002bea:	e796      	b.n	8002b1a <powf+0x46>
 8002bec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002bf0:	e793      	b.n	8002b1a <powf+0x46>
 8002bf2:	bf00      	nop
 8002bf4:	20000070 	.word	0x20000070
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	ff800000 	.word	0xff800000
 8002c00:	7f800000 	.word	0x7f800000

08002c04 <sqrtf>:
 8002c04:	b508      	push	{r3, lr}
 8002c06:	ed2d 8b02 	vpush	{d8}
 8002c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8002c0e:	f000 fb93 	bl	8003338 <__ieee754_sqrtf>
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <sqrtf+0x44>)
 8002c14:	f993 3000 	ldrsb.w	r3, [r3]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d011      	beq.n	8002c40 <sqrtf+0x3c>
 8002c1c:	eeb4 8a48 	vcmp.f32	s16, s16
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	d60c      	bvs.n	8002c40 <sqrtf+0x3c>
 8002c26:	eddf 8a09 	vldr	s17, [pc, #36]	; 8002c4c <sqrtf+0x48>
 8002c2a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	d505      	bpl.n	8002c40 <sqrtf+0x3c>
 8002c34:	f7ff feda 	bl	80029ec <__errno>
 8002c38:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002c3c:	2321      	movs	r3, #33	; 0x21
 8002c3e:	6003      	str	r3, [r0, #0]
 8002c40:	ecbd 8b02 	vpop	{d8}
 8002c44:	bd08      	pop	{r3, pc}
 8002c46:	bf00      	nop
 8002c48:	20000070 	.word	0x20000070
 8002c4c:	00000000 	.word	0x00000000

08002c50 <__ieee754_sqrt>:
 8002c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c54:	ec55 4b10 	vmov	r4, r5, d0
 8002c58:	4e56      	ldr	r6, [pc, #344]	; (8002db4 <__ieee754_sqrt+0x164>)
 8002c5a:	43ae      	bics	r6, r5
 8002c5c:	ee10 0a10 	vmov	r0, s0
 8002c60:	ee10 3a10 	vmov	r3, s0
 8002c64:	4629      	mov	r1, r5
 8002c66:	462a      	mov	r2, r5
 8002c68:	d110      	bne.n	8002c8c <__ieee754_sqrt+0x3c>
 8002c6a:	ee10 2a10 	vmov	r2, s0
 8002c6e:	462b      	mov	r3, r5
 8002c70:	f7fd fc9c 	bl	80005ac <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fae0 	bl	8000240 <__adddf3>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	ec45 4b10 	vmov	d0, r4, r5
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c8c:	2d00      	cmp	r5, #0
 8002c8e:	dc10      	bgt.n	8002cb2 <__ieee754_sqrt+0x62>
 8002c90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002c94:	4330      	orrs	r0, r6
 8002c96:	d0f5      	beq.n	8002c84 <__ieee754_sqrt+0x34>
 8002c98:	b15d      	cbz	r5, 8002cb2 <__ieee754_sqrt+0x62>
 8002c9a:	ee10 2a10 	vmov	r2, s0
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	ee10 0a10 	vmov	r0, s0
 8002ca4:	f7fd faca 	bl	800023c <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	f7fd fda8 	bl	8000800 <__aeabi_ddiv>
 8002cb0:	e7e6      	b.n	8002c80 <__ieee754_sqrt+0x30>
 8002cb2:	1509      	asrs	r1, r1, #20
 8002cb4:	d076      	beq.n	8002da4 <__ieee754_sqrt+0x154>
 8002cb6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002cba:	07ce      	lsls	r6, r1, #31
 8002cbc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002cc0:	bf5e      	ittt	pl
 8002cc2:	0fda      	lsrpl	r2, r3, #31
 8002cc4:	005b      	lslpl	r3, r3, #1
 8002cc6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8002cca:	0fda      	lsrs	r2, r3, #31
 8002ccc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002cd0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	106d      	asrs	r5, r5, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	f04f 0e16 	mov.w	lr, #22
 8002cde:	4684      	mov	ip, r0
 8002ce0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ce4:	eb0c 0401 	add.w	r4, ip, r1
 8002ce8:	4294      	cmp	r4, r2
 8002cea:	bfde      	ittt	le
 8002cec:	1b12      	suble	r2, r2, r4
 8002cee:	eb04 0c01 	addle.w	ip, r4, r1
 8002cf2:	1840      	addle	r0, r0, r1
 8002cf4:	0052      	lsls	r2, r2, #1
 8002cf6:	f1be 0e01 	subs.w	lr, lr, #1
 8002cfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002cfe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002d02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002d06:	d1ed      	bne.n	8002ce4 <__ieee754_sqrt+0x94>
 8002d08:	4671      	mov	r1, lr
 8002d0a:	2720      	movs	r7, #32
 8002d0c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002d10:	4562      	cmp	r2, ip
 8002d12:	eb04 060e 	add.w	r6, r4, lr
 8002d16:	dc02      	bgt.n	8002d1e <__ieee754_sqrt+0xce>
 8002d18:	d113      	bne.n	8002d42 <__ieee754_sqrt+0xf2>
 8002d1a:	429e      	cmp	r6, r3
 8002d1c:	d811      	bhi.n	8002d42 <__ieee754_sqrt+0xf2>
 8002d1e:	2e00      	cmp	r6, #0
 8002d20:	eb06 0e04 	add.w	lr, r6, r4
 8002d24:	da43      	bge.n	8002dae <__ieee754_sqrt+0x15e>
 8002d26:	f1be 0f00 	cmp.w	lr, #0
 8002d2a:	db40      	blt.n	8002dae <__ieee754_sqrt+0x15e>
 8002d2c:	f10c 0801 	add.w	r8, ip, #1
 8002d30:	eba2 020c 	sub.w	r2, r2, ip
 8002d34:	429e      	cmp	r6, r3
 8002d36:	bf88      	it	hi
 8002d38:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	4421      	add	r1, r4
 8002d40:	46c4      	mov	ip, r8
 8002d42:	0052      	lsls	r2, r2, #1
 8002d44:	3f01      	subs	r7, #1
 8002d46:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002d4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002d4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002d52:	d1dd      	bne.n	8002d10 <__ieee754_sqrt+0xc0>
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d006      	beq.n	8002d66 <__ieee754_sqrt+0x116>
 8002d58:	1c4c      	adds	r4, r1, #1
 8002d5a:	bf13      	iteet	ne
 8002d5c:	3101      	addne	r1, #1
 8002d5e:	3001      	addeq	r0, #1
 8002d60:	4639      	moveq	r1, r7
 8002d62:	f021 0101 	bicne.w	r1, r1, #1
 8002d66:	1043      	asrs	r3, r0, #1
 8002d68:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002d6c:	0849      	lsrs	r1, r1, #1
 8002d6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002d72:	07c2      	lsls	r2, r0, #31
 8002d74:	bf48      	it	mi
 8002d76:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002d7a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8002d7e:	460c      	mov	r4, r1
 8002d80:	463d      	mov	r5, r7
 8002d82:	e77f      	b.n	8002c84 <__ieee754_sqrt+0x34>
 8002d84:	0ada      	lsrs	r2, r3, #11
 8002d86:	3815      	subs	r0, #21
 8002d88:	055b      	lsls	r3, r3, #21
 8002d8a:	2a00      	cmp	r2, #0
 8002d8c:	d0fa      	beq.n	8002d84 <__ieee754_sqrt+0x134>
 8002d8e:	02d7      	lsls	r7, r2, #11
 8002d90:	d50a      	bpl.n	8002da8 <__ieee754_sqrt+0x158>
 8002d92:	f1c1 0420 	rsb	r4, r1, #32
 8002d96:	fa23 f404 	lsr.w	r4, r3, r4
 8002d9a:	1e4d      	subs	r5, r1, #1
 8002d9c:	408b      	lsls	r3, r1
 8002d9e:	4322      	orrs	r2, r4
 8002da0:	1b41      	subs	r1, r0, r5
 8002da2:	e788      	b.n	8002cb6 <__ieee754_sqrt+0x66>
 8002da4:	4608      	mov	r0, r1
 8002da6:	e7f0      	b.n	8002d8a <__ieee754_sqrt+0x13a>
 8002da8:	0052      	lsls	r2, r2, #1
 8002daa:	3101      	adds	r1, #1
 8002dac:	e7ef      	b.n	8002d8e <__ieee754_sqrt+0x13e>
 8002dae:	46e0      	mov	r8, ip
 8002db0:	e7be      	b.n	8002d30 <__ieee754_sqrt+0xe0>
 8002db2:	bf00      	nop
 8002db4:	7ff00000 	.word	0x7ff00000

08002db8 <__ieee754_powf>:
 8002db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbc:	ee10 5a90 	vmov	r5, s1
 8002dc0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8002dc4:	ed2d 8b02 	vpush	{d8}
 8002dc8:	eeb0 8a40 	vmov.f32	s16, s0
 8002dcc:	eef0 8a60 	vmov.f32	s17, s1
 8002dd0:	f000 8291 	beq.w	80032f6 <__ieee754_powf+0x53e>
 8002dd4:	ee10 8a10 	vmov	r8, s0
 8002dd8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8002ddc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002de0:	dc06      	bgt.n	8002df0 <__ieee754_powf+0x38>
 8002de2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002de6:	dd0a      	ble.n	8002dfe <__ieee754_powf+0x46>
 8002de8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002dec:	f000 8283 	beq.w	80032f6 <__ieee754_powf+0x53e>
 8002df0:	ecbd 8b02 	vpop	{d8}
 8002df4:	48d8      	ldr	r0, [pc, #864]	; (8003158 <__ieee754_powf+0x3a0>)
 8002df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfa:	f000 bab5 	b.w	8003368 <nanf>
 8002dfe:	f1b8 0f00 	cmp.w	r8, #0
 8002e02:	da1f      	bge.n	8002e44 <__ieee754_powf+0x8c>
 8002e04:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8002e08:	da2e      	bge.n	8002e68 <__ieee754_powf+0xb0>
 8002e0a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002e0e:	f2c0 827b 	blt.w	8003308 <__ieee754_powf+0x550>
 8002e12:	15fb      	asrs	r3, r7, #23
 8002e14:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002e18:	fa47 f603 	asr.w	r6, r7, r3
 8002e1c:	fa06 f303 	lsl.w	r3, r6, r3
 8002e20:	42bb      	cmp	r3, r7
 8002e22:	f040 8271 	bne.w	8003308 <__ieee754_powf+0x550>
 8002e26:	f006 0601 	and.w	r6, r6, #1
 8002e2a:	f1c6 0602 	rsb	r6, r6, #2
 8002e2e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002e32:	d120      	bne.n	8002e76 <__ieee754_powf+0xbe>
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	f280 8264 	bge.w	8003302 <__ieee754_powf+0x54a>
 8002e3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e3e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002e42:	e00d      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002e44:	2600      	movs	r6, #0
 8002e46:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002e4a:	d1f0      	bne.n	8002e2e <__ieee754_powf+0x76>
 8002e4c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002e50:	f000 8251 	beq.w	80032f6 <__ieee754_powf+0x53e>
 8002e54:	dd0a      	ble.n	8002e6c <__ieee754_powf+0xb4>
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	f280 8250 	bge.w	80032fc <__ieee754_powf+0x544>
 8002e5c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800315c <__ieee754_powf+0x3a4>
 8002e60:	ecbd 8b02 	vpop	{d8}
 8002e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e68:	2602      	movs	r6, #2
 8002e6a:	e7ec      	b.n	8002e46 <__ieee754_powf+0x8e>
 8002e6c:	2d00      	cmp	r5, #0
 8002e6e:	daf5      	bge.n	8002e5c <__ieee754_powf+0xa4>
 8002e70:	eeb1 0a68 	vneg.f32	s0, s17
 8002e74:	e7f4      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002e76:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8002e7a:	d102      	bne.n	8002e82 <__ieee754_powf+0xca>
 8002e7c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002e80:	e7ee      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002e82:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8002e86:	eeb0 0a48 	vmov.f32	s0, s16
 8002e8a:	d108      	bne.n	8002e9e <__ieee754_powf+0xe6>
 8002e8c:	f1b8 0f00 	cmp.w	r8, #0
 8002e90:	db05      	blt.n	8002e9e <__ieee754_powf+0xe6>
 8002e92:	ecbd 8b02 	vpop	{d8}
 8002e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9a:	f000 ba4d 	b.w	8003338 <__ieee754_sqrtf>
 8002e9e:	f000 fa4e 	bl	800333e <fabsf>
 8002ea2:	b124      	cbz	r4, 8002eae <__ieee754_powf+0xf6>
 8002ea4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8002ea8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002eac:	d117      	bne.n	8002ede <__ieee754_powf+0x126>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	bfbc      	itt	lt
 8002eb2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8002eb6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002eba:	f1b8 0f00 	cmp.w	r8, #0
 8002ebe:	dacf      	bge.n	8002e60 <__ieee754_powf+0xa8>
 8002ec0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8002ec4:	ea54 0306 	orrs.w	r3, r4, r6
 8002ec8:	d104      	bne.n	8002ed4 <__ieee754_powf+0x11c>
 8002eca:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002ece:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002ed2:	e7c5      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002ed4:	2e01      	cmp	r6, #1
 8002ed6:	d1c3      	bne.n	8002e60 <__ieee754_powf+0xa8>
 8002ed8:	eeb1 0a40 	vneg.f32	s0, s0
 8002edc:	e7c0      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002ede:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8002ee2:	3801      	subs	r0, #1
 8002ee4:	ea56 0300 	orrs.w	r3, r6, r0
 8002ee8:	d104      	bne.n	8002ef4 <__ieee754_powf+0x13c>
 8002eea:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002eee:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002ef2:	e7b5      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002ef4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8002ef8:	dd6b      	ble.n	8002fd2 <__ieee754_powf+0x21a>
 8002efa:	4b99      	ldr	r3, [pc, #612]	; (8003160 <__ieee754_powf+0x3a8>)
 8002efc:	429c      	cmp	r4, r3
 8002efe:	dc06      	bgt.n	8002f0e <__ieee754_powf+0x156>
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	daab      	bge.n	8002e5c <__ieee754_powf+0xa4>
 8002f04:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8003164 <__ieee754_powf+0x3ac>
 8002f08:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002f0c:	e7a8      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002f0e:	4b96      	ldr	r3, [pc, #600]	; (8003168 <__ieee754_powf+0x3b0>)
 8002f10:	429c      	cmp	r4, r3
 8002f12:	dd02      	ble.n	8002f1a <__ieee754_powf+0x162>
 8002f14:	2d00      	cmp	r5, #0
 8002f16:	dcf5      	bgt.n	8002f04 <__ieee754_powf+0x14c>
 8002f18:	e7a0      	b.n	8002e5c <__ieee754_powf+0xa4>
 8002f1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002f1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f22:	eddf 6a92 	vldr	s13, [pc, #584]	; 800316c <__ieee754_powf+0x3b4>
 8002f26:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002f2a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002f2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f32:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002f36:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003170 <__ieee754_powf+0x3b8>
 8002f42:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8002f46:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003174 <__ieee754_powf+0x3bc>
 8002f4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003178 <__ieee754_powf+0x3c0>
 8002f52:	eef0 6a67 	vmov.f32	s13, s15
 8002f56:	eee0 6a07 	vfma.f32	s13, s0, s14
 8002f5a:	ee16 3a90 	vmov	r3, s13
 8002f5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002f62:	f023 030f 	bic.w	r3, r3, #15
 8002f66:	ee00 3a90 	vmov	s1, r3
 8002f6a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8002f6e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002f72:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8002f76:	f025 050f 	bic.w	r5, r5, #15
 8002f7a:	ee07 5a10 	vmov	s14, r5
 8002f7e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002f82:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8002f8e:	3e01      	subs	r6, #1
 8002f90:	ea56 0200 	orrs.w	r2, r6, r0
 8002f94:	ee07 5a10 	vmov	s14, r5
 8002f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002fa0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8002fa4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002fa8:	ee17 4a10 	vmov	r4, s14
 8002fac:	bf08      	it	eq
 8002fae:	eeb0 8a40 	vmoveq.f32	s16, s0
 8002fb2:	2c00      	cmp	r4, #0
 8002fb4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002fb8:	f340 8184 	ble.w	80032c4 <__ieee754_powf+0x50c>
 8002fbc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8002fc0:	f340 80fc 	ble.w	80031bc <__ieee754_powf+0x404>
 8002fc4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003164 <__ieee754_powf+0x3ac>
 8002fc8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8002fcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002fd0:	e746      	b.n	8002e60 <__ieee754_powf+0xa8>
 8002fd2:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8002fd6:	bf01      	itttt	eq
 8002fd8:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800317c <__ieee754_powf+0x3c4>
 8002fdc:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002fe0:	f06f 0217 	mvneq.w	r2, #23
 8002fe4:	ee17 4a90 	vmoveq	r4, s15
 8002fe8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8002fec:	bf18      	it	ne
 8002fee:	2200      	movne	r2, #0
 8002ff0:	3b7f      	subs	r3, #127	; 0x7f
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a62      	ldr	r2, [pc, #392]	; (8003180 <__ieee754_powf+0x3c8>)
 8002ff6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8002ffa:	4294      	cmp	r4, r2
 8002ffc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8003000:	dd06      	ble.n	8003010 <__ieee754_powf+0x258>
 8003002:	4a60      	ldr	r2, [pc, #384]	; (8003184 <__ieee754_powf+0x3cc>)
 8003004:	4294      	cmp	r4, r2
 8003006:	f340 80a4 	ble.w	8003152 <__ieee754_powf+0x39a>
 800300a:	3301      	adds	r3, #1
 800300c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8003010:	2400      	movs	r4, #0
 8003012:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <__ieee754_powf+0x3d0>)
 8003014:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003018:	ee07 1a90 	vmov	s15, r1
 800301c:	ed92 7a00 	vldr	s14, [r2]
 8003020:	4a5a      	ldr	r2, [pc, #360]	; (800318c <__ieee754_powf+0x3d4>)
 8003022:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003026:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800302a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800302e:	1049      	asrs	r1, r1, #1
 8003030:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8003034:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8003038:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800303c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8003040:	ee06 1a10 	vmov	s12, r1
 8003044:	ee65 4a26 	vmul.f32	s9, s10, s13
 8003048:	ee36 7a47 	vsub.f32	s14, s12, s14
 800304c:	ee14 7a90 	vmov	r7, s9
 8003050:	4017      	ands	r7, r2
 8003052:	ee05 7a90 	vmov	s11, r7
 8003056:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800305a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800305e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003190 <__ieee754_powf+0x3d8>
 8003062:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8003066:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800306a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800306e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003194 <__ieee754_powf+0x3dc>
 8003072:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003076:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003198 <__ieee754_powf+0x3e0>
 800307a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800307e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800316c <__ieee754_powf+0x3b4>
 8003082:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003086:	eddf 6a45 	vldr	s13, [pc, #276]	; 800319c <__ieee754_powf+0x3e4>
 800308a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800308e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80031a0 <__ieee754_powf+0x3e8>
 8003092:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003096:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800309a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800309e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80030a2:	eee5 6a07 	vfma.f32	s13, s10, s14
 80030a6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80030aa:	eef0 7a45 	vmov.f32	s15, s10
 80030ae:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee17 1a90 	vmov	r1, s15
 80030ba:	4011      	ands	r1, r2
 80030bc:	ee07 1a90 	vmov	s15, r1
 80030c0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80030c4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80030c8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80030cc:	ee27 7a24 	vmul.f32	s14, s14, s9
 80030d0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80030d4:	eeb0 6a47 	vmov.f32	s12, s14
 80030d8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80030dc:	ee16 1a10 	vmov	r1, s12
 80030e0:	4011      	ands	r1, r2
 80030e2:	ee06 1a90 	vmov	s13, r1
 80030e6:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80030ea:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80031a4 <__ieee754_powf+0x3ec>
 80030ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80031a8 <__ieee754_powf+0x3f0>
 80030f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80030f6:	ee06 1a10 	vmov	s12, r1
 80030fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80031ac <__ieee754_powf+0x3f4>
 8003102:	492b      	ldr	r1, [pc, #172]	; (80031b0 <__ieee754_powf+0x3f8>)
 8003104:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003108:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800310c:	edd1 7a00 	vldr	s15, [r1]
 8003110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <__ieee754_powf+0x3fc>)
 800311a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800311e:	eef0 7a47 	vmov.f32	s15, s14
 8003122:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003126:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800312a:	edd4 0a00 	vldr	s1, [r4]
 800312e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	ee17 3a90 	vmov	r3, s15
 800313a:	4013      	ands	r3, r2
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003144:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8003148:	eee6 6a65 	vfms.f32	s13, s12, s11
 800314c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8003150:	e70f      	b.n	8002f72 <__ieee754_powf+0x1ba>
 8003152:	2401      	movs	r4, #1
 8003154:	e75d      	b.n	8003012 <__ieee754_powf+0x25a>
 8003156:	bf00      	nop
 8003158:	0800370c 	.word	0x0800370c
 800315c:	00000000 	.word	0x00000000
 8003160:	3f7ffff7 	.word	0x3f7ffff7
 8003164:	7149f2ca 	.word	0x7149f2ca
 8003168:	3f800007 	.word	0x3f800007
 800316c:	3eaaaaab 	.word	0x3eaaaaab
 8003170:	3fb8aa3b 	.word	0x3fb8aa3b
 8003174:	36eca570 	.word	0x36eca570
 8003178:	3fb8aa00 	.word	0x3fb8aa00
 800317c:	4b800000 	.word	0x4b800000
 8003180:	001cc471 	.word	0x001cc471
 8003184:	005db3d6 	.word	0x005db3d6
 8003188:	08003710 	.word	0x08003710
 800318c:	fffff000 	.word	0xfffff000
 8003190:	3e6c3255 	.word	0x3e6c3255
 8003194:	3e53f142 	.word	0x3e53f142
 8003198:	3e8ba305 	.word	0x3e8ba305
 800319c:	3edb6db7 	.word	0x3edb6db7
 80031a0:	3f19999a 	.word	0x3f19999a
 80031a4:	3f76384f 	.word	0x3f76384f
 80031a8:	3f763800 	.word	0x3f763800
 80031ac:	369dc3a0 	.word	0x369dc3a0
 80031b0:	08003720 	.word	0x08003720
 80031b4:	08003718 	.word	0x08003718
 80031b8:	3338aa3c 	.word	0x3338aa3c
 80031bc:	f040 8092 	bne.w	80032e4 <__ieee754_powf+0x52c>
 80031c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80031b8 <__ieee754_powf+0x400>
 80031c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80031cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	f73f aef6 	bgt.w	8002fc4 <__ieee754_powf+0x20c>
 80031d8:	15db      	asrs	r3, r3, #23
 80031da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80031de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80031e2:	4103      	asrs	r3, r0
 80031e4:	4423      	add	r3, r4
 80031e6:	4949      	ldr	r1, [pc, #292]	; (800330c <__ieee754_powf+0x554>)
 80031e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80031ec:	3a7f      	subs	r2, #127	; 0x7f
 80031ee:	4111      	asrs	r1, r2
 80031f0:	ea23 0101 	bic.w	r1, r3, r1
 80031f4:	ee07 1a10 	vmov	s14, r1
 80031f8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80031fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003200:	f1c2 0217 	rsb	r2, r2, #23
 8003204:	4110      	asrs	r0, r2
 8003206:	2c00      	cmp	r4, #0
 8003208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800320c:	bfb8      	it	lt
 800320e:	4240      	neglt	r0, r0
 8003210:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8003214:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8003310 <__ieee754_powf+0x558>
 8003218:	ee17 3a10 	vmov	r3, s14
 800321c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	ee07 3a10 	vmov	s14, r3
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8003230:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003314 <__ieee754_powf+0x55c>
 8003234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003238:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800323c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003318 <__ieee754_powf+0x560>
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	eea7 0a26 	vfma.f32	s0, s14, s13
 8003248:	eeb0 6a40 	vmov.f32	s12, s0
 800324c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8003250:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003254:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003258:	eddf 6a30 	vldr	s13, [pc, #192]	; 800331c <__ieee754_powf+0x564>
 800325c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003320 <__ieee754_powf+0x568>
 8003260:	eea7 6a26 	vfma.f32	s12, s14, s13
 8003264:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003324 <__ieee754_powf+0x56c>
 8003268:	eee6 6a07 	vfma.f32	s13, s12, s14
 800326c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8003328 <__ieee754_powf+0x570>
 8003270:	eea6 6a87 	vfma.f32	s12, s13, s14
 8003274:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800332c <__ieee754_powf+0x574>
 8003278:	eee6 6a07 	vfma.f32	s13, s12, s14
 800327c:	eeb0 6a40 	vmov.f32	s12, s0
 8003280:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8003284:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003288:	eeb0 7a46 	vmov.f32	s14, s12
 800328c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8003290:	ee20 6a06 	vmul.f32	s12, s0, s12
 8003294:	eee0 7a27 	vfma.f32	s15, s0, s15
 8003298:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800329c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80032a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80032a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80032ac:	ee10 3a10 	vmov	r3, s0
 80032b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80032b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b8:	da1a      	bge.n	80032f0 <__ieee754_powf+0x538>
 80032ba:	f000 f8b7 	bl	800342c <scalbnf>
 80032be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80032c2:	e5cd      	b.n	8002e60 <__ieee754_powf+0xa8>
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <__ieee754_powf+0x578>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	dd02      	ble.n	80032d0 <__ieee754_powf+0x518>
 80032ca:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003334 <__ieee754_powf+0x57c>
 80032ce:	e67b      	b.n	8002fc8 <__ieee754_powf+0x210>
 80032d0:	d108      	bne.n	80032e4 <__ieee754_powf+0x52c>
 80032d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80032da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032de:	f6ff af7b 	blt.w	80031d8 <__ieee754_powf+0x420>
 80032e2:	e7f2      	b.n	80032ca <__ieee754_powf+0x512>
 80032e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80032e8:	f73f af76 	bgt.w	80031d8 <__ieee754_powf+0x420>
 80032ec:	2000      	movs	r0, #0
 80032ee:	e78f      	b.n	8003210 <__ieee754_powf+0x458>
 80032f0:	ee00 3a10 	vmov	s0, r3
 80032f4:	e7e3      	b.n	80032be <__ieee754_powf+0x506>
 80032f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80032fa:	e5b1      	b.n	8002e60 <__ieee754_powf+0xa8>
 80032fc:	eeb0 0a68 	vmov.f32	s0, s17
 8003300:	e5ae      	b.n	8002e60 <__ieee754_powf+0xa8>
 8003302:	eeb0 0a48 	vmov.f32	s0, s16
 8003306:	e5ab      	b.n	8002e60 <__ieee754_powf+0xa8>
 8003308:	2600      	movs	r6, #0
 800330a:	e590      	b.n	8002e2e <__ieee754_powf+0x76>
 800330c:	007fffff 	.word	0x007fffff
 8003310:	3f317218 	.word	0x3f317218
 8003314:	35bfbe8c 	.word	0x35bfbe8c
 8003318:	3f317200 	.word	0x3f317200
 800331c:	3331bb4c 	.word	0x3331bb4c
 8003320:	b5ddea0e 	.word	0xb5ddea0e
 8003324:	388ab355 	.word	0x388ab355
 8003328:	bb360b61 	.word	0xbb360b61
 800332c:	3e2aaaab 	.word	0x3e2aaaab
 8003330:	43160000 	.word	0x43160000
 8003334:	0da24260 	.word	0x0da24260

08003338 <__ieee754_sqrtf>:
 8003338:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800333c:	4770      	bx	lr

0800333e <fabsf>:
 800333e:	ee10 3a10 	vmov	r3, s0
 8003342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003346:	ee00 3a10 	vmov	s0, r3
 800334a:	4770      	bx	lr

0800334c <finitef>:
 800334c:	b082      	sub	sp, #8
 800334e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003352:	9801      	ldr	r0, [sp, #4]
 8003354:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003358:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800335c:	bfac      	ite	ge
 800335e:	2000      	movge	r0, #0
 8003360:	2001      	movlt	r0, #1
 8003362:	b002      	add	sp, #8
 8003364:	4770      	bx	lr
	...

08003368 <nanf>:
 8003368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003370 <nanf+0x8>
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	7fc00000 	.word	0x7fc00000

08003374 <rintf>:
 8003374:	ee10 2a10 	vmov	r2, s0
 8003378:	b513      	push	{r0, r1, r4, lr}
 800337a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800337e:	397f      	subs	r1, #127	; 0x7f
 8003380:	2916      	cmp	r1, #22
 8003382:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8003386:	dc47      	bgt.n	8003418 <rintf+0xa4>
 8003388:	b32b      	cbz	r3, 80033d6 <rintf+0x62>
 800338a:	2900      	cmp	r1, #0
 800338c:	ee10 3a10 	vmov	r3, s0
 8003390:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8003394:	da21      	bge.n	80033da <rintf+0x66>
 8003396:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800339a:	425b      	negs	r3, r3
 800339c:	4921      	ldr	r1, [pc, #132]	; (8003424 <rintf+0xb0>)
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	0d12      	lsrs	r2, r2, #20
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	0512      	lsls	r2, r2, #20
 80033a8:	4313      	orrs	r3, r2
 80033aa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	edd1 6a00 	vldr	s13, [r1]
 80033b6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80033ba:	ed8d 7a01 	vstr	s14, [sp, #4]
 80033be:	eddd 7a01 	vldr	s15, [sp, #4]
 80033c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c6:	ee17 3a90 	vmov	r3, s15
 80033ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ce:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80033d2:	ee00 3a10 	vmov	s0, r3
 80033d6:	b002      	add	sp, #8
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	4a13      	ldr	r2, [pc, #76]	; (8003428 <rintf+0xb4>)
 80033dc:	410a      	asrs	r2, r1
 80033de:	4213      	tst	r3, r2
 80033e0:	d0f9      	beq.n	80033d6 <rintf+0x62>
 80033e2:	0854      	lsrs	r4, r2, #1
 80033e4:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80033e8:	d006      	beq.n	80033f8 <rintf+0x84>
 80033ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033ee:	ea23 0304 	bic.w	r3, r3, r4
 80033f2:	fa42 f101 	asr.w	r1, r2, r1
 80033f6:	430b      	orrs	r3, r1
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <rintf+0xb0>)
 80033fa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80033fe:	ed90 7a00 	vldr	s14, [r0]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	edcd 7a01 	vstr	s15, [sp, #4]
 800340e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003412:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003416:	e7de      	b.n	80033d6 <rintf+0x62>
 8003418:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800341c:	d3db      	bcc.n	80033d6 <rintf+0x62>
 800341e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003422:	e7d8      	b.n	80033d6 <rintf+0x62>
 8003424:	08003728 	.word	0x08003728
 8003428:	007fffff 	.word	0x007fffff

0800342c <scalbnf>:
 800342c:	ee10 3a10 	vmov	r3, s0
 8003430:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003434:	d025      	beq.n	8003482 <scalbnf+0x56>
 8003436:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800343a:	d302      	bcc.n	8003442 <scalbnf+0x16>
 800343c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003440:	4770      	bx	lr
 8003442:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003446:	d122      	bne.n	800348e <scalbnf+0x62>
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <scalbnf+0xc8>)
 800344a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80034f8 <scalbnf+0xcc>
 800344e:	4298      	cmp	r0, r3
 8003450:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003454:	db16      	blt.n	8003484 <scalbnf+0x58>
 8003456:	ee10 3a10 	vmov	r3, s0
 800345a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800345e:	3a19      	subs	r2, #25
 8003460:	4402      	add	r2, r0
 8003462:	2afe      	cmp	r2, #254	; 0xfe
 8003464:	dd15      	ble.n	8003492 <scalbnf+0x66>
 8003466:	ee10 3a10 	vmov	r3, s0
 800346a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80034fc <scalbnf+0xd0>
 800346e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003500 <scalbnf+0xd4>
 8003472:	2b00      	cmp	r3, #0
 8003474:	eeb0 7a67 	vmov.f32	s14, s15
 8003478:	bfb8      	it	lt
 800347a:	eef0 7a66 	vmovlt.f32	s15, s13
 800347e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003482:	4770      	bx	lr
 8003484:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003504 <scalbnf+0xd8>
 8003488:	ee20 0a27 	vmul.f32	s0, s0, s15
 800348c:	4770      	bx	lr
 800348e:	0dd2      	lsrs	r2, r2, #23
 8003490:	e7e6      	b.n	8003460 <scalbnf+0x34>
 8003492:	2a00      	cmp	r2, #0
 8003494:	dd06      	ble.n	80034a4 <scalbnf+0x78>
 8003496:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800349a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800349e:	ee00 3a10 	vmov	s0, r3
 80034a2:	4770      	bx	lr
 80034a4:	f112 0f16 	cmn.w	r2, #22
 80034a8:	da1a      	bge.n	80034e0 <scalbnf+0xb4>
 80034aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80034ae:	4298      	cmp	r0, r3
 80034b0:	ee10 3a10 	vmov	r3, s0
 80034b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b8:	dd0a      	ble.n	80034d0 <scalbnf+0xa4>
 80034ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80034fc <scalbnf+0xd0>
 80034be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003500 <scalbnf+0xd4>
 80034c2:	eef0 7a40 	vmov.f32	s15, s0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf18      	it	ne
 80034ca:	eeb0 0a47 	vmovne.f32	s0, s14
 80034ce:	e7db      	b.n	8003488 <scalbnf+0x5c>
 80034d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003504 <scalbnf+0xd8>
 80034d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003508 <scalbnf+0xdc>
 80034d8:	eef0 7a40 	vmov.f32	s15, s0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	e7f3      	b.n	80034c8 <scalbnf+0x9c>
 80034e0:	3219      	adds	r2, #25
 80034e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80034ea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800350c <scalbnf+0xe0>
 80034ee:	ee07 3a10 	vmov	s14, r3
 80034f2:	e7c4      	b.n	800347e <scalbnf+0x52>
 80034f4:	ffff3cb0 	.word	0xffff3cb0
 80034f8:	4c000000 	.word	0x4c000000
 80034fc:	7149f2ca 	.word	0x7149f2ca
 8003500:	f149f2ca 	.word	0xf149f2ca
 8003504:	0da24260 	.word	0x0da24260
 8003508:	8da24260 	.word	0x8da24260
 800350c:	33000000 	.word	0x33000000

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
