
lab1_group18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003168  08003168  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003168  08003168  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003168  08003168  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000074  080031e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080031e4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5df  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275a  00000000  00000000  0002e683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005baf  00000000  00000000  00030ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  00036fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000292e2  00000000  00000000  00037660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009456  00000000  00000000  00060942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb33a  00000000  00000000  00069d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  001650d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001014  00000000  00000000  0016519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002f54 	.word	0x08002f54

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	08002f54 	.word	0x08002f54

080001fc <kalman>:
 * s7:	p
 * s8:	k
 */

kalman:	// (kalman_state* kstate, float measurement)
	vstmdb		sp!, {s3-s8}	// push
 80001fc:	ed6d 1a06 	vpush	{s3-s8}
	vldmia		r0, {s4-s8}	// multiple load floating point number from the struct input
 8000200:	ec90 2a05 	vldmia	r0, {s4-s8}
	vadd.f32	s7, s7, s4	// p=p+q
 8000204:	ee73 3a82 	vadd.f32	s7, s7, s4
	vadd.f32	s3, s7, s5	// r3 as a intermediate value, r3=p+r
 8000208:	ee73 1aa2 	vadd.f32	s3, s7, s5
	vdiv.f32	s8, s7, s3	// k=p/(p+r)
 800020c:	ee83 4aa1 	vdiv.f32	s8, s7, s3
	vsub.f32	s3, s0, s6	// r3 = measurement-x
 8000210:	ee70 1a43 	vsub.f32	s3, s0, s6
	vmla.f32	s6, s8, s3	// x = x + k*(measurement-x))
 8000214:	ee04 3a21 	vmla.f32	s6, s8, s3
	vmov.f32	s3, #1.0
 8000218:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	vsub.f32	s3, s3, s8	// r3=1-k
 800021c:	ee71 1ac4 	vsub.f32	s3, s3, s8
	vmul.f32	s7, s3, s7	// p=(1-k)*p
 8000220:	ee61 3aa3 	vmul.f32	s7, s3, s7

	vstmia		r0, {s4-s8}	// store all values back
 8000224:	ec80 2a05 	vstmia	r0, {s4-s8}

	vmov.f32	s0, s6		// return x
 8000228:	eeb0 0a43 	vmov.f32	s0, s6
	vldmia		sp!, {s3-s8}	// pop
 800022c:	ecfd 1a06 	vpop	{s3-s8}
	bx			lr
 8000230:	4770      	bx	lr
	...

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0x44>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b90b      	cbnz	r3, 8000bb6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000bb4:	4770      	bx	lr
{
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <HAL_InitTick+0x48>)
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bca:	f000 f87d 	bl	8000cc8 <HAL_SYSTICK_Config>
 8000bce:	b968      	cbnz	r0, 8000bec <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	2c0f      	cmp	r4, #15
 8000bd2:	d901      	bls.n	8000bd8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e00a      	b.n	8000bee <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4621      	mov	r1, r4
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 f840 	bl	8000c64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_InitTick+0x4c>)
 8000be6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2000      	movs	r0, #0
 8000bea:	e000      	b.n	8000bee <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
}
 8000bee:	bd10      	pop	{r4, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_Init>:
{
 8000bfc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f81e 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ffd1 	bl	8000bac <HAL_InitTick>
 8000c0a:	b110      	cbz	r0, 8000c12 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000c0c:	2401      	movs	r4, #1
}
 8000c0e:	4620      	mov	r0, r4
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	4604      	mov	r4, r0
    HAL_MspInit();
 8000c14:	f001 f802 	bl	8001c1c <HAL_MspInit>
 8000c18:	e7f9      	b.n	8000c0e <HAL_Init+0x12>
	...

08000c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	6811      	ldr	r1, [r2, #0]
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_IncTick+0x14>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000090 	.word	0x20000090
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000090 	.word	0x20000090

08000c40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	0203      	lsls	r3, r0, #8
 8000c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c4e:	0412      	lsls	r2, r2, #16
 8000c50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_NVIC_SetPriority+0x5c>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6e:	f1c3 0407 	rsb	r4, r3, #7
 8000c72:	2c04      	cmp	r4, #4
 8000c74:	bf28      	it	cs
 8000c76:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c78:	1d1d      	adds	r5, r3, #4
 8000c7a:	2d06      	cmp	r5, #6
 8000c7c:	bf8c      	ite	hi
 8000c7e:	3b03      	subhi	r3, #3
 8000c80:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000c86:	fa05 f404 	lsl.w	r4, r5, r4
 8000c8a:	ea21 0104 	bic.w	r1, r1, r4
 8000c8e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	fa05 f303 	lsl.w	r3, r5, r3
 8000c94:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	db09      	blt.n	8000cb2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	0109      	lsls	r1, r1, #4
 8000ca0:	b2c9      	uxtb	r1, r1
 8000ca2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ca6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000caa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cae:	bc30      	pop	{r4, r5}
 8000cb0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	f000 000f 	and.w	r0, r0, #15
 8000cb6:	0109      	lsls	r1, r1, #4
 8000cb8:	b2c9      	uxtb	r1, r1
 8000cba:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_NVIC_SetPriority+0x60>)
 8000cbc:	5419      	strb	r1, [r3, r0]
 8000cbe:	e7f6      	b.n	8000cae <HAL_NVIC_SetPriority+0x4a>
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	e000ed14 	.word	0xe000ed14

08000cc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	3801      	subs	r0, #1
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d20a      	bcs.n	8000ce6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_SYSTICK_Config+0x24>)
 8000cd2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_SYSTICK_Config+0x28>)
 8000cd6:	21f0      	movs	r1, #240	; 0xf0
 8000cd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	2000      	movs	r0, #0
 8000cde:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_PWREx_GetVoltageRange+0x20>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000cfc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000d00:	d007      	beq.n	8000d12 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000d02:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8000d06:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8000d0a:	2800      	cmp	r0, #0
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000d0c:	bf18      	it	ne
 8000d0e:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000d12:	4770      	bx	lr
 8000d14:	40007000 	.word	0x40007000

08000d18 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d13a      	bne.n	8000d92 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1c:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d28:	d008      	beq.n	8000d3c <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d2c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d38:	2000      	movs	r0, #0
 8000d3a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d3c:	4a38      	ldr	r2, [pc, #224]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d54:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	2332      	movs	r3, #50	; 0x32
 8000d5c:	fb03 f301 	mul.w	r3, r3, r1
 8000d60:	4931      	ldr	r1, [pc, #196]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0x110>)
 8000d62:	fba1 1303 	umull	r1, r3, r1, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d6a:	6952      	ldr	r2, [r2, #20]
 8000d6c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d70:	d007      	beq.n	8000d82 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8000d72:	492b      	ldr	r1, [pc, #172]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8000d74:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d76:	694a      	ldr	r2, [r1, #20]
 8000d78:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d7c:	d001      	beq.n	8000d82 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f8      	bne.n	8000d74 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d84:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8000d86:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2000      	moveq	r0, #0
 8000d8e:	2003      	movne	r0, #3
 8000d90:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d92:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000d96:	d008      	beq.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000da6:	2000      	movs	r0, #0
}
 8000da8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db6:	d008      	beq.n	8000dca <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000dba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000dcc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd8:	6813      	ldr	r3, [r2, #0]
 8000dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	2332      	movs	r3, #50	; 0x32
 8000dea:	fb03 f301 	mul.w	r3, r3, r1
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0x110>)
 8000df0:	fba1 1303 	umull	r1, r3, r1, r3
 8000df4:	0c9b      	lsrs	r3, r3, #18
 8000df6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	6952      	ldr	r2, [r2, #20]
 8000dfa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000dfe:	d007      	beq.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8000e02:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e04:	694a      	ldr	r2, [r1, #20]
 8000e06:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000e0a:	d001      	beq.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f8      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8000e12:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8000e14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e18:	bf0c      	ite	eq
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	2003      	movne	r0, #3
 8000e1e:	4770      	bx	lr
 8000e20:	40007000 	.word	0x40007000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	431bde83 	.word	0x431bde83

08000e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000e2c:	b530      	push	{r4, r5, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e3a:	d018      	beq.n	8000e6e <RCC_SetFlashLatencyFromMSIRange+0x42>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000e3c:	f7ff ff5a 	bl	8000cf4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e44:	d024      	beq.n	8000e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8000e46:	2c7f      	cmp	r4, #127	; 0x7f
 8000e48:	d82b      	bhi.n	8000ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8000e4a:	2c70      	cmp	r4, #112	; 0x70
 8000e4c:	bf14      	ite	ne
 8000e4e:	2400      	movne	r4, #0
 8000e50:	2401      	moveq	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e52:	4916      	ldr	r1, [pc, #88]	; (8000eac <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000e54:	680b      	ldr	r3, [r1, #0]
 8000e56:	f023 030f 	bic.w	r3, r3, #15
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000e5e:	6808      	ldr	r0, [r1, #0]
 8000e60:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000e64:	1b00      	subs	r0, r0, r4
 8000e66:	bf18      	it	ne
 8000e68:	2001      	movne	r0, #1
 8000e6a:	b003      	add	sp, #12
 8000e6c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4d0e      	ldr	r5, [pc, #56]	; (8000ea8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000e70:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e76:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e78:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e82:	f7ff ff37 	bl	8000cf4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e86:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e8e:	e7d7      	b.n	8000e40 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000e90:	2c80      	cmp	r4, #128	; 0x80
 8000e92:	d904      	bls.n	8000e9e <RCC_SetFlashLatencyFromMSIRange+0x72>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000e94:	2ca0      	cmp	r4, #160	; 0xa0
 8000e96:	bf8c      	ite	hi
 8000e98:	2402      	movhi	r4, #2
 8000e9a:	2401      	movls	r4, #1
 8000e9c:	e7d9      	b.n	8000e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	e7d7      	b.n	8000e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
      latency = FLASH_LATENCY_2; /* 2WS */
 8000ea2:	2402      	movs	r4, #2
 8000ea4:	e7d5      	b.n	8000e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb0:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eb2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb4:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eb6:	f013 030c 	ands.w	r3, r3, #12
 8000eba:	d00e      	beq.n	8000eda <HAL_RCC_GetSysClockFreq+0x2a>
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d006      	beq.n	8000ece <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d03f      	beq.n	8000f44 <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ec8:	bf18      	it	ne
 8000eca:	2000      	movne	r0, #0
 8000ecc:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ece:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000ed2:	2a01      	cmp	r2, #1
 8000ed4:	d001      	beq.n	8000eda <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e012      	b.n	8000f00 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ee4:	bf07      	ittee	eq
 8000ee6:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8000eea:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000eee:	6812      	ldrne	r2, [r2, #0]
 8000ef0:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000ef4:	4916      	ldr	r1, [pc, #88]	; (8000f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ef6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efa:	b323      	cbz	r3, 8000f46 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000efc:	2b0c      	cmp	r3, #12
 8000efe:	d11f      	bne.n	8000f40 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d017      	beq.n	8000f3c <HAL_RCC_GetSysClockFreq+0x8c>
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	bf08      	it	eq
 8000f12:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f16:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000f18:	68d9      	ldr	r1, [r3, #12]
 8000f1a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f1e:	fb00 f001 	mul.w	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f22:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f24:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000f28:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000f2a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f2e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000f32:	3301      	adds	r3, #1
 8000f34:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8000f36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f3a:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f3e:	e7e9      	b.n	8000f14 <HAL_RCC_GetSysClockFreq+0x64>
 8000f40:	2000      	movs	r0, #0
  return sysclockfreq;
 8000f42:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	007a1200 	.word	0x007a1200
 8000f50:	08003138 	.word	0x08003138
 8000f54:	00f42400 	.word	0x00f42400

08000f58 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	f000 8335 	beq.w	80015c8 <HAL_RCC_OscConfig+0x670>
{
 8000f5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	4bb0      	ldr	r3, [pc, #704]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000f68:	689d      	ldr	r5, [r3, #8]
 8000f6a:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6e:	68de      	ldr	r6, [r3, #12]
 8000f70:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f74:	6803      	ldr	r3, [r0, #0]
 8000f76:	f013 0f10 	tst.w	r3, #16
 8000f7a:	d05f      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f7c:	b1f5      	cbz	r5, 8000fbc <HAL_RCC_OscConfig+0x64>
 8000f7e:	2d0c      	cmp	r5, #12
 8000f80:	d01a      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f82:	69a3      	ldr	r3, [r4, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80ba 	beq.w	80010fe <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8000f8a:	4aa7      	ldr	r2, [pc, #668]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f94:	f7ff fe4e 	bl	8000c34 <HAL_GetTick>
 8000f98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f9a:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8001228 <HAL_RCC_OscConfig+0x2d0>
 8000f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000fa2:	f013 0f02 	tst.w	r3, #2
 8000fa6:	f040 8097 	bne.w	80010d8 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000faa:	f7ff fe43 	bl	8000c34 <HAL_GetTick>
 8000fae:	1bc0      	subs	r0, r0, r7
 8000fb0:	2802      	cmp	r0, #2
 8000fb2:	d9f4      	bls.n	8000f9e <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	e312      	b.n	80015de <HAL_RCC_OscConfig+0x686>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fb8:	2e01      	cmp	r6, #1
 8000fba:	d1e2      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fbc:	4b9a      	ldr	r3, [pc, #616]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f013 0f02 	tst.w	r3, #2
 8000fc4:	d003      	beq.n	8000fce <HAL_RCC_OscConfig+0x76>
 8000fc6:	69a3      	ldr	r3, [r4, #24]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 82ff 	beq.w	80015cc <HAL_RCC_OscConfig+0x674>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fce:	6a20      	ldr	r0, [r4, #32]
 8000fd0:	4b95      	ldr	r3, [pc, #596]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f013 0f08 	tst.w	r3, #8
 8000fd8:	4b93      	ldr	r3, [pc, #588]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000fda:	bf12      	itee	ne
 8000fdc:	681b      	ldrne	r3, [r3, #0]
 8000fde:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8000fe2:	091b      	lsreq	r3, r3, #4
 8000fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d856      	bhi.n	800109a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fec:	4b8e      	ldr	r3, [pc, #568]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f042 0208 	orr.w	r2, r2, #8
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ffc:	6a21      	ldr	r1, [r4, #32]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	69e1      	ldr	r1, [r4, #28]
 8001006:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800100a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800100e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001010:	2d00      	cmp	r5, #0
 8001012:	d05a      	beq.n	80010ca <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001014:	f7ff ff4c 	bl	8000eb0 <HAL_RCC_GetSysClockFreq>
 8001018:	4b83      	ldr	r3, [pc, #524]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001020:	4a82      	ldr	r2, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x2d4>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	40d8      	lsrs	r0, r3
 800102a:	4b81      	ldr	r3, [pc, #516]	; (8001230 <HAL_RCC_OscConfig+0x2d8>)
 800102c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800102e:	4b81      	ldr	r3, [pc, #516]	; (8001234 <HAL_RCC_OscConfig+0x2dc>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	f7ff fdbb 	bl	8000bac <HAL_InitTick>
        if(status != HAL_OK)
 8001036:	2800      	cmp	r0, #0
 8001038:	f040 82d1 	bne.w	80015de <HAL_RCC_OscConfig+0x686>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f013 0f01 	tst.w	r3, #1
 8001042:	d07d      	beq.n	8001140 <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001044:	2d08      	cmp	r5, #8
 8001046:	d072      	beq.n	800112e <HAL_RCC_OscConfig+0x1d6>
 8001048:	2d0c      	cmp	r5, #12
 800104a:	d06e      	beq.n	800112a <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001052:	f000 8094 	beq.w	800117e <HAL_RCC_OscConfig+0x226>
 8001056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800105a:	f000 8096 	beq.w	800118a <HAL_RCC_OscConfig+0x232>
 800105e:	4b72      	ldr	r3, [pc, #456]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800106e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8096 	beq.w	80011a4 <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 8001078:	f7ff fddc 	bl	8000c34 <HAL_GetTick>
 800107c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001228 <HAL_RCC_OscConfig+0x2d0>
 8001082:	f8d8 3000 	ldr.w	r3, [r8]
 8001086:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800108a:	d159      	bne.n	8001140 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fdd2 	bl	8000c34 <HAL_GetTick>
 8001090:	1bc0      	subs	r0, r0, r7
 8001092:	2864      	cmp	r0, #100	; 0x64
 8001094:	d9f5      	bls.n	8001082 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e2a1      	b.n	80015de <HAL_RCC_OscConfig+0x686>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800109a:	f7ff fec7 	bl	8000e2c <RCC_SetFlashLatencyFromMSIRange>
 800109e:	2800      	cmp	r0, #0
 80010a0:	f040 8296 	bne.w	80015d0 <HAL_RCC_OscConfig+0x678>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a4:	4b60      	ldr	r3, [pc, #384]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f042 0208 	orr.w	r2, r2, #8
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010b4:	6a21      	ldr	r1, [r4, #32]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	69e1      	ldr	r1, [r4, #28]
 80010be:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80010c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	e7a4      	b.n	8001014 <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ca:	6a20      	ldr	r0, [r4, #32]
 80010cc:	f7ff feae 	bl	8000e2c <RCC_SetFlashLatencyFromMSIRange>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d09f      	beq.n	8001014 <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
 80010d6:	e282      	b.n	80015de <HAL_RCC_OscConfig+0x686>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f042 0208 	orr.w	r2, r2, #8
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010e8:	6a21      	ldr	r1, [r4, #32]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	69e1      	ldr	r1, [r4, #28]
 80010f2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80010f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	e79e      	b.n	800103c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 80010fe:	4a4a      	ldr	r2, [pc, #296]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff fd94 	bl	8000c34 <HAL_GetTick>
 800110c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800110e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8001228 <HAL_RCC_OscConfig+0x2d0>
 8001112:	f8d8 3000 	ldr.w	r3, [r8]
 8001116:	f013 0f02 	tst.w	r3, #2
 800111a:	d08f      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111c:	f7ff fd8a 	bl	8000c34 <HAL_GetTick>
 8001120:	1bc0      	subs	r0, r0, r7
 8001122:	2802      	cmp	r0, #2
 8001124:	d9f5      	bls.n	8001112 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e259      	b.n	80015de <HAL_RCC_OscConfig+0x686>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800112a:	2e03      	cmp	r6, #3
 800112c:	d18e      	bne.n	800104c <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001136:	d003      	beq.n	8001140 <HAL_RCC_OscConfig+0x1e8>
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 824a 	beq.w	80015d4 <HAL_RCC_OscConfig+0x67c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	f013 0f02 	tst.w	r3, #2
 8001146:	d051      	beq.n	80011ec <HAL_RCC_OscConfig+0x294>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001148:	2d04      	cmp	r5, #4
 800114a:	d03e      	beq.n	80011ca <HAL_RCC_OscConfig+0x272>
 800114c:	2d0c      	cmp	r5, #12
 800114e:	d03a      	beq.n	80011c6 <HAL_RCC_OscConfig+0x26e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001150:	68e3      	ldr	r3, [r4, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d079      	beq.n	800124a <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001160:	f7ff fd68 	bl	8000c34 <HAL_GetTick>
 8001164:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001166:	4f30      	ldr	r7, [pc, #192]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800116e:	d163      	bne.n	8001238 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fd60 	bl	8000c34 <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	2802      	cmp	r0, #2
 8001178:	d9f6      	bls.n	8001168 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
 800117c:	e22f      	b.n	80015de <HAL_RCC_OscConfig+0x686>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117e:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e772      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
 800118a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800118e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e765      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80011a4:	f7ff fd46 	bl	8000c34 <HAL_GetTick>
 80011a8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001228 <HAL_RCC_OscConfig+0x2d0>
 80011ae:	f8d8 3000 	ldr.w	r3, [r8]
 80011b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011b6:	d0c3      	beq.n	8001140 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fd3c 	bl	8000c34 <HAL_GetTick>
 80011bc:	1bc0      	subs	r0, r0, r7
 80011be:	2864      	cmp	r0, #100	; 0x64
 80011c0:	d9f5      	bls.n	80011ae <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
 80011c4:	e20b      	b.n	80015de <HAL_RCC_OscConfig+0x686>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c6:	2e02      	cmp	r6, #2
 80011c8:	d1c2      	bne.n	8001150 <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011d2:	d003      	beq.n	80011dc <HAL_RCC_OscConfig+0x284>
 80011d4:	68e3      	ldr	r3, [r4, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81fe 	beq.w	80015d8 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 80011de:	6853      	ldr	r3, [r2, #4]
 80011e0:	6921      	ldr	r1, [r4, #16]
 80011e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80011e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80011ea:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	f013 0f08 	tst.w	r3, #8
 80011f2:	d055      	beq.n	80012a0 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	6963      	ldr	r3, [r4, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d03b      	beq.n	8001272 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 80011fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001208:	f7ff fd14 	bl	8000c34 <HAL_GetTick>
 800120c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120e:	4f06      	ldr	r7, [pc, #24]	; (8001228 <HAL_RCC_OscConfig+0x2d0>)
 8001210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001214:	f013 0f02 	tst.w	r3, #2
 8001218:	d142      	bne.n	80012a0 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fd0b 	bl	8000c34 <HAL_GetTick>
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f5      	bls.n	8001210 <HAL_RCC_OscConfig+0x2b8>
          return HAL_TIMEOUT;
 8001224:	2003      	movs	r0, #3
 8001226:	e1da      	b.n	80015de <HAL_RCC_OscConfig+0x686>
 8001228:	40021000 	.word	0x40021000
 800122c:	08003128 	.word	0x08003128
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4ab9      	ldr	r2, [pc, #740]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800123a:	6853      	ldr	r3, [r2, #4]
 800123c:	6921      	ldr	r1, [r4, #16]
 800123e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001242:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001246:	6053      	str	r3, [r2, #4]
 8001248:	e7d0      	b.n	80011ec <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_DISABLE();
 800124a:	4ab5      	ldr	r2, [pc, #724]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001254:	f7ff fcee 	bl	8000c34 <HAL_GetTick>
 8001258:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125a:	4fb1      	ldr	r7, [pc, #708]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001262:	d0c3      	beq.n	80011ec <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fce6 	bl	8000c34 <HAL_GetTick>
 8001268:	1b80      	subs	r0, r0, r6
 800126a:	2802      	cmp	r0, #2
 800126c:	d9f6      	bls.n	800125c <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 800126e:	2003      	movs	r0, #3
 8001270:	e1b5      	b.n	80015de <HAL_RCC_OscConfig+0x686>
      __HAL_RCC_LSI_DISABLE();
 8001272:	4aab      	ldr	r2, [pc, #684]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001274:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001280:	f7ff fcd8 	bl	8000c34 <HAL_GetTick>
 8001284:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001286:	4fa6      	ldr	r7, [pc, #664]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800128c:	f013 0f02 	tst.w	r3, #2
 8001290:	d006      	beq.n	80012a0 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fccf 	bl	8000c34 <HAL_GetTick>
 8001296:	1b80      	subs	r0, r0, r6
 8001298:	2802      	cmp	r0, #2
 800129a:	d9f5      	bls.n	8001288 <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 800129c:	2003      	movs	r0, #3
 800129e:	e19e      	b.n	80015de <HAL_RCC_OscConfig+0x686>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f04 	tst.w	r3, #4
 80012a6:	d07e      	beq.n	80013a6 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012a8:	4b9d      	ldr	r3, [pc, #628]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012b0:	d137      	bne.n	8001322 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b9b      	ldr	r3, [pc, #620]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80012b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012c6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c8:	4b96      	ldr	r3, [pc, #600]	; (8001524 <HAL_RCC_OscConfig+0x5cc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012d0:	d029      	beq.n	8001326 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	68a3      	ldr	r3, [r4, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d03c      	beq.n	8001352 <HAL_RCC_OscConfig+0x3fa>
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d042      	beq.n	8001362 <HAL_RCC_OscConfig+0x40a>
 80012dc:	4b90      	ldr	r3, [pc, #576]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80012de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80012ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012ee:	f022 0204 	bic.w	r2, r2, #4
 80012f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f6:	68a3      	ldr	r3, [r4, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d040      	beq.n	800137e <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 80012fc:	f7ff fc9a 	bl	8000c34 <HAL_GetTick>
 8001300:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001302:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8001520 <HAL_RCC_OscConfig+0x5c8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800130a:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800130e:	f013 0f02 	tst.w	r3, #2
 8001312:	d147      	bne.n	80013a4 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fc8e 	bl	8000c34 <HAL_GetTick>
 8001318:	1bc0      	subs	r0, r0, r7
 800131a:	4548      	cmp	r0, r9
 800131c:	d9f5      	bls.n	800130a <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
 8001320:	e15d      	b.n	80015de <HAL_RCC_OscConfig+0x686>
    FlagStatus       pwrclkchanged = RESET;
 8001322:	2600      	movs	r6, #0
 8001324:	e7d0      	b.n	80012c8 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001326:	4a7f      	ldr	r2, [pc, #508]	; (8001524 <HAL_RCC_OscConfig+0x5cc>)
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001330:	f7ff fc80 	bl	8000c34 <HAL_GetTick>
 8001334:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001336:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8001524 <HAL_RCC_OscConfig+0x5cc>
 800133a:	f8d8 3000 	ldr.w	r3, [r8]
 800133e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001342:	d1c6      	bne.n	80012d2 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	1bc0      	subs	r0, r0, r7
 800134a:	2802      	cmp	r0, #2
 800134c:	d9f5      	bls.n	800133a <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 800134e:	2003      	movs	r0, #3
 8001350:	e145      	b.n	80015de <HAL_RCC_OscConfig+0x686>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	4a73      	ldr	r2, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001354:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001360:	e7c9      	b.n	80012f6 <HAL_RCC_OscConfig+0x39e>
 8001362:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001364:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001368:	f042 0204 	orr.w	r2, r2, #4
 800136c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001370:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800137c:	e7bb      	b.n	80012f6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 800137e:	f7ff fc59 	bl	8000c34 <HAL_GetTick>
 8001382:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001384:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8001520 <HAL_RCC_OscConfig+0x5c8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800138c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8001390:	f013 0f02 	tst.w	r3, #2
 8001394:	d006      	beq.n	80013a4 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fc4d 	bl	8000c34 <HAL_GetTick>
 800139a:	1bc0      	subs	r0, r0, r7
 800139c:	4548      	cmp	r0, r9
 800139e:	d9f5      	bls.n	800138c <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 80013a0:	2003      	movs	r0, #3
 80013a2:	e11c      	b.n	80015de <HAL_RCC_OscConfig+0x686>
    if(pwrclkchanged == SET)
 80013a4:	b9e6      	cbnz	r6, 80013e0 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	f013 0f20 	tst.w	r3, #32
 80013ac:	d035      	beq.n	800141a <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013b0:	b1e3      	cbz	r3, 80013ec <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 80013b2:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80013b4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc38 	bl	8000c34 <HAL_GetTick>
 80013c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013c6:	4f56      	ldr	r7, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80013c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013cc:	f013 0f02 	tst.w	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d2:	f7ff fc2f 	bl	8000c34 <HAL_GetTick>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	2802      	cmp	r0, #2
 80013da:	d9f5      	bls.n	80013c8 <HAL_RCC_OscConfig+0x470>
          return HAL_TIMEOUT;
 80013dc:	2003      	movs	r0, #3
 80013de:	e0fe      	b.n	80015de <HAL_RCC_OscConfig+0x686>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e0:	4a4f      	ldr	r2, [pc, #316]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80013e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80013e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ea:	e7dc      	b.n	80013a6 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80013ee:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80013fa:	f7ff fc1b 	bl	8000c34 <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001400:	4f47      	ldr	r7, [pc, #284]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001406:	f013 0f02 	tst.w	r3, #2
 800140a:	d006      	beq.n	800141a <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140c:	f7ff fc12 	bl	8000c34 <HAL_GetTick>
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	2802      	cmp	r0, #2
 8001414:	d9f5      	bls.n	8001402 <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e0e1      	b.n	80015de <HAL_RCC_OscConfig+0x686>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800141a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80dd 	beq.w	80015dc <HAL_RCC_OscConfig+0x684>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001422:	2b02      	cmp	r3, #2
 8001424:	d027      	beq.n	8001476 <HAL_RCC_OscConfig+0x51e>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001426:	2d0c      	cmp	r5, #12
 8001428:	f000 80e0 	beq.w	80015ec <HAL_RCC_OscConfig+0x694>
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001434:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800143c:	d104      	bne.n	8001448 <HAL_RCC_OscConfig+0x4f0>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800143e:	4a38      	ldr	r2, [pc, #224]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001440:	68d3      	ldr	r3, [r2, #12]
 8001442:	f023 0303 	bic.w	r3, r3, #3
 8001446:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001448:	4a35      	ldr	r2, [pc, #212]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800144a:	68d3      	ldr	r3, [r2, #12]
 800144c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001454:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001456:	f7ff fbed 	bl	8000c34 <HAL_GetTick>
 800145a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145c:	4d30      	ldr	r5, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001464:	f000 80ae 	beq.w	80015c4 <HAL_RCC_OscConfig+0x66c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fbe4 	bl	8000c34 <HAL_GetTick>
 800146c:	1b00      	subs	r0, r0, r4
 800146e:	2802      	cmp	r0, #2
 8001470:	d9f5      	bls.n	800145e <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8001472:	2003      	movs	r0, #3
 8001474:	e0b3      	b.n	80015de <HAL_RCC_OscConfig+0x686>
      pll_config = RCC->PLLCFGR;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001478:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	f003 0103 	and.w	r1, r3, #3
 800147e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001480:	4291      	cmp	r1, r2
 8001482:	d00f      	beq.n	80014a4 <HAL_RCC_OscConfig+0x54c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001484:	2d0c      	cmp	r5, #12
 8001486:	f000 80ad 	beq.w	80015e4 <HAL_RCC_OscConfig+0x68c>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001492:	f040 80a9 	bne.w	80015e8 <HAL_RCC_OscConfig+0x690>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800149e:	d02b      	beq.n	80014f8 <HAL_RCC_OscConfig+0x5a0>
            return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e09c      	b.n	80015de <HAL_RCC_OscConfig+0x686>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014aa:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80014b0:	d1e8      	bne.n	8001484 <HAL_RCC_OscConfig+0x52c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80014bc:	d1e2      	bne.n	8001484 <HAL_RCC_OscConfig+0x52c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80014c8:	d1dc      	bne.n	8001484 <HAL_RCC_OscConfig+0x52c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80014ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014d0:	0852      	lsrs	r2, r2, #1
 80014d2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014d4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80014d8:	d1d4      	bne.n	8001484 <HAL_RCC_OscConfig+0x52c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014da:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80014de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014e0:	0852      	lsrs	r2, r2, #1
 80014e2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80014e8:	d1cc      	bne.n	8001484 <HAL_RCC_OscConfig+0x52c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f2:	d04d      	beq.n	8001590 <HAL_RCC_OscConfig+0x638>
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
 80014f6:	e072      	b.n	80015de <HAL_RCC_OscConfig+0x686>
            __HAL_RCC_PLL_DISABLE();
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001500:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001502:	f7ff fb97 	bl	8000c34 <HAL_GetTick>
 8001506:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	4e05      	ldr	r6, [pc, #20]	; (8001520 <HAL_RCC_OscConfig+0x5c8>)
 800150a:	6833      	ldr	r3, [r6, #0]
 800150c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001510:	d00a      	beq.n	8001528 <HAL_RCC_OscConfig+0x5d0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb8f 	bl	8000c34 <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2802      	cmp	r0, #2
 800151a:	d9f6      	bls.n	800150a <HAL_RCC_OscConfig+0x5b2>
                return HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
 800151e:	e05e      	b.n	80015de <HAL_RCC_OscConfig+0x686>
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_RCC_OscConfig+0x698>)
 800152a:	68d1      	ldr	r1, [r2, #12]
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_RCC_OscConfig+0x69c>)
 800152e:	400b      	ands	r3, r1
 8001530:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001532:	430b      	orrs	r3, r1
 8001534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001536:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800153a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800153c:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8001540:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001542:	3901      	subs	r1, #1
 8001544:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001548:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800154a:	0849      	lsrs	r1, r1, #1
 800154c:	3901      	subs	r1, #1
 800154e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001552:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001554:	0849      	lsrs	r1, r1, #1
 8001556:	3901      	subs	r1, #1
 8001558:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800155c:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001564:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001566:	68d3      	ldr	r3, [r2, #12]
 8001568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156c:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800156e:	f7ff fb61 	bl	8000c34 <HAL_GetTick>
 8001572:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001574:	4d1e      	ldr	r5, [pc, #120]	; (80015f0 <HAL_RCC_OscConfig+0x698>)
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x634>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb59 	bl	8000c34 <HAL_GetTick>
 8001582:	1b00      	subs	r0, r0, r4
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f6      	bls.n	8001576 <HAL_RCC_OscConfig+0x61e>
                return HAL_TIMEOUT;
 8001588:	2003      	movs	r0, #3
 800158a:	e028      	b.n	80015de <HAL_RCC_OscConfig+0x686>
  return HAL_OK;
 800158c:	2000      	movs	r0, #0
 800158e:	e026      	b.n	80015de <HAL_RCC_OscConfig+0x686>
          __HAL_RCC_PLL_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_RCC_OscConfig+0x698>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001598:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80015a0:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80015a2:	f7ff fb47 	bl	8000c34 <HAL_GetTick>
 80015a6:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a8:	4d11      	ldr	r5, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x698>)
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x668>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fb3f 	bl	8000c34 <HAL_GetTick>
 80015b6:	1b03      	subs	r3, r0, r4
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d9f6      	bls.n	80015aa <HAL_RCC_OscConfig+0x652>
              return HAL_TIMEOUT;
 80015bc:	2003      	movs	r0, #3
 80015be:	e00e      	b.n	80015de <HAL_RCC_OscConfig+0x686>
  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
 80015c2:	e00c      	b.n	80015de <HAL_RCC_OscConfig+0x686>
 80015c4:	2000      	movs	r0, #0
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x686>
    return HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
}
 80015ca:	4770      	bx	lr
        return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
 80015ce:	e006      	b.n	80015de <HAL_RCC_OscConfig+0x686>
            return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
 80015d2:	e004      	b.n	80015de <HAL_RCC_OscConfig+0x686>
        return HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
 80015d6:	e002      	b.n	80015de <HAL_RCC_OscConfig+0x686>
        return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x686>
  return HAL_OK;
 80015dc:	2000      	movs	r0, #0
}
 80015de:	b003      	add	sp, #12
 80015e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
 80015e6:	e7fa      	b.n	80015de <HAL_RCC_OscConfig+0x686>
            return HAL_ERROR;
 80015e8:	2001      	movs	r0, #1
 80015ea:	e7f8      	b.n	80015de <HAL_RCC_OscConfig+0x686>
        return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
 80015ee:	e7f6      	b.n	80015de <HAL_RCC_OscConfig+0x686>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	019d800c 	.word	0x019d800c

080015f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80015f8:	2800      	cmp	r0, #0
 80015fa:	f000 80d5 	beq.w	80017a8 <HAL_RCC_ClockConfig+0x1b0>
{
 80015fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001602:	460c      	mov	r4, r1
 8001604:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001606:	4b8f      	ldr	r3, [pc, #572]	; (8001844 <HAL_RCC_ClockConfig+0x24c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	428b      	cmp	r3, r1
 8001610:	d20b      	bcs.n	800162a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <HAL_RCC_ClockConfig+0x24c>)
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	430b      	orrs	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	428b      	cmp	r3, r1
 8001626:	f040 80c1 	bne.w	80017ac <HAL_RCC_ClockConfig+0x1b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	682b      	ldr	r3, [r5, #0]
 800162c:	f013 0f01 	tst.w	r3, #1
 8001630:	f000 80c2 	beq.w	80017b8 <HAL_RCC_ClockConfig+0x1c0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001634:	686a      	ldr	r2, [r5, #4]
 8001636:	2a03      	cmp	r2, #3
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_ClockConfig+0x5a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	2a02      	cmp	r2, #2
 800163c:	d069      	beq.n	8001712 <HAL_RCC_ClockConfig+0x11a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800163e:	2a00      	cmp	r2, #0
 8001640:	f040 8095 	bne.w	800176e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f013 0f02 	tst.w	r3, #2
 800164c:	d166      	bne.n	800171c <HAL_RCC_ClockConfig+0x124>
          return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e0f5      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4a7d      	ldr	r2, [pc, #500]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x68>
        return HAL_ERROR;
 800165c:	2001      	movs	r0, #1
 800165e:	e0ee      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001660:	4a79      	ldr	r2, [pc, #484]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001662:	68d2      	ldr	r2, [r2, #12]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	2a01      	cmp	r2, #1
 800166a:	d02f      	beq.n	80016cc <HAL_RCC_ClockConfig+0xd4>
  uint32_t msirange = 0U;
 800166c:	2200      	movs	r2, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800166e:	4976      	ldr	r1, [pc, #472]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001670:	68c9      	ldr	r1, [r1, #12]
 8001672:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 8001676:	2902      	cmp	r1, #2
 8001678:	d039      	beq.n	80016ee <HAL_RCC_ClockConfig+0xf6>
 800167a:	4874      	ldr	r0, [pc, #464]	; (800184c <HAL_RCC_ClockConfig+0x254>)
 800167c:	2903      	cmp	r1, #3
 800167e:	bf08      	it	eq
 8001680:	4602      	moveq	r2, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001682:	4971      	ldr	r1, [pc, #452]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001684:	68c8      	ldr	r0, [r1, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001686:	68ce      	ldr	r6, [r1, #12]
 8001688:	f3c6 2606 	ubfx	r6, r6, #8, #7
 800168c:	fb02 f206 	mul.w	r2, r2, r6
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001690:	68c9      	ldr	r1, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001692:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001696:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001698:	fbb2 f2f0 	udiv	r2, r2, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800169c:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80016a0:	3101      	adds	r1, #1
 80016a2:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 80016a4:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80016a8:	4969      	ldr	r1, [pc, #420]	; (8001850 <HAL_RCC_ClockConfig+0x258>)
 80016aa:	428a      	cmp	r2, r1
 80016ac:	d966      	bls.n	800177c <HAL_RCC_ClockConfig+0x184>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80016b0:	6892      	ldr	r2, [r2, #8]
 80016b2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80016b6:	d11c      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xfa>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016b8:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016c6:	f04f 0980 	mov.w	r9, #128	; 0x80
 80016ca:	e035      	b.n	8001738 <HAL_RCC_ClockConfig+0x140>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016cc:	4a5e      	ldr	r2, [pc, #376]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016d4:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80016d6:	bf07      	ittee	eq
 80016d8:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 80016dc:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016e0:	6812      	ldrne	r2, [r2, #0]
 80016e2:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80016e6:	495b      	ldr	r1, [pc, #364]	; (8001854 <HAL_RCC_ClockConfig+0x25c>)
 80016e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016ec:	e7bf      	b.n	800166e <HAL_RCC_ClockConfig+0x76>
    pllvco = HSI_VALUE;
 80016ee:	4a5a      	ldr	r2, [pc, #360]	; (8001858 <HAL_RCC_ClockConfig+0x260>)
 80016f0:	e7c7      	b.n	8001682 <HAL_RCC_ClockConfig+0x8a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80016f2:	f013 0902 	ands.w	r9, r3, #2
 80016f6:	d01f      	beq.n	8001738 <HAL_RCC_ClockConfig+0x140>
 80016f8:	68ab      	ldr	r3, [r5, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d141      	bne.n	8001782 <HAL_RCC_ClockConfig+0x18a>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016fe:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001700:	6893      	ldr	r3, [r2, #8]
 8001702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800170c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001710:	e012      	b.n	8001738 <HAL_RCC_ClockConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800171a:	d049      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x1b8>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800171c:	f7ff fbc8 	bl	8000eb0 <HAL_RCC_GetSysClockFreq>
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_RCC_ClockConfig+0x258>)
 8001722:	4298      	cmp	r0, r3
 8001724:	d930      	bls.n	8001788 <HAL_RCC_ClockConfig+0x190>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001726:	4a48      	ldr	r2, [pc, #288]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001728:	6893      	ldr	r3, [r2, #8]
 800172a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800172e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001732:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001734:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001738:	4a43      	ldr	r2, [pc, #268]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 800173a:	6893      	ldr	r3, [r2, #8]
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	6869      	ldr	r1, [r5, #4]
 8001742:	430b      	orrs	r3, r1
 8001744:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001746:	f7ff fa75 	bl	8000c34 <HAL_GetTick>
 800174a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174c:	4f3e      	ldr	r7, [pc, #248]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f241 3888 	movw	r8, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	686a      	ldr	r2, [r5, #4]
 800175a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800175e:	d016      	beq.n	800178e <HAL_RCC_ClockConfig+0x196>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fa68 	bl	8000c34 <HAL_GetTick>
 8001764:	1b80      	subs	r0, r0, r6
 8001766:	4540      	cmp	r0, r8
 8001768:	d9f3      	bls.n	8001752 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 800176a:	2003      	movs	r0, #3
 800176c:	e067      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001776:	d1d1      	bne.n	800171c <HAL_RCC_ClockConfig+0x124>
          return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e060      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177c:	f04f 0900 	mov.w	r9, #0
 8001780:	e7da      	b.n	8001738 <HAL_RCC_ClockConfig+0x140>
 8001782:	f04f 0900 	mov.w	r9, #0
 8001786:	e7d7      	b.n	8001738 <HAL_RCC_ClockConfig+0x140>
 8001788:	f04f 0900 	mov.w	r9, #0
 800178c:	e7d4      	b.n	8001738 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	f013 0f02 	tst.w	r3, #2
 8001794:	d113      	bne.n	80017be <HAL_RCC_ClockConfig+0x1c6>
    if(hpre == RCC_SYSCLK_DIV2)
 8001796:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800179a:	d117      	bne.n	80017cc <HAL_RCC_ClockConfig+0x1d4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 800179e:	6893      	ldr	r3, [r2, #8]
 80017a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a4:	6093      	str	r3, [r2, #8]
 80017a6:	e011      	b.n	80017cc <HAL_RCC_ClockConfig+0x1d4>
    return HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
}
 80017aa:	4770      	bx	lr
      return HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
 80017ae:	e046      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
          return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
 80017b2:	e044      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
      return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
 80017b6:	e042      	b.n	800183e <HAL_RCC_ClockConfig+0x246>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	f013 0f02 	tst.w	r3, #2
 80017bc:	d006      	beq.n	80017cc <HAL_RCC_ClockConfig+0x1d4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80017c0:	6893      	ldr	r3, [r2, #8]
 80017c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c6:	68a9      	ldr	r1, [r5, #8]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_ClockConfig+0x24c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	42a3      	cmp	r3, r4
 80017d6:	d90a      	bls.n	80017ee <HAL_RCC_ClockConfig+0x1f6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_RCC_ClockConfig+0x24c>)
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f023 030f 	bic.w	r3, r3, #15
 80017e0:	4323      	orrs	r3, r4
 80017e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	d1e2      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x1bc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	f013 0f04 	tst.w	r3, #4
 80017f4:	d006      	beq.n	8001804 <HAL_RCC_ClockConfig+0x20c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 80017f8:	6893      	ldr	r3, [r2, #8]
 80017fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017fe:	68e9      	ldr	r1, [r5, #12]
 8001800:	430b      	orrs	r3, r1
 8001802:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	f013 0f08 	tst.w	r3, #8
 800180a:	d007      	beq.n	800181c <HAL_RCC_ClockConfig+0x224>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 800180e:	6893      	ldr	r3, [r2, #8]
 8001810:	6929      	ldr	r1, [r5, #16]
 8001812:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001816:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800181a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181c:	f7ff fb48 	bl	8000eb0 <HAL_RCC_GetSysClockFreq>
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x250>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001828:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_RCC_ClockConfig+0x264>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	40d8      	lsrs	r0, r3
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_ClockConfig+0x268>)
 8001834:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x26c>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f7ff f9b7 	bl	8000bac <HAL_InitTick>
}
 800183e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	007a1200 	.word	0x007a1200
 8001850:	04c4b400 	.word	0x04c4b400
 8001854:	08003138 	.word	0x08003138
 8001858:	00f42400 	.word	0x00f42400
 800185c:	08003128 	.word	0x08003128
 8001860:	20000008 	.word	0x20000008
 8001864:	20000004 	.word	0x20000004

08001868 <Kalmanfilter>:
#include <math.h>

/*
 * Kalman filter function that uses the assembly subroutine
 */
int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i=0; i<Length; i++) {
 800186a:	2b00      	cmp	r3, #0
 800186c:	dd0d      	ble.n	800188a <Kalmanfilter+0x22>
 800186e:	4617      	mov	r7, r2
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	eb00 0683 	add.w	r6, r0, r3, lsl #2
		OutputArray[i] = kalman(kstate, InputArray[i]);
 8001878:	ecb4 0a01 	vldmia	r4!, {s0}
 800187c:	4638      	mov	r0, r7
 800187e:	f7fe fcbd 	bl	80001fc <kalman>
 8001882:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i=0; i<Length; i++) {
 8001886:	42b4      	cmp	r4, r6
 8001888:	d1f6      	bne.n	8001878 <Kalmanfilter+0x10>
	}
	return 0;
}
 800188a:	2000      	movs	r0, #0
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800188e <kalman_c>:

/*
 * Kalman filter rewritten in C
 */
float kalman_c(kalman_state* state, float measurement) {
	state->p += state->q;
 800188e:	edd0 7a03 	vldr	s15, [r0, #12]
 8001892:	ed90 7a00 	vldr	s14, [r0]
 8001896:	ee37 7a87 	vadd.f32	s14, s15, s14
	state->k = state->p / (state->p + state->r);
 800189a:	edd0 7a01 	vldr	s15, [r0, #4]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018a6:	edc0 6a04 	vstr	s13, [r0, #16]
	state->x = state->x + state->k * (measurement - state->x);
 80018aa:	edd0 7a02 	vldr	s15, [r0, #8]
 80018ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80018b2:	ee20 0a26 	vmul.f32	s0, s0, s13
 80018b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80018ba:	ed80 0a02 	vstr	s0, [r0, #8]
	state->p = (1 - state->k) * state->p;
 80018be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80018c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	edc0 7a03 	vstr	s15, [r0, #12]

	return state->x;
}
 80018ce:	4770      	bx	lr

080018d0 <Kalmanfilter_c>:
int Kalmanfilter_c(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i=0; i<Length; i++) {
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	dd0d      	ble.n	80018f2 <Kalmanfilter_c+0x22>
 80018d6:	4617      	mov	r7, r2
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
		OutputArray[i] = kalman_c(kstate, InputArray[i]);
 80018e0:	ecb4 0a01 	vldmia	r4!, {s0}
 80018e4:	4638      	mov	r0, r7
 80018e6:	f7ff ffd2 	bl	800188e <kalman_c>
 80018ea:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i=0; i<Length; i++) {
 80018ee:	42b4      	cmp	r4, r6
 80018f0:	d1f6      	bne.n	80018e0 <Kalmanfilter_c+0x10>
}
 80018f2:	2000      	movs	r0, #0
 80018f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018f6 <kalman_cmsis>:
}

/*
 * Kalman filter rewritten in C and cmsis-dsp functions
 */
float kalman_cmsis(kalman_state* state, float measurement) {
 80018f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f8:	b089      	sub	sp, #36	; 0x24
 80018fa:	4604      	mov	r4, r0
 80018fc:	ed8d 0a01 	vstr	s0, [sp, #4]
	float a = 0.0;	//p + r
 8001900:	2300      	movs	r3, #0
 8001902:	9307      	str	r3, [sp, #28]
	float b = 0.0;	//measurement - x
 8001904:	9306      	str	r3, [sp, #24]
	float c = 0.0;	//k * (measurement - x)
 8001906:	9305      	str	r3, [sp, #20]
	float d = 0.0;	//(1-k)
 8001908:	9304      	str	r3, [sp, #16]
	float constant = 1;
 800190a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800190e:	9303      	str	r3, [sp, #12]

	arm_add_f32(&state->p, &state->q, &state->p, 1);
 8001910:	f100 050c 	add.w	r5, r0, #12
 8001914:	2301      	movs	r3, #1
 8001916:	462a      	mov	r2, r5
 8001918:	4601      	mov	r1, r0
 800191a:	4628      	mov	r0, r5
 800191c:	f001 f96e 	bl	8002bfc <arm_add_f32>
	arm_add_f32(&state->p, &state->r, &a, 1);
 8001920:	2301      	movs	r3, #1
 8001922:	aa07      	add	r2, sp, #28
 8001924:	1d21      	adds	r1, r4, #4
 8001926:	4628      	mov	r0, r5
 8001928:	f001 f968 	bl	8002bfc <arm_add_f32>
	state->k = (state->p) / a;
 800192c:	edd4 6a03 	vldr	s13, [r4, #12]
 8001930:	ed9d 7a07 	vldr	s14, [sp, #28]
 8001934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001938:	edc4 7a04 	vstr	s15, [r4, #16]
	arm_sub_f32(&measurement, &state->x, &b, 1);
 800193c:	f104 0608 	add.w	r6, r4, #8
 8001940:	2301      	movs	r3, #1
 8001942:	aa06      	add	r2, sp, #24
 8001944:	4631      	mov	r1, r6
 8001946:	a801      	add	r0, sp, #4
 8001948:	f001 f8a4 	bl	8002a94 <arm_sub_f32>
	arm_mult_f32(&state->k, &b, &c, 1);
 800194c:	f104 0710 	add.w	r7, r4, #16
 8001950:	2301      	movs	r3, #1
 8001952:	aa05      	add	r2, sp, #20
 8001954:	a906      	add	r1, sp, #24
 8001956:	4638      	mov	r0, r7
 8001958:	f001 f8f6 	bl	8002b48 <arm_mult_f32>
	arm_add_f32(&state->x, &c, &state->x, 1);
 800195c:	2301      	movs	r3, #1
 800195e:	4632      	mov	r2, r6
 8001960:	a905      	add	r1, sp, #20
 8001962:	4630      	mov	r0, r6
 8001964:	f001 f94a 	bl	8002bfc <arm_add_f32>
	arm_sub_f32(&constant, &state->k, &d, 1);
 8001968:	2301      	movs	r3, #1
 800196a:	aa04      	add	r2, sp, #16
 800196c:	4639      	mov	r1, r7
 800196e:	a803      	add	r0, sp, #12
 8001970:	f001 f890 	bl	8002a94 <arm_sub_f32>
	arm_mult_f32(&d, &state->q, &state->p, 1);
 8001974:	2301      	movs	r3, #1
 8001976:	462a      	mov	r2, r5
 8001978:	4621      	mov	r1, r4
 800197a:	a804      	add	r0, sp, #16
 800197c:	f001 f8e4 	bl	8002b48 <arm_mult_f32>
}
 8001980:	b009      	add	sp, #36	; 0x24
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001984 <Kalmanfilter_cmsis>:
int Kalmanfilter_cmsis(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i=0; i<Length; i++) {
 8001986:	2b00      	cmp	r3, #0
 8001988:	dd0d      	ble.n	80019a6 <Kalmanfilter_cmsis+0x22>
 800198a:	4617      	mov	r7, r2
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	eb00 0683 	add.w	r6, r0, r3, lsl #2
		OutputArray[i] = kalman_cmsis(kstate, InputArray[i]);
 8001994:	ecb4 0a01 	vldmia	r4!, {s0}
 8001998:	4638      	mov	r0, r7
 800199a:	f7ff ffac 	bl	80018f6 <kalman_cmsis>
 800199e:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i=0; i<Length; i++) {
 80019a2:	42b4      	cmp	r4, r6
 80019a4:	d1f6      	bne.n	8001994 <Kalmanfilter_cmsis+0x10>
}
 80019a6:	2000      	movs	r0, #0
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019aa:	b500      	push	{lr}
 80019ac:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	2244      	movs	r2, #68	; 0x44
 80019b0:	2100      	movs	r1, #0
 80019b2:	a805      	add	r0, sp, #20
 80019b4:	f001 f9b4 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	2000      	movs	r0, #0
 80019ba:	9000      	str	r0, [sp, #0]
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	9002      	str	r0, [sp, #8]
 80019c0:	9003      	str	r0, [sp, #12]
 80019c2:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80019c4:	f7ff f9a8 	bl	8000d18 <HAL_PWREx_ControlVoltageScaling>
 80019c8:	bb20      	cbnz	r0, 8001a14 <SystemClock_Config+0x6a>
    Error_Handler();
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019ca:	2310      	movs	r3, #16
 80019cc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019ce:	2201      	movs	r2, #1
 80019d0:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d6:	2360      	movs	r3, #96	; 0x60
 80019d8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019de:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80019e2:	223c      	movs	r2, #60	; 0x3c
 80019e4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019ea:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	a805      	add	r0, sp, #20
 80019ee:	f7ff fab3 	bl	8000f58 <HAL_RCC_OscConfig>
 80019f2:	b988      	cbnz	r0, 8001a18 <SystemClock_Config+0x6e>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2303      	movs	r3, #3
 80019fa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a02:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a04:	2105      	movs	r1, #5
 8001a06:	4668      	mov	r0, sp
 8001a08:	f7ff fdf6 	bl	80015f8 <HAL_RCC_ClockConfig>
 8001a0c:	b930      	cbnz	r0, 8001a1c <SystemClock_Config+0x72>
  {
    Error_Handler();
  }
}
 8001a0e:	b017      	add	sp, #92	; 0x5c
 8001a10:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <SystemClock_Config+0x6c>
 8001a18:	b672      	cpsid	i
 8001a1a:	e7fe      	b.n	8001a1a <SystemClock_Config+0x70>
 8001a1c:	b672      	cpsid	i
 8001a1e:	e7fe      	b.n	8001a1e <SystemClock_Config+0x74>

08001a20 <main>:
{
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a24:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8001a28:	af02      	add	r7, sp, #8
  HAL_Init();
 8001a2a:	f7ff f8e7 	bl	8000bfc <HAL_Init>
  SystemClock_Config();
 8001a2e:	f7ff ffbc 	bl	80019aa <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <main+0x1f0>)
 8001a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3e:	f002 0201 	and.w	r2, r2, #1
 8001a42:	617a      	str	r2, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a48:	f042 0202 	orr.w	r2, r2, #2
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
  struct kalman_state testState = {0.1, 0.1, 5.0, 0.1, 0};
 8001a58:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 8001a5c:	4d6d      	ldr	r5, [pc, #436]	; (8001c14 <main+0x1f4>)
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	6023      	str	r3, [r4, #0]
  for (int i=0; i<5; i++) {
 8001a66:	2400      	movs	r4, #0
	  output[i] = kalman(&testState, (float)i);	// execute kalman filter with testState and i as measurement input
 8001a68:	ee07 4a90 	vmov	s15, r4
 8001a6c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8001a70:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8001a74:	f7fe fbc2 	bl	80001fc <kalman>
  for (int i=0; i<5; i++) {
 8001a78:	3401      	adds	r4, #1
 8001a7a:	2c05      	cmp	r4, #5
 8001a7c:	d1f4      	bne.n	8001a68 <main+0x48>
  const float test_array[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991, 9.5799256668};	// provided values
 8001a7e:	4c65      	ldr	r4, [pc, #404]	; (8001c14 <main+0x1f4>)
 8001a80:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001a84:	f104 0114 	add.w	r1, r4, #20
 8001a88:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a8c:	f001 f93a 	bl	8002d04 <memcpy>
  float asm_output[array_len];
 8001a90:	b0e6      	sub	sp, #408	; 0x198
 8001a92:	ad02      	add	r5, sp, #8
  float c_output[array_len];
 8001a94:	b0e6      	sub	sp, #408	; 0x198
 8001a96:	f10d 0b08 	add.w	fp, sp, #8
  float cmsis_output[array_len];
 8001a9a:	b0e6      	sub	sp, #408	; 0x198
 8001a9c:	f10d 0a08 	add.w	sl, sp, #8
  float c_sub_results[array_len];
 8001aa0:	b0e6      	sub	sp, #408	; 0x198
 8001aa2:	f10d 0808 	add.w	r8, sp, #8
  float c_corr_results[2*array_len-1];
 8001aa6:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001aaa:	f10d 0908 	add.w	r9, sp, #8
  float c_conv_results[2*array_len-1];
 8001aae:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001ab2:	ab02      	add	r3, sp, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
  float32_t cmsis_sub_results[array_len];
 8001ab6:	b0e6      	sub	sp, #408	; 0x198
 8001ab8:	ae02      	add	r6, sp, #8
  float32_t cmsis_corr_results[2*array_len-1];
 8001aba:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001abe:	a902      	add	r1, sp, #8
 8001ac0:	60b9      	str	r1, [r7, #8]
  float32_t cmsis_conv_results[2*array_len-1];
 8001ac2:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001ac6:	a802      	add	r0, sp, #8
 8001ac8:	6078      	str	r0, [r7, #4]
  struct kalman_state state_asm = {0.1, 0.5, 10.0, 0.1, 0};
 8001aca:	f107 0c44 	add.w	ip, r7, #68	; 0x44
 8001ace:	f504 7ed4 	add.w	lr, r4, #424	; 0x1a8
 8001ad2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ada:	f8de 3000 	ldr.w	r3, [lr]
 8001ade:	f8cc 3000 	str.w	r3, [ip]
  struct kalman_state state_c = {0.1, 0.5, 10.0, 0.1, 0};
 8001ae2:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001ae6:	f504 7ed4 	add.w	lr, r4, #424	; 0x1a8
 8001aea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001aee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001af2:	f8de 3000 	ldr.w	r3, [lr]
 8001af6:	f8cc 3000 	str.w	r3, [ip]
  struct kalman_state state_cmsis = {0.1, 0.5, 10.0, 0.1, 0};
 8001afa:	f107 0c1c 	add.w	ip, r7, #28
 8001afe:	f504 74d4 	add.w	r4, r4, #424	; 0x1a8
 8001b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	f8cc 3000 	str.w	r3, [ip]
  ITM_Port32(31) = 1;	// 1: Asm Kalman Filter
 8001b0e:	4c42      	ldr	r4, [pc, #264]	; (8001c18 <main+0x1f8>)
 8001b10:	2301      	movs	r3, #1
 8001b12:	6023      	str	r3, [r4, #0]
  Kalmanfilter(test_array, asm_output, &state_asm, array_len);
 8001b14:	2365      	movs	r3, #101	; 0x65
 8001b16:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001b20:	4660      	mov	r0, ip
 8001b22:	f7ff fea1 	bl	8001868 <Kalmanfilter>
  ITM_Port32(31) = 2;	// 2: C Kalman filter
 8001b26:	2302      	movs	r3, #2
 8001b28:	6023      	str	r3, [r4, #0]
  Kalmanfilter_c(test_array, c_output, &state_c, array_len);
 8001b2a:	2365      	movs	r3, #101	; 0x65
 8001b2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b30:	4659      	mov	r1, fp
 8001b32:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001b36:	4660      	mov	r0, ip
 8001b38:	f7ff feca 	bl	80018d0 <Kalmanfilter_c>
  ITM_Port32(31) = 14;
 8001b3c:	230e      	movs	r3, #14
 8001b3e:	6023      	str	r3, [r4, #0]
  Kalmanfilter_cmsis(test_array, cmsis_output, &state_cmsis, array_len);
 8001b40:	2365      	movs	r3, #101	; 0x65
 8001b42:	f107 021c 	add.w	r2, r7, #28
 8001b46:	4651      	mov	r1, sl
 8001b48:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001b4c:	4660      	mov	r0, ip
 8001b4e:	f7ff ff19 	bl	8001984 <Kalmanfilter_cmsis>
  ITM_Port32(31) = 3;	// 3: c difference
 8001b52:	2303      	movs	r3, #3
 8001b54:	6023      	str	r3, [r4, #0]
  vec_sub(test_array, asm_output, c_sub_results, array_len);
 8001b56:	2365      	movs	r3, #101	; 0x65
 8001b58:	4642      	mov	r2, r8
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001b60:	4660      	mov	r0, ip
 8001b62:	f000 f889 	bl	8001c78 <vec_sub>
  ITM_Port32(31) = 4;	// 4: c mean
 8001b66:	2304      	movs	r3, #4
 8001b68:	6023      	str	r3, [r4, #0]
  c_mean = vec_mean(c_sub_results, array_len);
 8001b6a:	2165      	movs	r1, #101	; 0x65
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	f000 f897 	bl	8001ca0 <vec_mean>
  ITM_Port32(31) = 5;	// 5: c standard deviation
 8001b72:	2305      	movs	r3, #5
 8001b74:	6023      	str	r3, [r4, #0]
  c_sd = vec_sd(c_sub_results, array_len);
 8001b76:	2165      	movs	r1, #101	; 0x65
 8001b78:	4640      	mov	r0, r8
 8001b7a:	f000 f8ab 	bl	8001cd4 <vec_sd>
  ITM_Port32(31) = 6;	// 6: c correlation
 8001b7e:	2306      	movs	r3, #6
 8001b80:	6023      	str	r3, [r4, #0]
  vec_correlation(test_array, asm_output, c_corr_results, array_len);
 8001b82:	2365      	movs	r3, #101	; 0x65
 8001b84:	464a      	mov	r2, r9
 8001b86:	4629      	mov	r1, r5
 8001b88:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001b8c:	4660      	mov	r0, ip
 8001b8e:	f000 f8d1 	bl	8001d34 <vec_correlation>
  ITM_Port32(31) = 7;	// 7: c convolution
 8001b92:	2307      	movs	r3, #7
 8001b94:	6023      	str	r3, [r4, #0]
  vec_convolution(test_array, asm_output, c_conv_results, array_len);
 8001b96:	2365      	movs	r3, #101	; 0x65
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001ba0:	4660      	mov	r0, ip
 8001ba2:	f000 f8fe 	bl	8001da2 <vec_convolution>
  ITM_Port32(31) = 8;	// 8: cmsis difference
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	6023      	str	r3, [r4, #0]
  arm_sub_f32(test_array, asm_output, cmsis_sub_results, (uint32_t)array_len);
 8001baa:	2365      	movs	r3, #101	; 0x65
 8001bac:	4632      	mov	r2, r6
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 8001bb4:	4660      	mov	r0, ip
 8001bb6:	f000 ff6d 	bl	8002a94 <arm_sub_f32>
  ITM_Port32(31) = 9;	// 9: cmsis mean
 8001bba:	2309      	movs	r3, #9
 8001bbc:	6023      	str	r3, [r4, #0]
  arm_mean_f32(cmsis_sub_results, (uint32_t)array_len, &cmsis_mean);
 8001bbe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001bc2:	2165      	movs	r1, #101	; 0x65
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f000 f9d7 	bl	8001f78 <arm_mean_f32>
  ITM_Port32(31) = 10;	// 10: cmsis standard deviation
 8001bca:	230a      	movs	r3, #10
 8001bcc:	6023      	str	r3, [r4, #0]
  arm_std_f32(cmsis_sub_results, (uint32_t)array_len, &cmsis_sd);
 8001bce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001bd2:	2165      	movs	r1, #101	; 0x65
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f000 f945 	bl	8001e64 <arm_std_f32>
  ITM_Port32(31) = 11;	// 11: cmsis correlation
 8001bda:	230b      	movs	r3, #11
 8001bdc:	6023      	str	r3, [r4, #0]
  arm_correlate_f32(test_array, (uint32_t)array_len, asm_output, (uint32_t)array_len, cmsis_corr_results);
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	9100      	str	r1, [sp, #0]
 8001be2:	2365      	movs	r3, #101	; 0x65
 8001be4:	462a      	mov	r2, r5
 8001be6:	4619      	mov	r1, r3
 8001be8:	f107 0660 	add.w	r6, r7, #96	; 0x60
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 fa01 	bl	8001ff4 <arm_correlate_f32>
  ITM_Port32(31) = 12;	// 12: cmsis convolution
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	6023      	str	r3, [r4, #0]
  arm_conv_f32(test_array, (uint32_t)array_len, asm_output, (uint32_t)array_len, cmsis_conv_results);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	9000      	str	r0, [sp, #0]
 8001bfa:	2365      	movs	r3, #101	; 0x65
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4630      	mov	r0, r6
 8001c02:	f000 fcad 	bl	8002560 <arm_conv_f32>
  ITM_Port32(31) = 13;
 8001c06:	230d      	movs	r3, #13
 8001c08:	6023      	str	r3, [r4, #0]
	  __asm__ ("nop");
 8001c0a:	bf00      	nop
  while (1)
 8001c0c:	e7fd      	b.n	8001c0a <main+0x1ea>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08002f6c 	.word	0x08002f6c
 8001c18:	e000007c 	.word	0xe000007c

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_MspInit+0x2c>)
 8001c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
 8001c28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c2a:	f002 0201 	and.w	r2, r2, #1
 8001c2e:	9200      	str	r2, [sp, #0]
 8001c30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c38:	659a      	str	r2, [r3, #88]	; 0x58
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c44:	b002      	add	sp, #8
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000

08001c4c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler>

08001c4e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler>

08001c50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler>

08001c52 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler>

08001c54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler>

08001c56 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c56:	4770      	bx	lr

08001c58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5e:	f7fe ffdd 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c62:	bd08      	pop	{r3, pc}

08001c64 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <SystemInit+0x10>)
 8001c66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <vec_sub>:

/*
 * calculate the difference between two vectors without using cmsis
 */
void vec_sub(float* op1, float* op2, float* result, int length) {
	for (int i=0; i<length; i++) {
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	dd10      	ble.n	8001c9e <vec_sub+0x26>
void vec_sub(float* op1, float* op2, float* result, int length) {
 8001c7c:	b410      	push	{r4}
 8001c7e:	4604      	mov	r4, r0
 8001c80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		result[i] = op1[i] - op2[i];
 8001c84:	ecf4 7a01 	vldmia	r4!, {s15}
 8001c88:	ecb1 7a01 	vldmia	r1!, {s14}
 8001c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c90:	ece2 7a01 	vstmia	r2!, {s15}
	for (int i=0; i<length; i++) {
 8001c94:	429c      	cmp	r4, r3
 8001c96:	d1f5      	bne.n	8001c84 <vec_sub+0xc>
	}
}
 8001c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	4770      	bx	lr

08001ca0 <vec_mean>:
 * calculate the mean of a vector input without using cmsis
 */
float vec_mean(float* input, int length) {
	float sum = 0;

	for (int i=0; i<length; i++) {
 8001ca0:	2900      	cmp	r1, #0
 8001ca2:	dd11      	ble.n	8001cc8 <vec_mean+0x28>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	float sum = 0;
 8001caa:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001cd0 <vec_mean+0x30>
		sum += input[i];
 8001cae:	ecb3 7a01 	vldmia	r3!, {s14}
 8001cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i=0; i<length; i++) {
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	d1f9      	bne.n	8001cae <vec_mean+0xe>
	}

	return sum/length;
 8001cba:	ee07 1a10 	vmov	s14, r1
 8001cbe:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 8001cc2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001cc6:	4770      	bx	lr
	float sum = 0;
 8001cc8:	eddf 7a01 	vldr	s15, [pc, #4]	; 8001cd0 <vec_mean+0x30>
 8001ccc:	e7f5      	b.n	8001cba <vec_mean+0x1a>
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000

08001cd4 <vec_sd>:

/*
 * calculate the standard deviation of a vector without using cmsis
 */
float vec_sd(float* input, int length) {
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460d      	mov	r5, r1
	float mean = vec_mean(input, length);
 8001cda:	f7ff ffe1 	bl	8001ca0 <vec_mean>
	float var = 0;

	for (int i=0; i<length; i++) {
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	dd23      	ble.n	8001d2a <vec_sd+0x56>
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
	float var = 0;
 8001ce8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d30 <vec_sd+0x5c>
		var += powf(input[i]-mean, 2);
 8001cec:	ecf3 7a01 	vldmia	r3!, {s15}
 8001cf0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001cf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
	for (int i=0; i<length; i++) {
 8001cfc:	4283      	cmp	r3, r0
 8001cfe:	d1f5      	bne.n	8001cec <vec_sd+0x18>
	}

	return sqrt(var/length);
 8001d00:	ee07 5a90 	vmov	s15, r5
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001d0c:	ee17 0a90 	vmov	r0, s15
 8001d10:	f7fe fbf4 	bl	80004fc <__aeabi_f2d>
 8001d14:	ec41 0b10 	vmov	d0, r0, r1
 8001d18:	f001 f80a 	bl	8002d30 <sqrt>
 8001d1c:	ec51 0b10 	vmov	r0, r1, d0
 8001d20:	f7fe fef4 	bl	8000b0c <__aeabi_d2f>
}
 8001d24:	ee00 0a10 	vmov	s0, r0
 8001d28:	bd38      	pop	{r3, r4, r5, pc}
	float var = 0;
 8001d2a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8001d30 <vec_sd+0x5c>
 8001d2e:	e7e7      	b.n	8001d00 <vec_sd+0x2c>
 8001d30:	00000000 	.word	0x00000000

08001d34 <vec_correlation>:

/*
 * calculate the correlation between two vectors without using cmsis
 */
void vec_correlation(float* in1, float* in2, float* result, int length) {
 8001d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int n = 0; n < 2*length - 1; n++) {
 8001d38:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001d3c:	f1b9 0f01 	cmp.w	r9, #1
 8001d40:	dd2d      	ble.n	8001d9e <vec_correlation+0x6a>
 8001d42:	4615      	mov	r5, r2
 8001d44:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8001d48:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001d4c:	3a04      	subs	r2, #4
 8001d4e:	eb02 0989 	add.w	r9, r2, r9, lsl #2
		result[n] = 0;
 8001d52:	f04f 0a00 	mov.w	sl, #0
		for (int k = 0; k < length; k++) {
			result[n] += (k < length ? in1[k] : 0) * ((length-1-n+k) < length ? in2[(length-1-n+k)] : 0);
 8001d56:	46d6      	mov	lr, sl
 8001d58:	e004      	b.n	8001d64 <vec_correlation+0x30>
	for (int n = 0; n < 2*length - 1; n++) {
 8001d5a:	3e01      	subs	r6, #1
 8001d5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001d60:	454d      	cmp	r5, r9
 8001d62:	d01c      	beq.n	8001d9e <vec_correlation+0x6a>
		result[n] = 0;
 8001d64:	f845 ab04 	str.w	sl, [r5], #4
		for (int k = 0; k < length; k++) {
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	ddf6      	ble.n	8001d5a <vec_correlation+0x26>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	462f      	mov	r7, r5
			result[n] += (k < length ? in1[k] : 0) * ((length-1-n+k) < length ? in2[(length-1-n+k)] : 0);
 8001d72:	ed15 7a01 	vldr	s14, [r5, #-4]
 8001d76:	ecf4 6a01 	vldmia	r4!, {s13}
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	bfc6      	itte	gt
 8001d7e:	eb01 0c82 	addgt.w	ip, r1, r2, lsl #2
 8001d82:	eddc 7a00 	vldrgt	s15, [ip]
 8001d86:	ee07 ea90 	vmovle	s15, lr
 8001d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d92:	ed47 7a01 	vstr	s15, [r7, #-4]
		for (int k = 0; k < length; k++) {
 8001d96:	3201      	adds	r2, #1
 8001d98:	42b2      	cmp	r2, r6
 8001d9a:	d1ea      	bne.n	8001d72 <vec_correlation+0x3e>
 8001d9c:	e7dd      	b.n	8001d5a <vec_correlation+0x26>
		}
	}
}
 8001d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001da2 <vec_convolution>:

/*
 * calculate the convolution between two vectore without using cmsis
 */
void vec_convolution(float* in1, float* in2, float* result, int length) {
 8001da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int n = 0; n < 2*length - 1; n++) {
 8001da6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001daa:	f1b8 0f01 	cmp.w	r8, #1
 8001dae:	dd2d      	ble.n	8001e0c <vec_convolution+0x6a>
 8001db0:	4614      	mov	r4, r2
 8001db2:	3a04      	subs	r2, #4
 8001db4:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8001db8:	4682      	mov	sl, r0
 8001dba:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8001dbe:	f04f 0e00 	mov.w	lr, #0
		result[n] = 0;
 8001dc2:	f04f 0900 	mov.w	r9, #0
		for (int k = 0; k < length; k++) {
			result[n] += (k < length ? in1[k] : 0) * (n - k < length ? in2[n - k] : 0);
 8001dc6:	46cc      	mov	ip, r9
 8001dc8:	e003      	b.n	8001dd2 <vec_convolution+0x30>
	for (int n = 0; n < 2*length - 1; n++) {
 8001dca:	f10e 0e01 	add.w	lr, lr, #1
 8001dce:	4544      	cmp	r4, r8
 8001dd0:	d01c      	beq.n	8001e0c <vec_convolution+0x6a>
		result[n] = 0;
 8001dd2:	f844 9b04 	str.w	r9, [r4], #4
		for (int k = 0; k < length; k++) {
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	ddf7      	ble.n	8001dca <vec_convolution+0x28>
 8001dda:	4672      	mov	r2, lr
 8001ddc:	4650      	mov	r0, sl
 8001dde:	4625      	mov	r5, r4
			result[n] += (k < length ? in1[k] : 0) * (n - k < length ? in2[n - k] : 0);
 8001de0:	ed14 7a01 	vldr	s14, [r4, #-4]
 8001de4:	ecf0 6a01 	vldmia	r0!, {s13}
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bfc6      	itte	gt
 8001dec:	eb01 0782 	addgt.w	r7, r1, r2, lsl #2
 8001df0:	edd7 7a00 	vldrgt	s15, [r7]
 8001df4:	ee07 ca90 	vmovle	s15, ip
 8001df8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e00:	ed45 7a01 	vstr	s15, [r5, #-4]
		for (int k = 0; k < length; k++) {
 8001e04:	3a01      	subs	r2, #1
 8001e06:	42b0      	cmp	r0, r6
 8001e08:	d1ea      	bne.n	8001de0 <vec_convolution+0x3e>
 8001e0a:	e7de      	b.n	8001dca <vec_convolution+0x28>
		}
	}
}
 8001e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001e10 <Reset_Handler>:
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopForever+0x2>
 8001e14:	f7ff ff26 	bl	8001c64 <SystemInit>
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <LoopForever+0x6>)
 8001e1a:	490d      	ldr	r1, [pc, #52]	; (8001e50 <LoopForever+0xa>)
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <LoopForever+0xe>)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:
 8001e22:	58d4      	ldr	r4, [r2, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:
 8001e28:	18c4      	adds	r4, r0, r3
 8001e2a:	428c      	cmp	r4, r1
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <LoopForever+0x12>)
 8001e30:	4c0a      	ldr	r4, [pc, #40]	; (8001e5c <LoopForever+0x16>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:
 8001e3a:	42a2      	cmp	r2, r4
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>
 8001e3e:	f000 ff3d 	bl	8002cbc <__libc_init_array>
 8001e42:	f7ff fded 	bl	8001a20 <main>

08001e46 <LoopForever>:
 8001e46:	e7fe      	b.n	8001e46 <LoopForever>
 8001e48:	200a0000 	.word	0x200a0000
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000074 	.word	0x20000074
 8001e54:	08003170 	.word	0x08003170
 8001e58:	20000074 	.word	0x20000074
 8001e5c:	20000094 	.word	0x20000094

08001e60 <ADC1_IRQHandler>:
 8001e60:	e7fe      	b.n	8001e60 <ADC1_IRQHandler>
	...

08001e64 <arm_std_f32>:
 8001e64:	2901      	cmp	r1, #1
 8001e66:	d97d      	bls.n	8001f64 <arm_std_f32+0x100>
 8001e68:	b530      	push	{r4, r5, lr}
 8001e6a:	ed2d 8b02 	vpush	{d8}
 8001e6e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001f74 <arm_std_f32+0x110>
 8001e72:	088d      	lsrs	r5, r1, #2
 8001e74:	b083      	sub	sp, #12
 8001e76:	eef0 4a47 	vmov.f32	s9, s14
 8001e7a:	d028      	beq.n	8001ece <arm_std_f32+0x6a>
 8001e7c:	f100 0310 	add.w	r3, r0, #16
 8001e80:	462c      	mov	r4, r5
 8001e82:	ed53 7a04 	vldr	s15, [r3, #-16]
 8001e86:	ed13 5a03 	vldr	s10, [r3, #-12]
 8001e8a:	ed53 5a02 	vldr	s11, [r3, #-8]
 8001e8e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8001e92:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001e96:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8001e9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001e9e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8001ea2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8001ea6:	ee76 6a87 	vadd.f32	s13, s13, s14
 8001eaa:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8001eae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001eb2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001eb6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8001eba:	3c01      	subs	r4, #1
 8001ebc:	ee77 4a86 	vadd.f32	s9, s15, s12
 8001ec0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001ec4:	f103 0310 	add.w	r3, r3, #16
 8001ec8:	d1db      	bne.n	8001e82 <arm_std_f32+0x1e>
 8001eca:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001ece:	f011 0303 	ands.w	r3, r1, #3
 8001ed2:	d01b      	beq.n	8001f0c <arm_std_f32+0xa8>
 8001ed4:	edd0 7a00 	vldr	s15, [r0]
 8001ed8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001edc:	3b01      	subs	r3, #1
 8001ede:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001ee2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001ee6:	d011      	beq.n	8001f0c <arm_std_f32+0xa8>
 8001ee8:	edd0 7a01 	vldr	s15, [r0, #4]
 8001eec:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001ef6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001efa:	d007      	beq.n	8001f0c <arm_std_f32+0xa8>
 8001efc:	edd0 7a02 	vldr	s15, [r0, #8]
 8001f00:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001f04:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001f08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001f0c:	ee07 1a90 	vmov	s15, r1
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f18:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8001f1c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8001f20:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8001f24:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8001f28:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001f2c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001f30:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001f34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	db0c      	blt.n	8001f58 <arm_std_f32+0xf4>
 8001f3e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8001f4a:	d40e      	bmi.n	8001f6a <arm_std_f32+0x106>
 8001f4c:	ed82 8a00 	vstr	s16, [r2]
 8001f50:	b003      	add	sp, #12
 8001f52:	ecbd 8b02 	vpop	{d8}
 8001f56:	bd30      	pop	{r4, r5, pc}
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	b003      	add	sp, #12
 8001f5e:	ecbd 8b02 	vpop	{d8}
 8001f62:	bd30      	pop	{r4, r5, pc}
 8001f64:	2300      	movs	r3, #0
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4770      	bx	lr
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	f000 ff14 	bl	8002d98 <sqrtf>
 8001f70:	9a01      	ldr	r2, [sp, #4]
 8001f72:	e7eb      	b.n	8001f4c <arm_std_f32+0xe8>
 8001f74:	00000000 	.word	0x00000000

08001f78 <arm_mean_f32>:
 8001f78:	b430      	push	{r4, r5}
 8001f7a:	088d      	lsrs	r5, r1, #2
 8001f7c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001ff0 <arm_mean_f32+0x78>
 8001f80:	d018      	beq.n	8001fb4 <arm_mean_f32+0x3c>
 8001f82:	f100 0310 	add.w	r3, r0, #16
 8001f86:	462c      	mov	r4, r5
 8001f88:	ed53 5a04 	vldr	s11, [r3, #-16]
 8001f8c:	ed13 6a03 	vldr	s12, [r3, #-12]
 8001f90:	ed53 6a02 	vldr	s13, [r3, #-8]
 8001f94:	ed13 7a01 	vldr	s14, [r3, #-4]
 8001f98:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001f9c:	3c01      	subs	r4, #1
 8001f9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001fa2:	f103 0310 	add.w	r3, r3, #16
 8001fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fae:	d1eb      	bne.n	8001f88 <arm_mean_f32+0x10>
 8001fb0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001fb4:	f011 0303 	ands.w	r3, r1, #3
 8001fb8:	d00f      	beq.n	8001fda <arm_mean_f32+0x62>
 8001fba:	ed90 7a00 	vldr	s14, [r0]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc4:	d009      	beq.n	8001fda <arm_mean_f32+0x62>
 8001fc6:	ed90 7a01 	vldr	s14, [r0, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fd0:	bf1c      	itt	ne
 8001fd2:	ed90 7a02 	vldrne	s14, [r0, #8]
 8001fd6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8001fda:	ee07 1a10 	vmov	s14, r1
 8001fde:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001fe2:	bc30      	pop	{r4, r5}
 8001fe4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fe8:	edc2 6a00 	vstr	s13, [r2]
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	00000000 	.word	0x00000000

08001ff4 <arm_correlate_f32>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	b08d      	sub	sp, #52	; 0x34
 8001ffc:	f0c0 824c 	bcc.w	8002498 <arm_correlate_f32+0x4a4>
 8002000:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002002:	eba1 0c03 	sub.w	ip, r1, r3
 8002006:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800200a:	f04f 0e04 	mov.w	lr, #4
 800200e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002012:	3101      	adds	r1, #1
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	3c01      	subs	r4, #1
 8002018:	1e5e      	subs	r6, r3, #1
 800201a:	9102      	str	r1, [sp, #8]
 800201c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8002020:	f000 8294 	beq.w	800254c <arm_correlate_f32+0x558>
 8002024:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002174 <arm_correlate_f32+0x180>
 8002028:	f1a1 0804 	sub.w	r8, r1, #4
 800202c:	46e1      	mov	r9, ip
 800202e:	4605      	mov	r5, r0
 8002030:	2401      	movs	r4, #1
 8002032:	f014 0703 	ands.w	r7, r4, #3
 8002036:	d01b      	beq.n	8002070 <arm_correlate_f32+0x7c>
 8002038:	ed91 7a00 	vldr	s14, [r1]
 800203c:	edd5 6a00 	vldr	s13, [r5]
 8002040:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002044:	3f01      	subs	r7, #1
 8002046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800204a:	d011      	beq.n	8002070 <arm_correlate_f32+0x7c>
 800204c:	ed91 7a01 	vldr	s14, [r1, #4]
 8002050:	edd5 6a01 	vldr	s13, [r5, #4]
 8002054:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002058:	2f01      	cmp	r7, #1
 800205a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800205e:	d007      	beq.n	8002070 <arm_correlate_f32+0x7c>
 8002060:	ed95 7a02 	vldr	s14, [r5, #8]
 8002064:	edd1 6a02 	vldr	s13, [r1, #8]
 8002068:	ee27 7a26 	vmul.f32	s14, s14, s13
 800206c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002070:	1c67      	adds	r7, r4, #1
 8002072:	42bb      	cmp	r3, r7
 8002074:	edc9 7a00 	vstr	s15, [r9]
 8002078:	4641      	mov	r1, r8
 800207a:	44f1      	add	r9, lr
 800207c:	d03a      	beq.n	80020f4 <arm_correlate_f32+0x100>
 800207e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8002082:	f000 8267 	beq.w	8002554 <arm_correlate_f32+0x560>
 8002086:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800208a:	f100 0110 	add.w	r1, r0, #16
 800208e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002174 <arm_correlate_f32+0x180>
 8002092:	eb01 050a 	add.w	r5, r1, sl
 8002096:	f108 0410 	add.w	r4, r8, #16
 800209a:	ed11 7a04 	vldr	s14, [r1, #-16]
 800209e:	ed54 3a04 	vldr	s7, [r4, #-16]
 80020a2:	ed11 6a03 	vldr	s12, [r1, #-12]
 80020a6:	ed14 4a03 	vldr	s8, [r4, #-12]
 80020aa:	ed51 6a02 	vldr	s13, [r1, #-8]
 80020ae:	ed54 4a02 	vldr	s9, [r4, #-8]
 80020b2:	ed51 5a01 	vldr	s11, [r1, #-4]
 80020b6:	ed14 5a01 	vldr	s10, [r4, #-4]
 80020ba:	ee27 7a23 	vmul.f32	s14, s14, s7
 80020be:	ee26 6a04 	vmul.f32	s12, s12, s8
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80020ca:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020ce:	ee65 6a85 	vmul.f32	s13, s11, s10
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	3110      	adds	r1, #16
 80020d8:	428d      	cmp	r5, r1
 80020da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020de:	f104 0410 	add.w	r4, r4, #16
 80020e2:	d1da      	bne.n	800209a <arm_correlate_f32+0xa6>
 80020e4:	eb00 050a 	add.w	r5, r0, sl
 80020e8:	eb08 010a 	add.w	r1, r8, sl
 80020ec:	f1a8 0804 	sub.w	r8, r8, #4
 80020f0:	463c      	mov	r4, r7
 80020f2:	e79e      	b.n	8002032 <arm_correlate_f32+0x3e>
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	fb0e cc04 	mla	ip, lr, r4, ip
 80020fa:	f240 81dd 	bls.w	80024b8 <arm_correlate_f32+0x4c4>
 80020fe:	9b02      	ldr	r3, [sp, #8]
 8002100:	0899      	lsrs	r1, r3, #2
 8002102:	9103      	str	r1, [sp, #12]
 8002104:	f000 8220 	beq.w	8002548 <arm_correlate_f32+0x554>
 8002108:	08bb      	lsrs	r3, r7, #2
 800210a:	f007 0403 	and.w	r4, r7, #3
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	f103 0b0c 	add.w	fp, r3, #12
 8002116:	18d5      	adds	r5, r2, r3
 8002118:	1e63      	subs	r3, r4, #1
 800211a:	0109      	lsls	r1, r1, #4
 800211c:	9306      	str	r3, [sp, #24]
 800211e:	f100 080c 	add.w	r8, r0, #12
 8002122:	9401      	str	r4, [sp, #4]
 8002124:	9104      	str	r1, [sp, #16]
 8002126:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800212a:	4441      	add	r1, r8
 800212c:	f102 0310 	add.w	r3, r2, #16
 8002130:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8002134:	9e06      	ldr	r6, [sp, #24]
 8002136:	9405      	str	r4, [sp, #20]
 8002138:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800213c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8002140:	46e1      	mov	r9, ip
 8002142:	4483      	add	fp, r0
 8002144:	460f      	mov	r7, r1
 8002146:	920b      	str	r2, [sp, #44]	; 0x2c
 8002148:	469c      	mov	ip, r3
 800214a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002174 <arm_correlate_f32+0x180>
 800214e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8002152:	ed18 2a02 	vldr	s4, [r8, #-8]
 8002156:	ed58 2a01 	vldr	s5, [r8, #-4]
 800215a:	ed98 0a00 	vldr	s0, [r8]
 800215e:	9900      	ldr	r1, [sp, #0]
 8002160:	eef0 5a46 	vmov.f32	s11, s12
 8002164:	eeb0 5a46 	vmov.f32	s10, s12
 8002168:	eef0 4a46 	vmov.f32	s9, s12
 800216c:	4663      	mov	r3, ip
 800216e:	4642      	mov	r2, r8
 8002170:	e005      	b.n	800217e <arm_correlate_f32+0x18a>
 8002172:	bf00      	nop
 8002174:	00000000 	.word	0x00000000
 8002178:	ed90 0a04 	vldr	s0, [r0, #16]
 800217c:	3210      	adds	r2, #16
 800217e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002182:	ed13 7a03 	vldr	s14, [r3, #-12]
 8002186:	ed53 7a02 	vldr	s15, [r3, #-8]
 800218a:	ed13 1a01 	vldr	s2, [r3, #-4]
 800218e:	ee62 3a26 	vmul.f32	s7, s4, s13
 8002192:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8002196:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800219a:	edd2 1a01 	vldr	s3, [r2, #4]
 800219e:	ee66 6a80 	vmul.f32	s13, s13, s0
 80021a2:	ee22 3a07 	vmul.f32	s6, s4, s14
 80021a6:	ee33 5a85 	vadd.f32	s10, s7, s10
 80021aa:	ee74 5a25 	vadd.f32	s11, s8, s11
 80021ae:	ee62 3a87 	vmul.f32	s7, s5, s14
 80021b2:	ee20 4a07 	vmul.f32	s8, s0, s14
 80021b6:	ee70 4aa4 	vadd.f32	s9, s1, s9
 80021ba:	ee36 6a86 	vadd.f32	s12, s13, s12
 80021be:	ed92 2a02 	vldr	s4, [r2, #8]
 80021c2:	ee27 7a21 	vmul.f32	s14, s14, s3
 80021c6:	ee73 3a85 	vadd.f32	s7, s7, s10
 80021ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80021ce:	ee20 5a27 	vmul.f32	s10, s0, s15
 80021d2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80021d6:	ee34 4a25 	vadd.f32	s8, s8, s11
 80021da:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80021de:	ee61 5aa7 	vmul.f32	s11, s3, s15
 80021e2:	edd2 2a03 	vldr	s5, [r2, #12]
 80021e6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80021ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80021ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021f2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80021f6:	ee20 0a01 	vmul.f32	s0, s0, s2
 80021fa:	ee61 3a81 	vmul.f32	s7, s3, s2
 80021fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8002202:	ee22 7a01 	vmul.f32	s14, s4, s2
 8002206:	ee21 6a22 	vmul.f32	s12, s2, s5
 800220a:	3901      	subs	r1, #1
 800220c:	f103 0310 	add.w	r3, r3, #16
 8002210:	ee70 4a24 	vadd.f32	s9, s0, s9
 8002214:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002218:	ee77 5a25 	vadd.f32	s11, s14, s11
 800221c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002220:	4610      	mov	r0, r2
 8002222:	d1a9      	bne.n	8002178 <arm_correlate_f32+0x184>
 8002224:	9b01      	ldr	r3, [sp, #4]
 8002226:	b3f3      	cbz	r3, 80022a6 <arm_correlate_f32+0x2b2>
 8002228:	edd5 7a00 	vldr	s15, [r5]
 800222c:	ed9b 4a00 	vldr	s8, [fp]
 8002230:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8002234:	ee62 3a27 	vmul.f32	s7, s4, s15
 8002238:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800223c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002240:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8002244:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002248:	ee75 5a87 	vadd.f32	s11, s11, s14
 800224c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002250:	b34e      	cbz	r6, 80022a6 <arm_correlate_f32+0x2b2>
 8002252:	edd5 7a01 	vldr	s15, [r5, #4]
 8002256:	eddb 6a01 	vldr	s13, [fp, #4]
 800225a:	ee22 7a27 	vmul.f32	s14, s4, s15
 800225e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8002262:	ee67 3a84 	vmul.f32	s7, s15, s8
 8002266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226a:	2e01      	cmp	r6, #1
 800226c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8002270:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002274:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8002278:	ee36 6a27 	vadd.f32	s12, s12, s15
 800227c:	d013      	beq.n	80022a6 <arm_correlate_f32+0x2b2>
 800227e:	ed95 7a02 	vldr	s14, [r5, #8]
 8002282:	eddb 3a02 	vldr	s7, [fp, #8]
 8002286:	ee62 7a87 	vmul.f32	s15, s5, s14
 800228a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800228e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002292:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002296:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800229a:	ee35 5a04 	vadd.f32	s10, s10, s8
 800229e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80022a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80022a6:	f108 0810 	add.w	r8, r8, #16
 80022aa:	eb09 020e 	add.w	r2, r9, lr
 80022ae:	eb0a 030e 	add.w	r3, sl, lr
 80022b2:	4547      	cmp	r7, r8
 80022b4:	edc9 4a00 	vstr	s9, [r9]
 80022b8:	f10b 0b10 	add.w	fp, fp, #16
 80022bc:	ed82 5a00 	vstr	s10, [r2]
 80022c0:	44a1      	add	r9, r4
 80022c2:	edca 5a00 	vstr	s11, [sl]
 80022c6:	ed83 6a00 	vstr	s12, [r3]
 80022ca:	44a2      	add	sl, r4
 80022cc:	f47f af3d 	bne.w	800214a <arm_correlate_f32+0x156>
 80022d0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 80022d4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	9c05      	ldr	r4, [sp, #20]
 80022dc:	9904      	ldr	r1, [sp, #16]
 80022de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80022e0:	fb04 cc03 	mla	ip, r4, r3, ip
 80022e4:	4401      	add	r1, r0
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	460d      	mov	r5, r1
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	9b02      	ldr	r3, [sp, #8]
 80022ee:	f013 0303 	ands.w	r3, r3, #3
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	d071      	beq.n	80023da <arm_correlate_f32+0x3e6>
 80022f6:	9903      	ldr	r1, [sp, #12]
 80022f8:	9205      	str	r2, [sp, #20]
 80022fa:	f007 0403 	and.w	r4, r7, #3
 80022fe:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8002302:	1c4f      	adds	r7, r1, #1
 8002304:	1859      	adds	r1, r3, r1
 8002306:	1d03      	adds	r3, r0, #4
 8002308:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800230c:	9400      	str	r4, [sp, #0]
 800230e:	f102 0110 	add.w	r1, r2, #16
 8002312:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8002316:	3c01      	subs	r4, #1
 8002318:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800231c:	eb02 090a 	add.w	r9, r2, sl
 8002320:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002324:	46e0      	mov	r8, ip
 8002326:	4618      	mov	r0, r3
 8002328:	460e      	mov	r6, r1
 800232a:	4622      	mov	r2, r4
 800232c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8002174 <arm_correlate_f32+0x180>
 8002330:	f105 0110 	add.w	r1, r5, #16
 8002334:	4633      	mov	r3, r6
 8002336:	465c      	mov	r4, fp
 8002338:	ed11 7a04 	vldr	s14, [r1, #-16]
 800233c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002340:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002344:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002348:	ed51 6a02 	vldr	s13, [r1, #-8]
 800234c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002350:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002354:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002358:	ee27 7a23 	vmul.f32	s14, s14, s7
 800235c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002368:	ee76 7a27 	vadd.f32	s15, s12, s15
 800236c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	3c01      	subs	r4, #1
 8002376:	f101 0110 	add.w	r1, r1, #16
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	f103 0310 	add.w	r3, r3, #16
 8002382:	d1d9      	bne.n	8002338 <arm_correlate_f32+0x344>
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4455      	add	r5, sl
 8002388:	b1d3      	cbz	r3, 80023c0 <arm_correlate_f32+0x3cc>
 800238a:	ed99 7a00 	vldr	s14, [r9]
 800238e:	edd5 6a00 	vldr	s13, [r5]
 8002392:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800239a:	b18a      	cbz	r2, 80023c0 <arm_correlate_f32+0x3cc>
 800239c:	ed99 7a01 	vldr	s14, [r9, #4]
 80023a0:	edd5 6a01 	vldr	s13, [r5, #4]
 80023a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023a8:	2a01      	cmp	r2, #1
 80023aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ae:	d007      	beq.n	80023c0 <arm_correlate_f32+0x3cc>
 80023b0:	ed95 7a02 	vldr	s14, [r5, #8]
 80023b4:	edd9 6a02 	vldr	s13, [r9, #8]
 80023b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023c0:	463d      	mov	r5, r7
 80023c2:	3704      	adds	r7, #4
 80023c4:	42b8      	cmp	r0, r7
 80023c6:	edc8 7a00 	vstr	s15, [r8]
 80023ca:	44f0      	add	r8, lr
 80023cc:	d1ae      	bne.n	800232c <arm_correlate_f32+0x338>
 80023ce:	9b01      	ldr	r3, [sp, #4]
 80023d0:	9a05      	ldr	r2, [sp, #20]
 80023d2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 80023d6:	fb0e cc03 	mla	ip, lr, r3, ip
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80023e0:	08b5      	lsrs	r5, r6, #2
 80023e2:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8002174 <arm_correlate_f32+0x180>
 80023e6:	f000 80ac 	beq.w	8002542 <arm_correlate_f32+0x54e>
 80023ea:	f100 0110 	add.w	r1, r0, #16
 80023ee:	f102 0310 	add.w	r3, r2, #16
 80023f2:	462c      	mov	r4, r5
 80023f4:	ed51 6a04 	vldr	s13, [r1, #-16]
 80023f8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80023fc:	ed11 7a03 	vldr	s14, [r1, #-12]
 8002400:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002404:	ed51 7a02 	vldr	s15, [r1, #-8]
 8002408:	ed53 4a02 	vldr	s9, [r3, #-8]
 800240c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8002410:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002414:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002418:	ee27 7a04 	vmul.f32	s14, s14, s8
 800241c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002420:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002424:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002428:	ee66 6a05 	vmul.f32	s13, s12, s10
 800242c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002430:	3c01      	subs	r4, #1
 8002432:	f101 0110 	add.w	r1, r1, #16
 8002436:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800243a:	f103 0310 	add.w	r3, r3, #16
 800243e:	d1d9      	bne.n	80023f4 <arm_correlate_f32+0x400>
 8002440:	012d      	lsls	r5, r5, #4
 8002442:	1941      	adds	r1, r0, r5
 8002444:	4415      	add	r5, r2
 8002446:	f016 0303 	ands.w	r3, r6, #3
 800244a:	d01b      	beq.n	8002484 <arm_correlate_f32+0x490>
 800244c:	edd5 7a00 	vldr	s15, [r5]
 8002450:	ed91 7a00 	vldr	s14, [r1]
 8002454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002458:	3b01      	subs	r3, #1
 800245a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800245e:	d011      	beq.n	8002484 <arm_correlate_f32+0x490>
 8002460:	edd5 7a01 	vldr	s15, [r5, #4]
 8002464:	ed91 7a01 	vldr	s14, [r1, #4]
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	2b01      	cmp	r3, #1
 800246e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002472:	d007      	beq.n	8002484 <arm_correlate_f32+0x490>
 8002474:	edd1 7a02 	vldr	s15, [r1, #8]
 8002478:	ed95 7a02 	vldr	s14, [r5, #8]
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002484:	3e01      	subs	r6, #1
 8002486:	edcc 5a00 	vstr	s11, [ip]
 800248a:	f100 0004 	add.w	r0, r0, #4
 800248e:	44f4      	add	ip, lr
 8002490:	d1a6      	bne.n	80023e0 <arm_correlate_f32+0x3ec>
 8002492:	b00d      	add	sp, #52	; 0x34
 8002494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002498:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800249c:	4606      	mov	r6, r0
 800249e:	3c02      	subs	r4, #2
 80024a0:	4610      	mov	r0, r2
 80024a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80024a4:	440c      	add	r4, r1
 80024a6:	460d      	mov	r5, r1
 80024a8:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80024ac:	4619      	mov	r1, r3
 80024ae:	4632      	mov	r2, r6
 80024b0:	f06f 0e03 	mvn.w	lr, #3
 80024b4:	462b      	mov	r3, r5
 80024b6:	e5aa      	b.n	800200e <arm_correlate_f32+0x1a>
 80024b8:	9902      	ldr	r1, [sp, #8]
 80024ba:	2900      	cmp	r1, #0
 80024bc:	d090      	beq.n	80023e0 <arm_correlate_f32+0x3ec>
 80024be:	9902      	ldr	r1, [sp, #8]
 80024c0:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8002174 <arm_correlate_f32+0x180>
 80024c4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80024c8:	eb00 0708 	add.w	r7, r0, r8
 80024cc:	4601      	mov	r1, r0
 80024ce:	4665      	mov	r5, ip
 80024d0:	e020      	b.n	8002514 <arm_correlate_f32+0x520>
 80024d2:	edd2 7a00 	vldr	s15, [r2]
 80024d6:	ecb4 7a01 	vldmia	r4!, {s14}
 80024da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80024e2:	b18e      	cbz	r6, 8002508 <arm_correlate_f32+0x514>
 80024e4:	ed92 7a01 	vldr	s14, [r2, #4]
 80024e8:	edd1 6a01 	vldr	s13, [r1, #4]
 80024ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f6:	d007      	beq.n	8002508 <arm_correlate_f32+0x514>
 80024f8:	ed91 7a02 	vldr	s14, [r1, #8]
 80024fc:	edd2 6a02 	vldr	s13, [r2, #8]
 8002500:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002508:	42bc      	cmp	r4, r7
 800250a:	edc5 7a00 	vstr	s15, [r5]
 800250e:	4621      	mov	r1, r4
 8002510:	4475      	add	r5, lr
 8002512:	d00b      	beq.n	800252c <arm_correlate_f32+0x538>
 8002514:	460c      	mov	r4, r1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1db      	bne.n	80024d2 <arm_correlate_f32+0x4de>
 800251a:	1d0c      	adds	r4, r1, #4
 800251c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800255c <arm_correlate_f32+0x568>
 8002520:	42bc      	cmp	r4, r7
 8002522:	edc5 7a00 	vstr	s15, [r5]
 8002526:	4621      	mov	r1, r4
 8002528:	4475      	add	r5, lr
 800252a:	d1f3      	bne.n	8002514 <arm_correlate_f32+0x520>
 800252c:	9b02      	ldr	r3, [sp, #8]
 800252e:	4440      	add	r0, r8
 8002530:	fb0e cc03 	mla	ip, lr, r3, ip
 8002534:	2e00      	cmp	r6, #0
 8002536:	d0ac      	beq.n	8002492 <arm_correlate_f32+0x49e>
 8002538:	08b5      	lsrs	r5, r6, #2
 800253a:	eddf 5a08 	vldr	s11, [pc, #32]	; 800255c <arm_correlate_f32+0x568>
 800253e:	f47f af54 	bne.w	80023ea <arm_correlate_f32+0x3f6>
 8002542:	4615      	mov	r5, r2
 8002544:	4601      	mov	r1, r0
 8002546:	e77e      	b.n	8002446 <arm_correlate_f32+0x452>
 8002548:	4605      	mov	r5, r0
 800254a:	e6cf      	b.n	80022ec <arm_correlate_f32+0x2f8>
 800254c:	9902      	ldr	r1, [sp, #8]
 800254e:	2900      	cmp	r1, #0
 8002550:	d1b5      	bne.n	80024be <arm_correlate_f32+0x4ca>
 8002552:	e79e      	b.n	8002492 <arm_correlate_f32+0x49e>
 8002554:	eddf 7a01 	vldr	s15, [pc, #4]	; 800255c <arm_correlate_f32+0x568>
 8002558:	4605      	mov	r5, r0
 800255a:	e5c7      	b.n	80020ec <arm_correlate_f32+0xf8>
 800255c:	00000000 	.word	0x00000000

08002560 <arm_conv_f32>:
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b08b      	sub	sp, #44	; 0x2c
 8002566:	4299      	cmp	r1, r3
 8002568:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800256a:	d205      	bcs.n	8002578 <arm_conv_f32+0x18>
 800256c:	4606      	mov	r6, r0
 800256e:	460c      	mov	r4, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	4632      	mov	r2, r6
 8002576:	4623      	mov	r3, r4
 8002578:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800257c:	3101      	adds	r1, #1
 800257e:	1ac9      	subs	r1, r1, r3
 8002580:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002584:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002588:	9101      	str	r1, [sp, #4]
 800258a:	1e59      	subs	r1, r3, #1
 800258c:	eb02 070b 	add.w	r7, r2, fp
 8002590:	f000 8277 	beq.w	8002a82 <arm_conv_f32+0x522>
 8002594:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8002854 <arm_conv_f32+0x2f4>
 8002598:	f102 0904 	add.w	r9, r2, #4
 800259c:	46aa      	mov	sl, r5
 800259e:	4680      	mov	r8, r0
 80025a0:	2401      	movs	r4, #1
 80025a2:	f014 0603 	ands.w	r6, r4, #3
 80025a6:	d01b      	beq.n	80025e0 <arm_conv_f32+0x80>
 80025a8:	ed92 7a00 	vldr	s14, [r2]
 80025ac:	edd8 6a00 	vldr	s13, [r8]
 80025b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025b4:	3e01      	subs	r6, #1
 80025b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ba:	d011      	beq.n	80025e0 <arm_conv_f32+0x80>
 80025bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80025c0:	edd8 6a01 	vldr	s13, [r8, #4]
 80025c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025c8:	2e01      	cmp	r6, #1
 80025ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ce:	d007      	beq.n	80025e0 <arm_conv_f32+0x80>
 80025d0:	ed98 7a02 	vldr	s14, [r8, #8]
 80025d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80025d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e0:	3401      	adds	r4, #1
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	ecea 7a01 	vstmia	sl!, {s15}
 80025e8:	464a      	mov	r2, r9
 80025ea:	d03a      	beq.n	8002662 <arm_conv_f32+0x102>
 80025ec:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80025f0:	f000 824c 	beq.w	8002a8c <arm_conv_f32+0x52c>
 80025f4:	f100 0210 	add.w	r2, r0, #16
 80025f8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80025fc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002854 <arm_conv_f32+0x2f4>
 8002600:	eb02 0c08 	add.w	ip, r2, r8
 8002604:	f1a9 0610 	sub.w	r6, r9, #16
 8002608:	ed12 7a04 	vldr	s14, [r2, #-16]
 800260c:	edd6 3a04 	vldr	s7, [r6, #16]
 8002610:	ed12 6a03 	vldr	s12, [r2, #-12]
 8002614:	ed96 4a03 	vldr	s8, [r6, #12]
 8002618:	ed52 6a02 	vldr	s13, [r2, #-8]
 800261c:	edd6 4a02 	vldr	s9, [r6, #8]
 8002620:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002624:	ed96 5a01 	vldr	s10, [r6, #4]
 8002628:	ee27 7a23 	vmul.f32	s14, s14, s7
 800262c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002638:	ee76 7a27 	vadd.f32	s15, s12, s15
 800263c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	3210      	adds	r2, #16
 8002646:	4594      	cmp	ip, r2
 8002648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264c:	f1a6 0610 	sub.w	r6, r6, #16
 8002650:	d1da      	bne.n	8002608 <arm_conv_f32+0xa8>
 8002652:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8002656:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800265a:	4480      	add	r8, r0
 800265c:	f109 0904 	add.w	r9, r9, #4
 8002660:	e79f      	b.n	80025a2 <arm_conv_f32+0x42>
 8002662:	2b03      	cmp	r3, #3
 8002664:	445d      	add	r5, fp
 8002666:	f240 80e9 	bls.w	800283c <arm_conv_f32+0x2dc>
 800266a:	9b01      	ldr	r3, [sp, #4]
 800266c:	089a      	lsrs	r2, r3, #2
 800266e:	9202      	str	r2, [sp, #8]
 8002670:	f000 8203 	beq.w	8002a7a <arm_conv_f32+0x51a>
 8002674:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8002678:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	f004 0603 	and.w	r6, r4, #3
 8002682:	9203      	str	r2, [sp, #12]
 8002684:	f1a3 0a10 	sub.w	sl, r3, #16
 8002688:	f1a3 020c 	sub.w	r2, r3, #12
 800268c:	3b08      	subs	r3, #8
 800268e:	9204      	str	r2, [sp, #16]
 8002690:	9305      	str	r3, [sp, #20]
 8002692:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8002696:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800269a:	9a03      	ldr	r2, [sp, #12]
 800269c:	f100 0c1c 	add.w	ip, r0, #28
 80026a0:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80026a4:	464c      	mov	r4, r9
 80026a6:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80026aa:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80026ae:	f1a7 0310 	sub.w	r3, r7, #16
 80026b2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80026b6:	eb05 0b02 	add.w	fp, r5, r2
 80026ba:	461f      	mov	r7, r3
 80026bc:	3510      	adds	r5, #16
 80026be:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8002854 <arm_conv_f32+0x2f4>
 80026c2:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80026c6:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80026ca:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80026ce:	eeb0 5a46 	vmov.f32	s10, s12
 80026d2:	eef0 4a46 	vmov.f32	s9, s12
 80026d6:	eef0 5a46 	vmov.f32	s11, s12
 80026da:	463a      	mov	r2, r7
 80026dc:	4663      	mov	r3, ip
 80026de:	4641      	mov	r1, r8
 80026e0:	edd2 6a04 	vldr	s13, [r2, #16]
 80026e4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80026e8:	ed92 7a03 	vldr	s14, [r2, #12]
 80026ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80026f0:	edd2 0a01 	vldr	s1, [r2, #4]
 80026f4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80026f8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80026fc:	ee61 2a26 	vmul.f32	s5, s2, s13
 8002700:	ed13 1a03 	vldr	s2, [r3, #-12]
 8002704:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002708:	ee21 4a87 	vmul.f32	s8, s3, s14
 800270c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8002710:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002714:	ee22 3a07 	vmul.f32	s6, s4, s14
 8002718:	ed53 1a02 	vldr	s3, [r3, #-8]
 800271c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8002720:	ee36 6a86 	vadd.f32	s12, s13, s12
 8002724:	ee60 3a07 	vmul.f32	s7, s0, s14
 8002728:	ee27 7a01 	vmul.f32	s14, s14, s2
 800272c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8002730:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002734:	ee74 2a22 	vadd.f32	s5, s8, s5
 8002738:	ee60 4a27 	vmul.f32	s9, s0, s15
 800273c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8002740:	ee73 3a85 	vadd.f32	s7, s7, s10
 8002744:	ed13 2a01 	vldr	s4, [r3, #-4]
 8002748:	ee21 5a27 	vmul.f32	s10, s2, s15
 800274c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8002750:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002758:	ee34 4a22 	vadd.f32	s8, s8, s5
 800275c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8002760:	ee21 3a20 	vmul.f32	s6, s2, s1
 8002764:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002768:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800276c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8002770:	3901      	subs	r1, #1
 8002772:	f1a2 0210 	sub.w	r2, r2, #16
 8002776:	ee75 5a84 	vadd.f32	s11, s11, s8
 800277a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800277e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8002782:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002786:	f103 0310 	add.w	r3, r3, #16
 800278a:	d1a9      	bne.n	80026e0 <arm_conv_f32+0x180>
 800278c:	eb0a 030c 	add.w	r3, sl, ip
 8002790:	2e00      	cmp	r6, #0
 8002792:	d042      	beq.n	800281a <arm_conv_f32+0x2ba>
 8002794:	edde 7a00 	vldr	s15, [lr]
 8002798:	ed93 4a00 	vldr	s8, [r3]
 800279c:	ee61 6a27 	vmul.f32	s13, s2, s15
 80027a0:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80027a4:	ee22 7a27 	vmul.f32	s14, s4, s15
 80027a8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80027ac:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80027b0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80027b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80027b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027bc:	eb09 030c 	add.w	r3, r9, ip
 80027c0:	b35c      	cbz	r4, 800281a <arm_conv_f32+0x2ba>
 80027c2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80027c6:	edd3 6a00 	vldr	s13, [r3]
 80027ca:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80027ce:	ee22 3a27 	vmul.f32	s6, s4, s15
 80027d2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	2c01      	cmp	r4, #1
 80027dc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80027e0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80027e4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80027e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027ec:	eb00 030c 	add.w	r3, r0, ip
 80027f0:	d013      	beq.n	800281a <arm_conv_f32+0x2ba>
 80027f2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80027f6:	edd3 3a00 	vldr	s7, [r3]
 80027fa:	ee62 7a07 	vmul.f32	s15, s4, s14
 80027fe:	ee27 4a04 	vmul.f32	s8, s14, s8
 8002802:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002806:	ee27 7a23 	vmul.f32	s14, s14, s7
 800280a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800280e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8002812:	ee35 5a26 	vadd.f32	s10, s10, s13
 8002816:	ee36 6a07 	vadd.f32	s12, s12, s14
 800281a:	45ab      	cmp	fp, r5
 800281c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8002820:	ed45 4a03 	vstr	s9, [r5, #-12]
 8002824:	ed05 5a02 	vstr	s10, [r5, #-8]
 8002828:	ed05 6a01 	vstr	s12, [r5, #-4]
 800282c:	f10c 0c10 	add.w	ip, ip, #16
 8002830:	f105 0310 	add.w	r3, r5, #16
 8002834:	f000 809e 	beq.w	8002974 <arm_conv_f32+0x414>
 8002838:	461d      	mov	r5, r3
 800283a:	e740      	b.n	80026be <arm_conv_f32+0x15e>
 800283c:	9a01      	ldr	r2, [sp, #4]
 800283e:	46ac      	mov	ip, r5
 8002840:	2a00      	cmp	r2, #0
 8002842:	d037      	beq.n	80028b4 <arm_conv_f32+0x354>
 8002844:	9a01      	ldr	r2, [sp, #4]
 8002846:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8002854 <arm_conv_f32+0x2f4>
 800284a:	0096      	lsls	r6, r2, #2
 800284c:	eb05 0c06 	add.w	ip, r5, r6
 8002850:	4604      	mov	r4, r0
 8002852:	e021      	b.n	8002898 <arm_conv_f32+0x338>
 8002854:	00000000 	.word	0x00000000
 8002858:	edd7 7a00 	vldr	s15, [r7]
 800285c:	ecb2 7a01 	vldmia	r2!, {s14}
 8002860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002864:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002868:	b189      	cbz	r1, 800288e <arm_conv_f32+0x32e>
 800286a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800286e:	edd4 6a01 	vldr	s13, [r4, #4]
 8002872:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002876:	2b02      	cmp	r3, #2
 8002878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800287c:	d007      	beq.n	800288e <arm_conv_f32+0x32e>
 800287e:	ed94 7a02 	vldr	s14, [r4, #8]
 8002882:	ed57 6a02 	vldr	s13, [r7, #-8]
 8002886:	ee27 7a26 	vmul.f32	s14, s14, s13
 800288a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800288e:	ece5 7a01 	vstmia	r5!, {s15}
 8002892:	4565      	cmp	r5, ip
 8002894:	4614      	mov	r4, r2
 8002896:	d00a      	beq.n	80028ae <arm_conv_f32+0x34e>
 8002898:	4622      	mov	r2, r4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1dc      	bne.n	8002858 <arm_conv_f32+0x2f8>
 800289e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8002854 <arm_conv_f32+0x2f4>
 80028a2:	ece5 7a01 	vstmia	r5!, {s15}
 80028a6:	1d22      	adds	r2, r4, #4
 80028a8:	4565      	cmp	r5, ip
 80028aa:	4614      	mov	r4, r2
 80028ac:	d1f4      	bne.n	8002898 <arm_conv_f32+0x338>
 80028ae:	4430      	add	r0, r6
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d059      	beq.n	8002968 <arm_conv_f32+0x408>
 80028b4:	088d      	lsrs	r5, r1, #2
 80028b6:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8002854 <arm_conv_f32+0x2f4>
 80028ba:	d058      	beq.n	800296e <arm_conv_f32+0x40e>
 80028bc:	f100 0210 	add.w	r2, r0, #16
 80028c0:	f1a7 0310 	sub.w	r3, r7, #16
 80028c4:	462c      	mov	r4, r5
 80028c6:	ed52 6a04 	vldr	s13, [r2, #-16]
 80028ca:	edd3 3a04 	vldr	s7, [r3, #16]
 80028ce:	ed12 7a03 	vldr	s14, [r2, #-12]
 80028d2:	ed93 4a03 	vldr	s8, [r3, #12]
 80028d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80028da:	edd3 4a02 	vldr	s9, [r3, #8]
 80028de:	ed12 6a01 	vldr	s12, [r2, #-4]
 80028e2:	ed93 5a01 	vldr	s10, [r3, #4]
 80028e6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80028ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80028ee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80028f2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80028f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80028fa:	ee66 6a05 	vmul.f32	s13, s12, s10
 80028fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002902:	3c01      	subs	r4, #1
 8002904:	f102 0210 	add.w	r2, r2, #16
 8002908:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800290c:	f1a3 0310 	sub.w	r3, r3, #16
 8002910:	d1d9      	bne.n	80028c6 <arm_conv_f32+0x366>
 8002912:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8002916:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800291a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800291e:	f011 0203 	ands.w	r2, r1, #3
 8002922:	d01b      	beq.n	800295c <arm_conv_f32+0x3fc>
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ed95 7a00 	vldr	s14, [r5]
 800292c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002930:	3a01      	subs	r2, #1
 8002932:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002936:	d011      	beq.n	800295c <arm_conv_f32+0x3fc>
 8002938:	ed53 7a01 	vldr	s15, [r3, #-4]
 800293c:	ed95 7a01 	vldr	s14, [r5, #4]
 8002940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002944:	2a01      	cmp	r2, #1
 8002946:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800294a:	d007      	beq.n	800295c <arm_conv_f32+0x3fc>
 800294c:	edd5 7a02 	vldr	s15, [r5, #8]
 8002950:	ed13 7a02 	vldr	s14, [r3, #-8]
 8002954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002958:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800295c:	3901      	subs	r1, #1
 800295e:	ecec 5a01 	vstmia	ip!, {s11}
 8002962:	f100 0004 	add.w	r0, r0, #4
 8002966:	d1a5      	bne.n	80028b4 <arm_conv_f32+0x354>
 8002968:	b00b      	add	sp, #44	; 0x2c
 800296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296e:	463b      	mov	r3, r7
 8002970:	4605      	mov	r5, r0
 8002972:	e7d4      	b.n	800291e <arm_conv_f32+0x3be>
 8002974:	9b02      	ldr	r3, [sp, #8]
 8002976:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	9b03      	ldr	r3, [sp, #12]
 8002980:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8002984:	4403      	add	r3, r0
 8002986:	465d      	mov	r5, fp
 8002988:	469e      	mov	lr, r3
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	f013 0c03 	ands.w	ip, r3, #3
 8002990:	d075      	beq.n	8002a7e <arm_conv_f32+0x51e>
 8002992:	9b02      	ldr	r3, [sp, #8]
 8002994:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8002998:	f004 0403 	and.w	r4, r4, #3
 800299c:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80029a0:	f103 0801 	add.w	r8, r3, #1
 80029a4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80029a8:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80029ac:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80029b0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80029b4:	f1a7 0210 	sub.w	r2, r7, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	465b      	mov	r3, fp
 80029bc:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80029c0:	468b      	mov	fp, r1
 80029c2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80029c6:	4621      	mov	r1, r4
 80029c8:	4617      	mov	r7, r2
 80029ca:	461c      	mov	r4, r3
 80029cc:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8002854 <arm_conv_f32+0x2f4>
 80029d0:	f10e 0210 	add.w	r2, lr, #16
 80029d4:	463b      	mov	r3, r7
 80029d6:	4656      	mov	r6, sl
 80029d8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80029dc:	edd3 3a04 	vldr	s7, [r3, #16]
 80029e0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80029e4:	ed93 4a03 	vldr	s8, [r3, #12]
 80029e8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80029ec:	edd3 4a02 	vldr	s9, [r3, #8]
 80029f0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80029f4:	ed93 5a01 	vldr	s10, [r3, #4]
 80029f8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80029fc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a04:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002a08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002a0c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	3e01      	subs	r6, #1
 8002a16:	f102 0210 	add.w	r2, r2, #16
 8002a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1e:	f1a3 0310 	sub.w	r3, r3, #16
 8002a22:	d1d9      	bne.n	80029d8 <arm_conv_f32+0x478>
 8002a24:	4486      	add	lr, r0
 8002a26:	b1d1      	cbz	r1, 8002a5e <arm_conv_f32+0x4fe>
 8002a28:	ed99 7a00 	vldr	s14, [r9]
 8002a2c:	edde 6a00 	vldr	s13, [lr]
 8002a30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a38:	b18c      	cbz	r4, 8002a5e <arm_conv_f32+0x4fe>
 8002a3a:	ed19 7a01 	vldr	s14, [r9, #-4]
 8002a3e:	edde 6a01 	vldr	s13, [lr, #4]
 8002a42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002a46:	2c01      	cmp	r4, #1
 8002a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a4c:	d007      	beq.n	8002a5e <arm_conv_f32+0x4fe>
 8002a4e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8002a52:	ed59 6a02 	vldr	s13, [r9, #-8]
 8002a56:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a5e:	ece5 7a01 	vstmia	r5!, {s15}
 8002a62:	4565      	cmp	r5, ip
 8002a64:	46c6      	mov	lr, r8
 8002a66:	f108 0804 	add.w	r8, r8, #4
 8002a6a:	d1af      	bne.n	80029cc <arm_conv_f32+0x46c>
 8002a6c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8002a70:	4659      	mov	r1, fp
 8002a72:	9b01      	ldr	r3, [sp, #4]
 8002a74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002a78:	e71c      	b.n	80028b4 <arm_conv_f32+0x354>
 8002a7a:	4686      	mov	lr, r0
 8002a7c:	e785      	b.n	800298a <arm_conv_f32+0x42a>
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	e7f7      	b.n	8002a72 <arm_conv_f32+0x512>
 8002a82:	9a01      	ldr	r2, [sp, #4]
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	f47f aedd 	bne.w	8002844 <arm_conv_f32+0x2e4>
 8002a8a:	e76d      	b.n	8002968 <arm_conv_f32+0x408>
 8002a8c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8002854 <arm_conv_f32+0x2f4>
 8002a90:	4680      	mov	r8, r0
 8002a92:	e5e3      	b.n	800265c <arm_conv_f32+0xfc>

08002a94 <arm_sub_f32>:
 8002a94:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002a98:	b4f0      	push	{r4, r5, r6, r7}
 8002a9a:	d033      	beq.n	8002b04 <arm_sub_f32+0x70>
 8002a9c:	f100 0610 	add.w	r6, r0, #16
 8002aa0:	f101 0510 	add.w	r5, r1, #16
 8002aa4:	f102 0410 	add.w	r4, r2, #16
 8002aa8:	4667      	mov	r7, ip
 8002aaa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002aae:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ab6:	3f01      	subs	r7, #1
 8002ab8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002abc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002ac0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ac8:	f106 0610 	add.w	r6, r6, #16
 8002acc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002ad0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002ad4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8002ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002adc:	f105 0510 	add.w	r5, r5, #16
 8002ae0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002ae4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8002ae8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002af0:	f104 0410 	add.w	r4, r4, #16
 8002af4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8002af8:	d1d7      	bne.n	8002aaa <arm_sub_f32+0x16>
 8002afa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002afe:	4420      	add	r0, r4
 8002b00:	4421      	add	r1, r4
 8002b02:	4422      	add	r2, r4
 8002b04:	f013 0303 	ands.w	r3, r3, #3
 8002b08:	d01b      	beq.n	8002b42 <arm_sub_f32+0xae>
 8002b0a:	edd0 7a00 	vldr	s15, [r0]
 8002b0e:	ed91 7a00 	vldr	s14, [r1]
 8002b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b16:	3b01      	subs	r3, #1
 8002b18:	edc2 7a00 	vstr	s15, [r2]
 8002b1c:	d011      	beq.n	8002b42 <arm_sub_f32+0xae>
 8002b1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8002b22:	ed91 7a01 	vldr	s14, [r1, #4]
 8002b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8002b30:	d007      	beq.n	8002b42 <arm_sub_f32+0xae>
 8002b32:	edd0 7a02 	vldr	s15, [r0, #8]
 8002b36:	ed91 7a02 	vldr	s14, [r1, #8]
 8002b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b3e:	edc2 7a02 	vstr	s15, [r2, #8]
 8002b42:	bcf0      	pop	{r4, r5, r6, r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop

08002b48 <arm_mult_f32>:
 8002b48:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002b4c:	b4f0      	push	{r4, r5, r6, r7}
 8002b4e:	d033      	beq.n	8002bb8 <arm_mult_f32+0x70>
 8002b50:	f100 0610 	add.w	r6, r0, #16
 8002b54:	f101 0510 	add.w	r5, r1, #16
 8002b58:	f102 0410 	add.w	r4, r2, #16
 8002b5c:	4667      	mov	r7, ip
 8002b5e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002b62:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	3f01      	subs	r7, #1
 8002b6c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002b70:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002b74:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	f106 0610 	add.w	r6, r6, #16
 8002b80:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002b84:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002b88:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8002b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b90:	f105 0510 	add.w	r5, r5, #16
 8002b94:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002b98:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8002b9c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba4:	f104 0410 	add.w	r4, r4, #16
 8002ba8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8002bac:	d1d7      	bne.n	8002b5e <arm_mult_f32+0x16>
 8002bae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002bb2:	4420      	add	r0, r4
 8002bb4:	4421      	add	r1, r4
 8002bb6:	4422      	add	r2, r4
 8002bb8:	f013 0303 	ands.w	r3, r3, #3
 8002bbc:	d01b      	beq.n	8002bf6 <arm_mult_f32+0xae>
 8002bbe:	edd1 7a00 	vldr	s15, [r1]
 8002bc2:	ed90 7a00 	vldr	s14, [r0]
 8002bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	edc2 7a00 	vstr	s15, [r2]
 8002bd0:	d011      	beq.n	8002bf6 <arm_mult_f32+0xae>
 8002bd2:	edd0 7a01 	vldr	s15, [r0, #4]
 8002bd6:	ed91 7a01 	vldr	s14, [r1, #4]
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	edc2 7a01 	vstr	s15, [r2, #4]
 8002be4:	d007      	beq.n	8002bf6 <arm_mult_f32+0xae>
 8002be6:	edd0 7a02 	vldr	s15, [r0, #8]
 8002bea:	ed91 7a02 	vldr	s14, [r1, #8]
 8002bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf2:	edc2 7a02 	vstr	s15, [r2, #8]
 8002bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <arm_add_f32>:
 8002bfc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002c00:	b4f0      	push	{r4, r5, r6, r7}
 8002c02:	d033      	beq.n	8002c6c <arm_add_f32+0x70>
 8002c04:	f100 0610 	add.w	r6, r0, #16
 8002c08:	f101 0510 	add.w	r5, r1, #16
 8002c0c:	f102 0410 	add.w	r4, r2, #16
 8002c10:	4667      	mov	r7, ip
 8002c12:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002c16:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1e:	3f01      	subs	r7, #1
 8002c20:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002c24:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002c28:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c30:	f106 0610 	add.w	r6, r6, #16
 8002c34:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002c38:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002c3c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8002c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c44:	f105 0510 	add.w	r5, r5, #16
 8002c48:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002c4c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8002c50:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c58:	f104 0410 	add.w	r4, r4, #16
 8002c5c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8002c60:	d1d7      	bne.n	8002c12 <arm_add_f32+0x16>
 8002c62:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002c66:	4420      	add	r0, r4
 8002c68:	4421      	add	r1, r4
 8002c6a:	4422      	add	r2, r4
 8002c6c:	f013 0303 	ands.w	r3, r3, #3
 8002c70:	d01b      	beq.n	8002caa <arm_add_f32+0xae>
 8002c72:	edd1 7a00 	vldr	s15, [r1]
 8002c76:	ed90 7a00 	vldr	s14, [r0]
 8002c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	edc2 7a00 	vstr	s15, [r2]
 8002c84:	d011      	beq.n	8002caa <arm_add_f32+0xae>
 8002c86:	edd0 7a01 	vldr	s15, [r0, #4]
 8002c8a:	ed91 7a01 	vldr	s14, [r1, #4]
 8002c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	edc2 7a01 	vstr	s15, [r2, #4]
 8002c98:	d007      	beq.n	8002caa <arm_add_f32+0xae>
 8002c9a:	edd0 7a02 	vldr	s15, [r0, #8]
 8002c9e:	ed91 7a02 	vldr	s14, [r1, #8]
 8002ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ca6:	edc2 7a02 	vstr	s15, [r2, #8]
 8002caa:	bcf0      	pop	{r4, r5, r6, r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <__errno>:
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <__errno+0x8>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	4d0d      	ldr	r5, [pc, #52]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc0:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc2:	1b64      	subs	r4, r4, r5
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	42a6      	cmp	r6, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	4d0b      	ldr	r5, [pc, #44]	; (8002cfc <__libc_init_array+0x40>)
 8002cce:	4c0c      	ldr	r4, [pc, #48]	; (8002d00 <__libc_init_array+0x44>)
 8002cd0:	f000 f940 	bl	8002f54 <_init>
 8002cd4:	1b64      	subs	r4, r4, r5
 8002cd6:	10a4      	asrs	r4, r4, #2
 8002cd8:	2600      	movs	r6, #0
 8002cda:	42a6      	cmp	r6, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce4:	4798      	blx	r3
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cee:	4798      	blx	r3
 8002cf0:	3601      	adds	r6, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	08003168 	.word	0x08003168
 8002cf8:	08003168 	.word	0x08003168
 8002cfc:	08003168 	.word	0x08003168
 8002d00:	0800316c 	.word	0x0800316c

08002d04 <memcpy>:
 8002d04:	440a      	add	r2, r1
 8002d06:	4291      	cmp	r1, r2
 8002d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d0c:	d100      	bne.n	8002d10 <memcpy+0xc>
 8002d0e:	4770      	bx	lr
 8002d10:	b510      	push	{r4, lr}
 8002d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d1a:	4291      	cmp	r1, r2
 8002d1c:	d1f9      	bne.n	8002d12 <memcpy+0xe>
 8002d1e:	bd10      	pop	{r4, pc}

08002d20 <memset>:
 8002d20:	4402      	add	r2, r0
 8002d22:	4603      	mov	r3, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <sqrt>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	ed2d 8b02 	vpush	{d8}
 8002d36:	ec55 4b10 	vmov	r4, r5, d0
 8002d3a:	f000 f853 	bl	8002de4 <__ieee754_sqrt>
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <sqrt+0x64>)
 8002d40:	eeb0 8a40 	vmov.f32	s16, s0
 8002d44:	eef0 8a60 	vmov.f32	s17, s1
 8002d48:	f993 3000 	ldrsb.w	r3, [r3]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	d019      	beq.n	8002d84 <sqrt+0x54>
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fec2 	bl	8000ae0 <__aeabi_dcmpun>
 8002d5c:	b990      	cbnz	r0, 8002d84 <sqrt+0x54>
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2300      	movs	r3, #0
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fe93 	bl	8000a90 <__aeabi_dcmplt>
 8002d6a:	b158      	cbz	r0, 8002d84 <sqrt+0x54>
 8002d6c:	f7ff ffa0 	bl	8002cb0 <__errno>
 8002d70:	2321      	movs	r3, #33	; 0x21
 8002d72:	6003      	str	r3, [r0, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2300      	movs	r3, #0
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd fd40 	bl	8000800 <__aeabi_ddiv>
 8002d80:	ec41 0b18 	vmov	d8, r0, r1
 8002d84:	eeb0 0a48 	vmov.f32	s0, s16
 8002d88:	eef0 0a68 	vmov.f32	s1, s17
 8002d8c:	ecbd 8b02 	vpop	{d8}
 8002d90:	bd38      	pop	{r3, r4, r5, pc}
 8002d92:	bf00      	nop
 8002d94:	20000070 	.word	0x20000070

08002d98 <sqrtf>:
 8002d98:	b508      	push	{r3, lr}
 8002d9a:	ed2d 8b02 	vpush	{d8}
 8002d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8002da2:	f000 f8d3 	bl	8002f4c <__ieee754_sqrtf>
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <sqrtf+0x44>)
 8002da8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dac:	3301      	adds	r3, #1
 8002dae:	d011      	beq.n	8002dd4 <sqrtf+0x3c>
 8002db0:	eeb4 8a48 	vcmp.f32	s16, s16
 8002db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db8:	d60c      	bvs.n	8002dd4 <sqrtf+0x3c>
 8002dba:	eddf 8a09 	vldr	s17, [pc, #36]	; 8002de0 <sqrtf+0x48>
 8002dbe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	d505      	bpl.n	8002dd4 <sqrtf+0x3c>
 8002dc8:	f7ff ff72 	bl	8002cb0 <__errno>
 8002dcc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002dd0:	2321      	movs	r3, #33	; 0x21
 8002dd2:	6003      	str	r3, [r0, #0]
 8002dd4:	ecbd 8b02 	vpop	{d8}
 8002dd8:	bd08      	pop	{r3, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000070 	.word	0x20000070
 8002de0:	00000000 	.word	0x00000000

08002de4 <__ieee754_sqrt>:
 8002de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de8:	ec55 4b10 	vmov	r4, r5, d0
 8002dec:	4e56      	ldr	r6, [pc, #344]	; (8002f48 <__ieee754_sqrt+0x164>)
 8002dee:	43ae      	bics	r6, r5
 8002df0:	ee10 0a10 	vmov	r0, s0
 8002df4:	ee10 3a10 	vmov	r3, s0
 8002df8:	4629      	mov	r1, r5
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	d110      	bne.n	8002e20 <__ieee754_sqrt+0x3c>
 8002dfe:	ee10 2a10 	vmov	r2, s0
 8002e02:	462b      	mov	r3, r5
 8002e04:	f7fd fbd2 	bl	80005ac <__aeabi_dmul>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	4629      	mov	r1, r5
 8002e10:	f7fd fa16 	bl	8000240 <__adddf3>
 8002e14:	4604      	mov	r4, r0
 8002e16:	460d      	mov	r5, r1
 8002e18:	ec45 4b10 	vmov	d0, r4, r5
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	dc10      	bgt.n	8002e46 <__ieee754_sqrt+0x62>
 8002e24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002e28:	4330      	orrs	r0, r6
 8002e2a:	d0f5      	beq.n	8002e18 <__ieee754_sqrt+0x34>
 8002e2c:	b15d      	cbz	r5, 8002e46 <__ieee754_sqrt+0x62>
 8002e2e:	ee10 2a10 	vmov	r2, s0
 8002e32:	462b      	mov	r3, r5
 8002e34:	ee10 0a10 	vmov	r0, s0
 8002e38:	f7fd fa00 	bl	800023c <__aeabi_dsub>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	f7fd fcde 	bl	8000800 <__aeabi_ddiv>
 8002e44:	e7e6      	b.n	8002e14 <__ieee754_sqrt+0x30>
 8002e46:	1509      	asrs	r1, r1, #20
 8002e48:	d076      	beq.n	8002f38 <__ieee754_sqrt+0x154>
 8002e4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002e4e:	07ce      	lsls	r6, r1, #31
 8002e50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002e54:	bf5e      	ittt	pl
 8002e56:	0fda      	lsrpl	r2, r3, #31
 8002e58:	005b      	lslpl	r3, r3, #1
 8002e5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8002e5e:	0fda      	lsrs	r2, r3, #31
 8002e60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002e64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002e68:	2000      	movs	r0, #0
 8002e6a:	106d      	asrs	r5, r5, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	f04f 0e16 	mov.w	lr, #22
 8002e72:	4684      	mov	ip, r0
 8002e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e78:	eb0c 0401 	add.w	r4, ip, r1
 8002e7c:	4294      	cmp	r4, r2
 8002e7e:	bfde      	ittt	le
 8002e80:	1b12      	suble	r2, r2, r4
 8002e82:	eb04 0c01 	addle.w	ip, r4, r1
 8002e86:	1840      	addle	r0, r0, r1
 8002e88:	0052      	lsls	r2, r2, #1
 8002e8a:	f1be 0e01 	subs.w	lr, lr, #1
 8002e8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002e92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002e96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e9a:	d1ed      	bne.n	8002e78 <__ieee754_sqrt+0x94>
 8002e9c:	4671      	mov	r1, lr
 8002e9e:	2720      	movs	r7, #32
 8002ea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002ea4:	4562      	cmp	r2, ip
 8002ea6:	eb04 060e 	add.w	r6, r4, lr
 8002eaa:	dc02      	bgt.n	8002eb2 <__ieee754_sqrt+0xce>
 8002eac:	d113      	bne.n	8002ed6 <__ieee754_sqrt+0xf2>
 8002eae:	429e      	cmp	r6, r3
 8002eb0:	d811      	bhi.n	8002ed6 <__ieee754_sqrt+0xf2>
 8002eb2:	2e00      	cmp	r6, #0
 8002eb4:	eb06 0e04 	add.w	lr, r6, r4
 8002eb8:	da43      	bge.n	8002f42 <__ieee754_sqrt+0x15e>
 8002eba:	f1be 0f00 	cmp.w	lr, #0
 8002ebe:	db40      	blt.n	8002f42 <__ieee754_sqrt+0x15e>
 8002ec0:	f10c 0801 	add.w	r8, ip, #1
 8002ec4:	eba2 020c 	sub.w	r2, r2, ip
 8002ec8:	429e      	cmp	r6, r3
 8002eca:	bf88      	it	hi
 8002ecc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8002ed0:	1b9b      	subs	r3, r3, r6
 8002ed2:	4421      	add	r1, r4
 8002ed4:	46c4      	mov	ip, r8
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	3f01      	subs	r7, #1
 8002eda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002ede:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002ee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ee6:	d1dd      	bne.n	8002ea4 <__ieee754_sqrt+0xc0>
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	d006      	beq.n	8002efa <__ieee754_sqrt+0x116>
 8002eec:	1c4c      	adds	r4, r1, #1
 8002eee:	bf13      	iteet	ne
 8002ef0:	3101      	addne	r1, #1
 8002ef2:	3001      	addeq	r0, #1
 8002ef4:	4639      	moveq	r1, r7
 8002ef6:	f021 0101 	bicne.w	r1, r1, #1
 8002efa:	1043      	asrs	r3, r0, #1
 8002efc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002f00:	0849      	lsrs	r1, r1, #1
 8002f02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002f06:	07c2      	lsls	r2, r0, #31
 8002f08:	bf48      	it	mi
 8002f0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002f0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8002f12:	460c      	mov	r4, r1
 8002f14:	463d      	mov	r5, r7
 8002f16:	e77f      	b.n	8002e18 <__ieee754_sqrt+0x34>
 8002f18:	0ada      	lsrs	r2, r3, #11
 8002f1a:	3815      	subs	r0, #21
 8002f1c:	055b      	lsls	r3, r3, #21
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d0fa      	beq.n	8002f18 <__ieee754_sqrt+0x134>
 8002f22:	02d7      	lsls	r7, r2, #11
 8002f24:	d50a      	bpl.n	8002f3c <__ieee754_sqrt+0x158>
 8002f26:	f1c1 0420 	rsb	r4, r1, #32
 8002f2a:	fa23 f404 	lsr.w	r4, r3, r4
 8002f2e:	1e4d      	subs	r5, r1, #1
 8002f30:	408b      	lsls	r3, r1
 8002f32:	4322      	orrs	r2, r4
 8002f34:	1b41      	subs	r1, r0, r5
 8002f36:	e788      	b.n	8002e4a <__ieee754_sqrt+0x66>
 8002f38:	4608      	mov	r0, r1
 8002f3a:	e7f0      	b.n	8002f1e <__ieee754_sqrt+0x13a>
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	3101      	adds	r1, #1
 8002f40:	e7ef      	b.n	8002f22 <__ieee754_sqrt+0x13e>
 8002f42:	46e0      	mov	r8, ip
 8002f44:	e7be      	b.n	8002ec4 <__ieee754_sqrt+0xe0>
 8002f46:	bf00      	nop
 8002f48:	7ff00000 	.word	0x7ff00000

08002f4c <__ieee754_sqrtf>:
 8002f4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002f50:	4770      	bx	lr
	...

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
