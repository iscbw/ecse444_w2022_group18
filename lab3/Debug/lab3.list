
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b4  080045b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080045b4  080045b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b4  080045b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002eee8  2000000c  080045c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002eef4  080045c8  0002eef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002410  00000000  00000000  00033a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab62  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec5b  00000000  00000000  000623d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010841a  00000000  00000000  0007102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00179447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  00179510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0017cd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003d58 	.word	0x08003d58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08003d58 	.word	0x08003d58

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr
 800080c:	0000      	movs	r0, r0
	...

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fbfa 	bl	800100e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f8ad 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9a9 	bl	8000b74 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000822:	f000 f8fb 	bl	8000a1c <MX_DAC1_Init>
  MX_DMA_Init();
 8000826:	f000 f97b 	bl	8000b20 <MX_DMA_Init>
  MX_TIM2_Init();
 800082a:	f000 f92b 	bl	8000a84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	484d      	ldr	r0, [pc, #308]	; (8000968 <main+0x158>)
 8000832:	f000 fdb8 	bl	80013a6 <HAL_DAC_Start>


  switch (wave_type) {
 8000836:	2303      	movs	r3, #3
 8000838:	2b03      	cmp	r3, #3
 800083a:	f200 808e 	bhi.w	800095a <main+0x14a>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <main+0x34>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000855 	.word	0x08000855
 8000848:	080008ab 	.word	0x080008ab
 800084c:	080008f1 	.word	0x080008f1
 8000850:	08000901 	.word	0x08000901

  case 0: {	// sawtooth
	  while (1) {
		  if (cur_value >= 4095) {
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <main+0x15c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f640 72fe 	movw	r2, #4094	; 0xffe
 800085c:	4293      	cmp	r3, r2
 800085e:	d903      	bls.n	8000868 <main+0x58>
			  cur_value = 0;
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <main+0x15c>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e005      	b.n	8000874 <main+0x64>
		  } else {
			  cur_value += 256;
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <main+0x15c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <main+0x15c>)
 8000872:	6013      	str	r3, [r2, #0]
		  }
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cur_value);
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <main+0x15c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	483a      	ldr	r0, [pc, #232]	; (8000968 <main+0x158>)
 800087e:	f000 fecd 	bl	800161c <HAL_DAC_SetValue>
		  HAL_Delay(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fc38 	bl	80010f8 <HAL_Delay>
		  if (cur_value >= 4095) {
 8000888:	e7e4      	b.n	8000854 <main+0x44>

  case 1: {	// triangle
	  while (1) {
		  // 1st half
		  for ( ; cur_value < 4000; cur_value += 500) {
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cur_value);
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0x15c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	4835      	ldr	r0, [pc, #212]	; (8000968 <main+0x158>)
 8000894:	f000 fec2 	bl	800161c <HAL_DAC_SetValue>
			  HAL_Delay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fc2d 	bl	80010f8 <HAL_Delay>
		  for ( ; cur_value < 4000; cur_value += 500) {
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <main+0x15c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008a6:	4a31      	ldr	r2, [pc, #196]	; (800096c <main+0x15c>)
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <main+0x15c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008b2:	d3ea      	bcc.n	800088a <main+0x7a>
		  }
		  // 2nd half
		  for ( ; cur_value > 0; cur_value -= 500) {
 80008b4:	e017      	b.n	80008e6 <main+0xd6>
			  if (cur_value > 4095) cur_value = 0;
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <main+0x15c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008be:	d302      	bcc.n	80008c6 <main+0xb6>
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <main+0x15c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cur_value);
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <main+0x15c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	4826      	ldr	r0, [pc, #152]	; (8000968 <main+0x158>)
 80008d0:	f000 fea4 	bl	800161c <HAL_DAC_SetValue>
			  HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fc0f 	bl	80010f8 <HAL_Delay>
		  for ( ; cur_value > 0; cur_value -= 500) {
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <main+0x15c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <main+0x15c>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <main+0x15c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1e3      	bne.n	80008b6 <main+0xa6>
		  for ( ; cur_value < 4000; cur_value += 500) {
 80008ee:	e7dc      	b.n	80008aa <main+0x9a>
	  }
  } break;

  case 2: {	// timer driven
	  // generate 1s of buffer
	  generate_lut(1500.0);
 80008f0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000960 <main+0x150>
 80008f4:	f000 f9a4 	bl	8000c40 <generate_lut>
	  // start timer & interrupt
	  HAL_TIM_Base_Start_IT(&htim2);
 80008f8:	481d      	ldr	r0, [pc, #116]	; (8000970 <main+0x160>)
 80008fa:	f002 fd1b 	bl	8003334 <HAL_TIM_Base_Start_IT>

	  while (1) {
 80008fe:	e7fe      	b.n	80008fe <main+0xee>
	  }
  } break;

  case 3: {	// DMA driven
	  // reconfigure dac
	  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4819      	ldr	r0, [pc, #100]	; (8000968 <main+0x158>)
 8000904:	f000 fda1 	bl	800144a <HAL_DAC_Stop>
	  DAC_ChannelConfTypeDef sConfig = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2228      	movs	r2, #40	; 0x28
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f9d4 	bl	8003cbc <memset>
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
	  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000918:	230a      	movs	r3, #10
 800091a:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
	  HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1);
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <main+0x158>)
 8000934:	f000 feb6 	bl	80016a4 <HAL_DAC_ConfigChannel>
	  generate_lut(1500.0);
 8000938:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8000960 <main+0x150>
 800093c:	f000 f980 	bl	8000c40 <generate_lut>
	  // restart dac in dma mode
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_array, SAMPLING_RATE, DAC_ALIGN_12B_R);
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <main+0x164>)
 800094a:	2100      	movs	r1, #0
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <main+0x158>)
 800094e:	f000 fd99 	bl	8001484 <HAL_DAC_Start_DMA>
	  // start timer
	  HAL_TIM_Base_Start(&htim2);
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <main+0x160>)
 8000954:	f002 fc86 	bl	8003264 <HAL_TIM_Base_Start>
	  // generate sine wave lut
	  while (1) {
 8000958:	e7fe      	b.n	8000958 <main+0x148>

	  }
  } break;

  default: {
	  while (1) {
 800095a:	e7fe      	b.n	800095a <main+0x14a>
 800095c:	f3af 8000 	nop.w
 8000960:	00000000 	.word	0x00000000
 8000964:	40977000 	.word	0x40977000
 8000968:	2000002c 	.word	0x2000002c
 800096c:	2002eea0 	.word	0x2002eea0
 8000970:	2002eea4 	.word	0x2002eea4
 8000974:	20000040 	.word	0x20000040

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	; 0x58
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2244      	movs	r2, #68	; 0x44
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f003 f998 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f001 fcba 	bl	8002314 <HAL_PWREx_ControlVoltageScaling>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80009a6:	f000 f9f5 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009aa:	2310      	movs	r3, #16
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009be:	2301      	movs	r3, #1
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009c6:	233c      	movs	r3, #60	; 0x3c
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fd3e 	bl	800245c <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009e6:	f000 f9d5 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2303      	movs	r3, #3
 80009f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2105      	movs	r1, #5
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 f950 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a0e:	f000 f9c1 	bl	8000d94 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3758      	adds	r7, #88	; 0x58
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2228      	movs	r2, #40	; 0x28
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f947 	bl	8003cbc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_DAC1_Init+0x60>)
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <MX_DAC1_Init+0x64>)
 8000a32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_DAC1_Init+0x60>)
 8000a36:	f000 fc94 	bl	8001362 <HAL_DAC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a40:	f000 f9a8 	bl	8000d94 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_DAC1_Init+0x60>)
 8000a64:	f000 fe1e 	bl	80016a4 <HAL_DAC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000a6e:	f000 f991 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000002c 	.word	0x2000002c
 8000a80:	40007400 	.word	0x40007400

08000a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000ab8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000acc:	f002 fb72 	bl	80031b4 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ad6:	f000 f95d 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000ae8:	f002 fdb3 	bl	8003652 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000af2:	f000 f94f 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000af6:	2320      	movs	r3, #32
 8000af8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_TIM2_Init+0x98>)
 8000b04:	f002 ffca 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b0e:	f000 f941 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2002eea4 	.word	0x2002eea4

08000b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6493      	str	r3, [r2, #72]	; 0x48
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200e      	movs	r0, #14
 8000b5c:	f000 fbcb 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b60:	200e      	movs	r0, #14
 8000b62:	f000 fbe4 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	4816      	ldr	r0, [pc, #88]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000bda:	f001 fb31 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bf6:	f001 f991 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000c14:	f001 f982 	bl	8001f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f000 fb6a 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c22:	2028      	movs	r0, #40	; 0x28
 8000c24:	f000 fb83 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	00000000 	.word	0x00000000

08000c40 <generate_lut>:

/* USER CODE BEGIN 4 */
void generate_lut(float32_t freq) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	ed87 0a01 	vstr	s0, [r7, #4]
	for (int i=0; i<SAMPLING_RATE; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e03f      	b.n	8000cd0 <generate_lut+0x90>
		sine_array[i] = (uint32_t) round(3000.0 * (arm_sin_f32(2 * PI * (((float32_t)i)/((float32_t)SAMPLING_RATE)) * freq) + 0.6));
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000cf8 <generate_lut+0xb8>
 8000c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c62:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000cfc <generate_lut+0xbc>
 8000c66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c72:	eeb0 0a67 	vmov.f32	s0, s15
 8000c76:	f002 ffb7 	bl	8003be8 <arm_sin_f32>
 8000c7a:	ee10 3a10 	vmov	r3, s0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fd4c 	bl	800071c <__aeabi_f2d>
 8000c84:	a318      	add	r3, pc, #96	; (adr r3, 8000ce8 <generate_lut+0xa8>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f7ff fbe9 	bl	8000460 <__adddf3>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	a316      	add	r3, pc, #88	; (adr r3, 8000cf0 <generate_lut+0xb0>)
 8000c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9c:	f7ff fab0 	bl	8000200 <__aeabi_dmul>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	ec43 2b17 	vmov	d7, r2, r3
 8000ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8000cac:	eef0 0a67 	vmov.f32	s1, s15
 8000cb0:	f003 f80c 	bl	8003ccc <round>
 8000cb4:	ec53 2b10 	vmov	r2, r3, d0
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff fd86 	bl	80007cc <__aeabi_d2uiz>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	490f      	ldr	r1, [pc, #60]	; (8000d00 <generate_lut+0xc0>)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<SAMPLING_RATE; i++) {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	ddba      	ble.n	8000c50 <generate_lut+0x10>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	f3af 8000 	nop.w
 8000ce8:	33333333 	.word	0x33333333
 8000cec:	3fe33333 	.word	0x3fe33333
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	40a77000 	.word	0x40a77000
 8000cf8:	473b8000 	.word	0x473b8000
 8000cfc:	40c90fdb 	.word	0x40c90fdb
 8000d00:	20000040 	.word	0x20000040

08000d04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d14:	d105      	bne.n	8000d22 <HAL_GPIO_EXTI_Callback+0x1e>
	case GPIO_PIN_13: {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d1c:	f001 faa8 	bl	8002270 <HAL_GPIO_TogglePin>
	} break;
 8000d20:	bf00      	nop
	default: {}

	}
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d11d      	bne.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x4c>
		if (wave_type == 2) {
 8000d40:	2303      	movs	r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d11a      	bne.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x4c>
			if (counter >= SAMPLING_RATE) {
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d903      	bls.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x2a>
				counter = 0;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	801a      	strh	r2, [r3, #0]
 8000d58:	e005      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x36>
			} else {
				counter++;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d64:	801a      	strh	r2, [r3, #0]
			}
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_array[counter]);
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d78:	f000 fc50 	bl	800161c <HAL_DAC_SetValue>
		} else {

		}
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2002eea4 	.word	0x2002eea4
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	20000040 	.word	0x20000040
 8000d90:	2000002c 	.word	0x2000002c

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	; 0x60
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <HAL_DAC_MspInit+0xcc>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d14f      	bne.n	8000eaa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a24      	ldr	r2, [pc, #144]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <HAL_DAC_MspInit+0xd0>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 f864 	bl	8001f1c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_DAC_MspInit+0xd8>)
 8000e58:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e62:	2210      	movs	r2, #16
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e84:	2220      	movs	r2, #32
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000e90:	f000 fdd2 	bl	8001a38 <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000e9a:	f7ff ff7b 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_DAC_MspInit+0xd4>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40007400 	.word	0x40007400
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	2002ee40 	.word	0x2002ee40
 8000ec0:	40020044 	.word	0x40020044

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed4:	d113      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_TIM_Base_MspInit+0x44>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_TIM_Base_MspInit+0x44>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	201c      	movs	r0, #28
 8000ef4:	f000 f9ff 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef8:	201c      	movs	r0, #28
 8000efa:	f000 fa18 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8ae 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Channel4_IRQHandler+0x10>)
 8000f66:	f000 fe8a 	bl	8001c7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2002ee40 	.word	0x2002ee40

08000f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <TIM2_IRQHandler+0x10>)
 8000f7a:	f002 fa4b 	bl	8003414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2002eea4 	.word	0x2002eea4

08000f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f90:	f001 f988 	bl	80022a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 fe43 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fc0f 	bl	8000810 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001000:	080045bc 	.word	0x080045bc
  ldr r2, =_sbss
 8001004:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001008:	2002eef4 	.word	0x2002eef4

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>

0800100e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f961 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f80e 	bl	8001040 <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e001      	b.n	8001034 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001030:	f7ff feb6 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_InitTick+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d023      	beq.n	800109c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_InitTick+0x70>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_InitTick+0x6c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f96d 	bl	800134a <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10f      	bne.n	8001096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d809      	bhi.n	8001090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f000 f937 	bl	80012f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_InitTick+0x74>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e007      	b.n	80010a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e004      	b.n	80010a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e001      	b.n	80010a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	2002eef0 	.word	0x2002eef0

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2002eef0 	.word	0x2002eef0

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e014      	b.n	800139e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fd2f 	bl	8000de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_DAC_Start+0x16>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e040      	b.n	800143e <HAL_DAC_Start+0x98>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2201      	movs	r2, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d11d      	bne.n	8001430 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	e014      	b.n	8001430 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2102      	movs	r1, #2
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	429a      	cmp	r2, r3
 800141e:	d107      	bne.n	8001430 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0202 	orr.w	r2, r2, #2
 800142e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	795b      	ldrb	r3, [r3, #5]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_DAC_Start_DMA+0x1e>
 800149e:	2302      	movs	r3, #2
 80014a0:	e0ab      	b.n	80015fa <HAL_DAC_Start_DMA+0x176>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2202      	movs	r2, #2
 80014ac:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d12f      	bne.n	8001514 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_DAC_Start_DMA+0x180>)
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a51      	ldr	r2, [pc, #324]	; (8001608 <HAL_DAC_Start_DMA+0x184>)
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <HAL_DAC_Start_DMA+0x188>)
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d013      	beq.n	800150a <HAL_DAC_Start_DMA+0x86>
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d845      	bhi.n	8001574 <HAL_DAC_Start_DMA+0xf0>
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_DAC_Start_DMA+0x72>
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d005      	beq.n	8001500 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014f4:	e03e      	b.n	8001574 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3308      	adds	r3, #8
 80014fc:	613b      	str	r3, [r7, #16]
        break;
 80014fe:	e03c      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	330c      	adds	r3, #12
 8001506:	613b      	str	r3, [r7, #16]
        break;
 8001508:	e037      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3310      	adds	r3, #16
 8001510:	613b      	str	r3, [r7, #16]
        break;
 8001512:	e032      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_DAC_Start_DMA+0x18c>)
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <HAL_DAC_Start_DMA+0x190>)
 8001522:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a3b      	ldr	r2, [pc, #236]	; (8001618 <HAL_DAC_Start_DMA+0x194>)
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800153a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d013      	beq.n	800156a <HAL_DAC_Start_DMA+0xe6>
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d817      	bhi.n	8001578 <HAL_DAC_Start_DMA+0xf4>
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_DAC_Start_DMA+0xd2>
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d005      	beq.n	8001560 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001554:	e010      	b.n	8001578 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3314      	adds	r3, #20
 800155c:	613b      	str	r3, [r7, #16]
        break;
 800155e:	e00c      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3318      	adds	r3, #24
 8001566:	613b      	str	r3, [r7, #16]
        break;
 8001568:	e007      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	331c      	adds	r3, #28
 8001570:	613b      	str	r3, [r7, #16]
        break;
 8001572:	e002      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001578:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800158e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6898      	ldr	r0, [r3, #8]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	f000 faf5 	bl	8001b88 <HAL_DMA_Start_IT>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
 80015a2:	e010      	b.n	80015c6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68d8      	ldr	r0, [r3, #12]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	f000 fae3 	bl	8001b88 <HAL_DMA_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e005      	b.n	80015f8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f043 0204 	orr.w	r2, r3, #4
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08001925 	.word	0x08001925
 8001608:	08001947 	.word	0x08001947
 800160c:	08001963 	.word	0x08001963
 8001610:	080019cd 	.word	0x080019cd
 8001614:	080019ef 	.word	0x080019ef
 8001618:	08001a0b 	.word	0x08001a0b

0800161c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d105      	bne.n	8001646 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	3308      	adds	r3, #8
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e004      	b.n	8001650 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	3314      	adds	r3, #20
 800164e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	461a      	mov	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	795b      	ldrb	r3, [r3, #5]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_DAC_ConfigChannel+0x1c>
 80016bc:	2302      	movs	r3, #2
 80016be:	e12a      	b.n	8001916 <HAL_DAC_ConfigChannel+0x272>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2202      	movs	r2, #2
 80016ca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d174      	bne.n	80017be <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fd04 	bl	80010e0 <HAL_GetTick>
 80016d8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d134      	bne.n	800174a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016e0:	e011      	b.n	8001706 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016e2:	f7ff fcfd 	bl	80010e0 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d90a      	bls.n	8001706 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f043 0208 	orr.w	r2, r3, #8
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e107      	b.n	8001916 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e6      	bne.n	80016e2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fcef 	bl	80010f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	69d2      	ldr	r2, [r2, #28]
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
 8001724:	e01e      	b.n	8001764 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001726:	f7ff fcdb 	bl	80010e0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d90a      	bls.n	800174a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f043 0208 	orr.w	r2, r3, #8
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2203      	movs	r2, #3
 8001744:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0e5      	b.n	8001916 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	2b00      	cmp	r3, #0
 8001752:	dbe8      	blt.n	8001726 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fccf 	bl	80010f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	69d2      	ldr	r2, [r2, #28]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	ea02 0103 	and.w	r1, r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	21ff      	movs	r1, #255	; 0xff
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	ea02 0103 	and.w	r1, r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d11d      	bne.n	8001802 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	4013      	ands	r3, r2
 80017e0:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2207      	movs	r2, #7
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	4013      	ands	r3, r2
 800181c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	431a      	orrs	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	4313      	orrs	r3, r2
 8001840:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	f640 72fe 	movw	r2, #4094	; 0xffe
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	4013      	ands	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	4313      	orrs	r3, r2
 800189c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a6:	d104      	bne.n	80018b2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	e018      	b.n	80018e4 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d104      	bne.n	80018c4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e00f      	b.n	80018e4 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80018c4:	f001 fba8 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 80018c8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_DAC_ConfigChannel+0x27c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d904      	bls.n	80018dc <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e003      	b.n	80018e4 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018e2:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	22c0      	movs	r2, #192	; 0xc0
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	04c4b400 	.word	0x04c4b400

08001924 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fe97 	bl	8001666 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	711a      	strb	r2, [r3, #4]
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fe90 	bl	800167a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f043 0204 	orr.w	r2, r3, #4
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe86 	bl	800168e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	711a      	strb	r2, [r3, #4]
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff ffd8 	bl	8001990 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	711a      	strb	r2, [r3, #4]
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ffd1 	bl	80019a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff ffc7 	bl	80019b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	711a      	strb	r2, [r3, #4]
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e08d      	b.n	8001b66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_DMA_Init+0x138>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d80f      	bhi.n	8001a76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_DMA_Init+0x13c>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_DMA_Init+0x140>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <HAL_DMA_Init+0x144>)
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
 8001a74:	e00e      	b.n	8001a94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_DMA_Init+0x148>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a3d      	ldr	r2, [pc, #244]	; (8001b78 <HAL_DMA_Init+0x140>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	009a      	lsls	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_DMA_Init+0x14c>)
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9b6 	bl	8001e58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af4:	d102      	bne.n	8001afc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b10:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_DMA_Init+0x104>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d80c      	bhi.n	8001b3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f9d6 	bl	8001ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020407 	.word	0x40020407
 8001b74:	bffdfff8 	.word	0xbffdfff8
 8001b78:	cccccccd 	.word	0xcccccccd
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	bffdfbf8 	.word	0xbffdfbf8
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Start_IT+0x20>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e066      	b.n	8001c76 <HAL_DMA_Start_IT+0xee>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d155      	bne.n	8001c68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f8fb 	bl	8001ddc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 020e 	orr.w	r2, r2, #14
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00f      	b.n	8001c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 020a 	orr.w	r2, r2, #10
 8001c1e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c54:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e005      	b.n	8001c74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 031c 	and.w	r3, r3, #28
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d026      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x7a>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d021      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0204 	bic.w	r2, r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 021c 	and.w	r2, r3, #28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2104      	movs	r1, #4
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d071      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001cf6:	e06c      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f003 031c 	and.w	r3, r3, #28
 8001d00:	2202      	movs	r2, #2
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d02e      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xec>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d029      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10b      	bne.n	8001d3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 020a 	bic.w	r2, r2, #10
 8001d32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f003 021c 	and.w	r2, r3, #28
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2102      	movs	r1, #2
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d038      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d68:	e033      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f003 031c 	and.w	r3, r3, #28
 8001d72:	2208      	movs	r2, #8
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d02a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x156>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d025      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020e 	bic.w	r2, r2, #14
 8001d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f003 021c 	and.w	r2, r3, #28
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
}
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001df2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e04:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 021c 	and.w	r2, r3, #28
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d108      	bne.n	8001e3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e3a:	e007      	b.n	8001e4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d80a      	bhi.n	8001e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6493      	str	r3, [r2, #72]	; 0x48
 8001e80:	e007      	b.n	8001e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3b08      	subs	r3, #8
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40020407 	.word	0x40020407
 8001ec8:	4002081c 	.word	0x4002081c
 8001ecc:	cccccccd 	.word	0xcccccccd
 8001ed0:	40020880 	.word	0x40020880

08001ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ef6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	1000823f 	.word	0x1000823f
 8001f18:	40020940 	.word	0x40020940

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	e166      	b.n	80021fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8158 	beq.w	80021f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d005      	beq.n	8001f5c <HAL_GPIO_Init+0x40>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d130      	bne.n	8001fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f92:	2201      	movs	r2, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 0201 	and.w	r2, r3, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d017      	beq.n	8001ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d123      	bne.n	800204e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	6939      	ldr	r1, [r7, #16]
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80b2 	beq.w	80021f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_GPIO_Init+0x2fc>)
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002094:	4a60      	ldr	r2, [pc, #384]	; (8002218 <HAL_GPIO_Init+0x2fc>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6613      	str	r3, [r2, #96]	; 0x60
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <HAL_GPIO_Init+0x2fc>)
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020a8:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_GPIO_Init+0x300>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020d2:	d02b      	beq.n	800212c <HAL_GPIO_Init+0x210>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_GPIO_Init+0x304>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d025      	beq.n	8002128 <HAL_GPIO_Init+0x20c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x308>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01f      	beq.n	8002124 <HAL_GPIO_Init+0x208>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d019      	beq.n	8002120 <HAL_GPIO_Init+0x204>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a4f      	ldr	r2, [pc, #316]	; (800222c <HAL_GPIO_Init+0x310>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <HAL_GPIO_Init+0x200>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <HAL_GPIO_Init+0x314>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00d      	beq.n	8002118 <HAL_GPIO_Init+0x1fc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_GPIO_Init+0x318>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x1f8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_GPIO_Init+0x31c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_GPIO_Init+0x1f4>
 800210c:	2307      	movs	r3, #7
 800210e:	e00e      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002110:	2308      	movs	r3, #8
 8002112:	e00c      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002114:	2306      	movs	r3, #6
 8002116:	e00a      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002118:	2305      	movs	r3, #5
 800211a:	e008      	b.n	800212e <HAL_GPIO_Init+0x212>
 800211c:	2304      	movs	r3, #4
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002120:	2303      	movs	r3, #3
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x212>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x212>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_GPIO_Init+0x300>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_GPIO_Init+0x320>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002170:	4a32      	ldr	r2, [pc, #200]	; (800223c <HAL_GPIO_Init+0x320>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_GPIO_Init+0x320>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_GPIO_Init+0x320>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_GPIO_Init+0x320>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_GPIO_Init+0x320>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_GPIO_Init+0x320>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_GPIO_Init+0x320>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f ae91 	bne.w	8001f2c <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	48001000 	.word	0x48001000
 8002230:	48001400 	.word	0x48001400
 8002234:	48001800 	.word	0x48001800
 8002238:	48001c00 	.word	0x48001c00
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800225c:	e002      	b.n	8002264 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43d9      	mvns	r1, r3
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	400b      	ands	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fd1e 	bl	8000d04 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	d102      	bne.n	80022ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80022e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ea:	e00b      	b.n	8002304 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d102      	bne.n	8002302 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	e000      	b.n	8002304 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002302:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40007000 	.word	0x40007000

08002314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d141      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d131      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002336:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002348:	4a41      	ldr	r2, [pc, #260]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002350:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2232      	movs	r2, #50	; 0x32
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a3f      	ldr	r2, [pc, #252]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002366:	e002      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d102      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d158      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e057      	b.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239a:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023a4:	e04d      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d141      	bne.n	8002432 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d131      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c2:	4a23      	ldr	r2, [pc, #140]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2232      	movs	r2, #50	; 0x32
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	3301      	adds	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f2:	e002      	b.n	80023fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d102      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f2      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d112      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e011      	b.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002430:	e007      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002440:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40007000 	.word	0x40007000
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f000 bc16 	b.w	8002c9c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002470:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247a:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80e4 	beq.w	800265a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4c>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	f040 808b 	bne.w	80025b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 8087 	bne.w	80025b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a8:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x64>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e3ed      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_RCC_OscConfig+0x7e>
 80024d0:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	e005      	b.n	80024e6 <HAL_RCC_OscConfig+0x8a>
 80024da:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80024dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d223      	bcs.n	8002532 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fd9e 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e3ce      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7c      	ldr	r2, [pc, #496]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4977      	ldr	r1, [pc, #476]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	4972      	ldr	r1, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e025      	b.n	800257e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6f      	ldr	r2, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	496a      	ldr	r1, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002550:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	4965      	ldr	r1, [pc, #404]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fd5e 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e38e      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257e:	f000 fcbf 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	495a      	ldr	r1, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x29c>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_RCC_OscConfig+0x2a0>)
 800259c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800259e:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_RCC_OscConfig+0x2a4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fd4c 	bl	8001040 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d052      	beq.n	8002658 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	e372      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d032      	beq.n	8002624 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fd89 	bl	80010e0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d2:	f7fe fd85 	bl	80010e0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e35b      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	493a      	ldr	r1, [pc, #232]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
 8002622:	e01a      	b.n	800265a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd56 	bl	80010e0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002638:	f7fe fd52 	bl	80010e0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e328      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x1dc>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d073      	beq.n	800274e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x21c>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d10e      	bne.n	8002690 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d063      	beq.n	800274c <HAL_RCC_OscConfig+0x2f0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d15f      	bne.n	800274c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e305      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_OscConfig+0x24c>
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0x288>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x270>
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0x288>
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <HAL_RCC_OscConfig+0x298>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fcf8 	bl	80010e0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	e010      	b.n	8002716 <HAL_RCC_OscConfig+0x2ba>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08003d70 	.word	0x08003d70
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fcec 	bl	80010e0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e2c2      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	4baf      	ldr	r3, [pc, #700]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x2a8>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fcdc 	bl	80010e0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe fcd8 	bl	80010e0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e2ae      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273e:	4ba5      	ldr	r3, [pc, #660]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x2d0>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d060      	beq.n	800281c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x310>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d119      	bne.n	800279a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d116      	bne.n	800279a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	4b99      	ldr	r3, [pc, #612]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x328>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e28b      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b93      	ldr	r3, [pc, #588]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4990      	ldr	r1, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	e040      	b.n	800281c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d023      	beq.n	80027ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a2:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8b      	ldr	r2, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fc97 	bl	80010e0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fc93 	bl	80010e0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e269      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	497c      	ldr	r1, [pc, #496]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b7a      	ldr	r3, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a79      	ldr	r2, [pc, #484]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80027f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fc73 	bl	80010e0 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fe fc6f 	bl	80010e0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e245      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fc4e 	bl	80010e0 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fc4a 	bl	80010e0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e220      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800285a:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCC_OscConfig+0x3ec>
 8002868:	e01b      	b.n	80028a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286a:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fc31 	bl	80010e0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fc2d 	bl	80010e0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e203      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ef      	bne.n	8002882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a6 	beq.w	80029fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028b4:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a43      	ldr	r2, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_RCC_OscConfig+0x57c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d118      	bne.n	800291a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_OscConfig+0x57c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x57c>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fbf4 	bl	80010e0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fbf0 	bl	80010e0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1c6      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <HAL_RCC_OscConfig+0x57c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x4d8>
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002932:	e024      	b.n	800297e <HAL_RCC_OscConfig+0x522>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d110      	bne.n	800295e <HAL_RCC_OscConfig+0x502>
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800295c:	e00f      	b.n	800297e <HAL_RCC_OscConfig+0x522>
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fbab 	bl	80010e0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fba7 	bl	80010e0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e17b      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ed      	beq.n	800298e <HAL_RCC_OscConfig+0x532>
 80029b2:	e01a      	b.n	80029ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fb94 	bl	80010e0 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fb90 	bl	80010e0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d906      	bls.n	80029dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e164      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029dc:	4ba8      	ldr	r3, [pc, #672]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e8      	bne.n	80029bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	4aa2      	ldr	r2, [pc, #648]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a10:	4b9b      	ldr	r3, [pc, #620]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a16:	4a9a      	ldr	r2, [pc, #616]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fb5e 	bl	80010e0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a28:	f7fe fb5a 	bl	80010e0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e130      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a3a:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x5cc>
 8002a48:	e01b      	b.n	8002a82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a50:	4a8b      	ldr	r2, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fb41 	bl	80010e0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fe fb3d 	bl	80010e0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e113      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a74:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8107 	beq.w	8002c9a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	f040 80cb 	bne.w	8002c2c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a96:	4b7a      	ldr	r3, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d12c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d123      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d11b      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d113      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	3b01      	subs	r3, #1
 8002afe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d06d      	beq.n	8002be0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d068      	beq.n	8002bdc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0ba      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a55      	ldr	r2, [pc, #340]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b32:	f7fe fad5 	bl	80010e0 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe fad1 	bl	80010e0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0a7      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x828>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b72:	0212      	lsls	r2, r2, #8
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	493a      	ldr	r1, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a37      	ldr	r2, [pc, #220]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb4:	f7fe fa94 	bl	80010e0 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fa90 	bl	80010e0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e066      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bda:	e05e      	b.n	8002c9a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e05d      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d156      	bne.n	8002c9a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c04:	f7fe fa6c 	bl	80010e0 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fa68 	bl	80010e0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e03e      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x7b0>
 8002c2a:	e036      	b.n	8002c9a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d031      	beq.n	8002c96 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_OscConfig+0x824>)
 8002c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fa3b 	bl	80010e0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fa37 	bl	80010e0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d905      	bls.n	8002c88 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e00d      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x848>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ec      	bne.n	8002c6e <HAL_RCC_OscConfig+0x812>
 8002c94:	e001      	b.n	8002c9a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e10f      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b86      	ldr	r3, [pc, #536]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 020f 	bic.w	r2, r3, #15
 8002cd6:	4984      	ldr	r1, [pc, #528]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0f7      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8089 	beq.w	8002e10 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d133      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b79      	ldr	r3, [pc, #484]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0e4      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d16:	f000 f9e5 	bl	80030e4 <RCC_GetSysClockFreqFromPLLSource>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a74      	ldr	r2, [pc, #464]	; (8002ef0 <HAL_RCC_ClockConfig+0x248>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d955      	bls.n	8002dce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d36:	4a6d      	ldr	r2, [pc, #436]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e044      	b.n	8002dce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03e      	beq.n	8002dce <HAL_RCC_ClockConfig+0x126>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d13a      	bne.n	8002dce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d60:	4a62      	ldr	r2, [pc, #392]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e02f      	b.n	8002dce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0ac      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0a0      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9e:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e098      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002dae:	f000 f8a7 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_RCC_ClockConfig+0x248>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d909      	bls.n	8002dce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dba:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4944      	ldr	r1, [pc, #272]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de0:	f7fe f97e 	bl	80010e0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe f97a 	bl	80010e0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e070      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4930      	ldr	r1, [pc, #192]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d105      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e40:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d210      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 020f 	bic.w	r2, r3, #15
 8002e58:	4923      	ldr	r1, [pc, #140]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_ClockConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e036      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4918      	ldr	r1, [pc, #96]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4910      	ldr	r1, [pc, #64]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb0:	f000 f826 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <HAL_RCC_ClockConfig+0x24c>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x250>)
 8002ece:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x254>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f8b3 	bl	8001040 <HAL_InitTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	04c4b400 	.word	0x04c4b400
 8002ef4:	08003d70 	.word	0x08003d70
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11e      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	e004      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d134      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d003      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xac>
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa8:	617b      	str	r3, [r7, #20]
      break;
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fae:	617b      	str	r3, [r7, #20]
      break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fb02 f203 	mul.w	r2, r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	0e5b      	lsrs	r3, r3, #25
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08003d80 	.word	0x08003d80
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000000 	.word	0x20000000

08003030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003048:	f7ff f944 	bl	80022d4 <HAL_PWREx_GetVoltageRange>
 800304c:	6178      	str	r0, [r7, #20]
 800304e:	e014      	b.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6593      	str	r3, [r2, #88]	; 0x58
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003068:	f7ff f934 	bl	80022d4 <HAL_PWREx_GetVoltageRange>
 800306c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d10b      	bne.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d913      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2ba0      	cmp	r3, #160	; 0xa0
 800308c:	d902      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800308e:	2302      	movs	r3, #2
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e00d      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e00a      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b7f      	cmp	r3, #127	; 0x7f
 800309e:	d902      	bls.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030a0:	2302      	movs	r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e004      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d101      	bne.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 020f 	bic.w	r2, r3, #15
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000

080030e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d118      	bne.n	800312c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e005      	b.n	8003122 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d003      	beq.n	8003144 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d003      	beq.n	800314a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003142:	e005      	b.n	8003150 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003146:	613b      	str	r3, [r7, #16]
    break;
 8003148:	e005      	b.n	8003156 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800314c:	613b      	str	r3, [r7, #16]
    break;
 800314e:	e002      	b.n	8003156 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
    break;
 8003154:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	3301      	adds	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fb02 f203 	mul.w	r2, r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0e5b      	lsrs	r3, r3, #25
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003196:	683b      	ldr	r3, [r7, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08003d80 	.word	0x08003d80
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e049      	b.n	800325a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fe72 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 fb1e 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d001      	beq.n	800327c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e047      	b.n	800330c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_TIM_Base_Start+0xb4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d018      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_TIM_Base_Start+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_Base_Start+0xbc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIM_Base_Start+0xc0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIM_Base_Start+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_Base_Start+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d115      	bne.n	80032f6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_TIM_Base_Start+0xcc>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d015      	beq.n	8003308 <HAL_TIM_Base_Start+0xa4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d011      	beq.n	8003308 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e008      	b.n	8003308 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e000      	b.n	800330a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	00010007 	.word	0x00010007

08003334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e04f      	b.n	80033ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d018      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_TIM_Base_Start_IT+0xc8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_TIM_Base_Start_IT+0xcc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_TIM_Base_Start_IT+0xd0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_TIM_Base_Start_IT+0xd4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0x76>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_TIM_Base_Start_IT+0xd8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d115      	bne.n	80033d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_TIM_Base_Start_IT+0xdc>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d015      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0xb4>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d011      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	e008      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e000      	b.n	80033ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	00010007 	.word	0x00010007

08003414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0202 	mvn.w	r2, #2
 8003440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9ce 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9c0 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f9d1 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0204 	mvn.w	r2, #4
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9a4 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f996 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9a7 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0208 	mvn.w	r2, #8
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f97a 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f96c 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f97d 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b10      	cmp	r3, #16
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0210 	mvn.w	r2, #16
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f950 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f942 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f953 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0201 	mvn.w	r2, #1
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fbcc 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fafe 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d2:	d10e      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 faf1 	bl	8003bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d10e      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d107      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f901 	bl	8003820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b20      	cmp	r3, #32
 800362a:	d10e      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	d107      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f06f 0220 	mvn.w	r2, #32
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fab1 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_ConfigClockSource+0x1c>
 800366a:	2302      	movs	r3, #2
 800366c:	e0b6      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x18a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003690:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003698:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	d03e      	beq.n	800372a <HAL_TIM_ConfigClockSource+0xd8>
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b0:	f200 8087 	bhi.w	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	f000 8086 	beq.w	80037c8 <HAL_TIM_ConfigClockSource+0x176>
 80036bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c0:	d87f      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036c2:	2b70      	cmp	r3, #112	; 0x70
 80036c4:	d01a      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xaa>
 80036c6:	2b70      	cmp	r3, #112	; 0x70
 80036c8:	d87b      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036ca:	2b60      	cmp	r3, #96	; 0x60
 80036cc:	d050      	beq.n	8003770 <HAL_TIM_ConfigClockSource+0x11e>
 80036ce:	2b60      	cmp	r3, #96	; 0x60
 80036d0:	d877      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036d2:	2b50      	cmp	r3, #80	; 0x50
 80036d4:	d03c      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0xfe>
 80036d6:	2b50      	cmp	r3, #80	; 0x50
 80036d8:	d873      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d058      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x13e>
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d86f      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036e2:	2b30      	cmp	r3, #48	; 0x30
 80036e4:	d064      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x15e>
 80036e6:	2b30      	cmp	r3, #48	; 0x30
 80036e8:	d86b      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d060      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x15e>
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d867      	bhi.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d05c      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x15e>
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d05a      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x15e>
 80036fa:	e062      	b.n	80037c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f000 f9a6 	bl	8003a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800371e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
      break;
 8003728:	e04f      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f000 f98f 	bl	8003a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374c:	609a      	str	r2, [r3, #8]
      break;
 800374e:	e03c      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f000 f903 	bl	8003968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2150      	movs	r1, #80	; 0x50
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f95c 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 800376e:	e02c      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f922 	bl	80039c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2160      	movs	r1, #96	; 0x60
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f94c 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 800378e:	e01c      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	f000 f8e3 	bl	8003968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f93c 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f933 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e003      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d00f      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <TIM_Base_SetConfig+0x118>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <TIM_Base_SetConfig+0x120>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <TIM_Base_SetConfig+0x114>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d01b      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <TIM_Base_SetConfig+0x118>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d017      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <TIM_Base_SetConfig+0x120>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00f      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a29      	ldr	r2, [pc, #164]	; (8003958 <TIM_Base_SetConfig+0x124>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00b      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <TIM_Base_SetConfig+0x128>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <TIM_Base_SetConfig+0x12c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_Base_SetConfig+0x130>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a10      	ldr	r2, [pc, #64]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00f      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00b      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <TIM_Base_SetConfig+0x128>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a10      	ldr	r2, [pc, #64]	; (8003960 <TIM_Base_SetConfig+0x12c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <TIM_Base_SetConfig+0x130>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 030a 	bic.w	r3, r3, #10
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0210 	bic.w	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	031b      	lsls	r3, r3, #12
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f043 0307 	orr.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e068      	b.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003aee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d018      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10c      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40013400 	.word	0x40013400
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40014000 	.word	0x40014000

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <arm_sin_f32>:
 8003be8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003c68 <arm_sin_f32+0x80>
 8003bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003bf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003bfc:	d504      	bpl.n	8003c08 <arm_sin_f32+0x20>
 8003bfe:	ee17 3a90 	vmov	r3, s15
 8003c02:	3b01      	subs	r3, #1
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c0c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003c6c <arm_sin_f32+0x84>
 8003c10:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c14:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003c18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c26:	d21a      	bcs.n	8003c5e <arm_sin_f32+0x76>
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <arm_sin_f32+0x88>)
 8003c38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	edd2 6a00 	vldr	s13, [r2]
 8003c4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003c50:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c58:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003c5c:	4770      	bx	lr
 8003c5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003c62:	2101      	movs	r1, #1
 8003c64:	2300      	movs	r3, #0
 8003c66:	e7e6      	b.n	8003c36 <arm_sin_f32+0x4e>
 8003c68:	3e22f983 	.word	0x3e22f983
 8003c6c:	44000000 	.word	0x44000000
 8003c70:	08003db0 	.word	0x08003db0

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	; (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	; (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f000 f866 	bl	8003d58 <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	080045b4 	.word	0x080045b4
 8003cb0:	080045b4 	.word	0x080045b4
 8003cb4:	080045b4 	.word	0x080045b4
 8003cb8:	080045b8 	.word	0x080045b8

08003cbc <memset>:
 8003cbc:	4402      	add	r2, r0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <round>:
 8003ccc:	ec51 0b10 	vmov	r0, r1, d0
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8003cd6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8003cda:	2c13      	cmp	r4, #19
 8003cdc:	ee10 2a10 	vmov	r2, s0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	dc19      	bgt.n	8003d18 <round+0x4c>
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	da09      	bge.n	8003cfc <round+0x30>
 8003ce8:	3401      	adds	r4, #1
 8003cea:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003cee:	d103      	bne.n	8003cf8 <round+0x2c>
 8003cf0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003cf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	e028      	b.n	8003d4e <round+0x82>
 8003cfc:	4d15      	ldr	r5, [pc, #84]	; (8003d54 <round+0x88>)
 8003cfe:	4125      	asrs	r5, r4
 8003d00:	ea01 0605 	and.w	r6, r1, r5
 8003d04:	4332      	orrs	r2, r6
 8003d06:	d00e      	beq.n	8003d26 <round+0x5a>
 8003d08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d0c:	fa42 f404 	asr.w	r4, r2, r4
 8003d10:	4423      	add	r3, r4
 8003d12:	ea23 0305 	bic.w	r3, r3, r5
 8003d16:	e7ef      	b.n	8003cf8 <round+0x2c>
 8003d18:	2c33      	cmp	r4, #51	; 0x33
 8003d1a:	dd07      	ble.n	8003d2c <round+0x60>
 8003d1c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003d20:	d101      	bne.n	8003d26 <round+0x5a>
 8003d22:	f7fc fb9d 	bl	8000460 <__adddf3>
 8003d26:	ec41 0b10 	vmov	d0, r0, r1
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8003d30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d34:	40f5      	lsrs	r5, r6
 8003d36:	4228      	tst	r0, r5
 8003d38:	d0f5      	beq.n	8003d26 <round+0x5a>
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003d40:	fa01 f404 	lsl.w	r4, r1, r4
 8003d44:	1912      	adds	r2, r2, r4
 8003d46:	bf28      	it	cs
 8003d48:	185b      	addcs	r3, r3, r1
 8003d4a:	ea22 0105 	bic.w	r1, r2, r5
 8003d4e:	4608      	mov	r0, r1
 8003d50:	4619      	mov	r1, r3
 8003d52:	e7e8      	b.n	8003d26 <round+0x5a>
 8003d54:	000fffff 	.word	0x000fffff

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
