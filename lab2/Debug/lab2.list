
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d94  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006f58  08006f58  00016f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f4  080073f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080073f4  080073f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f4  080073f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080073fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001dc  080075d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080075d8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4a8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca6  00000000  00000000  0002c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6af  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4c6  00000000  00000000  0005ace7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d49f  00000000  00000000  000651ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017264c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  001726a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006f3c 	.word	0x08006f3c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08006f3c 	.word	0x08006f3c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f001 f9c0 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f80d 	bl	8000c08 <HAL_InitTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f003 fad7 	bl	80041ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f9cd 	bl	8001fd2 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f001 f997 	bl	8001f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000208 	.word	0x20000208

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000208 	.word	0x20000208

08000cc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3360      	adds	r3, #96	; 0x60
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <LL_ADC_SetOffset+0x44>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	4313      	orrs	r3, r2
 8000d58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	03fff000 	.word	0x03fff000

08000d70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3360      	adds	r3, #96	; 0x60
 8000d7e:	461a      	mov	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3360      	adds	r3, #96	; 0x60
 8000dac:	461a      	mov	r2, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	615a      	str	r2, [r3, #20]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3330      	adds	r3, #48	; 0x30
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	211f      	movs	r1, #31
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0e9b      	lsrs	r3, r3, #26
 8000e56:	f003 011f 	and.w	r1, r3, #31
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b087      	sub	sp, #28
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3314      	adds	r3, #20
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0e5b      	lsrs	r3, r3, #25
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	0d1b      	lsrs	r3, r3, #20
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	0d1b      	lsrs	r3, r3, #20
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0318 	and.w	r3, r3, #24
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ef0:	40d9      	lsrs	r1, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	0007ffff 	.word	0x0007ffff

08000f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f9c:	d101      	bne.n	8000fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc4:	f043 0201 	orr.w	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <LL_ADC_IsEnabled+0x18>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <LL_ADC_IsEnabled+0x1a>
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800100e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001012:	f043 0204 	orr.w	r2, r3, #4
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b04      	cmp	r3, #4
 8001038:	d101      	bne.n	800103e <LL_ADC_REG_IsConversionOngoing+0x18>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b08      	cmp	r3, #8
 800105e:	d101      	bne.n	8001064 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e12f      	b.n	80012ee <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001098:	2b00      	cmp	r3, #0
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f003 f8a9 	bl	80041f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff3f 	bl	8000f38 <LL_ADC_IsDeepPowerDownEnabled>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff25 	bl	8000f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff5a 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d115      	bne.n	8001106 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff3e 	bl	8000f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e4:	4b84      	ldr	r3, [pc, #528]	; (80012f8 <HAL_ADC_Init+0x284>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	099b      	lsrs	r3, r3, #6
 80010ea:	4a84      	ldr	r2, [pc, #528]	; (80012fc <HAL_ADC_Init+0x288>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	3301      	adds	r3, #1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010f8:	e002      	b.n	8001100 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff3c 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f043 0210 	orr.w	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff75 	bl	8001026 <LL_ADC_REG_IsConversionOngoing>
 800113c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 80c8 	bne.w	80012dc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80c4 	bne.w	80012dc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800115c:	f043 0202 	orr.w	r2, r3, #2
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <LL_ADC_IsEnabled>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001174:	4862      	ldr	r0, [pc, #392]	; (8001300 <HAL_ADC_Init+0x28c>)
 8001176:	f7ff ff2f 	bl	8000fd8 <LL_ADC_IsEnabled>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4619      	mov	r1, r3
 8001186:	485f      	ldr	r0, [pc, #380]	; (8001304 <HAL_ADC_Init+0x290>)
 8001188:	f7ff fd9a 	bl	8000cc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e5b      	ldrb	r3, [r3, #25]
 8001190:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001196:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800119c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	3b01      	subs	r3, #1
 80011c0:	045b      	lsls	r3, r3, #17
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_ADC_Init+0x294>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	430b      	orrs	r3, r1
 80011f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff12 	bl	8001026 <LL_ADC_REG_IsConversionOngoing>
 8001202:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff1f 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 800120e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d140      	bne.n	8001298 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d13d      	bne.n	8001298 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e1b      	ldrb	r3, [r3, #24]
 8001224:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001226:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800122e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800123e:	f023 0306 	bic.w	r3, r3, #6
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	430b      	orrs	r3, r1
 800124a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001252:	2b01      	cmp	r3, #1
 8001254:	d118      	bne.n	8001288 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800126c:	4311      	orrs	r1, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001272:	4311      	orrs	r1, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001278:	430a      	orrs	r2, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	e007      	b.n	8001298 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10c      	bne.n	80012ba <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f023 010f 	bic.w	r1, r3, #15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	1e5a      	subs	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	631a      	str	r2, [r3, #48]	; 0x30
 80012b8:	e007      	b.n	80012ca <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 020f 	bic.w	r2, r2, #15
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	f043 0201 	orr.w	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	659a      	str	r2, [r3, #88]	; 0x58
 80012da:	e007      	b.n	80012ec <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f043 0210 	orr.w	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	053e2d63 	.word	0x053e2d63
 8001300:	50040000 	.word	0x50040000
 8001304:	50040300 	.word	0x50040300
 8001308:	fff0c007 	.word	0xfff0c007

0800130c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe84 	bl	8001026 <LL_ADC_REG_IsConversionOngoing>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Start+0x26>
 800132e:	2302      	movs	r3, #2
 8001330:	e04b      	b.n	80013ca <HAL_ADC_Start+0xbe>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fce2 	bl	8001d04 <ADC_Enable>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d137      	bne.n	80013ba <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136a:	d106      	bne.n	800137a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	f023 0206 	bic.w	r2, r3, #6
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	65da      	str	r2, [r3, #92]	; 0x5c
 8001378:	e002      	b.n	8001380 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	221c      	movs	r2, #28
 8001386:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe23 	bl	8000ffe <LL_ADC_REG_StartConversion>
 80013b8:	e006      	b.n	80013c8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80013c2:	e001      	b.n	80013c8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c4:	2302      	movs	r3, #2
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d102      	bne.n	80013ea <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013e4:	2308      	movs	r3, #8
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e010      	b.n	800140c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f043 0220 	orr.w	r2, r3, #32
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e06f      	b.n	80014e8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001408:	2304      	movs	r3, #4
 800140a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800140c:	f7ff fc4c 	bl	8000ca8 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001412:	e021      	b.n	8001458 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141a:	d01d      	beq.n	8001458 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800141c:	f7ff fc44 	bl	8000ca8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d302      	bcc.n	8001432 <HAL_ADC_PollForConversion+0x60>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d112      	bne.n	8001458 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f043 0204 	orr.w	r2, r3, #4
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e047      	b.n	80014e8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0d6      	beq.n	8001414 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcbe 	bl	8000df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01c      	beq.n	80014bc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7e5b      	ldrb	r3, [r3, #25]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d111      	bne.n	80014bc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d104      	bne.n	80014d4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2208      	movs	r2, #8
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e008      	b.n	80014e6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0b6      	sub	sp, #216	; 0xd8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADC_ConfigChannel+0x22>
 800152a:	2302      	movs	r3, #2
 800152c:	e3d5      	b.n	8001cda <HAL_ADC_ConfigChannel+0x7ce>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd73 	bl	8001026 <LL_ADC_REG_IsConversionOngoing>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 83ba 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d824      	bhi.n	800159a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	3b02      	subs	r3, #2
 8001556:	2b03      	cmp	r3, #3
 8001558:	d81b      	bhi.n	8001592 <HAL_ADC_ConfigChannel+0x86>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_ADC_ConfigChannel+0x54>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001571 	.word	0x08001571
 8001564:	08001579 	.word	0x08001579
 8001568:	08001581 	.word	0x08001581
 800156c:	08001589 	.word	0x08001589
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	220c      	movs	r2, #12
 8001574:	605a      	str	r2, [r3, #4]
          break;
 8001576:	e011      	b.n	800159c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2212      	movs	r2, #18
 800157c:	605a      	str	r2, [r3, #4]
          break;
 800157e:	e00d      	b.n	800159c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2218      	movs	r2, #24
 8001584:	605a      	str	r2, [r3, #4]
          break;
 8001586:	e009      	b.n	800159c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	605a      	str	r2, [r3, #4]
          break;
 8001590:	e004      	b.n	800159c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2206      	movs	r2, #6
 8001596:	605a      	str	r2, [r3, #4]
          break;
 8001598:	e000      	b.n	800159c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800159a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	f7ff fc38 	bl	8000e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd37 	bl	8001026 <LL_ADC_REG_IsConversionOngoing>
 80015b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fd43 	bl	800104c <LL_ADC_INJ_IsConversionOngoing>
 80015c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 81c1 	bne.w	8001956 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 81bc 	bne.w	8001956 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e6:	d10f      	bne.n	8001608 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fc3f 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fbe6 	bl	8000dd2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001606:	e00e      	b.n	8001626 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	461a      	mov	r2, r3
 8001616:	f7ff fc2e 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fbd6 	bl	8000dd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00a      	beq.n	800165e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6919      	ldr	r1, [r3, #16]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001658:	f7ff fb66 	bl	8000d28 <LL_ADC_SetOffset>
 800165c:	e17b      	b.n	8001956 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb83 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_ADC_ConfigChannel+0x17e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb78 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	e01e      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1bc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb6d 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e004      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80016bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1d4>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	e018      	b.n	8001712 <HAL_ADC_ConfigChannel+0x206>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80016f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001704:	2320      	movs	r3, #32
 8001706:	e004      	b.n	8001712 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001712:	429a      	cmp	r2, r3
 8001714:	d106      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb3c 	bl	8000d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fb20 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x244>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb15 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	0e9b      	lsrs	r3, r3, #26
 800174a:	f003 021f 	and.w	r2, r3, #31
 800174e:	e01e      	b.n	800178e <HAL_ADC_ConfigChannel+0x282>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb0a 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800176e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800177e:	2320      	movs	r3, #32
 8001780:	e004      	b.n	800178c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x29a>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	e018      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x2cc>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80017ca:	2320      	movs	r3, #32
 80017cc:	e004      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80017ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017d8:	429a      	cmp	r2, r3
 80017da:	d106      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2200      	movs	r2, #0
 80017e2:	2101      	movs	r1, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fad9 	bl	8000d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2102      	movs	r1, #2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fabd 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10a      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x30a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fab2 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	e01e      	b.n	8001854 <HAL_ADC_ConfigChannel+0x348>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff faa7 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800183c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001844:	2320      	movs	r3, #32
 8001846:	e004      	b.n	8001852 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_ADC_ConfigChannel+0x360>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	e016      	b.n	800189a <HAL_ADC_ConfigChannel+0x38e>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800187e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e004      	b.n	800189a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800189a:	429a      	cmp	r2, r3
 800189c:	d106      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2102      	movs	r1, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa78 	bl	8000d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2103      	movs	r1, #3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa5c 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x3cc>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2103      	movs	r1, #3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa51 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	0e9b      	lsrs	r3, r3, #26
 80018d2:	f003 021f 	and.w	r2, r3, #31
 80018d6:	e017      	b.n	8001908 <HAL_ADC_ConfigChannel+0x3fc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa46 	bl	8000d70 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80018f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80018fa:	2320      	movs	r3, #32
 80018fc:	e003      	b.n	8001906 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80018fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x414>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	e011      	b.n	8001944 <HAL_ADC_ConfigChannel+0x438>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800192e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001930:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e003      	b.n	8001944 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800193c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	2103      	movs	r1, #3
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fa23 	bl	8000d9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fb3c 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8140 	bne.w	8001be8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	461a      	mov	r2, r3
 8001976:	f7ff faa9 	bl	8000ecc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4a8f      	ldr	r2, [pc, #572]	; (8001bbc <HAL_ADC_ConfigChannel+0x6b0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	f040 8131 	bne.w	8001be8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x4a2>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	3301      	adds	r3, #1
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	bf94      	ite	ls
 80019a6:	2301      	movls	r3, #1
 80019a8:	2300      	movhi	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	e019      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x4d6>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e003      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2b09      	cmp	r3, #9
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d079      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x4f6>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	3301      	adds	r3, #1
 80019fa:	069b      	lsls	r3, r3, #26
 80019fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a00:	e015      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x522>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a12:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e003      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	069b      	lsls	r3, r3, #26
 8001a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x542>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	3301      	adds	r3, #1
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	e017      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x572>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	ea42 0103 	orr.w	r1, r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x598>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	3301      	adds	r3, #1
 8001a96:	f003 021f 	and.w	r2, r3, #31
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	051b      	lsls	r3, r3, #20
 8001aa2:	e018      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x5ca>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e003      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f003 021f 	and.w	r2, r3, #31
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	e081      	b.n	8001bde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x5ea>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	3301      	adds	r3, #1
 8001aee:	069b      	lsls	r3, r3, #26
 8001af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af4:	e015      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x616>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	069b      	lsls	r3, r3, #26
 8001b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x636>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	e017      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x666>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	61fb      	str	r3, [r7, #28]
  return result;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e003      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3301      	adds	r3, #1
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	ea42 0103 	orr.w	r1, r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x692>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	3b1e      	subs	r3, #30
 8001b96:	051b      	lsls	r3, r3, #20
 8001b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	e01e      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x6d0>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	613b      	str	r3, [r7, #16]
  return result;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e006      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x6bc>
 8001bba:	bf00      	nop
 8001bbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f003 021f 	and.w	r2, r3, #31
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b1e      	subs	r3, #30
 8001bd6:	051b      	lsls	r3, r3, #20
 8001bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	6892      	ldr	r2, [r2, #8]
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7ff f947 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d06c      	beq.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf4:	483c      	ldr	r0, [pc, #240]	; (8001ce8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bf6:	f7ff f889 	bl	8000d0c <LL_ADC_GetCommonPathInternalCh>
 8001bfa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_ADC_ConfigChannel+0x7e0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d127      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d121      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d157      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c26:	4619      	mov	r1, r3
 8001c28:	482f      	ldr	r0, [pc, #188]	; (8001ce8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c2a:	f7ff f85c 	bl	8000ce6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_ADC_ConfigChannel+0x7e8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <HAL_ADC_ConfigChannel+0x7ec>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c48:	e002      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c56:	e03a      	b.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_ADC_ConfigChannel+0x7f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x77e>
 8001c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d12a      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c80:	4619      	mov	r1, r3
 8001c82:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c84:	f7ff f82f 	bl	8000ce6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c88:	e021      	b.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_ADC_ConfigChannel+0x7f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d11c      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d111      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cb6:	f7ff f816 	bl	8000ce6 <LL_ADC_SetCommonPathInternalCh>
 8001cba:	e008      	b.n	8001cce <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	37d8      	adds	r7, #216	; 0xd8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	80080000 	.word	0x80080000
 8001ce8:	50040300 	.word	0x50040300
 8001cec:	c7520000 	.word	0xc7520000
 8001cf0:	50040000 	.word	0x50040000
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	053e2d63 	.word	0x053e2d63
 8001cfc:	cb840000 	.word	0xcb840000
 8001d00:	80000001 	.word	0x80000001

08001d04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f961 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d14d      	bne.n	8001db8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <ADC_Enable+0xc0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e039      	b.n	8001dba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f930 	bl	8000fb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d50:	f7fe ffaa 	bl	8000ca8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d56:	e028      	b.n	8001daa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f93b 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f91f 	bl	8000fb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d72:	f7fe ff99 	bl	8000ca8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d914      	bls.n	8001daa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d00d      	beq.n	8001daa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e007      	b.n	8001dba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d1cf      	bne.n	8001d58 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	8000003f 	.word	0x8000003f

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e166      	b.n	80022ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8158 	beq.w	80022c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x40>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d130      	bne.n	800208e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002062:	2201      	movs	r2, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0201 	and.w	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b03      	cmp	r3, #3
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d123      	bne.n	800211e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80b2 	beq.w	80022c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6613      	str	r3, [r2, #96]	; 0x60
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002178:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <HAL_GPIO_Init+0x300>)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021a2:	d02b      	beq.n	80021fc <HAL_GPIO_Init+0x210>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x304>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d025      	beq.n	80021f8 <HAL_GPIO_Init+0x20c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x308>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01f      	beq.n	80021f4 <HAL_GPIO_Init+0x208>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x30c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d019      	beq.n	80021f0 <HAL_GPIO_Init+0x204>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x310>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x200>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_GPIO_Init+0x314>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1fc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_GPIO_Init+0x318>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1f8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x31c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1f4>
 80021dc:	2307      	movs	r3, #7
 80021de:	e00e      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e0:	2308      	movs	r3, #8
 80021e2:	e00c      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e4:	2306      	movs	r3, #6
 80021e6:	e00a      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e8:	2305      	movs	r3, #5
 80021ea:	e008      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021fc:	2300      	movs	r3, #0
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220e:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x300>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_GPIO_Init+0x320>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_GPIO_Init+0x320>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_GPIO_Init+0x320>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800226a:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_GPIO_Init+0x320>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_GPIO_Init+0x320>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_GPIO_Init+0x320>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_GPIO_Init+0x320>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_GPIO_Init+0x320>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f ae91 	bne.w	8001ffc <HAL_GPIO_Init+0x10>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000c00 	.word	0x48000c00
 80022fc:	48001000 	.word	0x48001000
 8002300:	48001400 	.word	0x48001400
 8002304:	48001800 	.word	0x48001800
 8002308:	48001c00 	.word	0x48001c00
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232c:	e002      	b.n	8002334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43d9      	mvns	r1, r3
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	400b      	ands	r3, r1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f806 	bl	80023a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40010400 	.word	0x40010400

080023a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	d102      	bne.n	80023d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d2:	e00b      	b.n	80023ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e2:	d102      	bne.n	80023ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80023e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e8:	e000      	b.n	80023ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40007000 	.word	0x40007000

080023fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d141      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800240a:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d131      	bne.n	800247c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002418:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241e:	4a46      	ldr	r2, [pc, #280]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002430:	4a41      	ldr	r2, [pc, #260]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2232      	movs	r2, #50	; 0x32
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	4a3f      	ldr	r2, [pc, #252]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	3301      	adds	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244e:	e002      	b.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002462:	d102      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f2      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002476:	d158      	bne.n	800252a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e057      	b.n	800252c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800248c:	e04d      	b.n	800252a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002494:	d141      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a2:	d131      	bne.n	8002508 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2232      	movs	r2, #50	; 0x32
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9b      	lsrs	r3, r3, #18
 80024d6:	3301      	adds	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024da:	e002      	b.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3b01      	subs	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d102      	bne.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f2      	bne.n	80024dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d112      	bne.n	800252a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e011      	b.n	800252c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002518:	e007      	b.n	800252a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002528:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40007000 	.word	0x40007000
 800253c:	20000008 	.word	0x20000008
 8002540:	431bde83 	.word	0x431bde83

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f000 bc16 	b.w	8002d84 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002558:	4ba0      	ldr	r3, [pc, #640]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002562:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80e4 	beq.w	8002742 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_RCC_OscConfig+0x4c>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	f040 808b 	bne.w	800269e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 8087 	bne.w	800269e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002590:	4b92      	ldr	r3, [pc, #584]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x64>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e3ed      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_RCC_OscConfig+0x7e>
 80025b8:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	e005      	b.n	80025ce <HAL_RCC_OscConfig+0x8a>
 80025c2:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d223      	bcs.n	800261a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fd92 	bl	8003100 <RCC_SetFlashLatencyFromMSIRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e3ce      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e6:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b7a      	ldr	r3, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4977      	ldr	r1, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002604:	4b75      	ldr	r3, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	4972      	ldr	r1, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e025      	b.n	8002666 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	496a      	ldr	r1, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002638:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fd52 	bl	8003100 <RCC_SetFlashLatencyFromMSIRange>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e38e      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002666:	f000 fcbf 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	495a      	ldr	r1, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x29c>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x2a0>)
 8002684:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x2a4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fabc 	bl	8000c08 <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d052      	beq.n	8002740 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	e372      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d032      	beq.n	800270c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b2:	f7fe faf9 	bl	8000ca8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ba:	f7fe faf5 	bl	8000ca8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e35b      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d8:	4b40      	ldr	r3, [pc, #256]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3f      	ldr	r2, [pc, #252]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	493a      	ldr	r1, [pc, #232]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	4935      	ldr	r1, [pc, #212]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
 800270a:	e01a      	b.n	8002742 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270c:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a32      	ldr	r2, [pc, #200]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002718:	f7fe fac6 	bl	8000ca8 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002720:	f7fe fac2 	bl	8000ca8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e328      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002732:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1dc>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d073      	beq.n	8002836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x21c>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d10e      	bne.n	8002778 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d063      	beq.n	8002834 <HAL_RCC_OscConfig+0x2f0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d15f      	bne.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e305      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x24c>
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0x288>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x270>
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x288>
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fa68 	bl	8000ca8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	e010      	b.n	80027fe <HAL_RCC_OscConfig+0x2ba>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08006fd0 	.word	0x08006fd0
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fa5c 	bl	8000ca8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e2c2      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fe:	4baf      	ldr	r3, [pc, #700]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x2a8>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fa4c 	bl	8000ca8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fa48 	bl	8000ca8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e2ae      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002826:	4ba5      	ldr	r3, [pc, #660]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x2d0>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d060      	beq.n	8002904 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x310>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d119      	bne.n	8002882 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d116      	bne.n	8002882 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	4b99      	ldr	r3, [pc, #612]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x328>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e28b      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4990      	ldr	r1, [pc, #576]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	e040      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d023      	beq.n	80028d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288a:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8b      	ldr	r2, [pc, #556]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fa07 	bl	8000ca8 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fa03 	bl	8000ca8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e269      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	497c      	ldr	r1, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e018      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a79      	ldr	r2, [pc, #484]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe f9e3 	bl	8000ca8 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe f9df 	bl	8000ca8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e245      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f8:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d03c      	beq.n	800298a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01c      	beq.n	8002952 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	4a67      	ldr	r2, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe f9be 	bl	8000ca8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe f9ba 	bl	8000ca8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e220      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCC_OscConfig+0x3ec>
 8002950:	e01b      	b.n	800298a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe f9a1 	bl	8000ca8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe f99d 	bl	8000ca8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e203      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ef      	bne.n	800296a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80a6 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	4a43      	ldr	r2, [pc, #268]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b2:	6593      	str	r3, [r2, #88]	; 0x58
 80029b4:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d118      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029dc:	f7fe f964 	bl	8000ca8 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe f960 	bl	8000ca8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1c6      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d8>
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1a:	e024      	b.n	8002a66 <HAL_RCC_OscConfig+0x522>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d110      	bne.n	8002a46 <HAL_RCC_OscConfig+0x502>
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a44:	e00f      	b.n	8002a66 <HAL_RCC_OscConfig+0x522>
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe f91b 	bl	8000ca8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe f917 	bl	8000ca8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e17b      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ed      	beq.n	8002a76 <HAL_RCC_OscConfig+0x532>
 8002a9a:	e01a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f904 	bl	8000ca8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa2:	e00f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe f900 	bl	8000ca8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d906      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e164      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac4:	4ba8      	ldr	r3, [pc, #672]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e8      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad2:	7ffb      	ldrb	r3, [r7, #31]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4ba3      	ldr	r3, [pc, #652]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	4aa2      	ldr	r2, [pc, #648]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af8:	4b9b      	ldr	r3, [pc, #620]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afe:	4a9a      	ldr	r2, [pc, #616]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe f8ce 	bl	8000ca8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b10:	f7fe f8ca 	bl	8000ca8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e130      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b22:	4b91      	ldr	r3, [pc, #580]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x5cc>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b32:	4b8d      	ldr	r3, [pc, #564]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b38:	4a8b      	ldr	r2, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe f8b1 	bl	8000ca8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4a:	f7fe f8ad 	bl	8000ca8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e113      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b5c:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8107 	beq.w	8002d82 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	f040 80cb 	bne.w	8002d14 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b7e:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d12c      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d123      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d11b      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d113      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d109      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d06d      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d068      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0ba      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a55      	ldr	r2, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c1a:	f7fe f845 	bl	8000ca8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe f841 	bl	8000ca8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0a7      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <HAL_RCC_OscConfig+0x828>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c5a:	0212      	lsls	r2, r2, #8
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c62:	0852      	lsrs	r2, r2, #1
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0552      	lsls	r2, r2, #21
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c6e:	0852      	lsrs	r2, r2, #1
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0652      	lsls	r2, r2, #25
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c7a:	06d2      	lsls	r2, r2, #27
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	493a      	ldr	r1, [pc, #232]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c9c:	f7fe f804 	bl	8000ca8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe f800 	bl	8000ca8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e066      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc2:	e05e      	b.n	8002d82 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e05d      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d156      	bne.n	8002d82 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cec:	f7fd ffdc 	bl	8000ca8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fd ffd8 	bl	8000ca8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e03e      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x7b0>
 8002d12:	e036      	b.n	8002d82 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d031      	beq.n	8002d7e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d38:	f023 0303 	bic.w	r3, r3, #3
 8002d3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x824>)
 8002d44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fd ffab 	bl	8000ca8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	e00c      	b.n	8002d70 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fd ffa7 	bl	8000ca8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d905      	bls.n	8002d70 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e00d      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x848>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ec      	bne.n	8002d56 <HAL_RCC_OscConfig+0x812>
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e10f      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b86      	ldr	r3, [pc, #536]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	4984      	ldr	r1, [pc, #528]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0f7      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8089 	beq.w	8002ef8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d133      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e4      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002dfe:	f000 f9d9 	bl	80031b4 <RCC_GetSysClockFreqFromPLLSource>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4a74      	ldr	r2, [pc, #464]	; (8002fd8 <HAL_RCC_ClockConfig+0x248>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d955      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e16:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1e:	4a6d      	ldr	r2, [pc, #436]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e044      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03e      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d13a      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e48:	4a62      	ldr	r2, [pc, #392]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e02f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d115      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0ac      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0a0      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e86:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e098      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e96:	f000 f8a7 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_RCC_ClockConfig+0x248>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d909      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eaa:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4944      	ldr	r1, [pc, #272]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fd feee 	bl	8000ca8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fd feea 	bl	8000ca8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e070      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4930      	ldr	r1, [pc, #192]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f28:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d210      	bcs.n	8002f5a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 020f 	bic.w	r2, r3, #15
 8002f40:	4923      	ldr	r1, [pc, #140]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e036      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4918      	ldr	r1, [pc, #96]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4910      	ldr	r1, [pc, #64]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f98:	f000 f826 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <HAL_RCC_ClockConfig+0x24c>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x250>)
 8002fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x254>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fe23 	bl	8000c08 <HAL_InitTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	04c4b400 	.word	0x04c4b400
 8002fdc:	08006fd0 	.word	0x08006fd0
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x34>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d121      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d11e      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	e005      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003044:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d102      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e004      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d101      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCC_GetSysClockFreq+0x114>)
 800306e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d134      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0xa6>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d003      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0xac>
 800308c:	e005      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003090:	617b      	str	r3, [r7, #20]
      break;
 8003092:	e005      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003096:	617b      	str	r3, [r7, #20]
      break;
 8003098:	e002      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	617b      	str	r3, [r7, #20]
      break;
 800309e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3301      	adds	r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	fb02 f203 	mul.w	r2, r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	0e5b      	lsrs	r3, r3, #25
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	3301      	adds	r3, #1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030e0:	69bb      	ldr	r3, [r7, #24]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08006fe0 	.word	0x08006fe0
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	007a1200 	.word	0x007a1200

08003100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003118:	f7ff f950 	bl	80023bc <HAL_PWREx_GetVoltageRange>
 800311c:	6178      	str	r0, [r7, #20]
 800311e:	e014      	b.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a21      	ldr	r2, [pc, #132]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003138:	f7ff f940 	bl	80023bc <HAL_PWREx_GetVoltageRange>
 800313c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003150:	d10b      	bne.n	800316a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d913      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2ba0      	cmp	r3, #160	; 0xa0
 800315c:	d902      	bls.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315e:	2302      	movs	r3, #2
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e00d      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003164:	2301      	movs	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e00a      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b7f      	cmp	r3, #127	; 0x7f
 800316e:	d902      	bls.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003170:	2302      	movs	r3, #2
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e004      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b70      	cmp	r3, #112	; 0x70
 800317a:	d101      	bne.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800317c:	2301      	movs	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 020f 	bic.w	r2, r3, #15
 8003188:	4909      	ldr	r1, [pc, #36]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022000 	.word	0x40022000

080031b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d118      	bne.n	80031fc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e005      	b.n	80031f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d003      	beq.n	8003214 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d003      	beq.n	800321a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003212:	e005      	b.n	8003220 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003216:	613b      	str	r3, [r7, #16]
    break;
 8003218:	e005      	b.n	8003226 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800321c:	613b      	str	r3, [r7, #16]
    break;
 800321e:	e002      	b.n	8003226 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
    break;
 8003224:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	3301      	adds	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	fb02 f203 	mul.w	r2, r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	0e5b      	lsrs	r3, r3, #25
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003266:	683b      	ldr	r3, [r7, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000
 8003278:	08006fe0 	.word	0x08006fe0
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800328c:	2300      	movs	r3, #0
 800328e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003290:	2300      	movs	r3, #0
 8003292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	2b00      	cmp	r3, #0
 800329e:	d040      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d02a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d825      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032ac:	2b60      	cmp	r3, #96	; 0x60
 80032ae:	d026      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d821      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d006      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d81d      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d010      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032c4:	e018      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c6:	4b89      	ldr	r3, [pc, #548]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a88      	ldr	r2, [pc, #544]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d2:	e015      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fb02 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e4:	e00c      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fbed 	bl	8003acc <RCCEx_PLLSAI2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	74fb      	strb	r3, [r7, #19]
      break;
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80032fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003306:	4b79      	ldr	r3, [pc, #484]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003314:	4975      	ldr	r1, [pc, #468]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800331c:	e001      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d047      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d030      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d82a      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800333e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003342:	d02a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003348:	d824      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d008      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d81e      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d010      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003360:	e018      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003362:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4a61      	ldr	r2, [pc, #388]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336e:	e015      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fab4 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003380:	e00c      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3320      	adds	r3, #32
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fb9f 	bl	8003acc <RCCEx_PLLSAI2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	74fb      	strb	r3, [r7, #19]
      break;
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800339a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033a2:	4b52      	ldr	r3, [pc, #328]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	494e      	ldr	r1, [pc, #312]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033b8:	e001      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 809f 	beq.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d0:	4b46      	ldr	r3, [pc, #280]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
 80033f2:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800340e:	f7fd fc4b 	bl	8000ca8 <HAL_GetTick>
 8003412:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003414:	e009      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fd fc47 	bl	8000ca8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d902      	bls.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	74fb      	strb	r3, [r7, #19]
        break;
 8003428:	e005      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ef      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d15b      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01f      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d019      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003486:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fc06 	bl	8000ca8 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349e:	e00b      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fc02 	bl	8000ca8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d902      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	74fb      	strb	r3, [r7, #19]
            break;
 80034b6:	e006      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ec      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	74bb      	strb	r3, [r7, #18]
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f8:	7c7b      	ldrb	r3, [r7, #17]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4ba0      	ldr	r3, [pc, #640]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	4a9f      	ldr	r2, [pc, #636]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003516:	4b9a      	ldr	r3, [pc, #616]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 0203 	bic.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	4996      	ldr	r1, [pc, #600]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003538:	4b91      	ldr	r3, [pc, #580]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	498e      	ldr	r1, [pc, #568]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355a:	4b89      	ldr	r3, [pc, #548]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	4985      	ldr	r1, [pc, #532]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	497d      	ldr	r1, [pc, #500]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800359e:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ac:	4974      	ldr	r1, [pc, #464]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	496c      	ldr	r1, [pc, #432]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f0:	4963      	ldr	r1, [pc, #396]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003604:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003612:	495b      	ldr	r1, [pc, #364]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	4952      	ldr	r1, [pc, #328]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	494a      	ldr	r1, [pc, #296]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800366a:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	4941      	ldr	r1, [pc, #260]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800368c:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	4939      	ldr	r1, [pc, #228]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d028      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	4930      	ldr	r1, [pc, #192]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036cc:	d106      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d8:	60d3      	str	r3, [r2, #12]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f8f9 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d04d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003714:	d108      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003722:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003726:	e012      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003734:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	490e      	ldr	r1, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003756:	d106      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003762:	60d3      	str	r3, [r2, #12]
 8003764:	e020      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376e:	d109      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a02      	ldr	r2, [pc, #8]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
 800377c:	e014      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f8a5 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d028      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037b4:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c2:	4947      	ldr	r1, [pc, #284]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a41      	ldr	r2, [pc, #260]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	e011      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ea:	d10c      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f876 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01e      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003822:	492f      	ldr	r1, [pc, #188]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f851 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003862:	f023 0204 	bic.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386c:	491c      	ldr	r1, [pc, #112]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003886:	f023 0218 	bic.w	r2, r3, #24
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	4913      	ldr	r1, [pc, #76]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b4:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c6:	d105      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f2:	4b72      	ldr	r3, [pc, #456]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038fe:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0203 	and.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d103      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
       ||
 8003912:	2b00      	cmp	r3, #0
 8003914:	d142      	bne.n	800399c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	e03f      	b.n	800399c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d018      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x72>
 8003924:	2b03      	cmp	r3, #3
 8003926:	d825      	bhi.n	8003974 <RCCEx_PLLSAI1_Config+0x90>
 8003928:	2b01      	cmp	r3, #1
 800392a:	d002      	beq.n	8003932 <RCCEx_PLLSAI1_Config+0x4e>
 800392c:	2b02      	cmp	r3, #2
 800392e:	d009      	beq.n	8003944 <RCCEx_PLLSAI1_Config+0x60>
 8003930:	e020      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003942:	e01a      	b.n	800397a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003944:	4b5d      	ldr	r3, [pc, #372]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e013      	b.n	800397e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003956:	4b59      	ldr	r3, [pc, #356]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003972:	e006      	b.n	8003982 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e004      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003982:	bf00      	nop
    }

    if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800398a:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4949      	ldr	r1, [pc, #292]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 8086 	bne.w	8003ab0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a44      	ldr	r2, [pc, #272]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd f97a 	bl	8000ca8 <HAL_GetTick>
 80039b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b6:	e009      	b.n	80039cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b8:	f7fd f976 	bl	8000ca8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	73fb      	strb	r3, [r7, #15]
        break;
 80039ca:	e005      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039cc:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ef      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d168      	bne.n	8003ab0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d113      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	06d2      	lsls	r2, r2, #27
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6852      	ldr	r2, [r2, #4]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	430a      	orrs	r2, r1
 8003a04:	492d      	ldr	r1, [pc, #180]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
 8003a0a:	e02d      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d115      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	0211      	lsls	r1, r2, #8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6912      	ldr	r2, [r2, #16]
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	3a01      	subs	r2, #1
 8003a28:	0552      	lsls	r2, r2, #21
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6852      	ldr	r2, [r2, #4]
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4921      	ldr	r1, [pc, #132]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
 8003a3c:	e014      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	0211      	lsls	r1, r2, #8
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6952      	ldr	r2, [r2, #20]
 8003a50:	0852      	lsrs	r2, r2, #1
 8003a52:	3a01      	subs	r2, #1
 8003a54:	0652      	lsls	r2, r2, #25
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6852      	ldr	r2, [r2, #4]
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	430a      	orrs	r2, r1
 8003a62:	4916      	ldr	r1, [pc, #88]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a68:	4b14      	ldr	r3, [pc, #80]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fd f918 	bl	8000ca8 <HAL_GetTick>
 8003a78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a7a:	e009      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a7c:	f7fd f914 	bl	8000ca8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d902      	bls.n	8003a90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a8e:	e005      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	4904      	ldr	r1, [pc, #16]	; (8003abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	07ff800f 	.word	0x07ff800f
 8003ac4:	ff9f800f 	.word	0xff9f800f
 8003ac8:	f9ff800f 	.word	0xf9ff800f

08003acc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0203 	and.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d103      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
       ||
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d142      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e03f      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d018      	beq.n	8003b3e <RCCEx_PLLSAI2_Config+0x72>
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d825      	bhi.n	8003b5c <RCCEx_PLLSAI2_Config+0x90>
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d002      	beq.n	8003b1a <RCCEx_PLLSAI2_Config+0x4e>
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d009      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x60>
 8003b18:	e020      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11d      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2a:	e01a      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e013      	b.n	8003b66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3e:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b5a:	e006      	b.n	8003b6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e004      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4949      	ldr	r1, [pc, #292]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 8086 	bne.w	8003c98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b8c:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a44      	ldr	r2, [pc, #272]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fd f886 	bl	8000ca8 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b9e:	e009      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba0:	f7fd f882 	bl	8000ca8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb2:	e005      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ef      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d168      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	06d2      	lsls	r2, r2, #27
 8003be0:	4311      	orrs	r1, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6852      	ldr	r2, [r2, #4]
 8003be6:	3a01      	subs	r2, #1
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	430a      	orrs	r2, r1
 8003bec:	492d      	ldr	r1, [pc, #180]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	614b      	str	r3, [r1, #20]
 8003bf2:	e02d      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d115      	bne.n	8003c26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	0211      	lsls	r1, r2, #8
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6912      	ldr	r2, [r2, #16]
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	0552      	lsls	r2, r2, #21
 8003c12:	4311      	orrs	r1, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	4921      	ldr	r1, [pc, #132]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	614b      	str	r3, [r1, #20]
 8003c24:	e014      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c26:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	0211      	lsls	r1, r2, #8
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6952      	ldr	r2, [r2, #20]
 8003c38:	0852      	lsrs	r2, r2, #1
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0652      	lsls	r2, r2, #25
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd f824 	bl	8000ca8 <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c62:	e009      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c64:	f7fd f820 	bl	8000ca8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	73fb      	strb	r3, [r7, #15]
          break;
 8003c76:	e005      	b.n	8003c84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ef      	beq.n	8003c64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	4904      	ldr	r1, [pc, #16]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	07ff800f 	.word	0x07ff800f
 8003cac:	ff9f800f 	.word	0xff9f800f
 8003cb0:	f9ff800f 	.word	0xf9ff800f

08003cb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003cd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003cdc:	e000      	b.n	8003ce0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003cde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f9      	beq.n	8003cde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003cea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <assert_button_flag>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void assert_button_flag() {
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	flag_button = 1;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <assert_button_flag+0x14>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	200001f8 	.word	0x200001f8

08003d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d20:	b092      	sub	sp, #72	; 0x48
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d24:	f7fc ff58 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d28:	f000 f914 	bl	8003f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d2c:	f000 f9c8 	bl	80040c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003d30:	f000 f962 	bl	8003ff8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t adc_reading = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t vref_reading = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  double vref = 0.0;
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double vol_reading = 0.0;
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double temp = 0.0;
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  const uint16_t * ts_cal1 = 0x1fff75a8;
 8003d64:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <main+0x1fc>)
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  const uint16_t * ts_cal2 = 0x1fff75ca;
 8003d68:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <main+0x200>)
 8003d6a:	623b      	str	r3, [r7, #32]
  const uint16_t * vrefint = 0x1fff75aa;
 8003d6c:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <main+0x204>)
 8003d6e:	61fb      	str	r3, [r7, #28]

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	615a      	str	r2, [r3, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d80:	2306      	movs	r3, #6
 8003d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d88:	237f      	movs	r3, #127	; 0x7f
 8003d8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // if button is pushed, read and print temperature value.
	  if (flag_button == 1) {
 8003d94:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <main+0x208>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d1fb      	bne.n	8003d94 <main+0x78>
		  flag_button = 0;
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <main+0x208>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		  // reference voltage
		  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <main+0x20c>)
 8003da4:	607b      	str	r3, [r7, #4]
		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4860      	ldr	r0, [pc, #384]	; (8003f2c <main+0x210>)
 8003dac:	f7fd fbae 	bl	800150c <HAL_ADC_ConfigChannel>
		  HAL_ADC_Start(&hadc1);
 8003db0:	485e      	ldr	r0, [pc, #376]	; (8003f2c <main+0x210>)
 8003db2:	f7fd faab 	bl	800130c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8003db6:	210a      	movs	r1, #10
 8003db8:	485c      	ldr	r0, [pc, #368]	; (8003f2c <main+0x210>)
 8003dba:	f7fd fb0a 	bl	80013d2 <HAL_ADC_PollForConversion>
		  vref_reading = HAL_ADC_GetValue(&hadc1);
 8003dbe:	485b      	ldr	r0, [pc, #364]	; (8003f2c <main+0x210>)
 8003dc0:	f7fd fb96 	bl	80014f0 <HAL_ADC_GetValue>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  vref = (*vrefint * 3.0) / vref_reading;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fbc0 	bl	8000554 <__aeabi_i2d>
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <main+0x214>)
 8003dda:	f7fc fc25 	bl	8000628 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4614      	mov	r4, r2
 8003de4:	461d      	mov	r5, r3
 8003de6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbb2 	bl	8000554 <__aeabi_i2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4620      	mov	r0, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	f7fc fd40 	bl	800087c <__aeabi_ddiv>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		  printf("Reference voltage: %f\n", vref);
 8003e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e08:	484a      	ldr	r0, [pc, #296]	; (8003f34 <main+0x218>)
 8003e0a:	f001 f819 	bl	8004e40 <iprintf>

		  // temperature
		  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <main+0x21c>)
 8003e10:	607b      	str	r3, [r7, #4]
		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4845      	ldr	r0, [pc, #276]	; (8003f2c <main+0x210>)
 8003e18:	f7fd fb78 	bl	800150c <HAL_ADC_ConfigChannel>
		  HAL_ADC_Start(&hadc1);
 8003e1c:	4843      	ldr	r0, [pc, #268]	; (8003f2c <main+0x210>)
 8003e1e:	f7fd fa75 	bl	800130c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8003e22:	210a      	movs	r1, #10
 8003e24:	4841      	ldr	r0, [pc, #260]	; (8003f2c <main+0x210>)
 8003e26:	f7fd fad4 	bl	80013d2 <HAL_ADC_PollForConversion>
		  adc_reading = HAL_ADC_GetValue(&hadc1);
 8003e2a:	4840      	ldr	r0, [pc, #256]	; (8003f2c <main+0x210>)
 8003e2c:	f7fd fb60 	bl	80014f0 <HAL_ADC_GetValue>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  printf("Temperature ADC reading: %u\n", adc_reading);
 8003e36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	483f      	ldr	r0, [pc, #252]	; (8003f3c <main+0x220>)
 8003e3e:	f000 ffff 	bl	8004e40 <iprintf>
		  vol_reading = adc_reading * (vref/4096);
 8003e42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc fb84 	bl	8000554 <__aeabi_i2d>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	460d      	mov	r5, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <main+0x224>)
 8003e56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003e5a:	f7fc fd0f 	bl	800087c <__aeabi_ddiv>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4620      	mov	r0, r4
 8003e64:	4629      	mov	r1, r5
 8003e66:	f7fc fbdf 	bl	8000628 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		  printf("Temperature Voltage reading: %f\n", vol_reading);
 8003e72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e76:	4833      	ldr	r0, [pc, #204]	; (8003f44 <main+0x228>)
 8003e78:	f000 ffe2 	bl	8004e40 <iprintf>
		  temp = (100.0 / (*ts_cal2 - *ts_cal1)) * (adc_reading * (vref/3.0) - (double)(*ts_cal1)) + 30.0;
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fb63 	bl	8000554 <__aeabi_i2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	492c      	ldr	r1, [pc, #176]	; (8003f48 <main+0x22c>)
 8003e98:	f7fc fcf0 	bl	800087c <__aeabi_ddiv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4690      	mov	r8, r2
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fb53 	bl	8000554 <__aeabi_i2d>
 8003eae:	4604      	mov	r4, r0
 8003eb0:	460d      	mov	r5, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <main+0x214>)
 8003eb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ebc:	f7fc fcde 	bl	800087c <__aeabi_ddiv>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7fc fbae 	bl	8000628 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fb2b 	bl	8000534 <__aeabi_ui2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f7fc f9e7 	bl	80002b8 <__aeabi_dsub>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fb99 	bl	8000628 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <main+0x230>)
 8003f04:	f7fc f9da 	bl	80002bc <__adddf3>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  printf("Measured Temperature: %fC\n\n");
 8003f10:	480f      	ldr	r0, [pc, #60]	; (8003f50 <main+0x234>)
 8003f12:	f000 ff95 	bl	8004e40 <iprintf>
	  if (flag_button == 1) {
 8003f16:	e73d      	b.n	8003d94 <main+0x78>
 8003f18:	1fff75a8 	.word	0x1fff75a8
 8003f1c:	1fff75ca 	.word	0x1fff75ca
 8003f20:	1fff75aa 	.word	0x1fff75aa
 8003f24:	200001f8 	.word	0x200001f8
 8003f28:	80000001 	.word	0x80000001
 8003f2c:	2000020c 	.word	0x2000020c
 8003f30:	40080000 	.word	0x40080000
 8003f34:	08006f58 	.word	0x08006f58
 8003f38:	c7520000 	.word	0xc7520000
 8003f3c:	08006f70 	.word	0x08006f70
 8003f40:	40b00000 	.word	0x40b00000
 8003f44:	08006f90 	.word	0x08006f90
 8003f48:	40590000 	.word	0x40590000
 8003f4c:	403e0000 	.word	0x403e0000
 8003f50:	08006fb4 	.word	0x08006fb4

08003f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b096      	sub	sp, #88	; 0x58
 8003f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	2244      	movs	r2, #68	; 0x44
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fafa 	bl	800455c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f68:	463b      	mov	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7fe fa40 	bl	80023fc <HAL_PWREx_ControlVoltageScaling>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003f82:	f000 f90e 	bl	80041a2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003f86:	2310      	movs	r3, #16
 8003f88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003f92:	2360      	movs	r3, #96	; 0x60
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f96:	2302      	movs	r3, #2
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003fa2:	233c      	movs	r3, #60	; 0x3c
 8003fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003faa:	2302      	movs	r3, #2
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fac4 	bl	8002544 <HAL_RCC_OscConfig>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003fc2:	f000 f8ee 	bl	80041a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fc6:	230f      	movs	r3, #15
 8003fc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fda:	463b      	mov	r3, r7
 8003fdc:	2105      	movs	r1, #5
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fed6 	bl	8002d90 <HAL_RCC_ClockConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003fea:	f000 f8da 	bl	80041a2 <Error_Handler>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3758      	adds	r7, #88	; 0x58
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ffe:	463b      	mov	r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	611a      	str	r2, [r3, #16]
 800400c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800400e:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <MX_ADC1_Init+0xc0>)
 8004012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004016:	2200      	movs	r2, #0
 8004018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800402e:	2204      	movs	r2, #4
 8004030:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004034:	2200      	movs	r2, #0
 8004036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004038:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800403a:	2200      	movs	r2, #0
 800403c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004040:	2201      	movs	r2, #1
 8004042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004054:	2200      	movs	r2, #0
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004062:	2200      	movs	r2, #0
 8004064:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800406e:	4811      	ldr	r0, [pc, #68]	; (80040b4 <MX_ADC1_Init+0xbc>)
 8004070:	f7fd f800 	bl	8001074 <HAL_ADC_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800407a:	f000 f892 	bl	80041a2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <MX_ADC1_Init+0xc4>)
 8004080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004082:	2306      	movs	r3, #6
 8004084:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800408a:	237f      	movs	r3, #127	; 0x7f
 800408c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800408e:	2304      	movs	r3, #4
 8004090:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004096:	463b      	mov	r3, r7
 8004098:	4619      	mov	r1, r3
 800409a:	4806      	ldr	r0, [pc, #24]	; (80040b4 <MX_ADC1_Init+0xbc>)
 800409c:	f7fd fa36 	bl	800150c <HAL_ADC_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80040a6:	f000 f87c 	bl	80041a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000020c 	.word	0x2000020c
 80040b8:	50040000 	.word	0x50040000
 80040bc:	c7520000 	.word	0xc7520000

080040c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <MX_GPIO_Init+0xbc>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <MX_GPIO_Init+0xbc>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <MX_GPIO_Init+0xbc>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <MX_GPIO_Init+0xbc>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <MX_GPIO_Init+0xbc>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <MX_GPIO_Init+0xbc>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <MX_GPIO_Init+0xbc>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	4a1c      	ldr	r2, [pc, #112]	; (800417c <MX_GPIO_Init+0xbc>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <MX_GPIO_Init+0xbc>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004124:	4816      	ldr	r0, [pc, #88]	; (8004180 <MX_GPIO_Init+0xc0>)
 8004126:	f7fe f8f3 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800412a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004130:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	4619      	mov	r1, r3
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <MX_GPIO_Init+0xc4>)
 8004142:	f7fd ff53 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	4619      	mov	r1, r3
 800415e:	4808      	ldr	r0, [pc, #32]	; (8004180 <MX_GPIO_Init+0xc0>)
 8004160:	f7fd ff44 	bl	8001fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	2028      	movs	r0, #40	; 0x28
 800416a:	f7fd ff08 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800416e:	2028      	movs	r0, #40	; 0x28
 8004170:	f7fd ff21 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	48000400 	.word	0x48000400
 8004184:	48000800 	.word	0x48000800

08004188 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fd8e 	bl	8003cb4 <ITM_SendChar>
	return(ch);
 8004198:	687b      	ldr	r3, [r7, #4]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041a6:	b672      	cpsid	i
}
 80041a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041aa:	e7fe      	b.n	80041aa <Error_Handler+0x8>

080041ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_MspInit+0x44>)
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <HAL_MspInit+0x44>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6613      	str	r3, [r2, #96]	; 0x60
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <HAL_MspInit+0x44>)
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_MspInit+0x44>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <HAL_MspInit+0x44>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_MspInit+0x44>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b0a8      	sub	sp, #160	; 0xa0
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	2294      	movs	r2, #148	; 0x94
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f9a9 	bl	800455c <memset>
  if(hadc->Instance==ADC1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_ADC_MspInit+0x80>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d12b      	bne.n	800426c <HAL_ADC_MspInit+0x78>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004218:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800421a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800421e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004222:	2301      	movs	r3, #1
 8004224:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800422a:	2318      	movs	r3, #24
 800422c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800422e:	2302      	movs	r3, #2
 8004230:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004232:	2302      	movs	r3, #2
 8004234:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004236:	2302      	movs	r3, #2
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800423a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f81d 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8004250:	f7ff ffa7 	bl	80041a2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_ADC_MspInit+0x84>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	4a07      	ldr	r2, [pc, #28]	; (8004278 <HAL_ADC_MspInit+0x84>)
 800425a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800425e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_ADC_MspInit+0x84>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800426c:	bf00      	nop
 800426e:	37a0      	adds	r7, #160	; 0xa0
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	50040000 	.word	0x50040000
 8004278:	40021000 	.word	0x40021000

0800427c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <NMI_Handler+0x4>

08004282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004286:	e7fe      	b.n	8004286 <HardFault_Handler+0x4>

08004288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800428c:	e7fe      	b.n	800428c <MemManage_Handler+0x4>

0800428e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <BusFault_Handler+0x4>

08004294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004298:	e7fe      	b.n	8004298 <UsageFault_Handler+0x4>

0800429a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c8:	f7fc fcda 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)) {
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <EXTI15_10_IRQHandler+0x2c>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <EXTI15_10_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80042e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042e4:	4806      	ldr	r0, [pc, #24]	; (8004300 <EXTI15_10_IRQHandler+0x30>)
 80042e6:	f7fe f82b 	bl	8002340 <HAL_GPIO_TogglePin>
	  assert_button_flag();
 80042ea:	f7ff fd0b 	bl	8003d04 <assert_button_flag>
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80042ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042f2:	f7fe f83f 	bl	8002374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40010400 	.word	0x40010400
 8004300:	48000400 	.word	0x48000400

08004304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	return 1;
 8004308:	2301      	movs	r3, #1
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_kill>:

int _kill(int pid, int sig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800431e:	f000 f8f3 	bl	8004508 <__errno>
 8004322:	4603      	mov	r3, r0
 8004324:	2216      	movs	r2, #22
 8004326:	601a      	str	r2, [r3, #0]
	return -1;
 8004328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_exit>:

void _exit (int status)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800433c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ffe7 	bl	8004314 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004346:	e7fe      	b.n	8004346 <_exit+0x12>

08004348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e00a      	b.n	8004370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800435a:	f3af 8000 	nop.w
 800435e:	4601      	mov	r1, r0
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	60ba      	str	r2, [r7, #8]
 8004366:	b2ca      	uxtb	r2, r1
 8004368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3301      	adds	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	dbf0      	blt.n	800435a <_read+0x12>
	}

return len;
 8004378:	687b      	ldr	r3, [r7, #4]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e009      	b.n	80043a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	60ba      	str	r2, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fef3 	bl	8004188 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3301      	adds	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	dbf1      	blt.n	8004394 <_write+0x12>
	}
	return len;
 80043b0:	687b      	ldr	r3, [r7, #4]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_close>:

int _close(int file)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
	return -1;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043e2:	605a      	str	r2, [r3, #4]
	return 0;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <_isatty>:

int _isatty(int file)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
	return 1;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	return 0;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <_sbrk+0x5c>)
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <_sbrk+0x60>)
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <_sbrk+0x64>)
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <_sbrk+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004454:	f000 f858 	bl	8004508 <__errno>
 8004458:	4603      	mov	r3, r0
 800445a:	220c      	movs	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004462:	e009      	b.n	8004478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <_sbrk+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	4a05      	ldr	r2, [pc, #20]	; (8004488 <_sbrk+0x64>)
 8004474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200a0000 	.word	0x200a0000
 8004484:	00000400 	.word	0x00000400
 8004488:	200001fc 	.word	0x200001fc
 800448c:	20000288 	.word	0x20000288

08004490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <SystemInit+0x20>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <SystemInit+0x20>)
 800449c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044b8:	f7ff ffea 	bl	8004490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044bc:	480c      	ldr	r0, [pc, #48]	; (80044f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044be:	490d      	ldr	r1, [pc, #52]	; (80044f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <LoopForever+0xe>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044c4:	e002      	b.n	80044cc <LoopCopyDataInit>

080044c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ca:	3304      	adds	r3, #4

080044cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d0:	d3f9      	bcc.n	80044c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80044d4:	4c0a      	ldr	r4, [pc, #40]	; (8004500 <LoopForever+0x16>)
  movs r3, #0
 80044d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d8:	e001      	b.n	80044de <LoopFillZerobss>

080044da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044dc:	3204      	adds	r2, #4

080044de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e0:	d3fb      	bcc.n	80044da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044e2:	f000 f817 	bl	8004514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044e6:	f7ff fc19 	bl	8003d1c <main>

080044ea <LoopForever>:

LoopForever:
    b LoopForever
 80044ea:	e7fe      	b.n	80044ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80044f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80044f8:	080073fc 	.word	0x080073fc
  ldr r2, =_sbss
 80044fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004500:	20000284 	.word	0x20000284

08004504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004504:	e7fe      	b.n	8004504 <ADC1_IRQHandler>
	...

08004508 <__errno>:
 8004508:	4b01      	ldr	r3, [pc, #4]	; (8004510 <__errno+0x8>)
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000000c 	.word	0x2000000c

08004514 <__libc_init_array>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4d0d      	ldr	r5, [pc, #52]	; (800454c <__libc_init_array+0x38>)
 8004518:	4c0d      	ldr	r4, [pc, #52]	; (8004550 <__libc_init_array+0x3c>)
 800451a:	1b64      	subs	r4, r4, r5
 800451c:	10a4      	asrs	r4, r4, #2
 800451e:	2600      	movs	r6, #0
 8004520:	42a6      	cmp	r6, r4
 8004522:	d109      	bne.n	8004538 <__libc_init_array+0x24>
 8004524:	4d0b      	ldr	r5, [pc, #44]	; (8004554 <__libc_init_array+0x40>)
 8004526:	4c0c      	ldr	r4, [pc, #48]	; (8004558 <__libc_init_array+0x44>)
 8004528:	f002 fd08 	bl	8006f3c <_init>
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	2600      	movs	r6, #0
 8004532:	42a6      	cmp	r6, r4
 8004534:	d105      	bne.n	8004542 <__libc_init_array+0x2e>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	f855 3b04 	ldr.w	r3, [r5], #4
 800453c:	4798      	blx	r3
 800453e:	3601      	adds	r6, #1
 8004540:	e7ee      	b.n	8004520 <__libc_init_array+0xc>
 8004542:	f855 3b04 	ldr.w	r3, [r5], #4
 8004546:	4798      	blx	r3
 8004548:	3601      	adds	r6, #1
 800454a:	e7f2      	b.n	8004532 <__libc_init_array+0x1e>
 800454c:	080073f4 	.word	0x080073f4
 8004550:	080073f4 	.word	0x080073f4
 8004554:	080073f4 	.word	0x080073f4
 8004558:	080073f8 	.word	0x080073f8

0800455c <memset>:
 800455c:	4402      	add	r2, r0
 800455e:	4603      	mov	r3, r0
 8004560:	4293      	cmp	r3, r2
 8004562:	d100      	bne.n	8004566 <memset+0xa>
 8004564:	4770      	bx	lr
 8004566:	f803 1b01 	strb.w	r1, [r3], #1
 800456a:	e7f9      	b.n	8004560 <memset+0x4>

0800456c <__cvt>:
 800456c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	ec55 4b10 	vmov	r4, r5, d0
 8004574:	2d00      	cmp	r5, #0
 8004576:	460e      	mov	r6, r1
 8004578:	4619      	mov	r1, r3
 800457a:	462b      	mov	r3, r5
 800457c:	bfbb      	ittet	lt
 800457e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004582:	461d      	movlt	r5, r3
 8004584:	2300      	movge	r3, #0
 8004586:	232d      	movlt	r3, #45	; 0x2d
 8004588:	700b      	strb	r3, [r1, #0]
 800458a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800458c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004590:	4691      	mov	r9, r2
 8004592:	f023 0820 	bic.w	r8, r3, #32
 8004596:	bfbc      	itt	lt
 8004598:	4622      	movlt	r2, r4
 800459a:	4614      	movlt	r4, r2
 800459c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045a0:	d005      	beq.n	80045ae <__cvt+0x42>
 80045a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045a6:	d100      	bne.n	80045aa <__cvt+0x3e>
 80045a8:	3601      	adds	r6, #1
 80045aa:	2102      	movs	r1, #2
 80045ac:	e000      	b.n	80045b0 <__cvt+0x44>
 80045ae:	2103      	movs	r1, #3
 80045b0:	ab03      	add	r3, sp, #12
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	ab02      	add	r3, sp, #8
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	ec45 4b10 	vmov	d0, r4, r5
 80045bc:	4653      	mov	r3, sl
 80045be:	4632      	mov	r2, r6
 80045c0:	f000 fce2 	bl	8004f88 <_dtoa_r>
 80045c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045c8:	4607      	mov	r7, r0
 80045ca:	d102      	bne.n	80045d2 <__cvt+0x66>
 80045cc:	f019 0f01 	tst.w	r9, #1
 80045d0:	d022      	beq.n	8004618 <__cvt+0xac>
 80045d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045d6:	eb07 0906 	add.w	r9, r7, r6
 80045da:	d110      	bne.n	80045fe <__cvt+0x92>
 80045dc:	783b      	ldrb	r3, [r7, #0]
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d10a      	bne.n	80045f8 <__cvt+0x8c>
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fc fa85 	bl	8000af8 <__aeabi_dcmpeq>
 80045ee:	b918      	cbnz	r0, 80045f8 <__cvt+0x8c>
 80045f0:	f1c6 0601 	rsb	r6, r6, #1
 80045f4:	f8ca 6000 	str.w	r6, [sl]
 80045f8:	f8da 3000 	ldr.w	r3, [sl]
 80045fc:	4499      	add	r9, r3
 80045fe:	2200      	movs	r2, #0
 8004600:	2300      	movs	r3, #0
 8004602:	4620      	mov	r0, r4
 8004604:	4629      	mov	r1, r5
 8004606:	f7fc fa77 	bl	8000af8 <__aeabi_dcmpeq>
 800460a:	b108      	cbz	r0, 8004610 <__cvt+0xa4>
 800460c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004610:	2230      	movs	r2, #48	; 0x30
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	454b      	cmp	r3, r9
 8004616:	d307      	bcc.n	8004628 <__cvt+0xbc>
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800461c:	1bdb      	subs	r3, r3, r7
 800461e:	4638      	mov	r0, r7
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	b004      	add	sp, #16
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	9103      	str	r1, [sp, #12]
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e7f0      	b.n	8004612 <__cvt+0xa6>

08004630 <__exponent>:
 8004630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004632:	4603      	mov	r3, r0
 8004634:	2900      	cmp	r1, #0
 8004636:	bfb8      	it	lt
 8004638:	4249      	neglt	r1, r1
 800463a:	f803 2b02 	strb.w	r2, [r3], #2
 800463e:	bfb4      	ite	lt
 8004640:	222d      	movlt	r2, #45	; 0x2d
 8004642:	222b      	movge	r2, #43	; 0x2b
 8004644:	2909      	cmp	r1, #9
 8004646:	7042      	strb	r2, [r0, #1]
 8004648:	dd2a      	ble.n	80046a0 <__exponent+0x70>
 800464a:	f10d 0407 	add.w	r4, sp, #7
 800464e:	46a4      	mov	ip, r4
 8004650:	270a      	movs	r7, #10
 8004652:	46a6      	mov	lr, r4
 8004654:	460a      	mov	r2, r1
 8004656:	fb91 f6f7 	sdiv	r6, r1, r7
 800465a:	fb07 1516 	mls	r5, r7, r6, r1
 800465e:	3530      	adds	r5, #48	; 0x30
 8004660:	2a63      	cmp	r2, #99	; 0x63
 8004662:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004666:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800466a:	4631      	mov	r1, r6
 800466c:	dcf1      	bgt.n	8004652 <__exponent+0x22>
 800466e:	3130      	adds	r1, #48	; 0x30
 8004670:	f1ae 0502 	sub.w	r5, lr, #2
 8004674:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004678:	1c44      	adds	r4, r0, #1
 800467a:	4629      	mov	r1, r5
 800467c:	4561      	cmp	r1, ip
 800467e:	d30a      	bcc.n	8004696 <__exponent+0x66>
 8004680:	f10d 0209 	add.w	r2, sp, #9
 8004684:	eba2 020e 	sub.w	r2, r2, lr
 8004688:	4565      	cmp	r5, ip
 800468a:	bf88      	it	hi
 800468c:	2200      	movhi	r2, #0
 800468e:	4413      	add	r3, r2
 8004690:	1a18      	subs	r0, r3, r0
 8004692:	b003      	add	sp, #12
 8004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800469a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800469e:	e7ed      	b.n	800467c <__exponent+0x4c>
 80046a0:	2330      	movs	r3, #48	; 0x30
 80046a2:	3130      	adds	r1, #48	; 0x30
 80046a4:	7083      	strb	r3, [r0, #2]
 80046a6:	70c1      	strb	r1, [r0, #3]
 80046a8:	1d03      	adds	r3, r0, #4
 80046aa:	e7f1      	b.n	8004690 <__exponent+0x60>

080046ac <_printf_float>:
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	ed2d 8b02 	vpush	{d8}
 80046b4:	b08d      	sub	sp, #52	; 0x34
 80046b6:	460c      	mov	r4, r1
 80046b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046bc:	4616      	mov	r6, r2
 80046be:	461f      	mov	r7, r3
 80046c0:	4605      	mov	r5, r0
 80046c2:	f001 fb43 	bl	8005d4c <_localeconv_r>
 80046c6:	f8d0 a000 	ldr.w	sl, [r0]
 80046ca:	4650      	mov	r0, sl
 80046cc:	f7fb fd98 	bl	8000200 <strlen>
 80046d0:	2300      	movs	r3, #0
 80046d2:	930a      	str	r3, [sp, #40]	; 0x28
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	9305      	str	r3, [sp, #20]
 80046d8:	f8d8 3000 	ldr.w	r3, [r8]
 80046dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046e0:	3307      	adds	r3, #7
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	f103 0208 	add.w	r2, r3, #8
 80046ea:	f8c8 2000 	str.w	r2, [r8]
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046fe:	9307      	str	r3, [sp, #28]
 8004700:	f8cd 8018 	str.w	r8, [sp, #24]
 8004704:	ee08 0a10 	vmov	s16, r0
 8004708:	4b9f      	ldr	r3, [pc, #636]	; (8004988 <_printf_float+0x2dc>)
 800470a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004712:	f7fc fa23 	bl	8000b5c <__aeabi_dcmpun>
 8004716:	bb88      	cbnz	r0, 800477c <_printf_float+0xd0>
 8004718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471c:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <_printf_float+0x2dc>)
 800471e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004722:	f7fc f9fd 	bl	8000b20 <__aeabi_dcmple>
 8004726:	bb48      	cbnz	r0, 800477c <_printf_float+0xd0>
 8004728:	2200      	movs	r2, #0
 800472a:	2300      	movs	r3, #0
 800472c:	4640      	mov	r0, r8
 800472e:	4649      	mov	r1, r9
 8004730:	f7fc f9ec 	bl	8000b0c <__aeabi_dcmplt>
 8004734:	b110      	cbz	r0, 800473c <_printf_float+0x90>
 8004736:	232d      	movs	r3, #45	; 0x2d
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473c:	4b93      	ldr	r3, [pc, #588]	; (800498c <_printf_float+0x2e0>)
 800473e:	4894      	ldr	r0, [pc, #592]	; (8004990 <_printf_float+0x2e4>)
 8004740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004744:	bf94      	ite	ls
 8004746:	4698      	movls	r8, r3
 8004748:	4680      	movhi	r8, r0
 800474a:	2303      	movs	r3, #3
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	9b05      	ldr	r3, [sp, #20]
 8004750:	f023 0204 	bic.w	r2, r3, #4
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	f04f 0900 	mov.w	r9, #0
 800475a:	9700      	str	r7, [sp, #0]
 800475c:	4633      	mov	r3, r6
 800475e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f000 f9d8 	bl	8004b18 <_printf_common>
 8004768:	3001      	adds	r0, #1
 800476a:	f040 8090 	bne.w	800488e <_printf_float+0x1e2>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004772:	b00d      	add	sp, #52	; 0x34
 8004774:	ecbd 8b02 	vpop	{d8}
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	4640      	mov	r0, r8
 8004782:	4649      	mov	r1, r9
 8004784:	f7fc f9ea 	bl	8000b5c <__aeabi_dcmpun>
 8004788:	b140      	cbz	r0, 800479c <_printf_float+0xf0>
 800478a:	464b      	mov	r3, r9
 800478c:	2b00      	cmp	r3, #0
 800478e:	bfbc      	itt	lt
 8004790:	232d      	movlt	r3, #45	; 0x2d
 8004792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004796:	487f      	ldr	r0, [pc, #508]	; (8004994 <_printf_float+0x2e8>)
 8004798:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <_printf_float+0x2ec>)
 800479a:	e7d1      	b.n	8004740 <_printf_float+0x94>
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047a2:	9206      	str	r2, [sp, #24]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	d13f      	bne.n	8004828 <_printf_float+0x17c>
 80047a8:	2306      	movs	r3, #6
 80047aa:	6063      	str	r3, [r4, #4]
 80047ac:	9b05      	ldr	r3, [sp, #20]
 80047ae:	6861      	ldr	r1, [r4, #4]
 80047b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047b4:	2300      	movs	r3, #0
 80047b6:	9303      	str	r3, [sp, #12]
 80047b8:	ab0a      	add	r3, sp, #40	; 0x28
 80047ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047be:	ab09      	add	r3, sp, #36	; 0x24
 80047c0:	ec49 8b10 	vmov	d0, r8, r9
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7ff fecd 	bl	800456c <__cvt>
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047d6:	2b47      	cmp	r3, #71	; 0x47
 80047d8:	4680      	mov	r8, r0
 80047da:	d108      	bne.n	80047ee <_printf_float+0x142>
 80047dc:	1cc8      	adds	r0, r1, #3
 80047de:	db02      	blt.n	80047e6 <_printf_float+0x13a>
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	4299      	cmp	r1, r3
 80047e4:	dd41      	ble.n	800486a <_printf_float+0x1be>
 80047e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80047ea:	fa5f fb8b 	uxtb.w	fp, fp
 80047ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047f2:	d820      	bhi.n	8004836 <_printf_float+0x18a>
 80047f4:	3901      	subs	r1, #1
 80047f6:	465a      	mov	r2, fp
 80047f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047fc:	9109      	str	r1, [sp, #36]	; 0x24
 80047fe:	f7ff ff17 	bl	8004630 <__exponent>
 8004802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004804:	1813      	adds	r3, r2, r0
 8004806:	2a01      	cmp	r2, #1
 8004808:	4681      	mov	r9, r0
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	dc02      	bgt.n	8004814 <_printf_float+0x168>
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	07d2      	lsls	r2, r2, #31
 8004812:	d501      	bpl.n	8004818 <_printf_float+0x16c>
 8004814:	3301      	adds	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800481c:	2b00      	cmp	r3, #0
 800481e:	d09c      	beq.n	800475a <_printf_float+0xae>
 8004820:	232d      	movs	r3, #45	; 0x2d
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004826:	e798      	b.n	800475a <_printf_float+0xae>
 8004828:	9a06      	ldr	r2, [sp, #24]
 800482a:	2a47      	cmp	r2, #71	; 0x47
 800482c:	d1be      	bne.n	80047ac <_printf_float+0x100>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1bc      	bne.n	80047ac <_printf_float+0x100>
 8004832:	2301      	movs	r3, #1
 8004834:	e7b9      	b.n	80047aa <_printf_float+0xfe>
 8004836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800483a:	d118      	bne.n	800486e <_printf_float+0x1c2>
 800483c:	2900      	cmp	r1, #0
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	dd0b      	ble.n	800485a <_printf_float+0x1ae>
 8004842:	6121      	str	r1, [r4, #16]
 8004844:	b913      	cbnz	r3, 800484c <_printf_float+0x1a0>
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	07d0      	lsls	r0, r2, #31
 800484a:	d502      	bpl.n	8004852 <_printf_float+0x1a6>
 800484c:	3301      	adds	r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	65a1      	str	r1, [r4, #88]	; 0x58
 8004854:	f04f 0900 	mov.w	r9, #0
 8004858:	e7de      	b.n	8004818 <_printf_float+0x16c>
 800485a:	b913      	cbnz	r3, 8004862 <_printf_float+0x1b6>
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	07d2      	lsls	r2, r2, #31
 8004860:	d501      	bpl.n	8004866 <_printf_float+0x1ba>
 8004862:	3302      	adds	r3, #2
 8004864:	e7f4      	b.n	8004850 <_printf_float+0x1a4>
 8004866:	2301      	movs	r3, #1
 8004868:	e7f2      	b.n	8004850 <_printf_float+0x1a4>
 800486a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800486e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004870:	4299      	cmp	r1, r3
 8004872:	db05      	blt.n	8004880 <_printf_float+0x1d4>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	6121      	str	r1, [r4, #16]
 8004878:	07d8      	lsls	r0, r3, #31
 800487a:	d5ea      	bpl.n	8004852 <_printf_float+0x1a6>
 800487c:	1c4b      	adds	r3, r1, #1
 800487e:	e7e7      	b.n	8004850 <_printf_float+0x1a4>
 8004880:	2900      	cmp	r1, #0
 8004882:	bfd4      	ite	le
 8004884:	f1c1 0202 	rsble	r2, r1, #2
 8004888:	2201      	movgt	r2, #1
 800488a:	4413      	add	r3, r2
 800488c:	e7e0      	b.n	8004850 <_printf_float+0x1a4>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	055a      	lsls	r2, r3, #21
 8004892:	d407      	bmi.n	80048a4 <_printf_float+0x1f8>
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	4642      	mov	r2, r8
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	d12c      	bne.n	80048fc <_printf_float+0x250>
 80048a2:	e764      	b.n	800476e <_printf_float+0xc2>
 80048a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048a8:	f240 80e0 	bls.w	8004a6c <_printf_float+0x3c0>
 80048ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048b0:	2200      	movs	r2, #0
 80048b2:	2300      	movs	r3, #0
 80048b4:	f7fc f920 	bl	8000af8 <__aeabi_dcmpeq>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d034      	beq.n	8004926 <_printf_float+0x27a>
 80048bc:	4a37      	ldr	r2, [pc, #220]	; (800499c <_printf_float+0x2f0>)
 80048be:	2301      	movs	r3, #1
 80048c0:	4631      	mov	r1, r6
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f af51 	beq.w	800476e <_printf_float+0xc2>
 80048cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048d0:	429a      	cmp	r2, r3
 80048d2:	db02      	blt.n	80048da <_printf_float+0x22e>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	07d8      	lsls	r0, r3, #31
 80048d8:	d510      	bpl.n	80048fc <_printf_float+0x250>
 80048da:	ee18 3a10 	vmov	r3, s16
 80048de:	4652      	mov	r2, sl
 80048e0:	4631      	mov	r1, r6
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b8      	blx	r7
 80048e6:	3001      	adds	r0, #1
 80048e8:	f43f af41 	beq.w	800476e <_printf_float+0xc2>
 80048ec:	f04f 0800 	mov.w	r8, #0
 80048f0:	f104 091a 	add.w	r9, r4, #26
 80048f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4543      	cmp	r3, r8
 80048fa:	dc09      	bgt.n	8004910 <_printf_float+0x264>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	079b      	lsls	r3, r3, #30
 8004900:	f100 8105 	bmi.w	8004b0e <_printf_float+0x462>
 8004904:	68e0      	ldr	r0, [r4, #12]
 8004906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004908:	4298      	cmp	r0, r3
 800490a:	bfb8      	it	lt
 800490c:	4618      	movlt	r0, r3
 800490e:	e730      	b.n	8004772 <_printf_float+0xc6>
 8004910:	2301      	movs	r3, #1
 8004912:	464a      	mov	r2, r9
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	f43f af27 	beq.w	800476e <_printf_float+0xc2>
 8004920:	f108 0801 	add.w	r8, r8, #1
 8004924:	e7e6      	b.n	80048f4 <_printf_float+0x248>
 8004926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	dc39      	bgt.n	80049a0 <_printf_float+0x2f4>
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <_printf_float+0x2f0>)
 800492e:	2301      	movs	r3, #1
 8004930:	4631      	mov	r1, r6
 8004932:	4628      	mov	r0, r5
 8004934:	47b8      	blx	r7
 8004936:	3001      	adds	r0, #1
 8004938:	f43f af19 	beq.w	800476e <_printf_float+0xc2>
 800493c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004940:	4313      	orrs	r3, r2
 8004942:	d102      	bne.n	800494a <_printf_float+0x29e>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	07d9      	lsls	r1, r3, #31
 8004948:	d5d8      	bpl.n	80048fc <_printf_float+0x250>
 800494a:	ee18 3a10 	vmov	r3, s16
 800494e:	4652      	mov	r2, sl
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f af09 	beq.w	800476e <_printf_float+0xc2>
 800495c:	f04f 0900 	mov.w	r9, #0
 8004960:	f104 0a1a 	add.w	sl, r4, #26
 8004964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004966:	425b      	negs	r3, r3
 8004968:	454b      	cmp	r3, r9
 800496a:	dc01      	bgt.n	8004970 <_printf_float+0x2c4>
 800496c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496e:	e792      	b.n	8004896 <_printf_float+0x1ea>
 8004970:	2301      	movs	r3, #1
 8004972:	4652      	mov	r2, sl
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f aef7 	beq.w	800476e <_printf_float+0xc2>
 8004980:	f109 0901 	add.w	r9, r9, #1
 8004984:	e7ee      	b.n	8004964 <_printf_float+0x2b8>
 8004986:	bf00      	nop
 8004988:	7fefffff 	.word	0x7fefffff
 800498c:	08007014 	.word	0x08007014
 8004990:	08007018 	.word	0x08007018
 8004994:	08007020 	.word	0x08007020
 8004998:	0800701c 	.word	0x0800701c
 800499c:	08007024 	.word	0x08007024
 80049a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bfa8      	it	ge
 80049a8:	461a      	movge	r2, r3
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	4691      	mov	r9, r2
 80049ae:	dc37      	bgt.n	8004a20 <_printf_float+0x374>
 80049b0:	f04f 0b00 	mov.w	fp, #0
 80049b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b8:	f104 021a 	add.w	r2, r4, #26
 80049bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	eba3 0309 	sub.w	r3, r3, r9
 80049c4:	455b      	cmp	r3, fp
 80049c6:	dc33      	bgt.n	8004a30 <_printf_float+0x384>
 80049c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	db3b      	blt.n	8004a48 <_printf_float+0x39c>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07da      	lsls	r2, r3, #31
 80049d4:	d438      	bmi.n	8004a48 <_printf_float+0x39c>
 80049d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049d8:	9b05      	ldr	r3, [sp, #20]
 80049da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	eba2 0901 	sub.w	r9, r2, r1
 80049e2:	4599      	cmp	r9, r3
 80049e4:	bfa8      	it	ge
 80049e6:	4699      	movge	r9, r3
 80049e8:	f1b9 0f00 	cmp.w	r9, #0
 80049ec:	dc35      	bgt.n	8004a5a <_printf_float+0x3ae>
 80049ee:	f04f 0800 	mov.w	r8, #0
 80049f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049f6:	f104 0a1a 	add.w	sl, r4, #26
 80049fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	eba3 0309 	sub.w	r3, r3, r9
 8004a04:	4543      	cmp	r3, r8
 8004a06:	f77f af79 	ble.w	80048fc <_printf_float+0x250>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f aeaa 	beq.w	800476e <_printf_float+0xc2>
 8004a1a:	f108 0801 	add.w	r8, r8, #1
 8004a1e:	e7ec      	b.n	80049fa <_printf_float+0x34e>
 8004a20:	4613      	mov	r3, r2
 8004a22:	4631      	mov	r1, r6
 8004a24:	4642      	mov	r2, r8
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d1c0      	bne.n	80049b0 <_printf_float+0x304>
 8004a2e:	e69e      	b.n	800476e <_printf_float+0xc2>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	9205      	str	r2, [sp, #20]
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f ae97 	beq.w	800476e <_printf_float+0xc2>
 8004a40:	9a05      	ldr	r2, [sp, #20]
 8004a42:	f10b 0b01 	add.w	fp, fp, #1
 8004a46:	e7b9      	b.n	80049bc <_printf_float+0x310>
 8004a48:	ee18 3a10 	vmov	r3, s16
 8004a4c:	4652      	mov	r2, sl
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1be      	bne.n	80049d6 <_printf_float+0x32a>
 8004a58:	e689      	b.n	800476e <_printf_float+0xc2>
 8004a5a:	9a05      	ldr	r2, [sp, #20]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	4442      	add	r2, r8
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	d1c1      	bne.n	80049ee <_printf_float+0x342>
 8004a6a:	e680      	b.n	800476e <_printf_float+0xc2>
 8004a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	dc01      	bgt.n	8004a76 <_printf_float+0x3ca>
 8004a72:	07db      	lsls	r3, r3, #31
 8004a74:	d538      	bpl.n	8004ae8 <_printf_float+0x43c>
 8004a76:	2301      	movs	r3, #1
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b8      	blx	r7
 8004a80:	3001      	adds	r0, #1
 8004a82:	f43f ae74 	beq.w	800476e <_printf_float+0xc2>
 8004a86:	ee18 3a10 	vmov	r3, s16
 8004a8a:	4652      	mov	r2, sl
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f ae6b 	beq.w	800476e <_printf_float+0xc2>
 8004a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f7fc f82a 	bl	8000af8 <__aeabi_dcmpeq>
 8004aa4:	b9d8      	cbnz	r0, 8004ade <_printf_float+0x432>
 8004aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa8:	f108 0201 	add.w	r2, r8, #1
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d10e      	bne.n	8004ad6 <_printf_float+0x42a>
 8004ab8:	e659      	b.n	800476e <_printf_float+0xc2>
 8004aba:	2301      	movs	r3, #1
 8004abc:	4652      	mov	r2, sl
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b8      	blx	r7
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	f43f ae52 	beq.w	800476e <_printf_float+0xc2>
 8004aca:	f108 0801 	add.w	r8, r8, #1
 8004ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	4543      	cmp	r3, r8
 8004ad4:	dcf1      	bgt.n	8004aba <_printf_float+0x40e>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004adc:	e6dc      	b.n	8004898 <_printf_float+0x1ec>
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	f104 0a1a 	add.w	sl, r4, #26
 8004ae6:	e7f2      	b.n	8004ace <_printf_float+0x422>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4642      	mov	r2, r8
 8004aec:	e7df      	b.n	8004aae <_printf_float+0x402>
 8004aee:	2301      	movs	r3, #1
 8004af0:	464a      	mov	r2, r9
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b8      	blx	r7
 8004af8:	3001      	adds	r0, #1
 8004afa:	f43f ae38 	beq.w	800476e <_printf_float+0xc2>
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b06:	1a5b      	subs	r3, r3, r1
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	dcf0      	bgt.n	8004aee <_printf_float+0x442>
 8004b0c:	e6fa      	b.n	8004904 <_printf_float+0x258>
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	f104 0919 	add.w	r9, r4, #25
 8004b16:	e7f4      	b.n	8004b02 <_printf_float+0x456>

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	4699      	mov	r9, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfb8      	it	lt
 8004b2c:	4613      	movlt	r3, r2
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b34:	4607      	mov	r7, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	b10a      	cbz	r2, 8004b3e <_printf_common+0x26>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	6833      	ldrmi	r3, [r6, #0]
 8004b46:	3302      	addmi	r3, #2
 8004b48:	6033      	strmi	r3, [r6, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	f015 0506 	ands.w	r5, r5, #6
 8004b50:	d106      	bne.n	8004b60 <_printf_common+0x48>
 8004b52:	f104 0a19 	add.w	sl, r4, #25
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	6832      	ldr	r2, [r6, #0]
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dc26      	bgt.n	8004bae <_printf_common+0x96>
 8004b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b64:	1e13      	subs	r3, r2, #0
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	0692      	lsls	r2, r2, #26
 8004b6e:	d42b      	bmi.n	8004bc8 <_printf_common+0xb0>
 8004b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b74:	4649      	mov	r1, r9
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d01e      	beq.n	8004bbc <_printf_common+0xa4>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	68e5      	ldr	r5, [r4, #12]
 8004b82:	6832      	ldr	r2, [r6, #0]
 8004b84:	f003 0306 	and.w	r3, r3, #6
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	bf08      	it	eq
 8004b8c:	1aad      	subeq	r5, r5, r2
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	bf0c      	ite	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	2500      	movne	r5, #0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bfc4      	itt	gt
 8004b9e:	1a9b      	subgt	r3, r3, r2
 8004ba0:	18ed      	addgt	r5, r5, r3
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	341a      	adds	r4, #26
 8004ba6:	42b5      	cmp	r5, r6
 8004ba8:	d11a      	bne.n	8004be0 <_printf_common+0xc8>
 8004baa:	2000      	movs	r0, #0
 8004bac:	e008      	b.n	8004bc0 <_printf_common+0xa8>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4652      	mov	r2, sl
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	47c0      	blx	r8
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d103      	bne.n	8004bc4 <_printf_common+0xac>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e7c6      	b.n	8004b56 <_printf_common+0x3e>
 8004bc8:	18e1      	adds	r1, r4, r3
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	2030      	movs	r0, #48	; 0x30
 8004bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd2:	4422      	add	r2, r4
 8004bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bdc:	3302      	adds	r3, #2
 8004bde:	e7c7      	b.n	8004b70 <_printf_common+0x58>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4622      	mov	r2, r4
 8004be4:	4649      	mov	r1, r9
 8004be6:	4638      	mov	r0, r7
 8004be8:	47c0      	blx	r8
 8004bea:	3001      	adds	r0, #1
 8004bec:	d0e6      	beq.n	8004bbc <_printf_common+0xa4>
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7d9      	b.n	8004ba6 <_printf_common+0x8e>
	...

08004bf4 <_printf_i>:
 8004bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4691      	mov	r9, r2
 8004bfc:	7e27      	ldrb	r7, [r4, #24]
 8004bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c00:	2f78      	cmp	r7, #120	; 0x78
 8004c02:	4680      	mov	r8, r0
 8004c04:	469a      	mov	sl, r3
 8004c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c0a:	d807      	bhi.n	8004c1c <_printf_i+0x28>
 8004c0c:	2f62      	cmp	r7, #98	; 0x62
 8004c0e:	d80a      	bhi.n	8004c26 <_printf_i+0x32>
 8004c10:	2f00      	cmp	r7, #0
 8004c12:	f000 80d8 	beq.w	8004dc6 <_printf_i+0x1d2>
 8004c16:	2f58      	cmp	r7, #88	; 0x58
 8004c18:	f000 80a3 	beq.w	8004d62 <_printf_i+0x16e>
 8004c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c24:	e03a      	b.n	8004c9c <_printf_i+0xa8>
 8004c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c2a:	2b15      	cmp	r3, #21
 8004c2c:	d8f6      	bhi.n	8004c1c <_printf_i+0x28>
 8004c2e:	a001      	add	r0, pc, #4	; (adr r0, 8004c34 <_printf_i+0x40>)
 8004c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004c1d 	.word	0x08004c1d
 8004c40:	08004c1d 	.word	0x08004c1d
 8004c44:	08004c1d 	.word	0x08004c1d
 8004c48:	08004c1d 	.word	0x08004c1d
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004c1d 	.word	0x08004c1d
 8004c54:	08004c1d 	.word	0x08004c1d
 8004c58:	08004c1d 	.word	0x08004c1d
 8004c5c:	08004c1d 	.word	0x08004c1d
 8004c60:	08004dad 	.word	0x08004dad
 8004c64:	08004cd1 	.word	0x08004cd1
 8004c68:	08004d8f 	.word	0x08004d8f
 8004c6c:	08004c1d 	.word	0x08004c1d
 8004c70:	08004c1d 	.word	0x08004c1d
 8004c74:	08004dcf 	.word	0x08004dcf
 8004c78:	08004c1d 	.word	0x08004c1d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c1d 	.word	0x08004c1d
 8004c84:	08004c1d 	.word	0x08004c1d
 8004c88:	08004d97 	.word	0x08004d97
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	600a      	str	r2, [r1, #0]
 8004c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0a3      	b.n	8004de8 <_printf_i+0x1f4>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	6808      	ldr	r0, [r1, #0]
 8004ca4:	062e      	lsls	r6, r5, #24
 8004ca6:	f100 0304 	add.w	r3, r0, #4
 8004caa:	d50a      	bpl.n	8004cc2 <_printf_i+0xce>
 8004cac:	6805      	ldr	r5, [r0, #0]
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	da03      	bge.n	8004cbc <_printf_i+0xc8>
 8004cb4:	232d      	movs	r3, #45	; 0x2d
 8004cb6:	426d      	negs	r5, r5
 8004cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbc:	485e      	ldr	r0, [pc, #376]	; (8004e38 <_printf_i+0x244>)
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	e019      	b.n	8004cf6 <_printf_i+0x102>
 8004cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cc6:	6805      	ldr	r5, [r0, #0]
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	bf18      	it	ne
 8004ccc:	b22d      	sxthne	r5, r5
 8004cce:	e7ef      	b.n	8004cb0 <_printf_i+0xbc>
 8004cd0:	680b      	ldr	r3, [r1, #0]
 8004cd2:	6825      	ldr	r5, [r4, #0]
 8004cd4:	1d18      	adds	r0, r3, #4
 8004cd6:	6008      	str	r0, [r1, #0]
 8004cd8:	0628      	lsls	r0, r5, #24
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0xec>
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <_printf_i+0xf2>
 8004ce0:	0669      	lsls	r1, r5, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0xe8>
 8004ce4:	881d      	ldrh	r5, [r3, #0]
 8004ce6:	4854      	ldr	r0, [pc, #336]	; (8004e38 <_printf_i+0x244>)
 8004ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cea:	bf0c      	ite	eq
 8004cec:	2308      	moveq	r3, #8
 8004cee:	230a      	movne	r3, #10
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf6:	6866      	ldr	r6, [r4, #4]
 8004cf8:	60a6      	str	r6, [r4, #8]
 8004cfa:	2e00      	cmp	r6, #0
 8004cfc:	bfa2      	ittt	ge
 8004cfe:	6821      	ldrge	r1, [r4, #0]
 8004d00:	f021 0104 	bicge.w	r1, r1, #4
 8004d04:	6021      	strge	r1, [r4, #0]
 8004d06:	b90d      	cbnz	r5, 8004d0c <_printf_i+0x118>
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	d04d      	beq.n	8004da8 <_printf_i+0x1b4>
 8004d0c:	4616      	mov	r6, r2
 8004d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d12:	fb03 5711 	mls	r7, r3, r1, r5
 8004d16:	5dc7      	ldrb	r7, [r0, r7]
 8004d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d1c:	462f      	mov	r7, r5
 8004d1e:	42bb      	cmp	r3, r7
 8004d20:	460d      	mov	r5, r1
 8004d22:	d9f4      	bls.n	8004d0e <_printf_i+0x11a>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d10b      	bne.n	8004d40 <_printf_i+0x14c>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	07df      	lsls	r7, r3, #31
 8004d2c:	d508      	bpl.n	8004d40 <_printf_i+0x14c>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	6861      	ldr	r1, [r4, #4]
 8004d32:	4299      	cmp	r1, r3
 8004d34:	bfde      	ittt	le
 8004d36:	2330      	movle	r3, #48	; 0x30
 8004d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004d40:	1b92      	subs	r2, r2, r6
 8004d42:	6122      	str	r2, [r4, #16]
 8004d44:	f8cd a000 	str.w	sl, [sp]
 8004d48:	464b      	mov	r3, r9
 8004d4a:	aa03      	add	r2, sp, #12
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7ff fee2 	bl	8004b18 <_printf_common>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d14c      	bne.n	8004df2 <_printf_i+0x1fe>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	b004      	add	sp, #16
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d62:	4835      	ldr	r0, [pc, #212]	; (8004e38 <_printf_i+0x244>)
 8004d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	680e      	ldr	r6, [r1, #0]
 8004d6c:	061f      	lsls	r7, r3, #24
 8004d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d72:	600e      	str	r6, [r1, #0]
 8004d74:	d514      	bpl.n	8004da0 <_printf_i+0x1ac>
 8004d76:	07d9      	lsls	r1, r3, #31
 8004d78:	bf44      	itt	mi
 8004d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7e:	6023      	strmi	r3, [r4, #0]
 8004d80:	b91d      	cbnz	r5, 8004d8a <_printf_i+0x196>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f023 0320 	bic.w	r3, r3, #32
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	e7b0      	b.n	8004cf0 <_printf_i+0xfc>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	2378      	movs	r3, #120	; 0x78
 8004d98:	4828      	ldr	r0, [pc, #160]	; (8004e3c <_printf_i+0x248>)
 8004d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9e:	e7e3      	b.n	8004d68 <_printf_i+0x174>
 8004da0:	065e      	lsls	r6, r3, #25
 8004da2:	bf48      	it	mi
 8004da4:	b2ad      	uxthmi	r5, r5
 8004da6:	e7e6      	b.n	8004d76 <_printf_i+0x182>
 8004da8:	4616      	mov	r6, r2
 8004daa:	e7bb      	b.n	8004d24 <_printf_i+0x130>
 8004dac:	680b      	ldr	r3, [r1, #0]
 8004dae:	6826      	ldr	r6, [r4, #0]
 8004db0:	6960      	ldr	r0, [r4, #20]
 8004db2:	1d1d      	adds	r5, r3, #4
 8004db4:	600d      	str	r5, [r1, #0]
 8004db6:	0635      	lsls	r5, r6, #24
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0x1cc>
 8004dbc:	6018      	str	r0, [r3, #0]
 8004dbe:	e002      	b.n	8004dc6 <_printf_i+0x1d2>
 8004dc0:	0671      	lsls	r1, r6, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0x1c8>
 8004dc4:	8018      	strh	r0, [r3, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	4616      	mov	r6, r2
 8004dcc:	e7ba      	b.n	8004d44 <_printf_i+0x150>
 8004dce:	680b      	ldr	r3, [r1, #0]
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	600a      	str	r2, [r1, #0]
 8004dd4:	681e      	ldr	r6, [r3, #0]
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f7fb fa18 	bl	8000210 <memchr>
 8004de0:	b108      	cbz	r0, 8004de6 <_printf_i+0x1f2>
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	6060      	str	r0, [r4, #4]
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	2300      	movs	r3, #0
 8004dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df0:	e7a8      	b.n	8004d44 <_printf_i+0x150>
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	4632      	mov	r2, r6
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	47d0      	blx	sl
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d0ab      	beq.n	8004d58 <_printf_i+0x164>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	d413      	bmi.n	8004e2e <_printf_i+0x23a>
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	bfb8      	it	lt
 8004e0e:	4618      	movlt	r0, r3
 8004e10:	e7a4      	b.n	8004d5c <_printf_i+0x168>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4632      	mov	r2, r6
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47d0      	blx	sl
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d09b      	beq.n	8004d58 <_printf_i+0x164>
 8004e20:	3501      	adds	r5, #1
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	9903      	ldr	r1, [sp, #12]
 8004e26:	1a5b      	subs	r3, r3, r1
 8004e28:	42ab      	cmp	r3, r5
 8004e2a:	dcf2      	bgt.n	8004e12 <_printf_i+0x21e>
 8004e2c:	e7eb      	b.n	8004e06 <_printf_i+0x212>
 8004e2e:	2500      	movs	r5, #0
 8004e30:	f104 0619 	add.w	r6, r4, #25
 8004e34:	e7f5      	b.n	8004e22 <_printf_i+0x22e>
 8004e36:	bf00      	nop
 8004e38:	08007026 	.word	0x08007026
 8004e3c:	08007037 	.word	0x08007037

08004e40 <iprintf>:
 8004e40:	b40f      	push	{r0, r1, r2, r3}
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <iprintf+0x2c>)
 8004e44:	b513      	push	{r0, r1, r4, lr}
 8004e46:	681c      	ldr	r4, [r3, #0]
 8004e48:	b124      	cbz	r4, 8004e54 <iprintf+0x14>
 8004e4a:	69a3      	ldr	r3, [r4, #24]
 8004e4c:	b913      	cbnz	r3, 8004e54 <iprintf+0x14>
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 fede 	bl	8005c10 <__sinit>
 8004e54:	ab05      	add	r3, sp, #20
 8004e56:	9a04      	ldr	r2, [sp, #16]
 8004e58:	68a1      	ldr	r1, [r4, #8]
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f001 fbf5 	bl	800664c <_vfiprintf_r>
 8004e62:	b002      	add	sp, #8
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	b004      	add	sp, #16
 8004e6a:	4770      	bx	lr
 8004e6c:	2000000c 	.word	0x2000000c

08004e70 <quorem>:
 8004e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	6903      	ldr	r3, [r0, #16]
 8004e76:	690c      	ldr	r4, [r1, #16]
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	f2c0 8081 	blt.w	8004f82 <quorem+0x112>
 8004e80:	3c01      	subs	r4, #1
 8004e82:	f101 0814 	add.w	r8, r1, #20
 8004e86:	f100 0514 	add.w	r5, r0, #20
 8004e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ea4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ea8:	d331      	bcc.n	8004f0e <quorem+0x9e>
 8004eaa:	f04f 0e00 	mov.w	lr, #0
 8004eae:	4640      	mov	r0, r8
 8004eb0:	46ac      	mov	ip, r5
 8004eb2:	46f2      	mov	sl, lr
 8004eb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004eb8:	b293      	uxth	r3, r2
 8004eba:	fb06 e303 	mla	r3, r6, r3, lr
 8004ebe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ec8:	0c12      	lsrs	r2, r2, #16
 8004eca:	f8dc a000 	ldr.w	sl, [ip]
 8004ece:	fb06 e202 	mla	r2, r6, r2, lr
 8004ed2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eda:	fa1f fa82 	uxth.w	sl, r2
 8004ede:	f8dc 2000 	ldr.w	r2, [ip]
 8004ee2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004ee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ef0:	4581      	cmp	r9, r0
 8004ef2:	f84c 3b04 	str.w	r3, [ip], #4
 8004ef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004efa:	d2db      	bcs.n	8004eb4 <quorem+0x44>
 8004efc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f00:	b92b      	cbnz	r3, 8004f0e <quorem+0x9e>
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	429d      	cmp	r5, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	d32e      	bcc.n	8004f6a <quorem+0xfa>
 8004f0c:	613c      	str	r4, [r7, #16]
 8004f0e:	4638      	mov	r0, r7
 8004f10:	f001 f9b8 	bl	8006284 <__mcmp>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	db24      	blt.n	8004f62 <quorem+0xf2>
 8004f18:	3601      	adds	r6, #1
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f04f 0c00 	mov.w	ip, #0
 8004f20:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f24:	f8d0 e000 	ldr.w	lr, [r0]
 8004f28:	b293      	uxth	r3, r2
 8004f2a:	ebac 0303 	sub.w	r3, ip, r3
 8004f2e:	0c12      	lsrs	r2, r2, #16
 8004f30:	fa13 f38e 	uxtah	r3, r3, lr
 8004f34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f42:	45c1      	cmp	r9, r8
 8004f44:	f840 3b04 	str.w	r3, [r0], #4
 8004f48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f4c:	d2e8      	bcs.n	8004f20 <quorem+0xb0>
 8004f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f56:	b922      	cbnz	r2, 8004f62 <quorem+0xf2>
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	429d      	cmp	r5, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	d30a      	bcc.n	8004f76 <quorem+0x106>
 8004f60:	613c      	str	r4, [r7, #16]
 8004f62:	4630      	mov	r0, r6
 8004f64:	b003      	add	sp, #12
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d1cc      	bne.n	8004f0c <quorem+0x9c>
 8004f72:	3c01      	subs	r4, #1
 8004f74:	e7c7      	b.n	8004f06 <quorem+0x96>
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d1f0      	bne.n	8004f60 <quorem+0xf0>
 8004f7e:	3c01      	subs	r4, #1
 8004f80:	e7eb      	b.n	8004f5a <quorem+0xea>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e7ee      	b.n	8004f64 <quorem+0xf4>
	...

08004f88 <_dtoa_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	ed2d 8b02 	vpush	{d8}
 8004f90:	ec57 6b10 	vmov	r6, r7, d0
 8004f94:	b095      	sub	sp, #84	; 0x54
 8004f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f9c:	9105      	str	r1, [sp, #20]
 8004f9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fa8:	b975      	cbnz	r5, 8004fc8 <_dtoa_r+0x40>
 8004faa:	2010      	movs	r0, #16
 8004fac:	f000 fed6 	bl	8005d5c <malloc>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8004fb4:	b920      	cbnz	r0, 8004fc0 <_dtoa_r+0x38>
 8004fb6:	4bb2      	ldr	r3, [pc, #712]	; (8005280 <_dtoa_r+0x2f8>)
 8004fb8:	21ea      	movs	r1, #234	; 0xea
 8004fba:	48b2      	ldr	r0, [pc, #712]	; (8005284 <_dtoa_r+0x2fc>)
 8004fbc:	f001 fd9c 	bl	8006af8 <__assert_func>
 8004fc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fc4:	6005      	str	r5, [r0, #0]
 8004fc6:	60c5      	str	r5, [r0, #12]
 8004fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fca:	6819      	ldr	r1, [r3, #0]
 8004fcc:	b151      	cbz	r1, 8004fe4 <_dtoa_r+0x5c>
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	604a      	str	r2, [r1, #4]
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4093      	lsls	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 ff15 	bl	8005e08 <_Bfree>
 8004fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	1e3b      	subs	r3, r7, #0
 8004fe6:	bfb9      	ittee	lt
 8004fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	9303      	strlt	r3, [sp, #12]
 8004fee:	2300      	movge	r3, #0
 8004ff0:	f8c8 3000 	strge.w	r3, [r8]
 8004ff4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ff8:	4ba3      	ldr	r3, [pc, #652]	; (8005288 <_dtoa_r+0x300>)
 8004ffa:	bfbc      	itt	lt
 8004ffc:	2201      	movlt	r2, #1
 8004ffe:	f8c8 2000 	strlt.w	r2, [r8]
 8005002:	ea33 0309 	bics.w	r3, r3, r9
 8005006:	d11b      	bne.n	8005040 <_dtoa_r+0xb8>
 8005008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800500a:	f242 730f 	movw	r3, #9999	; 0x270f
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005014:	4333      	orrs	r3, r6
 8005016:	f000 857a 	beq.w	8005b0e <_dtoa_r+0xb86>
 800501a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800501c:	b963      	cbnz	r3, 8005038 <_dtoa_r+0xb0>
 800501e:	4b9b      	ldr	r3, [pc, #620]	; (800528c <_dtoa_r+0x304>)
 8005020:	e024      	b.n	800506c <_dtoa_r+0xe4>
 8005022:	4b9b      	ldr	r3, [pc, #620]	; (8005290 <_dtoa_r+0x308>)
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	9800      	ldr	r0, [sp, #0]
 800502e:	b015      	add	sp, #84	; 0x54
 8005030:	ecbd 8b02 	vpop	{d8}
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	4b94      	ldr	r3, [pc, #592]	; (800528c <_dtoa_r+0x304>)
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	3303      	adds	r3, #3
 800503e:	e7f3      	b.n	8005028 <_dtoa_r+0xa0>
 8005040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	ec51 0b17 	vmov	r0, r1, d7
 800504a:	2300      	movs	r3, #0
 800504c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005050:	f7fb fd52 	bl	8000af8 <__aeabi_dcmpeq>
 8005054:	4680      	mov	r8, r0
 8005056:	b158      	cbz	r0, 8005070 <_dtoa_r+0xe8>
 8005058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800505a:	2301      	movs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8551 	beq.w	8005b08 <_dtoa_r+0xb80>
 8005066:	488b      	ldr	r0, [pc, #556]	; (8005294 <_dtoa_r+0x30c>)
 8005068:	6018      	str	r0, [r3, #0]
 800506a:	1e43      	subs	r3, r0, #1
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	e7dd      	b.n	800502c <_dtoa_r+0xa4>
 8005070:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005074:	aa12      	add	r2, sp, #72	; 0x48
 8005076:	a913      	add	r1, sp, #76	; 0x4c
 8005078:	4620      	mov	r0, r4
 800507a:	f001 f9a7 	bl	80063cc <__d2b>
 800507e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005082:	4683      	mov	fp, r0
 8005084:	2d00      	cmp	r5, #0
 8005086:	d07c      	beq.n	8005182 <_dtoa_r+0x1fa>
 8005088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800508e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005092:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005096:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800509a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800509e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050a2:	4b7d      	ldr	r3, [pc, #500]	; (8005298 <_dtoa_r+0x310>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb f905 	bl	80002b8 <__aeabi_dsub>
 80050ae:	a36e      	add	r3, pc, #440	; (adr r3, 8005268 <_dtoa_r+0x2e0>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7fb fab8 	bl	8000628 <__aeabi_dmul>
 80050b8:	a36d      	add	r3, pc, #436	; (adr r3, 8005270 <_dtoa_r+0x2e8>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb f8fd 	bl	80002bc <__adddf3>
 80050c2:	4606      	mov	r6, r0
 80050c4:	4628      	mov	r0, r5
 80050c6:	460f      	mov	r7, r1
 80050c8:	f7fb fa44 	bl	8000554 <__aeabi_i2d>
 80050cc:	a36a      	add	r3, pc, #424	; (adr r3, 8005278 <_dtoa_r+0x2f0>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb faa9 	bl	8000628 <__aeabi_dmul>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4630      	mov	r0, r6
 80050dc:	4639      	mov	r1, r7
 80050de:	f7fb f8ed 	bl	80002bc <__adddf3>
 80050e2:	4606      	mov	r6, r0
 80050e4:	460f      	mov	r7, r1
 80050e6:	f7fb fd4f 	bl	8000b88 <__aeabi_d2iz>
 80050ea:	2200      	movs	r2, #0
 80050ec:	4682      	mov	sl, r0
 80050ee:	2300      	movs	r3, #0
 80050f0:	4630      	mov	r0, r6
 80050f2:	4639      	mov	r1, r7
 80050f4:	f7fb fd0a 	bl	8000b0c <__aeabi_dcmplt>
 80050f8:	b148      	cbz	r0, 800510e <_dtoa_r+0x186>
 80050fa:	4650      	mov	r0, sl
 80050fc:	f7fb fa2a 	bl	8000554 <__aeabi_i2d>
 8005100:	4632      	mov	r2, r6
 8005102:	463b      	mov	r3, r7
 8005104:	f7fb fcf8 	bl	8000af8 <__aeabi_dcmpeq>
 8005108:	b908      	cbnz	r0, 800510e <_dtoa_r+0x186>
 800510a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800510e:	f1ba 0f16 	cmp.w	sl, #22
 8005112:	d854      	bhi.n	80051be <_dtoa_r+0x236>
 8005114:	4b61      	ldr	r3, [pc, #388]	; (800529c <_dtoa_r+0x314>)
 8005116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005122:	f7fb fcf3 	bl	8000b0c <__aeabi_dcmplt>
 8005126:	2800      	cmp	r0, #0
 8005128:	d04b      	beq.n	80051c2 <_dtoa_r+0x23a>
 800512a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800512e:	2300      	movs	r3, #0
 8005130:	930e      	str	r3, [sp, #56]	; 0x38
 8005132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005134:	1b5d      	subs	r5, r3, r5
 8005136:	1e6b      	subs	r3, r5, #1
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	bf43      	ittte	mi
 800513c:	2300      	movmi	r3, #0
 800513e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005142:	9304      	strmi	r3, [sp, #16]
 8005144:	f04f 0800 	movpl.w	r8, #0
 8005148:	f1ba 0f00 	cmp.w	sl, #0
 800514c:	db3b      	blt.n	80051c6 <_dtoa_r+0x23e>
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005154:	4453      	add	r3, sl
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	9306      	str	r3, [sp, #24]
 800515c:	9b05      	ldr	r3, [sp, #20]
 800515e:	2b09      	cmp	r3, #9
 8005160:	d869      	bhi.n	8005236 <_dtoa_r+0x2ae>
 8005162:	2b05      	cmp	r3, #5
 8005164:	bfc4      	itt	gt
 8005166:	3b04      	subgt	r3, #4
 8005168:	9305      	strgt	r3, [sp, #20]
 800516a:	9b05      	ldr	r3, [sp, #20]
 800516c:	f1a3 0302 	sub.w	r3, r3, #2
 8005170:	bfcc      	ite	gt
 8005172:	2500      	movgt	r5, #0
 8005174:	2501      	movle	r5, #1
 8005176:	2b03      	cmp	r3, #3
 8005178:	d869      	bhi.n	800524e <_dtoa_r+0x2c6>
 800517a:	e8df f003 	tbb	[pc, r3]
 800517e:	4e2c      	.short	0x4e2c
 8005180:	5a4c      	.short	0x5a4c
 8005182:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005186:	441d      	add	r5, r3
 8005188:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800518c:	2b20      	cmp	r3, #32
 800518e:	bfc1      	itttt	gt
 8005190:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005194:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005198:	fa09 f303 	lslgt.w	r3, r9, r3
 800519c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051a0:	bfda      	itte	le
 80051a2:	f1c3 0320 	rsble	r3, r3, #32
 80051a6:	fa06 f003 	lslle.w	r0, r6, r3
 80051aa:	4318      	orrgt	r0, r3
 80051ac:	f7fb f9c2 	bl	8000534 <__aeabi_ui2d>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4606      	mov	r6, r0
 80051b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80051b8:	3d01      	subs	r5, #1
 80051ba:	9310      	str	r3, [sp, #64]	; 0x40
 80051bc:	e771      	b.n	80050a2 <_dtoa_r+0x11a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e7b6      	b.n	8005130 <_dtoa_r+0x1a8>
 80051c2:	900e      	str	r0, [sp, #56]	; 0x38
 80051c4:	e7b5      	b.n	8005132 <_dtoa_r+0x1aa>
 80051c6:	f1ca 0300 	rsb	r3, sl, #0
 80051ca:	9306      	str	r3, [sp, #24]
 80051cc:	2300      	movs	r3, #0
 80051ce:	eba8 080a 	sub.w	r8, r8, sl
 80051d2:	930d      	str	r3, [sp, #52]	; 0x34
 80051d4:	e7c2      	b.n	800515c <_dtoa_r+0x1d4>
 80051d6:	2300      	movs	r3, #0
 80051d8:	9308      	str	r3, [sp, #32]
 80051da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dc39      	bgt.n	8005254 <_dtoa_r+0x2cc>
 80051e0:	f04f 0901 	mov.w	r9, #1
 80051e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80051e8:	464b      	mov	r3, r9
 80051ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80051ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051f0:	2200      	movs	r2, #0
 80051f2:	6042      	str	r2, [r0, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	f102 0614 	add.w	r6, r2, #20
 80051fa:	429e      	cmp	r6, r3
 80051fc:	6841      	ldr	r1, [r0, #4]
 80051fe:	d92f      	bls.n	8005260 <_dtoa_r+0x2d8>
 8005200:	4620      	mov	r0, r4
 8005202:	f000 fdc1 	bl	8005d88 <_Balloc>
 8005206:	9000      	str	r0, [sp, #0]
 8005208:	2800      	cmp	r0, #0
 800520a:	d14b      	bne.n	80052a4 <_dtoa_r+0x31c>
 800520c:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <_dtoa_r+0x318>)
 800520e:	4602      	mov	r2, r0
 8005210:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005214:	e6d1      	b.n	8004fba <_dtoa_r+0x32>
 8005216:	2301      	movs	r3, #1
 8005218:	e7de      	b.n	80051d8 <_dtoa_r+0x250>
 800521a:	2300      	movs	r3, #0
 800521c:	9308      	str	r3, [sp, #32]
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	eb0a 0903 	add.w	r9, sl, r3
 8005224:	f109 0301 	add.w	r3, r9, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	bfb8      	it	lt
 800522e:	2301      	movlt	r3, #1
 8005230:	e7dd      	b.n	80051ee <_dtoa_r+0x266>
 8005232:	2301      	movs	r3, #1
 8005234:	e7f2      	b.n	800521c <_dtoa_r+0x294>
 8005236:	2501      	movs	r5, #1
 8005238:	2300      	movs	r3, #0
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	9508      	str	r5, [sp, #32]
 800523e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005242:	2200      	movs	r2, #0
 8005244:	f8cd 9004 	str.w	r9, [sp, #4]
 8005248:	2312      	movs	r3, #18
 800524a:	9209      	str	r2, [sp, #36]	; 0x24
 800524c:	e7cf      	b.n	80051ee <_dtoa_r+0x266>
 800524e:	2301      	movs	r3, #1
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	e7f4      	b.n	800523e <_dtoa_r+0x2b6>
 8005254:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005258:	f8cd 9004 	str.w	r9, [sp, #4]
 800525c:	464b      	mov	r3, r9
 800525e:	e7c6      	b.n	80051ee <_dtoa_r+0x266>
 8005260:	3101      	adds	r1, #1
 8005262:	6041      	str	r1, [r0, #4]
 8005264:	0052      	lsls	r2, r2, #1
 8005266:	e7c6      	b.n	80051f6 <_dtoa_r+0x26e>
 8005268:	636f4361 	.word	0x636f4361
 800526c:	3fd287a7 	.word	0x3fd287a7
 8005270:	8b60c8b3 	.word	0x8b60c8b3
 8005274:	3fc68a28 	.word	0x3fc68a28
 8005278:	509f79fb 	.word	0x509f79fb
 800527c:	3fd34413 	.word	0x3fd34413
 8005280:	08007055 	.word	0x08007055
 8005284:	0800706c 	.word	0x0800706c
 8005288:	7ff00000 	.word	0x7ff00000
 800528c:	08007051 	.word	0x08007051
 8005290:	08007048 	.word	0x08007048
 8005294:	08007025 	.word	0x08007025
 8005298:	3ff80000 	.word	0x3ff80000
 800529c:	080071c8 	.word	0x080071c8
 80052a0:	080070cb 	.word	0x080070cb
 80052a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a6:	9a00      	ldr	r2, [sp, #0]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	2b0e      	cmp	r3, #14
 80052ae:	f200 80ad 	bhi.w	800540c <_dtoa_r+0x484>
 80052b2:	2d00      	cmp	r5, #0
 80052b4:	f000 80aa 	beq.w	800540c <_dtoa_r+0x484>
 80052b8:	f1ba 0f00 	cmp.w	sl, #0
 80052bc:	dd36      	ble.n	800532c <_dtoa_r+0x3a4>
 80052be:	4ac3      	ldr	r2, [pc, #780]	; (80055cc <_dtoa_r+0x644>)
 80052c0:	f00a 030f 	and.w	r3, sl, #15
 80052c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052c8:	ed93 7b00 	vldr	d7, [r3]
 80052cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80052d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80052d4:	eeb0 8a47 	vmov.f32	s16, s14
 80052d8:	eef0 8a67 	vmov.f32	s17, s15
 80052dc:	d016      	beq.n	800530c <_dtoa_r+0x384>
 80052de:	4bbc      	ldr	r3, [pc, #752]	; (80055d0 <_dtoa_r+0x648>)
 80052e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052e8:	f7fb fac8 	bl	800087c <__aeabi_ddiv>
 80052ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f0:	f007 070f 	and.w	r7, r7, #15
 80052f4:	2503      	movs	r5, #3
 80052f6:	4eb6      	ldr	r6, [pc, #728]	; (80055d0 <_dtoa_r+0x648>)
 80052f8:	b957      	cbnz	r7, 8005310 <_dtoa_r+0x388>
 80052fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fe:	ec53 2b18 	vmov	r2, r3, d8
 8005302:	f7fb fabb 	bl	800087c <__aeabi_ddiv>
 8005306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530a:	e029      	b.n	8005360 <_dtoa_r+0x3d8>
 800530c:	2502      	movs	r5, #2
 800530e:	e7f2      	b.n	80052f6 <_dtoa_r+0x36e>
 8005310:	07f9      	lsls	r1, r7, #31
 8005312:	d508      	bpl.n	8005326 <_dtoa_r+0x39e>
 8005314:	ec51 0b18 	vmov	r0, r1, d8
 8005318:	e9d6 2300 	ldrd	r2, r3, [r6]
 800531c:	f7fb f984 	bl	8000628 <__aeabi_dmul>
 8005320:	ec41 0b18 	vmov	d8, r0, r1
 8005324:	3501      	adds	r5, #1
 8005326:	107f      	asrs	r7, r7, #1
 8005328:	3608      	adds	r6, #8
 800532a:	e7e5      	b.n	80052f8 <_dtoa_r+0x370>
 800532c:	f000 80a6 	beq.w	800547c <_dtoa_r+0x4f4>
 8005330:	f1ca 0600 	rsb	r6, sl, #0
 8005334:	4ba5      	ldr	r3, [pc, #660]	; (80055cc <_dtoa_r+0x644>)
 8005336:	4fa6      	ldr	r7, [pc, #664]	; (80055d0 <_dtoa_r+0x648>)
 8005338:	f006 020f 	and.w	r2, r6, #15
 800533c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005348:	f7fb f96e 	bl	8000628 <__aeabi_dmul>
 800534c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005350:	1136      	asrs	r6, r6, #4
 8005352:	2300      	movs	r3, #0
 8005354:	2502      	movs	r5, #2
 8005356:	2e00      	cmp	r6, #0
 8005358:	f040 8085 	bne.w	8005466 <_dtoa_r+0x4de>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1d2      	bne.n	8005306 <_dtoa_r+0x37e>
 8005360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808c 	beq.w	8005480 <_dtoa_r+0x4f8>
 8005368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800536c:	4b99      	ldr	r3, [pc, #612]	; (80055d4 <_dtoa_r+0x64c>)
 800536e:	2200      	movs	r2, #0
 8005370:	4630      	mov	r0, r6
 8005372:	4639      	mov	r1, r7
 8005374:	f7fb fbca 	bl	8000b0c <__aeabi_dcmplt>
 8005378:	2800      	cmp	r0, #0
 800537a:	f000 8081 	beq.w	8005480 <_dtoa_r+0x4f8>
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d07d      	beq.n	8005480 <_dtoa_r+0x4f8>
 8005384:	f1b9 0f00 	cmp.w	r9, #0
 8005388:	dd3c      	ble.n	8005404 <_dtoa_r+0x47c>
 800538a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	2200      	movs	r2, #0
 8005392:	4b91      	ldr	r3, [pc, #580]	; (80055d8 <_dtoa_r+0x650>)
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb f946 	bl	8000628 <__aeabi_dmul>
 800539c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a0:	3501      	adds	r5, #1
 80053a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80053a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053aa:	4628      	mov	r0, r5
 80053ac:	f7fb f8d2 	bl	8000554 <__aeabi_i2d>
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	f7fb f938 	bl	8000628 <__aeabi_dmul>
 80053b8:	4b88      	ldr	r3, [pc, #544]	; (80055dc <_dtoa_r+0x654>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	f7fa ff7e 	bl	80002bc <__adddf3>
 80053c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80053c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c8:	9303      	str	r3, [sp, #12]
 80053ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d15c      	bne.n	800548a <_dtoa_r+0x502>
 80053d0:	4b83      	ldr	r3, [pc, #524]	; (80055e0 <_dtoa_r+0x658>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	4630      	mov	r0, r6
 80053d6:	4639      	mov	r1, r7
 80053d8:	f7fa ff6e 	bl	80002b8 <__aeabi_dsub>
 80053dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e0:	4606      	mov	r6, r0
 80053e2:	460f      	mov	r7, r1
 80053e4:	f7fb fbb0 	bl	8000b48 <__aeabi_dcmpgt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f040 8296 	bne.w	800591a <_dtoa_r+0x992>
 80053ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80053f2:	4630      	mov	r0, r6
 80053f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fb fb87 	bl	8000b0c <__aeabi_dcmplt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f040 8288 	bne.w	8005914 <_dtoa_r+0x98c>
 8005404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005408:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800540c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800540e:	2b00      	cmp	r3, #0
 8005410:	f2c0 8158 	blt.w	80056c4 <_dtoa_r+0x73c>
 8005414:	f1ba 0f0e 	cmp.w	sl, #14
 8005418:	f300 8154 	bgt.w	80056c4 <_dtoa_r+0x73c>
 800541c:	4b6b      	ldr	r3, [pc, #428]	; (80055cc <_dtoa_r+0x644>)
 800541e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005422:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	f280 80e3 	bge.w	80055f4 <_dtoa_r+0x66c>
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f300 80df 	bgt.w	80055f4 <_dtoa_r+0x66c>
 8005436:	f040 826d 	bne.w	8005914 <_dtoa_r+0x98c>
 800543a:	4b69      	ldr	r3, [pc, #420]	; (80055e0 <_dtoa_r+0x658>)
 800543c:	2200      	movs	r2, #0
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f7fb f8f1 	bl	8000628 <__aeabi_dmul>
 8005446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800544a:	f7fb fb73 	bl	8000b34 <__aeabi_dcmpge>
 800544e:	9e01      	ldr	r6, [sp, #4]
 8005450:	4637      	mov	r7, r6
 8005452:	2800      	cmp	r0, #0
 8005454:	f040 8243 	bne.w	80058de <_dtoa_r+0x956>
 8005458:	9d00      	ldr	r5, [sp, #0]
 800545a:	2331      	movs	r3, #49	; 0x31
 800545c:	f805 3b01 	strb.w	r3, [r5], #1
 8005460:	f10a 0a01 	add.w	sl, sl, #1
 8005464:	e23f      	b.n	80058e6 <_dtoa_r+0x95e>
 8005466:	07f2      	lsls	r2, r6, #31
 8005468:	d505      	bpl.n	8005476 <_dtoa_r+0x4ee>
 800546a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800546e:	f7fb f8db 	bl	8000628 <__aeabi_dmul>
 8005472:	3501      	adds	r5, #1
 8005474:	2301      	movs	r3, #1
 8005476:	1076      	asrs	r6, r6, #1
 8005478:	3708      	adds	r7, #8
 800547a:	e76c      	b.n	8005356 <_dtoa_r+0x3ce>
 800547c:	2502      	movs	r5, #2
 800547e:	e76f      	b.n	8005360 <_dtoa_r+0x3d8>
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	f8cd a01c 	str.w	sl, [sp, #28]
 8005486:	930c      	str	r3, [sp, #48]	; 0x30
 8005488:	e78d      	b.n	80053a6 <_dtoa_r+0x41e>
 800548a:	9900      	ldr	r1, [sp, #0]
 800548c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800548e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005490:	4b4e      	ldr	r3, [pc, #312]	; (80055cc <_dtoa_r+0x644>)
 8005492:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005496:	4401      	add	r1, r0
 8005498:	9102      	str	r1, [sp, #8]
 800549a:	9908      	ldr	r1, [sp, #32]
 800549c:	eeb0 8a47 	vmov.f32	s16, s14
 80054a0:	eef0 8a67 	vmov.f32	s17, s15
 80054a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d045      	beq.n	800553c <_dtoa_r+0x5b4>
 80054b0:	494c      	ldr	r1, [pc, #304]	; (80055e4 <_dtoa_r+0x65c>)
 80054b2:	2000      	movs	r0, #0
 80054b4:	f7fb f9e2 	bl	800087c <__aeabi_ddiv>
 80054b8:	ec53 2b18 	vmov	r2, r3, d8
 80054bc:	f7fa fefc 	bl	80002b8 <__aeabi_dsub>
 80054c0:	9d00      	ldr	r5, [sp, #0]
 80054c2:	ec41 0b18 	vmov	d8, r0, r1
 80054c6:	4639      	mov	r1, r7
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7fb fb5d 	bl	8000b88 <__aeabi_d2iz>
 80054ce:	900c      	str	r0, [sp, #48]	; 0x30
 80054d0:	f7fb f840 	bl	8000554 <__aeabi_i2d>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fa feec 	bl	80002b8 <__aeabi_dsub>
 80054e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e2:	3330      	adds	r3, #48	; 0x30
 80054e4:	f805 3b01 	strb.w	r3, [r5], #1
 80054e8:	ec53 2b18 	vmov	r2, r3, d8
 80054ec:	4606      	mov	r6, r0
 80054ee:	460f      	mov	r7, r1
 80054f0:	f7fb fb0c 	bl	8000b0c <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d165      	bne.n	80055c4 <_dtoa_r+0x63c>
 80054f8:	4632      	mov	r2, r6
 80054fa:	463b      	mov	r3, r7
 80054fc:	4935      	ldr	r1, [pc, #212]	; (80055d4 <_dtoa_r+0x64c>)
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fa feda 	bl	80002b8 <__aeabi_dsub>
 8005504:	ec53 2b18 	vmov	r2, r3, d8
 8005508:	f7fb fb00 	bl	8000b0c <__aeabi_dcmplt>
 800550c:	2800      	cmp	r0, #0
 800550e:	f040 80b9 	bne.w	8005684 <_dtoa_r+0x6fc>
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	429d      	cmp	r5, r3
 8005516:	f43f af75 	beq.w	8005404 <_dtoa_r+0x47c>
 800551a:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <_dtoa_r+0x650>)
 800551c:	ec51 0b18 	vmov	r0, r1, d8
 8005520:	2200      	movs	r2, #0
 8005522:	f7fb f881 	bl	8000628 <__aeabi_dmul>
 8005526:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <_dtoa_r+0x650>)
 8005528:	ec41 0b18 	vmov	d8, r0, r1
 800552c:	2200      	movs	r2, #0
 800552e:	4630      	mov	r0, r6
 8005530:	4639      	mov	r1, r7
 8005532:	f7fb f879 	bl	8000628 <__aeabi_dmul>
 8005536:	4606      	mov	r6, r0
 8005538:	460f      	mov	r7, r1
 800553a:	e7c4      	b.n	80054c6 <_dtoa_r+0x53e>
 800553c:	ec51 0b17 	vmov	r0, r1, d7
 8005540:	f7fb f872 	bl	8000628 <__aeabi_dmul>
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	9d00      	ldr	r5, [sp, #0]
 8005548:	930c      	str	r3, [sp, #48]	; 0x30
 800554a:	ec41 0b18 	vmov	d8, r0, r1
 800554e:	4639      	mov	r1, r7
 8005550:	4630      	mov	r0, r6
 8005552:	f7fb fb19 	bl	8000b88 <__aeabi_d2iz>
 8005556:	9011      	str	r0, [sp, #68]	; 0x44
 8005558:	f7fa fffc 	bl	8000554 <__aeabi_i2d>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f7fa fea8 	bl	80002b8 <__aeabi_dsub>
 8005568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800556a:	3330      	adds	r3, #48	; 0x30
 800556c:	f805 3b01 	strb.w	r3, [r5], #1
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	429d      	cmp	r5, r3
 8005574:	4606      	mov	r6, r0
 8005576:	460f      	mov	r7, r1
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	d134      	bne.n	80055e8 <_dtoa_r+0x660>
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <_dtoa_r+0x65c>)
 8005580:	ec51 0b18 	vmov	r0, r1, d8
 8005584:	f7fa fe9a 	bl	80002bc <__adddf3>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	f7fb fada 	bl	8000b48 <__aeabi_dcmpgt>
 8005594:	2800      	cmp	r0, #0
 8005596:	d175      	bne.n	8005684 <_dtoa_r+0x6fc>
 8005598:	ec53 2b18 	vmov	r2, r3, d8
 800559c:	4911      	ldr	r1, [pc, #68]	; (80055e4 <_dtoa_r+0x65c>)
 800559e:	2000      	movs	r0, #0
 80055a0:	f7fa fe8a 	bl	80002b8 <__aeabi_dsub>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fb faae 	bl	8000b0c <__aeabi_dcmplt>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f43f af27 	beq.w	8005404 <_dtoa_r+0x47c>
 80055b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055b8:	1e6b      	subs	r3, r5, #1
 80055ba:	930c      	str	r3, [sp, #48]	; 0x30
 80055bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d0f8      	beq.n	80055b6 <_dtoa_r+0x62e>
 80055c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80055c8:	e04a      	b.n	8005660 <_dtoa_r+0x6d8>
 80055ca:	bf00      	nop
 80055cc:	080071c8 	.word	0x080071c8
 80055d0:	080071a0 	.word	0x080071a0
 80055d4:	3ff00000 	.word	0x3ff00000
 80055d8:	40240000 	.word	0x40240000
 80055dc:	401c0000 	.word	0x401c0000
 80055e0:	40140000 	.word	0x40140000
 80055e4:	3fe00000 	.word	0x3fe00000
 80055e8:	4baf      	ldr	r3, [pc, #700]	; (80058a8 <_dtoa_r+0x920>)
 80055ea:	f7fb f81d 	bl	8000628 <__aeabi_dmul>
 80055ee:	4606      	mov	r6, r0
 80055f0:	460f      	mov	r7, r1
 80055f2:	e7ac      	b.n	800554e <_dtoa_r+0x5c6>
 80055f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055f8:	9d00      	ldr	r5, [sp, #0]
 80055fa:	4642      	mov	r2, r8
 80055fc:	464b      	mov	r3, r9
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fb f93b 	bl	800087c <__aeabi_ddiv>
 8005606:	f7fb fabf 	bl	8000b88 <__aeabi_d2iz>
 800560a:	9002      	str	r0, [sp, #8]
 800560c:	f7fa ffa2 	bl	8000554 <__aeabi_i2d>
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	f7fb f808 	bl	8000628 <__aeabi_dmul>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa fe4a 	bl	80002b8 <__aeabi_dsub>
 8005624:	9e02      	ldr	r6, [sp, #8]
 8005626:	9f01      	ldr	r7, [sp, #4]
 8005628:	3630      	adds	r6, #48	; 0x30
 800562a:	f805 6b01 	strb.w	r6, [r5], #1
 800562e:	9e00      	ldr	r6, [sp, #0]
 8005630:	1bae      	subs	r6, r5, r6
 8005632:	42b7      	cmp	r7, r6
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	d137      	bne.n	80056aa <_dtoa_r+0x722>
 800563a:	f7fa fe3f 	bl	80002bc <__adddf3>
 800563e:	4642      	mov	r2, r8
 8005640:	464b      	mov	r3, r9
 8005642:	4606      	mov	r6, r0
 8005644:	460f      	mov	r7, r1
 8005646:	f7fb fa7f 	bl	8000b48 <__aeabi_dcmpgt>
 800564a:	b9c8      	cbnz	r0, 8005680 <_dtoa_r+0x6f8>
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fb fa50 	bl	8000af8 <__aeabi_dcmpeq>
 8005658:	b110      	cbz	r0, 8005660 <_dtoa_r+0x6d8>
 800565a:	9b02      	ldr	r3, [sp, #8]
 800565c:	07d9      	lsls	r1, r3, #31
 800565e:	d40f      	bmi.n	8005680 <_dtoa_r+0x6f8>
 8005660:	4620      	mov	r0, r4
 8005662:	4659      	mov	r1, fp
 8005664:	f000 fbd0 	bl	8005e08 <_Bfree>
 8005668:	2300      	movs	r3, #0
 800566a:	702b      	strb	r3, [r5, #0]
 800566c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800566e:	f10a 0001 	add.w	r0, sl, #1
 8005672:	6018      	str	r0, [r3, #0]
 8005674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005676:	2b00      	cmp	r3, #0
 8005678:	f43f acd8 	beq.w	800502c <_dtoa_r+0xa4>
 800567c:	601d      	str	r5, [r3, #0]
 800567e:	e4d5      	b.n	800502c <_dtoa_r+0xa4>
 8005680:	f8cd a01c 	str.w	sl, [sp, #28]
 8005684:	462b      	mov	r3, r5
 8005686:	461d      	mov	r5, r3
 8005688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568c:	2a39      	cmp	r2, #57	; 0x39
 800568e:	d108      	bne.n	80056a2 <_dtoa_r+0x71a>
 8005690:	9a00      	ldr	r2, [sp, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d1f7      	bne.n	8005686 <_dtoa_r+0x6fe>
 8005696:	9a07      	ldr	r2, [sp, #28]
 8005698:	9900      	ldr	r1, [sp, #0]
 800569a:	3201      	adds	r2, #1
 800569c:	9207      	str	r2, [sp, #28]
 800569e:	2230      	movs	r2, #48	; 0x30
 80056a0:	700a      	strb	r2, [r1, #0]
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	3201      	adds	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e78c      	b.n	80055c4 <_dtoa_r+0x63c>
 80056aa:	4b7f      	ldr	r3, [pc, #508]	; (80058a8 <_dtoa_r+0x920>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	f7fa ffbb 	bl	8000628 <__aeabi_dmul>
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	4606      	mov	r6, r0
 80056b8:	460f      	mov	r7, r1
 80056ba:	f7fb fa1d 	bl	8000af8 <__aeabi_dcmpeq>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d09b      	beq.n	80055fa <_dtoa_r+0x672>
 80056c2:	e7cd      	b.n	8005660 <_dtoa_r+0x6d8>
 80056c4:	9a08      	ldr	r2, [sp, #32]
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	f000 80c4 	beq.w	8005854 <_dtoa_r+0x8cc>
 80056cc:	9a05      	ldr	r2, [sp, #20]
 80056ce:	2a01      	cmp	r2, #1
 80056d0:	f300 80a8 	bgt.w	8005824 <_dtoa_r+0x89c>
 80056d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	f000 80a0 	beq.w	800581c <_dtoa_r+0x894>
 80056dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056e0:	9e06      	ldr	r6, [sp, #24]
 80056e2:	4645      	mov	r5, r8
 80056e4:	9a04      	ldr	r2, [sp, #16]
 80056e6:	2101      	movs	r1, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	4620      	mov	r0, r4
 80056ec:	4498      	add	r8, r3
 80056ee:	9204      	str	r2, [sp, #16]
 80056f0:	f000 fc46 	bl	8005f80 <__i2b>
 80056f4:	4607      	mov	r7, r0
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	dd0b      	ble.n	8005712 <_dtoa_r+0x78a>
 80056fa:	9b04      	ldr	r3, [sp, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd08      	ble.n	8005712 <_dtoa_r+0x78a>
 8005700:	42ab      	cmp	r3, r5
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	bfa8      	it	ge
 8005706:	462b      	movge	r3, r5
 8005708:	eba8 0803 	sub.w	r8, r8, r3
 800570c:	1aed      	subs	r5, r5, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	b1fb      	cbz	r3, 8005756 <_dtoa_r+0x7ce>
 8005716:	9b08      	ldr	r3, [sp, #32]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 809f 	beq.w	800585c <_dtoa_r+0x8d4>
 800571e:	2e00      	cmp	r6, #0
 8005720:	dd11      	ble.n	8005746 <_dtoa_r+0x7be>
 8005722:	4639      	mov	r1, r7
 8005724:	4632      	mov	r2, r6
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fce6 	bl	80060f8 <__pow5mult>
 800572c:	465a      	mov	r2, fp
 800572e:	4601      	mov	r1, r0
 8005730:	4607      	mov	r7, r0
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fc3a 	bl	8005fac <__multiply>
 8005738:	4659      	mov	r1, fp
 800573a:	9007      	str	r0, [sp, #28]
 800573c:	4620      	mov	r0, r4
 800573e:	f000 fb63 	bl	8005e08 <_Bfree>
 8005742:	9b07      	ldr	r3, [sp, #28]
 8005744:	469b      	mov	fp, r3
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	1b9a      	subs	r2, r3, r6
 800574a:	d004      	beq.n	8005756 <_dtoa_r+0x7ce>
 800574c:	4659      	mov	r1, fp
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fcd2 	bl	80060f8 <__pow5mult>
 8005754:	4683      	mov	fp, r0
 8005756:	2101      	movs	r1, #1
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fc11 	bl	8005f80 <__i2b>
 800575e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	4606      	mov	r6, r0
 8005764:	dd7c      	ble.n	8005860 <_dtoa_r+0x8d8>
 8005766:	461a      	mov	r2, r3
 8005768:	4601      	mov	r1, r0
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fcc4 	bl	80060f8 <__pow5mult>
 8005770:	9b05      	ldr	r3, [sp, #20]
 8005772:	2b01      	cmp	r3, #1
 8005774:	4606      	mov	r6, r0
 8005776:	dd76      	ble.n	8005866 <_dtoa_r+0x8de>
 8005778:	2300      	movs	r3, #0
 800577a:	9306      	str	r3, [sp, #24]
 800577c:	6933      	ldr	r3, [r6, #16]
 800577e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005782:	6918      	ldr	r0, [r3, #16]
 8005784:	f000 fbac 	bl	8005ee0 <__hi0bits>
 8005788:	f1c0 0020 	rsb	r0, r0, #32
 800578c:	9b04      	ldr	r3, [sp, #16]
 800578e:	4418      	add	r0, r3
 8005790:	f010 001f 	ands.w	r0, r0, #31
 8005794:	f000 8086 	beq.w	80058a4 <_dtoa_r+0x91c>
 8005798:	f1c0 0320 	rsb	r3, r0, #32
 800579c:	2b04      	cmp	r3, #4
 800579e:	dd7f      	ble.n	80058a0 <_dtoa_r+0x918>
 80057a0:	f1c0 001c 	rsb	r0, r0, #28
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	4403      	add	r3, r0
 80057a8:	4480      	add	r8, r0
 80057aa:	4405      	add	r5, r0
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	f1b8 0f00 	cmp.w	r8, #0
 80057b2:	dd05      	ble.n	80057c0 <_dtoa_r+0x838>
 80057b4:	4659      	mov	r1, fp
 80057b6:	4642      	mov	r2, r8
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fcf7 	bl	80061ac <__lshift>
 80057be:	4683      	mov	fp, r0
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dd05      	ble.n	80057d2 <_dtoa_r+0x84a>
 80057c6:	4631      	mov	r1, r6
 80057c8:	461a      	mov	r2, r3
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 fcee 	bl	80061ac <__lshift>
 80057d0:	4606      	mov	r6, r0
 80057d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d069      	beq.n	80058ac <_dtoa_r+0x924>
 80057d8:	4631      	mov	r1, r6
 80057da:	4658      	mov	r0, fp
 80057dc:	f000 fd52 	bl	8006284 <__mcmp>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	da63      	bge.n	80058ac <_dtoa_r+0x924>
 80057e4:	2300      	movs	r3, #0
 80057e6:	4659      	mov	r1, fp
 80057e8:	220a      	movs	r2, #10
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fb2e 	bl	8005e4c <__multadd>
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057f6:	4683      	mov	fp, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 818f 	beq.w	8005b1c <_dtoa_r+0xb94>
 80057fe:	4639      	mov	r1, r7
 8005800:	2300      	movs	r3, #0
 8005802:	220a      	movs	r2, #10
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fb21 	bl	8005e4c <__multadd>
 800580a:	f1b9 0f00 	cmp.w	r9, #0
 800580e:	4607      	mov	r7, r0
 8005810:	f300 808e 	bgt.w	8005930 <_dtoa_r+0x9a8>
 8005814:	9b05      	ldr	r3, [sp, #20]
 8005816:	2b02      	cmp	r3, #2
 8005818:	dc50      	bgt.n	80058bc <_dtoa_r+0x934>
 800581a:	e089      	b.n	8005930 <_dtoa_r+0x9a8>
 800581c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800581e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005822:	e75d      	b.n	80056e0 <_dtoa_r+0x758>
 8005824:	9b01      	ldr	r3, [sp, #4]
 8005826:	1e5e      	subs	r6, r3, #1
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	42b3      	cmp	r3, r6
 800582c:	bfbf      	itttt	lt
 800582e:	9b06      	ldrlt	r3, [sp, #24]
 8005830:	9606      	strlt	r6, [sp, #24]
 8005832:	1af2      	sublt	r2, r6, r3
 8005834:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005836:	bfb6      	itet	lt
 8005838:	189b      	addlt	r3, r3, r2
 800583a:	1b9e      	subge	r6, r3, r6
 800583c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800583e:	9b01      	ldr	r3, [sp, #4]
 8005840:	bfb8      	it	lt
 8005842:	2600      	movlt	r6, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	bfb5      	itete	lt
 8005848:	eba8 0503 	sublt.w	r5, r8, r3
 800584c:	9b01      	ldrge	r3, [sp, #4]
 800584e:	2300      	movlt	r3, #0
 8005850:	4645      	movge	r5, r8
 8005852:	e747      	b.n	80056e4 <_dtoa_r+0x75c>
 8005854:	9e06      	ldr	r6, [sp, #24]
 8005856:	9f08      	ldr	r7, [sp, #32]
 8005858:	4645      	mov	r5, r8
 800585a:	e74c      	b.n	80056f6 <_dtoa_r+0x76e>
 800585c:	9a06      	ldr	r2, [sp, #24]
 800585e:	e775      	b.n	800574c <_dtoa_r+0x7c4>
 8005860:	9b05      	ldr	r3, [sp, #20]
 8005862:	2b01      	cmp	r3, #1
 8005864:	dc18      	bgt.n	8005898 <_dtoa_r+0x910>
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	b9b3      	cbnz	r3, 8005898 <_dtoa_r+0x910>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	b9a3      	cbnz	r3, 800589c <_dtoa_r+0x914>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005878:	0d1b      	lsrs	r3, r3, #20
 800587a:	051b      	lsls	r3, r3, #20
 800587c:	b12b      	cbz	r3, 800588a <_dtoa_r+0x902>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	3301      	adds	r3, #1
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	f108 0801 	add.w	r8, r8, #1
 8005888:	2301      	movs	r3, #1
 800588a:	9306      	str	r3, [sp, #24]
 800588c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800588e:	2b00      	cmp	r3, #0
 8005890:	f47f af74 	bne.w	800577c <_dtoa_r+0x7f4>
 8005894:	2001      	movs	r0, #1
 8005896:	e779      	b.n	800578c <_dtoa_r+0x804>
 8005898:	2300      	movs	r3, #0
 800589a:	e7f6      	b.n	800588a <_dtoa_r+0x902>
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	e7f4      	b.n	800588a <_dtoa_r+0x902>
 80058a0:	d085      	beq.n	80057ae <_dtoa_r+0x826>
 80058a2:	4618      	mov	r0, r3
 80058a4:	301c      	adds	r0, #28
 80058a6:	e77d      	b.n	80057a4 <_dtoa_r+0x81c>
 80058a8:	40240000 	.word	0x40240000
 80058ac:	9b01      	ldr	r3, [sp, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dc38      	bgt.n	8005924 <_dtoa_r+0x99c>
 80058b2:	9b05      	ldr	r3, [sp, #20]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	dd35      	ble.n	8005924 <_dtoa_r+0x99c>
 80058b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80058bc:	f1b9 0f00 	cmp.w	r9, #0
 80058c0:	d10d      	bne.n	80058de <_dtoa_r+0x956>
 80058c2:	4631      	mov	r1, r6
 80058c4:	464b      	mov	r3, r9
 80058c6:	2205      	movs	r2, #5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fabf 	bl	8005e4c <__multadd>
 80058ce:	4601      	mov	r1, r0
 80058d0:	4606      	mov	r6, r0
 80058d2:	4658      	mov	r0, fp
 80058d4:	f000 fcd6 	bl	8006284 <__mcmp>
 80058d8:	2800      	cmp	r0, #0
 80058da:	f73f adbd 	bgt.w	8005458 <_dtoa_r+0x4d0>
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	9d00      	ldr	r5, [sp, #0]
 80058e2:	ea6f 0a03 	mvn.w	sl, r3
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	4631      	mov	r1, r6
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fa8b 	bl	8005e08 <_Bfree>
 80058f2:	2f00      	cmp	r7, #0
 80058f4:	f43f aeb4 	beq.w	8005660 <_dtoa_r+0x6d8>
 80058f8:	f1b8 0f00 	cmp.w	r8, #0
 80058fc:	d005      	beq.n	800590a <_dtoa_r+0x982>
 80058fe:	45b8      	cmp	r8, r7
 8005900:	d003      	beq.n	800590a <_dtoa_r+0x982>
 8005902:	4641      	mov	r1, r8
 8005904:	4620      	mov	r0, r4
 8005906:	f000 fa7f 	bl	8005e08 <_Bfree>
 800590a:	4639      	mov	r1, r7
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fa7b 	bl	8005e08 <_Bfree>
 8005912:	e6a5      	b.n	8005660 <_dtoa_r+0x6d8>
 8005914:	2600      	movs	r6, #0
 8005916:	4637      	mov	r7, r6
 8005918:	e7e1      	b.n	80058de <_dtoa_r+0x956>
 800591a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800591c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005920:	4637      	mov	r7, r6
 8005922:	e599      	b.n	8005458 <_dtoa_r+0x4d0>
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80fd 	beq.w	8005b2a <_dtoa_r+0xba2>
 8005930:	2d00      	cmp	r5, #0
 8005932:	dd05      	ble.n	8005940 <_dtoa_r+0x9b8>
 8005934:	4639      	mov	r1, r7
 8005936:	462a      	mov	r2, r5
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fc37 	bl	80061ac <__lshift>
 800593e:	4607      	mov	r7, r0
 8005940:	9b06      	ldr	r3, [sp, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d05c      	beq.n	8005a00 <_dtoa_r+0xa78>
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4620      	mov	r0, r4
 800594a:	f000 fa1d 	bl	8005d88 <_Balloc>
 800594e:	4605      	mov	r5, r0
 8005950:	b928      	cbnz	r0, 800595e <_dtoa_r+0x9d6>
 8005952:	4b80      	ldr	r3, [pc, #512]	; (8005b54 <_dtoa_r+0xbcc>)
 8005954:	4602      	mov	r2, r0
 8005956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800595a:	f7ff bb2e 	b.w	8004fba <_dtoa_r+0x32>
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	3202      	adds	r2, #2
 8005962:	0092      	lsls	r2, r2, #2
 8005964:	f107 010c 	add.w	r1, r7, #12
 8005968:	300c      	adds	r0, #12
 800596a:	f000 f9ff 	bl	8005d6c <memcpy>
 800596e:	2201      	movs	r2, #1
 8005970:	4629      	mov	r1, r5
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fc1a 	bl	80061ac <__lshift>
 8005978:	9b00      	ldr	r3, [sp, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	9b00      	ldr	r3, [sp, #0]
 8005980:	444b      	add	r3, r9
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	46b8      	mov	r8, r7
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	4607      	mov	r7, r0
 8005990:	9b01      	ldr	r3, [sp, #4]
 8005992:	4631      	mov	r1, r6
 8005994:	3b01      	subs	r3, #1
 8005996:	4658      	mov	r0, fp
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	f7ff fa69 	bl	8004e70 <quorem>
 800599e:	4603      	mov	r3, r0
 80059a0:	3330      	adds	r3, #48	; 0x30
 80059a2:	9004      	str	r0, [sp, #16]
 80059a4:	4641      	mov	r1, r8
 80059a6:	4658      	mov	r0, fp
 80059a8:	9308      	str	r3, [sp, #32]
 80059aa:	f000 fc6b 	bl	8006284 <__mcmp>
 80059ae:	463a      	mov	r2, r7
 80059b0:	4681      	mov	r9, r0
 80059b2:	4631      	mov	r1, r6
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 fc81 	bl	80062bc <__mdiff>
 80059ba:	68c2      	ldr	r2, [r0, #12]
 80059bc:	9b08      	ldr	r3, [sp, #32]
 80059be:	4605      	mov	r5, r0
 80059c0:	bb02      	cbnz	r2, 8005a04 <_dtoa_r+0xa7c>
 80059c2:	4601      	mov	r1, r0
 80059c4:	4658      	mov	r0, fp
 80059c6:	f000 fc5d 	bl	8006284 <__mcmp>
 80059ca:	9b08      	ldr	r3, [sp, #32]
 80059cc:	4602      	mov	r2, r0
 80059ce:	4629      	mov	r1, r5
 80059d0:	4620      	mov	r0, r4
 80059d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80059d6:	f000 fa17 	bl	8005e08 <_Bfree>
 80059da:	9b05      	ldr	r3, [sp, #20]
 80059dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059de:	9d01      	ldr	r5, [sp, #4]
 80059e0:	ea43 0102 	orr.w	r1, r3, r2
 80059e4:	9b06      	ldr	r3, [sp, #24]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	9b08      	ldr	r3, [sp, #32]
 80059ea:	d10d      	bne.n	8005a08 <_dtoa_r+0xa80>
 80059ec:	2b39      	cmp	r3, #57	; 0x39
 80059ee:	d029      	beq.n	8005a44 <_dtoa_r+0xabc>
 80059f0:	f1b9 0f00 	cmp.w	r9, #0
 80059f4:	dd01      	ble.n	80059fa <_dtoa_r+0xa72>
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	3331      	adds	r3, #49	; 0x31
 80059fa:	9a02      	ldr	r2, [sp, #8]
 80059fc:	7013      	strb	r3, [r2, #0]
 80059fe:	e774      	b.n	80058ea <_dtoa_r+0x962>
 8005a00:	4638      	mov	r0, r7
 8005a02:	e7b9      	b.n	8005978 <_dtoa_r+0x9f0>
 8005a04:	2201      	movs	r2, #1
 8005a06:	e7e2      	b.n	80059ce <_dtoa_r+0xa46>
 8005a08:	f1b9 0f00 	cmp.w	r9, #0
 8005a0c:	db06      	blt.n	8005a1c <_dtoa_r+0xa94>
 8005a0e:	9905      	ldr	r1, [sp, #20]
 8005a10:	ea41 0909 	orr.w	r9, r1, r9
 8005a14:	9906      	ldr	r1, [sp, #24]
 8005a16:	ea59 0101 	orrs.w	r1, r9, r1
 8005a1a:	d120      	bne.n	8005a5e <_dtoa_r+0xad6>
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	ddec      	ble.n	80059fa <_dtoa_r+0xa72>
 8005a20:	4659      	mov	r1, fp
 8005a22:	2201      	movs	r2, #1
 8005a24:	4620      	mov	r0, r4
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	f000 fbc0 	bl	80061ac <__lshift>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4683      	mov	fp, r0
 8005a30:	f000 fc28 	bl	8006284 <__mcmp>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	dc02      	bgt.n	8005a40 <_dtoa_r+0xab8>
 8005a3a:	d1de      	bne.n	80059fa <_dtoa_r+0xa72>
 8005a3c:	07da      	lsls	r2, r3, #31
 8005a3e:	d5dc      	bpl.n	80059fa <_dtoa_r+0xa72>
 8005a40:	2b39      	cmp	r3, #57	; 0x39
 8005a42:	d1d8      	bne.n	80059f6 <_dtoa_r+0xa6e>
 8005a44:	9a02      	ldr	r2, [sp, #8]
 8005a46:	2339      	movs	r3, #57	; 0x39
 8005a48:	7013      	strb	r3, [r2, #0]
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	461d      	mov	r5, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a54:	2a39      	cmp	r2, #57	; 0x39
 8005a56:	d050      	beq.n	8005afa <_dtoa_r+0xb72>
 8005a58:	3201      	adds	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e745      	b.n	80058ea <_dtoa_r+0x962>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	dd03      	ble.n	8005a6a <_dtoa_r+0xae2>
 8005a62:	2b39      	cmp	r3, #57	; 0x39
 8005a64:	d0ee      	beq.n	8005a44 <_dtoa_r+0xabc>
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7c7      	b.n	80059fa <_dtoa_r+0xa72>
 8005a6a:	9a01      	ldr	r2, [sp, #4]
 8005a6c:	9907      	ldr	r1, [sp, #28]
 8005a6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a72:	428a      	cmp	r2, r1
 8005a74:	d02a      	beq.n	8005acc <_dtoa_r+0xb44>
 8005a76:	4659      	mov	r1, fp
 8005a78:	2300      	movs	r3, #0
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f9e5 	bl	8005e4c <__multadd>
 8005a82:	45b8      	cmp	r8, r7
 8005a84:	4683      	mov	fp, r0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f04f 020a 	mov.w	r2, #10
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4620      	mov	r0, r4
 8005a92:	d107      	bne.n	8005aa4 <_dtoa_r+0xb1c>
 8005a94:	f000 f9da 	bl	8005e4c <__multadd>
 8005a98:	4680      	mov	r8, r0
 8005a9a:	4607      	mov	r7, r0
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	e775      	b.n	8005990 <_dtoa_r+0xa08>
 8005aa4:	f000 f9d2 	bl	8005e4c <__multadd>
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	4680      	mov	r8, r0
 8005aac:	2300      	movs	r3, #0
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f9cb 	bl	8005e4c <__multadd>
 8005ab6:	4607      	mov	r7, r0
 8005ab8:	e7f0      	b.n	8005a9c <_dtoa_r+0xb14>
 8005aba:	f1b9 0f00 	cmp.w	r9, #0
 8005abe:	9a00      	ldr	r2, [sp, #0]
 8005ac0:	bfcc      	ite	gt
 8005ac2:	464d      	movgt	r5, r9
 8005ac4:	2501      	movle	r5, #1
 8005ac6:	4415      	add	r5, r2
 8005ac8:	f04f 0800 	mov.w	r8, #0
 8005acc:	4659      	mov	r1, fp
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f000 fb6a 	bl	80061ac <__lshift>
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4683      	mov	fp, r0
 8005adc:	f000 fbd2 	bl	8006284 <__mcmp>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	dcb2      	bgt.n	8005a4a <_dtoa_r+0xac2>
 8005ae4:	d102      	bne.n	8005aec <_dtoa_r+0xb64>
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	07db      	lsls	r3, r3, #31
 8005aea:	d4ae      	bmi.n	8005a4a <_dtoa_r+0xac2>
 8005aec:	462b      	mov	r3, r5
 8005aee:	461d      	mov	r5, r3
 8005af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af4:	2a30      	cmp	r2, #48	; 0x30
 8005af6:	d0fa      	beq.n	8005aee <_dtoa_r+0xb66>
 8005af8:	e6f7      	b.n	80058ea <_dtoa_r+0x962>
 8005afa:	9a00      	ldr	r2, [sp, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1a5      	bne.n	8005a4c <_dtoa_r+0xac4>
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	2331      	movs	r3, #49	; 0x31
 8005b06:	e779      	b.n	80059fc <_dtoa_r+0xa74>
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <_dtoa_r+0xbd0>)
 8005b0a:	f7ff baaf 	b.w	800506c <_dtoa_r+0xe4>
 8005b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f47f aa86 	bne.w	8005022 <_dtoa_r+0x9a>
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <_dtoa_r+0xbd4>)
 8005b18:	f7ff baa8 	b.w	800506c <_dtoa_r+0xe4>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	dc03      	bgt.n	8005b2a <_dtoa_r+0xba2>
 8005b22:	9b05      	ldr	r3, [sp, #20]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	f73f aec9 	bgt.w	80058bc <_dtoa_r+0x934>
 8005b2a:	9d00      	ldr	r5, [sp, #0]
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4658      	mov	r0, fp
 8005b30:	f7ff f99e 	bl	8004e70 <quorem>
 8005b34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b38:	f805 3b01 	strb.w	r3, [r5], #1
 8005b3c:	9a00      	ldr	r2, [sp, #0]
 8005b3e:	1aaa      	subs	r2, r5, r2
 8005b40:	4591      	cmp	r9, r2
 8005b42:	ddba      	ble.n	8005aba <_dtoa_r+0xb32>
 8005b44:	4659      	mov	r1, fp
 8005b46:	2300      	movs	r3, #0
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 f97e 	bl	8005e4c <__multadd>
 8005b50:	4683      	mov	fp, r0
 8005b52:	e7eb      	b.n	8005b2c <_dtoa_r+0xba4>
 8005b54:	080070cb 	.word	0x080070cb
 8005b58:	08007024 	.word	0x08007024
 8005b5c:	08007048 	.word	0x08007048

08005b60 <std>:
 8005b60:	2300      	movs	r3, #0
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b6e:	6083      	str	r3, [r0, #8]
 8005b70:	8181      	strh	r1, [r0, #12]
 8005b72:	6643      	str	r3, [r0, #100]	; 0x64
 8005b74:	81c2      	strh	r2, [r0, #14]
 8005b76:	6183      	str	r3, [r0, #24]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	305c      	adds	r0, #92	; 0x5c
 8005b7e:	f7fe fced 	bl	800455c <memset>
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <std+0x38>)
 8005b84:	6263      	str	r3, [r4, #36]	; 0x24
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x3c>)
 8005b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x40>)
 8005b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x44>)
 8005b90:	6224      	str	r4, [r4, #32]
 8005b92:	6323      	str	r3, [r4, #48]	; 0x30
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	080068cd 	.word	0x080068cd
 8005b9c:	080068ef 	.word	0x080068ef
 8005ba0:	08006927 	.word	0x08006927
 8005ba4:	0800694b 	.word	0x0800694b

08005ba8 <_cleanup_r>:
 8005ba8:	4901      	ldr	r1, [pc, #4]	; (8005bb0 <_cleanup_r+0x8>)
 8005baa:	f000 b8af 	b.w	8005d0c <_fwalk_reent>
 8005bae:	bf00      	nop
 8005bb0:	08006c61 	.word	0x08006c61

08005bb4 <__sfmoreglue>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	1e4a      	subs	r2, r1, #1
 8005bb8:	2568      	movs	r5, #104	; 0x68
 8005bba:	4355      	muls	r5, r2
 8005bbc:	460e      	mov	r6, r1
 8005bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bc2:	f000 fcbf 	bl	8006544 <_malloc_r>
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	b140      	cbz	r0, 8005bdc <__sfmoreglue+0x28>
 8005bca:	2100      	movs	r1, #0
 8005bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd0:	300c      	adds	r0, #12
 8005bd2:	60a0      	str	r0, [r4, #8]
 8005bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd8:	f7fe fcc0 	bl	800455c <memset>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	bd70      	pop	{r4, r5, r6, pc}

08005be0 <__sfp_lock_acquire>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__sfp_lock_acquire+0x8>)
 8005be2:	f000 b8b8 	b.w	8005d56 <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	2000027c 	.word	0x2000027c

08005bec <__sfp_lock_release>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sfp_lock_release+0x8>)
 8005bee:	f000 b8b3 	b.w	8005d58 <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000027c 	.word	0x2000027c

08005bf8 <__sinit_lock_acquire>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sinit_lock_acquire+0x8>)
 8005bfa:	f000 b8ac 	b.w	8005d56 <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000277 	.word	0x20000277

08005c04 <__sinit_lock_release>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sinit_lock_release+0x8>)
 8005c06:	f000 b8a7 	b.w	8005d58 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000277 	.word	0x20000277

08005c10 <__sinit>:
 8005c10:	b510      	push	{r4, lr}
 8005c12:	4604      	mov	r4, r0
 8005c14:	f7ff fff0 	bl	8005bf8 <__sinit_lock_acquire>
 8005c18:	69a3      	ldr	r3, [r4, #24]
 8005c1a:	b11b      	cbz	r3, 8005c24 <__sinit+0x14>
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f7ff bff0 	b.w	8005c04 <__sinit_lock_release>
 8005c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c28:	6523      	str	r3, [r4, #80]	; 0x50
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <__sinit+0x68>)
 8005c2c:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <__sinit+0x6c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	bf04      	itt	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	61a3      	streq	r3, [r4, #24]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f820 	bl	8005c80 <__sfp>
 8005c40:	6060      	str	r0, [r4, #4]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f81c 	bl	8005c80 <__sfp>
 8005c48:	60a0      	str	r0, [r4, #8]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f818 	bl	8005c80 <__sfp>
 8005c50:	2200      	movs	r2, #0
 8005c52:	60e0      	str	r0, [r4, #12]
 8005c54:	2104      	movs	r1, #4
 8005c56:	6860      	ldr	r0, [r4, #4]
 8005c58:	f7ff ff82 	bl	8005b60 <std>
 8005c5c:	68a0      	ldr	r0, [r4, #8]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2109      	movs	r1, #9
 8005c62:	f7ff ff7d 	bl	8005b60 <std>
 8005c66:	68e0      	ldr	r0, [r4, #12]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	2112      	movs	r1, #18
 8005c6c:	f7ff ff78 	bl	8005b60 <std>
 8005c70:	2301      	movs	r3, #1
 8005c72:	61a3      	str	r3, [r4, #24]
 8005c74:	e7d2      	b.n	8005c1c <__sinit+0xc>
 8005c76:	bf00      	nop
 8005c78:	08007010 	.word	0x08007010
 8005c7c:	08005ba9 	.word	0x08005ba9

08005c80 <__sfp>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	4607      	mov	r7, r0
 8005c84:	f7ff ffac 	bl	8005be0 <__sfp_lock_acquire>
 8005c88:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <__sfp+0x84>)
 8005c8a:	681e      	ldr	r6, [r3, #0]
 8005c8c:	69b3      	ldr	r3, [r6, #24]
 8005c8e:	b913      	cbnz	r3, 8005c96 <__sfp+0x16>
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff ffbd 	bl	8005c10 <__sinit>
 8005c96:	3648      	adds	r6, #72	; 0x48
 8005c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	d503      	bpl.n	8005ca8 <__sfp+0x28>
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	b30b      	cbz	r3, 8005ce8 <__sfp+0x68>
 8005ca4:	6836      	ldr	r6, [r6, #0]
 8005ca6:	e7f7      	b.n	8005c98 <__sfp+0x18>
 8005ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cac:	b9d5      	cbnz	r5, 8005ce4 <__sfp+0x64>
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <__sfp+0x88>)
 8005cb0:	60e3      	str	r3, [r4, #12]
 8005cb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb8:	f000 f84c 	bl	8005d54 <__retarget_lock_init_recursive>
 8005cbc:	f7ff ff96 	bl	8005bec <__sfp_lock_release>
 8005cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc8:	6025      	str	r5, [r4, #0]
 8005cca:	61a5      	str	r5, [r4, #24]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cd4:	f7fe fc42 	bl	800455c <memset>
 8005cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce4:	3468      	adds	r4, #104	; 0x68
 8005ce6:	e7d9      	b.n	8005c9c <__sfp+0x1c>
 8005ce8:	2104      	movs	r1, #4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff62 	bl	8005bb4 <__sfmoreglue>
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	6030      	str	r0, [r6, #0]
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d1d5      	bne.n	8005ca4 <__sfp+0x24>
 8005cf8:	f7ff ff78 	bl	8005bec <__sfp_lock_release>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	e7ee      	b.n	8005ce0 <__sfp+0x60>
 8005d02:	bf00      	nop
 8005d04:	08007010 	.word	0x08007010
 8005d08:	ffff0001 	.word	0xffff0001

08005d0c <_fwalk_reent>:
 8005d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d10:	4606      	mov	r6, r0
 8005d12:	4688      	mov	r8, r1
 8005d14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d18:	2700      	movs	r7, #0
 8005d1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d1e:	f1b9 0901 	subs.w	r9, r9, #1
 8005d22:	d505      	bpl.n	8005d30 <_fwalk_reent+0x24>
 8005d24:	6824      	ldr	r4, [r4, #0]
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	d1f7      	bne.n	8005d1a <_fwalk_reent+0xe>
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d30:	89ab      	ldrh	r3, [r5, #12]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d907      	bls.n	8005d46 <_fwalk_reent+0x3a>
 8005d36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	d003      	beq.n	8005d46 <_fwalk_reent+0x3a>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	4630      	mov	r0, r6
 8005d42:	47c0      	blx	r8
 8005d44:	4307      	orrs	r7, r0
 8005d46:	3568      	adds	r5, #104	; 0x68
 8005d48:	e7e9      	b.n	8005d1e <_fwalk_reent+0x12>
	...

08005d4c <_localeconv_r>:
 8005d4c:	4800      	ldr	r0, [pc, #0]	; (8005d50 <_localeconv_r+0x4>)
 8005d4e:	4770      	bx	lr
 8005d50:	20000160 	.word	0x20000160

08005d54 <__retarget_lock_init_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_acquire_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <__retarget_lock_release_recursive>:
 8005d58:	4770      	bx	lr
	...

08005d5c <malloc>:
 8005d5c:	4b02      	ldr	r3, [pc, #8]	; (8005d68 <malloc+0xc>)
 8005d5e:	4601      	mov	r1, r0
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	f000 bbef 	b.w	8006544 <_malloc_r>
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c

08005d6c <memcpy>:
 8005d6c:	440a      	add	r2, r1
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d74:	d100      	bne.n	8005d78 <memcpy+0xc>
 8005d76:	4770      	bx	lr
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d82:	4291      	cmp	r1, r2
 8005d84:	d1f9      	bne.n	8005d7a <memcpy+0xe>
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <_Balloc>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	460d      	mov	r5, r1
 8005d90:	b976      	cbnz	r6, 8005db0 <_Balloc+0x28>
 8005d92:	2010      	movs	r0, #16
 8005d94:	f7ff ffe2 	bl	8005d5c <malloc>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d9c:	b920      	cbnz	r0, 8005da8 <_Balloc+0x20>
 8005d9e:	4b18      	ldr	r3, [pc, #96]	; (8005e00 <_Balloc+0x78>)
 8005da0:	4818      	ldr	r0, [pc, #96]	; (8005e04 <_Balloc+0x7c>)
 8005da2:	2166      	movs	r1, #102	; 0x66
 8005da4:	f000 fea8 	bl	8006af8 <__assert_func>
 8005da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dac:	6006      	str	r6, [r0, #0]
 8005dae:	60c6      	str	r6, [r0, #12]
 8005db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005db2:	68f3      	ldr	r3, [r6, #12]
 8005db4:	b183      	cbz	r3, 8005dd8 <_Balloc+0x50>
 8005db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dbe:	b9b8      	cbnz	r0, 8005df0 <_Balloc+0x68>
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8005dc6:	1d72      	adds	r2, r6, #5
 8005dc8:	0092      	lsls	r2, r2, #2
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 fb5a 	bl	8006484 <_calloc_r>
 8005dd0:	b160      	cbz	r0, 8005dec <_Balloc+0x64>
 8005dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dd6:	e00e      	b.n	8005df6 <_Balloc+0x6e>
 8005dd8:	2221      	movs	r2, #33	; 0x21
 8005dda:	2104      	movs	r1, #4
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fb51 	bl	8006484 <_calloc_r>
 8005de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005de4:	60f0      	str	r0, [r6, #12]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e4      	bne.n	8005db6 <_Balloc+0x2e>
 8005dec:	2000      	movs	r0, #0
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	6802      	ldr	r2, [r0, #0]
 8005df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005df6:	2300      	movs	r3, #0
 8005df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dfc:	e7f7      	b.n	8005dee <_Balloc+0x66>
 8005dfe:	bf00      	nop
 8005e00:	08007055 	.word	0x08007055
 8005e04:	0800713c 	.word	0x0800713c

08005e08 <_Bfree>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b976      	cbnz	r6, 8005e30 <_Bfree+0x28>
 8005e12:	2010      	movs	r0, #16
 8005e14:	f7ff ffa2 	bl	8005d5c <malloc>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6268      	str	r0, [r5, #36]	; 0x24
 8005e1c:	b920      	cbnz	r0, 8005e28 <_Bfree+0x20>
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <_Bfree+0x3c>)
 8005e20:	4809      	ldr	r0, [pc, #36]	; (8005e48 <_Bfree+0x40>)
 8005e22:	218a      	movs	r1, #138	; 0x8a
 8005e24:	f000 fe68 	bl	8006af8 <__assert_func>
 8005e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e2c:	6006      	str	r6, [r0, #0]
 8005e2e:	60c6      	str	r6, [r0, #12]
 8005e30:	b13c      	cbz	r4, 8005e42 <_Bfree+0x3a>
 8005e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e34:	6862      	ldr	r2, [r4, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e3c:	6021      	str	r1, [r4, #0]
 8005e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
 8005e44:	08007055 	.word	0x08007055
 8005e48:	0800713c 	.word	0x0800713c

08005e4c <__multadd>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	690e      	ldr	r6, [r1, #16]
 8005e52:	4607      	mov	r7, r0
 8005e54:	4698      	mov	r8, r3
 8005e56:	460c      	mov	r4, r1
 8005e58:	f101 0014 	add.w	r0, r1, #20
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6805      	ldr	r5, [r0, #0]
 8005e60:	b2a9      	uxth	r1, r5
 8005e62:	fb02 8101 	mla	r1, r2, r1, r8
 8005e66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005e6a:	0c2d      	lsrs	r5, r5, #16
 8005e6c:	fb02 c505 	mla	r5, r2, r5, ip
 8005e70:	b289      	uxth	r1, r1
 8005e72:	3301      	adds	r3, #1
 8005e74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	f840 1b04 	str.w	r1, [r0], #4
 8005e7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005e82:	dcec      	bgt.n	8005e5e <__multadd+0x12>
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	d022      	beq.n	8005ed0 <__multadd+0x84>
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	42b3      	cmp	r3, r6
 8005e8e:	dc19      	bgt.n	8005ec4 <__multadd+0x78>
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4638      	mov	r0, r7
 8005e94:	3101      	adds	r1, #1
 8005e96:	f7ff ff77 	bl	8005d88 <_Balloc>
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b928      	cbnz	r0, 8005eaa <__multadd+0x5e>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <__multadd+0x8c>)
 8005ea2:	480e      	ldr	r0, [pc, #56]	; (8005edc <__multadd+0x90>)
 8005ea4:	21b5      	movs	r1, #181	; 0xb5
 8005ea6:	f000 fe27 	bl	8006af8 <__assert_func>
 8005eaa:	6922      	ldr	r2, [r4, #16]
 8005eac:	3202      	adds	r2, #2
 8005eae:	f104 010c 	add.w	r1, r4, #12
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	300c      	adds	r0, #12
 8005eb6:	f7ff ff59 	bl	8005d6c <memcpy>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f7ff ffa3 	bl	8005e08 <_Bfree>
 8005ec2:	462c      	mov	r4, r5
 8005ec4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ec8:	3601      	adds	r6, #1
 8005eca:	f8c3 8014 	str.w	r8, [r3, #20]
 8005ece:	6126      	str	r6, [r4, #16]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed6:	bf00      	nop
 8005ed8:	080070cb 	.word	0x080070cb
 8005edc:	0800713c 	.word	0x0800713c

08005ee0 <__hi0bits>:
 8005ee0:	0c03      	lsrs	r3, r0, #16
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	b9d3      	cbnz	r3, 8005f1c <__hi0bits+0x3c>
 8005ee6:	0400      	lsls	r0, r0, #16
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005eee:	bf04      	itt	eq
 8005ef0:	0200      	lsleq	r0, r0, #8
 8005ef2:	3308      	addeq	r3, #8
 8005ef4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ef8:	bf04      	itt	eq
 8005efa:	0100      	lsleq	r0, r0, #4
 8005efc:	3304      	addeq	r3, #4
 8005efe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f02:	bf04      	itt	eq
 8005f04:	0080      	lsleq	r0, r0, #2
 8005f06:	3302      	addeq	r3, #2
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	db05      	blt.n	8005f18 <__hi0bits+0x38>
 8005f0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f10:	f103 0301 	add.w	r3, r3, #1
 8005f14:	bf08      	it	eq
 8005f16:	2320      	moveq	r3, #32
 8005f18:	4618      	mov	r0, r3
 8005f1a:	4770      	bx	lr
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e7e4      	b.n	8005eea <__hi0bits+0xa>

08005f20 <__lo0bits>:
 8005f20:	6803      	ldr	r3, [r0, #0]
 8005f22:	f013 0207 	ands.w	r2, r3, #7
 8005f26:	4601      	mov	r1, r0
 8005f28:	d00b      	beq.n	8005f42 <__lo0bits+0x22>
 8005f2a:	07da      	lsls	r2, r3, #31
 8005f2c:	d424      	bmi.n	8005f78 <__lo0bits+0x58>
 8005f2e:	0798      	lsls	r0, r3, #30
 8005f30:	bf49      	itett	mi
 8005f32:	085b      	lsrmi	r3, r3, #1
 8005f34:	089b      	lsrpl	r3, r3, #2
 8005f36:	2001      	movmi	r0, #1
 8005f38:	600b      	strmi	r3, [r1, #0]
 8005f3a:	bf5c      	itt	pl
 8005f3c:	600b      	strpl	r3, [r1, #0]
 8005f3e:	2002      	movpl	r0, #2
 8005f40:	4770      	bx	lr
 8005f42:	b298      	uxth	r0, r3
 8005f44:	b9b0      	cbnz	r0, 8005f74 <__lo0bits+0x54>
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	2010      	movs	r0, #16
 8005f4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f4e:	bf04      	itt	eq
 8005f50:	0a1b      	lsreq	r3, r3, #8
 8005f52:	3008      	addeq	r0, #8
 8005f54:	071a      	lsls	r2, r3, #28
 8005f56:	bf04      	itt	eq
 8005f58:	091b      	lsreq	r3, r3, #4
 8005f5a:	3004      	addeq	r0, #4
 8005f5c:	079a      	lsls	r2, r3, #30
 8005f5e:	bf04      	itt	eq
 8005f60:	089b      	lsreq	r3, r3, #2
 8005f62:	3002      	addeq	r0, #2
 8005f64:	07da      	lsls	r2, r3, #31
 8005f66:	d403      	bmi.n	8005f70 <__lo0bits+0x50>
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	f100 0001 	add.w	r0, r0, #1
 8005f6e:	d005      	beq.n	8005f7c <__lo0bits+0x5c>
 8005f70:	600b      	str	r3, [r1, #0]
 8005f72:	4770      	bx	lr
 8005f74:	4610      	mov	r0, r2
 8005f76:	e7e8      	b.n	8005f4a <__lo0bits+0x2a>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	4770      	bx	lr
 8005f7c:	2020      	movs	r0, #32
 8005f7e:	4770      	bx	lr

08005f80 <__i2b>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	2101      	movs	r1, #1
 8005f86:	f7ff feff 	bl	8005d88 <_Balloc>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	b928      	cbnz	r0, 8005f9a <__i2b+0x1a>
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <__i2b+0x24>)
 8005f90:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <__i2b+0x28>)
 8005f92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f96:	f000 fdaf 	bl	8006af8 <__assert_func>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	6144      	str	r4, [r0, #20]
 8005f9e:	6103      	str	r3, [r0, #16]
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	bf00      	nop
 8005fa4:	080070cb 	.word	0x080070cb
 8005fa8:	0800713c 	.word	0x0800713c

08005fac <__multiply>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	690a      	ldr	r2, [r1, #16]
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	bfb8      	it	lt
 8005fba:	460b      	movlt	r3, r1
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	bfbc      	itt	lt
 8005fc0:	4625      	movlt	r5, r4
 8005fc2:	461c      	movlt	r4, r3
 8005fc4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005fc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fcc:	68ab      	ldr	r3, [r5, #8]
 8005fce:	6869      	ldr	r1, [r5, #4]
 8005fd0:	eb0a 0709 	add.w	r7, sl, r9
 8005fd4:	42bb      	cmp	r3, r7
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	bfb8      	it	lt
 8005fda:	3101      	addlt	r1, #1
 8005fdc:	f7ff fed4 	bl	8005d88 <_Balloc>
 8005fe0:	b930      	cbnz	r0, 8005ff0 <__multiply+0x44>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b42      	ldr	r3, [pc, #264]	; (80060f0 <__multiply+0x144>)
 8005fe6:	4843      	ldr	r0, [pc, #268]	; (80060f4 <__multiply+0x148>)
 8005fe8:	f240 115d 	movw	r1, #349	; 0x15d
 8005fec:	f000 fd84 	bl	8006af8 <__assert_func>
 8005ff0:	f100 0614 	add.w	r6, r0, #20
 8005ff4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005ff8:	4633      	mov	r3, r6
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	d31e      	bcc.n	800603e <__multiply+0x92>
 8006000:	f105 0c14 	add.w	ip, r5, #20
 8006004:	f104 0314 	add.w	r3, r4, #20
 8006008:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800600c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006010:	9202      	str	r2, [sp, #8]
 8006012:	ebac 0205 	sub.w	r2, ip, r5
 8006016:	3a15      	subs	r2, #21
 8006018:	f022 0203 	bic.w	r2, r2, #3
 800601c:	3204      	adds	r2, #4
 800601e:	f105 0115 	add.w	r1, r5, #21
 8006022:	458c      	cmp	ip, r1
 8006024:	bf38      	it	cc
 8006026:	2204      	movcc	r2, #4
 8006028:	9201      	str	r2, [sp, #4]
 800602a:	9a02      	ldr	r2, [sp, #8]
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	429a      	cmp	r2, r3
 8006030:	d808      	bhi.n	8006044 <__multiply+0x98>
 8006032:	2f00      	cmp	r7, #0
 8006034:	dc55      	bgt.n	80060e2 <__multiply+0x136>
 8006036:	6107      	str	r7, [r0, #16]
 8006038:	b005      	add	sp, #20
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603e:	f843 2b04 	str.w	r2, [r3], #4
 8006042:	e7db      	b.n	8005ffc <__multiply+0x50>
 8006044:	f8b3 a000 	ldrh.w	sl, [r3]
 8006048:	f1ba 0f00 	cmp.w	sl, #0
 800604c:	d020      	beq.n	8006090 <__multiply+0xe4>
 800604e:	f105 0e14 	add.w	lr, r5, #20
 8006052:	46b1      	mov	r9, r6
 8006054:	2200      	movs	r2, #0
 8006056:	f85e 4b04 	ldr.w	r4, [lr], #4
 800605a:	f8d9 b000 	ldr.w	fp, [r9]
 800605e:	b2a1      	uxth	r1, r4
 8006060:	fa1f fb8b 	uxth.w	fp, fp
 8006064:	fb0a b101 	mla	r1, sl, r1, fp
 8006068:	4411      	add	r1, r2
 800606a:	f8d9 2000 	ldr.w	r2, [r9]
 800606e:	0c24      	lsrs	r4, r4, #16
 8006070:	0c12      	lsrs	r2, r2, #16
 8006072:	fb0a 2404 	mla	r4, sl, r4, r2
 8006076:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800607a:	b289      	uxth	r1, r1
 800607c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006080:	45f4      	cmp	ip, lr
 8006082:	f849 1b04 	str.w	r1, [r9], #4
 8006086:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800608a:	d8e4      	bhi.n	8006056 <__multiply+0xaa>
 800608c:	9901      	ldr	r1, [sp, #4]
 800608e:	5072      	str	r2, [r6, r1]
 8006090:	9a03      	ldr	r2, [sp, #12]
 8006092:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006096:	3304      	adds	r3, #4
 8006098:	f1b9 0f00 	cmp.w	r9, #0
 800609c:	d01f      	beq.n	80060de <__multiply+0x132>
 800609e:	6834      	ldr	r4, [r6, #0]
 80060a0:	f105 0114 	add.w	r1, r5, #20
 80060a4:	46b6      	mov	lr, r6
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	880a      	ldrh	r2, [r1, #0]
 80060ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060b0:	fb09 b202 	mla	r2, r9, r2, fp
 80060b4:	4492      	add	sl, r2
 80060b6:	b2a4      	uxth	r4, r4
 80060b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80060bc:	f84e 4b04 	str.w	r4, [lr], #4
 80060c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80060c4:	f8be 2000 	ldrh.w	r2, [lr]
 80060c8:	0c24      	lsrs	r4, r4, #16
 80060ca:	fb09 2404 	mla	r4, r9, r4, r2
 80060ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80060d2:	458c      	cmp	ip, r1
 80060d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80060d8:	d8e7      	bhi.n	80060aa <__multiply+0xfe>
 80060da:	9a01      	ldr	r2, [sp, #4]
 80060dc:	50b4      	str	r4, [r6, r2]
 80060de:	3604      	adds	r6, #4
 80060e0:	e7a3      	b.n	800602a <__multiply+0x7e>
 80060e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1a5      	bne.n	8006036 <__multiply+0x8a>
 80060ea:	3f01      	subs	r7, #1
 80060ec:	e7a1      	b.n	8006032 <__multiply+0x86>
 80060ee:	bf00      	nop
 80060f0:	080070cb 	.word	0x080070cb
 80060f4:	0800713c 	.word	0x0800713c

080060f8 <__pow5mult>:
 80060f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060fc:	4615      	mov	r5, r2
 80060fe:	f012 0203 	ands.w	r2, r2, #3
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	d007      	beq.n	8006118 <__pow5mult+0x20>
 8006108:	4c25      	ldr	r4, [pc, #148]	; (80061a0 <__pow5mult+0xa8>)
 800610a:	3a01      	subs	r2, #1
 800610c:	2300      	movs	r3, #0
 800610e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006112:	f7ff fe9b 	bl	8005e4c <__multadd>
 8006116:	4607      	mov	r7, r0
 8006118:	10ad      	asrs	r5, r5, #2
 800611a:	d03d      	beq.n	8006198 <__pow5mult+0xa0>
 800611c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800611e:	b97c      	cbnz	r4, 8006140 <__pow5mult+0x48>
 8006120:	2010      	movs	r0, #16
 8006122:	f7ff fe1b 	bl	8005d5c <malloc>
 8006126:	4602      	mov	r2, r0
 8006128:	6270      	str	r0, [r6, #36]	; 0x24
 800612a:	b928      	cbnz	r0, 8006138 <__pow5mult+0x40>
 800612c:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <__pow5mult+0xac>)
 800612e:	481e      	ldr	r0, [pc, #120]	; (80061a8 <__pow5mult+0xb0>)
 8006130:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006134:	f000 fce0 	bl	8006af8 <__assert_func>
 8006138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800613c:	6004      	str	r4, [r0, #0]
 800613e:	60c4      	str	r4, [r0, #12]
 8006140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006148:	b94c      	cbnz	r4, 800615e <__pow5mult+0x66>
 800614a:	f240 2171 	movw	r1, #625	; 0x271
 800614e:	4630      	mov	r0, r6
 8006150:	f7ff ff16 	bl	8005f80 <__i2b>
 8006154:	2300      	movs	r3, #0
 8006156:	f8c8 0008 	str.w	r0, [r8, #8]
 800615a:	4604      	mov	r4, r0
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	07eb      	lsls	r3, r5, #31
 8006164:	d50a      	bpl.n	800617c <__pow5mult+0x84>
 8006166:	4639      	mov	r1, r7
 8006168:	4622      	mov	r2, r4
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff ff1e 	bl	8005fac <__multiply>
 8006170:	4639      	mov	r1, r7
 8006172:	4680      	mov	r8, r0
 8006174:	4630      	mov	r0, r6
 8006176:	f7ff fe47 	bl	8005e08 <_Bfree>
 800617a:	4647      	mov	r7, r8
 800617c:	106d      	asrs	r5, r5, #1
 800617e:	d00b      	beq.n	8006198 <__pow5mult+0xa0>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	b938      	cbnz	r0, 8006194 <__pow5mult+0x9c>
 8006184:	4622      	mov	r2, r4
 8006186:	4621      	mov	r1, r4
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ff0f 	bl	8005fac <__multiply>
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	f8c0 9000 	str.w	r9, [r0]
 8006194:	4604      	mov	r4, r0
 8006196:	e7e4      	b.n	8006162 <__pow5mult+0x6a>
 8006198:	4638      	mov	r0, r7
 800619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619e:	bf00      	nop
 80061a0:	08007290 	.word	0x08007290
 80061a4:	08007055 	.word	0x08007055
 80061a8:	0800713c 	.word	0x0800713c

080061ac <__lshift>:
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	460c      	mov	r4, r1
 80061b2:	6849      	ldr	r1, [r1, #4]
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	4607      	mov	r7, r0
 80061be:	4691      	mov	r9, r2
 80061c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061c4:	f108 0601 	add.w	r6, r8, #1
 80061c8:	42b3      	cmp	r3, r6
 80061ca:	db0b      	blt.n	80061e4 <__lshift+0x38>
 80061cc:	4638      	mov	r0, r7
 80061ce:	f7ff fddb 	bl	8005d88 <_Balloc>
 80061d2:	4605      	mov	r5, r0
 80061d4:	b948      	cbnz	r0, 80061ea <__lshift+0x3e>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b28      	ldr	r3, [pc, #160]	; (800627c <__lshift+0xd0>)
 80061da:	4829      	ldr	r0, [pc, #164]	; (8006280 <__lshift+0xd4>)
 80061dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061e0:	f000 fc8a 	bl	8006af8 <__assert_func>
 80061e4:	3101      	adds	r1, #1
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	e7ee      	b.n	80061c8 <__lshift+0x1c>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f100 0114 	add.w	r1, r0, #20
 80061f0:	f100 0210 	add.w	r2, r0, #16
 80061f4:	4618      	mov	r0, r3
 80061f6:	4553      	cmp	r3, sl
 80061f8:	db33      	blt.n	8006262 <__lshift+0xb6>
 80061fa:	6920      	ldr	r0, [r4, #16]
 80061fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006200:	f104 0314 	add.w	r3, r4, #20
 8006204:	f019 091f 	ands.w	r9, r9, #31
 8006208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800620c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006210:	d02b      	beq.n	800626a <__lshift+0xbe>
 8006212:	f1c9 0e20 	rsb	lr, r9, #32
 8006216:	468a      	mov	sl, r1
 8006218:	2200      	movs	r2, #0
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	fa00 f009 	lsl.w	r0, r0, r9
 8006220:	4302      	orrs	r2, r0
 8006222:	f84a 2b04 	str.w	r2, [sl], #4
 8006226:	f853 2b04 	ldr.w	r2, [r3], #4
 800622a:	459c      	cmp	ip, r3
 800622c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006230:	d8f3      	bhi.n	800621a <__lshift+0x6e>
 8006232:	ebac 0304 	sub.w	r3, ip, r4
 8006236:	3b15      	subs	r3, #21
 8006238:	f023 0303 	bic.w	r3, r3, #3
 800623c:	3304      	adds	r3, #4
 800623e:	f104 0015 	add.w	r0, r4, #21
 8006242:	4584      	cmp	ip, r0
 8006244:	bf38      	it	cc
 8006246:	2304      	movcc	r3, #4
 8006248:	50ca      	str	r2, [r1, r3]
 800624a:	b10a      	cbz	r2, 8006250 <__lshift+0xa4>
 800624c:	f108 0602 	add.w	r6, r8, #2
 8006250:	3e01      	subs	r6, #1
 8006252:	4638      	mov	r0, r7
 8006254:	612e      	str	r6, [r5, #16]
 8006256:	4621      	mov	r1, r4
 8006258:	f7ff fdd6 	bl	8005e08 <_Bfree>
 800625c:	4628      	mov	r0, r5
 800625e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006262:	f842 0f04 	str.w	r0, [r2, #4]!
 8006266:	3301      	adds	r3, #1
 8006268:	e7c5      	b.n	80061f6 <__lshift+0x4a>
 800626a:	3904      	subs	r1, #4
 800626c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006270:	f841 2f04 	str.w	r2, [r1, #4]!
 8006274:	459c      	cmp	ip, r3
 8006276:	d8f9      	bhi.n	800626c <__lshift+0xc0>
 8006278:	e7ea      	b.n	8006250 <__lshift+0xa4>
 800627a:	bf00      	nop
 800627c:	080070cb 	.word	0x080070cb
 8006280:	0800713c 	.word	0x0800713c

08006284 <__mcmp>:
 8006284:	b530      	push	{r4, r5, lr}
 8006286:	6902      	ldr	r2, [r0, #16]
 8006288:	690c      	ldr	r4, [r1, #16]
 800628a:	1b12      	subs	r2, r2, r4
 800628c:	d10e      	bne.n	80062ac <__mcmp+0x28>
 800628e:	f100 0314 	add.w	r3, r0, #20
 8006292:	3114      	adds	r1, #20
 8006294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800629c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80062a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80062a4:	42a5      	cmp	r5, r4
 80062a6:	d003      	beq.n	80062b0 <__mcmp+0x2c>
 80062a8:	d305      	bcc.n	80062b6 <__mcmp+0x32>
 80062aa:	2201      	movs	r2, #1
 80062ac:	4610      	mov	r0, r2
 80062ae:	bd30      	pop	{r4, r5, pc}
 80062b0:	4283      	cmp	r3, r0
 80062b2:	d3f3      	bcc.n	800629c <__mcmp+0x18>
 80062b4:	e7fa      	b.n	80062ac <__mcmp+0x28>
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ba:	e7f7      	b.n	80062ac <__mcmp+0x28>

080062bc <__mdiff>:
 80062bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	4606      	mov	r6, r0
 80062c4:	4611      	mov	r1, r2
 80062c6:	4620      	mov	r0, r4
 80062c8:	4617      	mov	r7, r2
 80062ca:	f7ff ffdb 	bl	8006284 <__mcmp>
 80062ce:	1e05      	subs	r5, r0, #0
 80062d0:	d110      	bne.n	80062f4 <__mdiff+0x38>
 80062d2:	4629      	mov	r1, r5
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff fd57 	bl	8005d88 <_Balloc>
 80062da:	b930      	cbnz	r0, 80062ea <__mdiff+0x2e>
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <__mdiff+0x108>)
 80062de:	4602      	mov	r2, r0
 80062e0:	f240 2132 	movw	r1, #562	; 0x232
 80062e4:	4838      	ldr	r0, [pc, #224]	; (80063c8 <__mdiff+0x10c>)
 80062e6:	f000 fc07 	bl	8006af8 <__assert_func>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	bfa4      	itt	ge
 80062f6:	463b      	movge	r3, r7
 80062f8:	4627      	movge	r7, r4
 80062fa:	4630      	mov	r0, r6
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	bfa6      	itte	ge
 8006300:	461c      	movge	r4, r3
 8006302:	2500      	movge	r5, #0
 8006304:	2501      	movlt	r5, #1
 8006306:	f7ff fd3f 	bl	8005d88 <_Balloc>
 800630a:	b920      	cbnz	r0, 8006316 <__mdiff+0x5a>
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <__mdiff+0x108>)
 800630e:	4602      	mov	r2, r0
 8006310:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006314:	e7e6      	b.n	80062e4 <__mdiff+0x28>
 8006316:	693e      	ldr	r6, [r7, #16]
 8006318:	60c5      	str	r5, [r0, #12]
 800631a:	6925      	ldr	r5, [r4, #16]
 800631c:	f107 0114 	add.w	r1, r7, #20
 8006320:	f104 0914 	add.w	r9, r4, #20
 8006324:	f100 0e14 	add.w	lr, r0, #20
 8006328:	f107 0210 	add.w	r2, r7, #16
 800632c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006330:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006334:	46f2      	mov	sl, lr
 8006336:	2700      	movs	r7, #0
 8006338:	f859 3b04 	ldr.w	r3, [r9], #4
 800633c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006340:	fa1f f883 	uxth.w	r8, r3
 8006344:	fa17 f78b 	uxtah	r7, r7, fp
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	eba7 0808 	sub.w	r8, r7, r8
 800634e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006352:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006356:	fa1f f888 	uxth.w	r8, r8
 800635a:	141f      	asrs	r7, r3, #16
 800635c:	454d      	cmp	r5, r9
 800635e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006362:	f84a 3b04 	str.w	r3, [sl], #4
 8006366:	d8e7      	bhi.n	8006338 <__mdiff+0x7c>
 8006368:	1b2b      	subs	r3, r5, r4
 800636a:	3b15      	subs	r3, #21
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	3304      	adds	r3, #4
 8006372:	3415      	adds	r4, #21
 8006374:	42a5      	cmp	r5, r4
 8006376:	bf38      	it	cc
 8006378:	2304      	movcc	r3, #4
 800637a:	4419      	add	r1, r3
 800637c:	4473      	add	r3, lr
 800637e:	469e      	mov	lr, r3
 8006380:	460d      	mov	r5, r1
 8006382:	4565      	cmp	r5, ip
 8006384:	d30e      	bcc.n	80063a4 <__mdiff+0xe8>
 8006386:	f10c 0203 	add.w	r2, ip, #3
 800638a:	1a52      	subs	r2, r2, r1
 800638c:	f022 0203 	bic.w	r2, r2, #3
 8006390:	3903      	subs	r1, #3
 8006392:	458c      	cmp	ip, r1
 8006394:	bf38      	it	cc
 8006396:	2200      	movcc	r2, #0
 8006398:	441a      	add	r2, r3
 800639a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800639e:	b17b      	cbz	r3, 80063c0 <__mdiff+0x104>
 80063a0:	6106      	str	r6, [r0, #16]
 80063a2:	e7a5      	b.n	80062f0 <__mdiff+0x34>
 80063a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80063a8:	fa17 f488 	uxtah	r4, r7, r8
 80063ac:	1422      	asrs	r2, r4, #16
 80063ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80063b2:	b2a4      	uxth	r4, r4
 80063b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80063b8:	f84e 4b04 	str.w	r4, [lr], #4
 80063bc:	1417      	asrs	r7, r2, #16
 80063be:	e7e0      	b.n	8006382 <__mdiff+0xc6>
 80063c0:	3e01      	subs	r6, #1
 80063c2:	e7ea      	b.n	800639a <__mdiff+0xde>
 80063c4:	080070cb 	.word	0x080070cb
 80063c8:	0800713c 	.word	0x0800713c

080063cc <__d2b>:
 80063cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063d0:	4689      	mov	r9, r1
 80063d2:	2101      	movs	r1, #1
 80063d4:	ec57 6b10 	vmov	r6, r7, d0
 80063d8:	4690      	mov	r8, r2
 80063da:	f7ff fcd5 	bl	8005d88 <_Balloc>
 80063de:	4604      	mov	r4, r0
 80063e0:	b930      	cbnz	r0, 80063f0 <__d2b+0x24>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b25      	ldr	r3, [pc, #148]	; (800647c <__d2b+0xb0>)
 80063e6:	4826      	ldr	r0, [pc, #152]	; (8006480 <__d2b+0xb4>)
 80063e8:	f240 310a 	movw	r1, #778	; 0x30a
 80063ec:	f000 fb84 	bl	8006af8 <__assert_func>
 80063f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063f8:	bb35      	cbnz	r5, 8006448 <__d2b+0x7c>
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	d028      	beq.n	8006452 <__d2b+0x86>
 8006400:	4668      	mov	r0, sp
 8006402:	9600      	str	r6, [sp, #0]
 8006404:	f7ff fd8c 	bl	8005f20 <__lo0bits>
 8006408:	9900      	ldr	r1, [sp, #0]
 800640a:	b300      	cbz	r0, 800644e <__d2b+0x82>
 800640c:	9a01      	ldr	r2, [sp, #4]
 800640e:	f1c0 0320 	rsb	r3, r0, #32
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	430b      	orrs	r3, r1
 8006418:	40c2      	lsrs	r2, r0
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	9201      	str	r2, [sp, #4]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	61a3      	str	r3, [r4, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf14      	ite	ne
 8006426:	2202      	movne	r2, #2
 8006428:	2201      	moveq	r2, #1
 800642a:	6122      	str	r2, [r4, #16]
 800642c:	b1d5      	cbz	r5, 8006464 <__d2b+0x98>
 800642e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006432:	4405      	add	r5, r0
 8006434:	f8c9 5000 	str.w	r5, [r9]
 8006438:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800643c:	f8c8 0000 	str.w	r0, [r8]
 8006440:	4620      	mov	r0, r4
 8006442:	b003      	add	sp, #12
 8006444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800644c:	e7d5      	b.n	80063fa <__d2b+0x2e>
 800644e:	6161      	str	r1, [r4, #20]
 8006450:	e7e5      	b.n	800641e <__d2b+0x52>
 8006452:	a801      	add	r0, sp, #4
 8006454:	f7ff fd64 	bl	8005f20 <__lo0bits>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	6163      	str	r3, [r4, #20]
 800645c:	2201      	movs	r2, #1
 800645e:	6122      	str	r2, [r4, #16]
 8006460:	3020      	adds	r0, #32
 8006462:	e7e3      	b.n	800642c <__d2b+0x60>
 8006464:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800646c:	f8c9 0000 	str.w	r0, [r9]
 8006470:	6918      	ldr	r0, [r3, #16]
 8006472:	f7ff fd35 	bl	8005ee0 <__hi0bits>
 8006476:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800647a:	e7df      	b.n	800643c <__d2b+0x70>
 800647c:	080070cb 	.word	0x080070cb
 8006480:	0800713c 	.word	0x0800713c

08006484 <_calloc_r>:
 8006484:	b513      	push	{r0, r1, r4, lr}
 8006486:	434a      	muls	r2, r1
 8006488:	4611      	mov	r1, r2
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	f000 f85a 	bl	8006544 <_malloc_r>
 8006490:	4604      	mov	r4, r0
 8006492:	b118      	cbz	r0, 800649c <_calloc_r+0x18>
 8006494:	9a01      	ldr	r2, [sp, #4]
 8006496:	2100      	movs	r1, #0
 8006498:	f7fe f860 	bl	800455c <memset>
 800649c:	4620      	mov	r0, r4
 800649e:	b002      	add	sp, #8
 80064a0:	bd10      	pop	{r4, pc}
	...

080064a4 <_free_r>:
 80064a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064a6:	2900      	cmp	r1, #0
 80064a8:	d048      	beq.n	800653c <_free_r+0x98>
 80064aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ae:	9001      	str	r0, [sp, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f1a1 0404 	sub.w	r4, r1, #4
 80064b6:	bfb8      	it	lt
 80064b8:	18e4      	addlt	r4, r4, r3
 80064ba:	f000 fca7 	bl	8006e0c <__malloc_lock>
 80064be:	4a20      	ldr	r2, [pc, #128]	; (8006540 <_free_r+0x9c>)
 80064c0:	9801      	ldr	r0, [sp, #4]
 80064c2:	6813      	ldr	r3, [r2, #0]
 80064c4:	4615      	mov	r5, r2
 80064c6:	b933      	cbnz	r3, 80064d6 <_free_r+0x32>
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	6014      	str	r4, [r2, #0]
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d2:	f000 bca1 	b.w	8006e18 <__malloc_unlock>
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	d90b      	bls.n	80064f2 <_free_r+0x4e>
 80064da:	6821      	ldr	r1, [r4, #0]
 80064dc:	1862      	adds	r2, r4, r1
 80064de:	4293      	cmp	r3, r2
 80064e0:	bf04      	itt	eq
 80064e2:	681a      	ldreq	r2, [r3, #0]
 80064e4:	685b      	ldreq	r3, [r3, #4]
 80064e6:	6063      	str	r3, [r4, #4]
 80064e8:	bf04      	itt	eq
 80064ea:	1852      	addeq	r2, r2, r1
 80064ec:	6022      	streq	r2, [r4, #0]
 80064ee:	602c      	str	r4, [r5, #0]
 80064f0:	e7ec      	b.n	80064cc <_free_r+0x28>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x58>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x4e>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1855      	adds	r5, r2, r1
 8006500:	42a5      	cmp	r5, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x78>
 8006504:	6824      	ldr	r4, [r4, #0]
 8006506:	4421      	add	r1, r4
 8006508:	1854      	adds	r4, r2, r1
 800650a:	42a3      	cmp	r3, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1dd      	bne.n	80064cc <_free_r+0x28>
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6053      	str	r3, [r2, #4]
 8006516:	4421      	add	r1, r4
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	e7d7      	b.n	80064cc <_free_r+0x28>
 800651c:	d902      	bls.n	8006524 <_free_r+0x80>
 800651e:	230c      	movs	r3, #12
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	e7d3      	b.n	80064cc <_free_r+0x28>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf04      	itt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	bf04      	itt	eq
 8006534:	1949      	addeq	r1, r1, r5
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7c7      	b.n	80064cc <_free_r+0x28>
 800653c:	b003      	add	sp, #12
 800653e:	bd30      	pop	{r4, r5, pc}
 8006540:	20000200 	.word	0x20000200

08006544 <_malloc_r>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	1ccd      	adds	r5, r1, #3
 8006548:	f025 0503 	bic.w	r5, r5, #3
 800654c:	3508      	adds	r5, #8
 800654e:	2d0c      	cmp	r5, #12
 8006550:	bf38      	it	cc
 8006552:	250c      	movcc	r5, #12
 8006554:	2d00      	cmp	r5, #0
 8006556:	4606      	mov	r6, r0
 8006558:	db01      	blt.n	800655e <_malloc_r+0x1a>
 800655a:	42a9      	cmp	r1, r5
 800655c:	d903      	bls.n	8006566 <_malloc_r+0x22>
 800655e:	230c      	movs	r3, #12
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	2000      	movs	r0, #0
 8006564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006566:	f000 fc51 	bl	8006e0c <__malloc_lock>
 800656a:	4921      	ldr	r1, [pc, #132]	; (80065f0 <_malloc_r+0xac>)
 800656c:	680a      	ldr	r2, [r1, #0]
 800656e:	4614      	mov	r4, r2
 8006570:	b99c      	cbnz	r4, 800659a <_malloc_r+0x56>
 8006572:	4f20      	ldr	r7, [pc, #128]	; (80065f4 <_malloc_r+0xb0>)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	b923      	cbnz	r3, 8006582 <_malloc_r+0x3e>
 8006578:	4621      	mov	r1, r4
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f996 	bl	80068ac <_sbrk_r>
 8006580:	6038      	str	r0, [r7, #0]
 8006582:	4629      	mov	r1, r5
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f991 	bl	80068ac <_sbrk_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d123      	bne.n	80065d6 <_malloc_r+0x92>
 800658e:	230c      	movs	r3, #12
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	4630      	mov	r0, r6
 8006594:	f000 fc40 	bl	8006e18 <__malloc_unlock>
 8006598:	e7e3      	b.n	8006562 <_malloc_r+0x1e>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	1b5b      	subs	r3, r3, r5
 800659e:	d417      	bmi.n	80065d0 <_malloc_r+0x8c>
 80065a0:	2b0b      	cmp	r3, #11
 80065a2:	d903      	bls.n	80065ac <_malloc_r+0x68>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	441c      	add	r4, r3
 80065a8:	6025      	str	r5, [r4, #0]
 80065aa:	e004      	b.n	80065b6 <_malloc_r+0x72>
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	42a2      	cmp	r2, r4
 80065b0:	bf0c      	ite	eq
 80065b2:	600b      	streq	r3, [r1, #0]
 80065b4:	6053      	strne	r3, [r2, #4]
 80065b6:	4630      	mov	r0, r6
 80065b8:	f000 fc2e 	bl	8006e18 <__malloc_unlock>
 80065bc:	f104 000b 	add.w	r0, r4, #11
 80065c0:	1d23      	adds	r3, r4, #4
 80065c2:	f020 0007 	bic.w	r0, r0, #7
 80065c6:	1ac2      	subs	r2, r0, r3
 80065c8:	d0cc      	beq.n	8006564 <_malloc_r+0x20>
 80065ca:	1a1b      	subs	r3, r3, r0
 80065cc:	50a3      	str	r3, [r4, r2]
 80065ce:	e7c9      	b.n	8006564 <_malloc_r+0x20>
 80065d0:	4622      	mov	r2, r4
 80065d2:	6864      	ldr	r4, [r4, #4]
 80065d4:	e7cc      	b.n	8006570 <_malloc_r+0x2c>
 80065d6:	1cc4      	adds	r4, r0, #3
 80065d8:	f024 0403 	bic.w	r4, r4, #3
 80065dc:	42a0      	cmp	r0, r4
 80065de:	d0e3      	beq.n	80065a8 <_malloc_r+0x64>
 80065e0:	1a21      	subs	r1, r4, r0
 80065e2:	4630      	mov	r0, r6
 80065e4:	f000 f962 	bl	80068ac <_sbrk_r>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1dd      	bne.n	80065a8 <_malloc_r+0x64>
 80065ec:	e7cf      	b.n	800658e <_malloc_r+0x4a>
 80065ee:	bf00      	nop
 80065f0:	20000200 	.word	0x20000200
 80065f4:	20000204 	.word	0x20000204

080065f8 <__sfputc_r>:
 80065f8:	6893      	ldr	r3, [r2, #8]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	b410      	push	{r4}
 8006600:	6093      	str	r3, [r2, #8]
 8006602:	da08      	bge.n	8006616 <__sfputc_r+0x1e>
 8006604:	6994      	ldr	r4, [r2, #24]
 8006606:	42a3      	cmp	r3, r4
 8006608:	db01      	blt.n	800660e <__sfputc_r+0x16>
 800660a:	290a      	cmp	r1, #10
 800660c:	d103      	bne.n	8006616 <__sfputc_r+0x1e>
 800660e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006612:	f000 b99f 	b.w	8006954 <__swbuf_r>
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	1c58      	adds	r0, r3, #1
 800661a:	6010      	str	r0, [r2, #0]
 800661c:	7019      	strb	r1, [r3, #0]
 800661e:	4608      	mov	r0, r1
 8006620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006624:	4770      	bx	lr

08006626 <__sfputs_r>:
 8006626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	4614      	mov	r4, r2
 800662e:	18d5      	adds	r5, r2, r3
 8006630:	42ac      	cmp	r4, r5
 8006632:	d101      	bne.n	8006638 <__sfputs_r+0x12>
 8006634:	2000      	movs	r0, #0
 8006636:	e007      	b.n	8006648 <__sfputs_r+0x22>
 8006638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663c:	463a      	mov	r2, r7
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ffda 	bl	80065f8 <__sfputc_r>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d1f3      	bne.n	8006630 <__sfputs_r+0xa>
 8006648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800664c <_vfiprintf_r>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	460d      	mov	r5, r1
 8006652:	b09d      	sub	sp, #116	; 0x74
 8006654:	4614      	mov	r4, r2
 8006656:	4698      	mov	r8, r3
 8006658:	4606      	mov	r6, r0
 800665a:	b118      	cbz	r0, 8006664 <_vfiprintf_r+0x18>
 800665c:	6983      	ldr	r3, [r0, #24]
 800665e:	b90b      	cbnz	r3, 8006664 <_vfiprintf_r+0x18>
 8006660:	f7ff fad6 	bl	8005c10 <__sinit>
 8006664:	4b89      	ldr	r3, [pc, #548]	; (800688c <_vfiprintf_r+0x240>)
 8006666:	429d      	cmp	r5, r3
 8006668:	d11b      	bne.n	80066a2 <_vfiprintf_r+0x56>
 800666a:	6875      	ldr	r5, [r6, #4]
 800666c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666e:	07d9      	lsls	r1, r3, #31
 8006670:	d405      	bmi.n	800667e <_vfiprintf_r+0x32>
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d402      	bmi.n	800667e <_vfiprintf_r+0x32>
 8006678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800667a:	f7ff fb6c 	bl	8005d56 <__retarget_lock_acquire_recursive>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	071b      	lsls	r3, r3, #28
 8006682:	d501      	bpl.n	8006688 <_vfiprintf_r+0x3c>
 8006684:	692b      	ldr	r3, [r5, #16]
 8006686:	b9eb      	cbnz	r3, 80066c4 <_vfiprintf_r+0x78>
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f000 f9c6 	bl	8006a1c <__swsetup_r>
 8006690:	b1c0      	cbz	r0, 80066c4 <_vfiprintf_r+0x78>
 8006692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006694:	07dc      	lsls	r4, r3, #31
 8006696:	d50e      	bpl.n	80066b6 <_vfiprintf_r+0x6a>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800669c:	b01d      	add	sp, #116	; 0x74
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	4b7b      	ldr	r3, [pc, #492]	; (8006890 <_vfiprintf_r+0x244>)
 80066a4:	429d      	cmp	r5, r3
 80066a6:	d101      	bne.n	80066ac <_vfiprintf_r+0x60>
 80066a8:	68b5      	ldr	r5, [r6, #8]
 80066aa:	e7df      	b.n	800666c <_vfiprintf_r+0x20>
 80066ac:	4b79      	ldr	r3, [pc, #484]	; (8006894 <_vfiprintf_r+0x248>)
 80066ae:	429d      	cmp	r5, r3
 80066b0:	bf08      	it	eq
 80066b2:	68f5      	ldreq	r5, [r6, #12]
 80066b4:	e7da      	b.n	800666c <_vfiprintf_r+0x20>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	0598      	lsls	r0, r3, #22
 80066ba:	d4ed      	bmi.n	8006698 <_vfiprintf_r+0x4c>
 80066bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066be:	f7ff fb4b 	bl	8005d58 <__retarget_lock_release_recursive>
 80066c2:	e7e9      	b.n	8006698 <_vfiprintf_r+0x4c>
 80066c4:	2300      	movs	r3, #0
 80066c6:	9309      	str	r3, [sp, #36]	; 0x24
 80066c8:	2320      	movs	r3, #32
 80066ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80066d2:	2330      	movs	r3, #48	; 0x30
 80066d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006898 <_vfiprintf_r+0x24c>
 80066d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066dc:	f04f 0901 	mov.w	r9, #1
 80066e0:	4623      	mov	r3, r4
 80066e2:	469a      	mov	sl, r3
 80066e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e8:	b10a      	cbz	r2, 80066ee <_vfiprintf_r+0xa2>
 80066ea:	2a25      	cmp	r2, #37	; 0x25
 80066ec:	d1f9      	bne.n	80066e2 <_vfiprintf_r+0x96>
 80066ee:	ebba 0b04 	subs.w	fp, sl, r4
 80066f2:	d00b      	beq.n	800670c <_vfiprintf_r+0xc0>
 80066f4:	465b      	mov	r3, fp
 80066f6:	4622      	mov	r2, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff ff93 	bl	8006626 <__sfputs_r>
 8006700:	3001      	adds	r0, #1
 8006702:	f000 80aa 	beq.w	800685a <_vfiprintf_r+0x20e>
 8006706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006708:	445a      	add	r2, fp
 800670a:	9209      	str	r2, [sp, #36]	; 0x24
 800670c:	f89a 3000 	ldrb.w	r3, [sl]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80a2 	beq.w	800685a <_vfiprintf_r+0x20e>
 8006716:	2300      	movs	r3, #0
 8006718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800671c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006720:	f10a 0a01 	add.w	sl, sl, #1
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800672c:	931a      	str	r3, [sp, #104]	; 0x68
 800672e:	4654      	mov	r4, sl
 8006730:	2205      	movs	r2, #5
 8006732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006736:	4858      	ldr	r0, [pc, #352]	; (8006898 <_vfiprintf_r+0x24c>)
 8006738:	f7f9 fd6a 	bl	8000210 <memchr>
 800673c:	9a04      	ldr	r2, [sp, #16]
 800673e:	b9d8      	cbnz	r0, 8006778 <_vfiprintf_r+0x12c>
 8006740:	06d1      	lsls	r1, r2, #27
 8006742:	bf44      	itt	mi
 8006744:	2320      	movmi	r3, #32
 8006746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800674a:	0713      	lsls	r3, r2, #28
 800674c:	bf44      	itt	mi
 800674e:	232b      	movmi	r3, #43	; 0x2b
 8006750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006754:	f89a 3000 	ldrb.w	r3, [sl]
 8006758:	2b2a      	cmp	r3, #42	; 0x2a
 800675a:	d015      	beq.n	8006788 <_vfiprintf_r+0x13c>
 800675c:	9a07      	ldr	r2, [sp, #28]
 800675e:	4654      	mov	r4, sl
 8006760:	2000      	movs	r0, #0
 8006762:	f04f 0c0a 	mov.w	ip, #10
 8006766:	4621      	mov	r1, r4
 8006768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800676c:	3b30      	subs	r3, #48	; 0x30
 800676e:	2b09      	cmp	r3, #9
 8006770:	d94e      	bls.n	8006810 <_vfiprintf_r+0x1c4>
 8006772:	b1b0      	cbz	r0, 80067a2 <_vfiprintf_r+0x156>
 8006774:	9207      	str	r2, [sp, #28]
 8006776:	e014      	b.n	80067a2 <_vfiprintf_r+0x156>
 8006778:	eba0 0308 	sub.w	r3, r0, r8
 800677c:	fa09 f303 	lsl.w	r3, r9, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	46a2      	mov	sl, r4
 8006786:	e7d2      	b.n	800672e <_vfiprintf_r+0xe2>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	1d19      	adds	r1, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9103      	str	r1, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfbb      	ittet	lt
 8006794:	425b      	neglt	r3, r3
 8006796:	f042 0202 	orrlt.w	r2, r2, #2
 800679a:	9307      	strge	r3, [sp, #28]
 800679c:	9307      	strlt	r3, [sp, #28]
 800679e:	bfb8      	it	lt
 80067a0:	9204      	strlt	r2, [sp, #16]
 80067a2:	7823      	ldrb	r3, [r4, #0]
 80067a4:	2b2e      	cmp	r3, #46	; 0x2e
 80067a6:	d10c      	bne.n	80067c2 <_vfiprintf_r+0x176>
 80067a8:	7863      	ldrb	r3, [r4, #1]
 80067aa:	2b2a      	cmp	r3, #42	; 0x2a
 80067ac:	d135      	bne.n	800681a <_vfiprintf_r+0x1ce>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	1d1a      	adds	r2, r3, #4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	9203      	str	r2, [sp, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfb8      	it	lt
 80067ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067be:	3402      	adds	r4, #2
 80067c0:	9305      	str	r3, [sp, #20]
 80067c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068a8 <_vfiprintf_r+0x25c>
 80067c6:	7821      	ldrb	r1, [r4, #0]
 80067c8:	2203      	movs	r2, #3
 80067ca:	4650      	mov	r0, sl
 80067cc:	f7f9 fd20 	bl	8000210 <memchr>
 80067d0:	b140      	cbz	r0, 80067e4 <_vfiprintf_r+0x198>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	eba0 000a 	sub.w	r0, r0, sl
 80067d8:	fa03 f000 	lsl.w	r0, r3, r0
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	4303      	orrs	r3, r0
 80067e0:	3401      	adds	r4, #1
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e8:	482c      	ldr	r0, [pc, #176]	; (800689c <_vfiprintf_r+0x250>)
 80067ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ee:	2206      	movs	r2, #6
 80067f0:	f7f9 fd0e 	bl	8000210 <memchr>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d03f      	beq.n	8006878 <_vfiprintf_r+0x22c>
 80067f8:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <_vfiprintf_r+0x254>)
 80067fa:	bb1b      	cbnz	r3, 8006844 <_vfiprintf_r+0x1f8>
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	3307      	adds	r3, #7
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	3308      	adds	r3, #8
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680a:	443b      	add	r3, r7
 800680c:	9309      	str	r3, [sp, #36]	; 0x24
 800680e:	e767      	b.n	80066e0 <_vfiprintf_r+0x94>
 8006810:	fb0c 3202 	mla	r2, ip, r2, r3
 8006814:	460c      	mov	r4, r1
 8006816:	2001      	movs	r0, #1
 8006818:	e7a5      	b.n	8006766 <_vfiprintf_r+0x11a>
 800681a:	2300      	movs	r3, #0
 800681c:	3401      	adds	r4, #1
 800681e:	9305      	str	r3, [sp, #20]
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 0c0a 	mov.w	ip, #10
 8006826:	4620      	mov	r0, r4
 8006828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800682c:	3a30      	subs	r2, #48	; 0x30
 800682e:	2a09      	cmp	r2, #9
 8006830:	d903      	bls.n	800683a <_vfiprintf_r+0x1ee>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0c5      	beq.n	80067c2 <_vfiprintf_r+0x176>
 8006836:	9105      	str	r1, [sp, #20]
 8006838:	e7c3      	b.n	80067c2 <_vfiprintf_r+0x176>
 800683a:	fb0c 2101 	mla	r1, ip, r1, r2
 800683e:	4604      	mov	r4, r0
 8006840:	2301      	movs	r3, #1
 8006842:	e7f0      	b.n	8006826 <_vfiprintf_r+0x1da>
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <_vfiprintf_r+0x258>)
 800684c:	a904      	add	r1, sp, #16
 800684e:	4630      	mov	r0, r6
 8006850:	f7fd ff2c 	bl	80046ac <_printf_float>
 8006854:	4607      	mov	r7, r0
 8006856:	1c78      	adds	r0, r7, #1
 8006858:	d1d6      	bne.n	8006808 <_vfiprintf_r+0x1bc>
 800685a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800685c:	07d9      	lsls	r1, r3, #31
 800685e:	d405      	bmi.n	800686c <_vfiprintf_r+0x220>
 8006860:	89ab      	ldrh	r3, [r5, #12]
 8006862:	059a      	lsls	r2, r3, #22
 8006864:	d402      	bmi.n	800686c <_vfiprintf_r+0x220>
 8006866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006868:	f7ff fa76 	bl	8005d58 <__retarget_lock_release_recursive>
 800686c:	89ab      	ldrh	r3, [r5, #12]
 800686e:	065b      	lsls	r3, r3, #25
 8006870:	f53f af12 	bmi.w	8006698 <_vfiprintf_r+0x4c>
 8006874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006876:	e711      	b.n	800669c <_vfiprintf_r+0x50>
 8006878:	ab03      	add	r3, sp, #12
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	462a      	mov	r2, r5
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <_vfiprintf_r+0x258>)
 8006880:	a904      	add	r1, sp, #16
 8006882:	4630      	mov	r0, r6
 8006884:	f7fe f9b6 	bl	8004bf4 <_printf_i>
 8006888:	e7e4      	b.n	8006854 <_vfiprintf_r+0x208>
 800688a:	bf00      	nop
 800688c:	080070fc 	.word	0x080070fc
 8006890:	0800711c 	.word	0x0800711c
 8006894:	080070dc 	.word	0x080070dc
 8006898:	0800729c 	.word	0x0800729c
 800689c:	080072a6 	.word	0x080072a6
 80068a0:	080046ad 	.word	0x080046ad
 80068a4:	08006627 	.word	0x08006627
 80068a8:	080072a2 	.word	0x080072a2

080068ac <_sbrk_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d06      	ldr	r5, [pc, #24]	; (80068c8 <_sbrk_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	f7fd fdb4 	bl	8004424 <_sbrk>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_sbrk_r+0x1a>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_sbrk_r+0x1a>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20000280 	.word	0x20000280

080068cc <__sread>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	460c      	mov	r4, r1
 80068d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d4:	f000 faa6 	bl	8006e24 <_read_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	bfab      	itete	ge
 80068dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068de:	89a3      	ldrhlt	r3, [r4, #12]
 80068e0:	181b      	addge	r3, r3, r0
 80068e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068e6:	bfac      	ite	ge
 80068e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ea:	81a3      	strhlt	r3, [r4, #12]
 80068ec:	bd10      	pop	{r4, pc}

080068ee <__swrite>:
 80068ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f2:	461f      	mov	r7, r3
 80068f4:	898b      	ldrh	r3, [r1, #12]
 80068f6:	05db      	lsls	r3, r3, #23
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	4616      	mov	r6, r2
 80068fe:	d505      	bpl.n	800690c <__swrite+0x1e>
 8006900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006904:	2302      	movs	r3, #2
 8006906:	2200      	movs	r2, #0
 8006908:	f000 f9f8 	bl	8006cfc <_lseek_r>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	4632      	mov	r2, r6
 800691a:	463b      	mov	r3, r7
 800691c:	4628      	mov	r0, r5
 800691e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006922:	f000 b869 	b.w	80069f8 <_write_r>

08006926 <__sseek>:
 8006926:	b510      	push	{r4, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 f9e5 	bl	8006cfc <_lseek_r>
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	bf15      	itete	ne
 8006938:	6560      	strne	r0, [r4, #84]	; 0x54
 800693a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800693e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006942:	81a3      	strheq	r3, [r4, #12]
 8006944:	bf18      	it	ne
 8006946:	81a3      	strhne	r3, [r4, #12]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__sclose>:
 800694a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694e:	f000 b8f1 	b.w	8006b34 <_close_r>
	...

08006954 <__swbuf_r>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	460e      	mov	r6, r1
 8006958:	4614      	mov	r4, r2
 800695a:	4605      	mov	r5, r0
 800695c:	b118      	cbz	r0, 8006966 <__swbuf_r+0x12>
 800695e:	6983      	ldr	r3, [r0, #24]
 8006960:	b90b      	cbnz	r3, 8006966 <__swbuf_r+0x12>
 8006962:	f7ff f955 	bl	8005c10 <__sinit>
 8006966:	4b21      	ldr	r3, [pc, #132]	; (80069ec <__swbuf_r+0x98>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d12b      	bne.n	80069c4 <__swbuf_r+0x70>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	69a3      	ldr	r3, [r4, #24]
 8006970:	60a3      	str	r3, [r4, #8]
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	071a      	lsls	r2, r3, #28
 8006976:	d52f      	bpl.n	80069d8 <__swbuf_r+0x84>
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	b36b      	cbz	r3, 80069d8 <__swbuf_r+0x84>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1ac0      	subs	r0, r0, r3
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	b2f6      	uxtb	r6, r6
 8006986:	4283      	cmp	r3, r0
 8006988:	4637      	mov	r7, r6
 800698a:	dc04      	bgt.n	8006996 <__swbuf_r+0x42>
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f966 	bl	8006c60 <_fflush_r>
 8006994:	bb30      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	3b01      	subs	r3, #1
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	6022      	str	r2, [r4, #0]
 80069a2:	701e      	strb	r6, [r3, #0]
 80069a4:	6963      	ldr	r3, [r4, #20]
 80069a6:	3001      	adds	r0, #1
 80069a8:	4283      	cmp	r3, r0
 80069aa:	d004      	beq.n	80069b6 <__swbuf_r+0x62>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d506      	bpl.n	80069c0 <__swbuf_r+0x6c>
 80069b2:	2e0a      	cmp	r6, #10
 80069b4:	d104      	bne.n	80069c0 <__swbuf_r+0x6c>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f951 	bl	8006c60 <_fflush_r>
 80069be:	b988      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 80069c0:	4638      	mov	r0, r7
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <__swbuf_r+0x9c>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <__swbuf_r+0x7a>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7cf      	b.n	800696e <__swbuf_r+0x1a>
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <__swbuf_r+0xa0>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7ca      	b.n	800696e <__swbuf_r+0x1a>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f81e 	bl	8006a1c <__swsetup_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0cb      	beq.n	800697c <__swbuf_r+0x28>
 80069e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069e8:	e7ea      	b.n	80069c0 <__swbuf_r+0x6c>
 80069ea:	bf00      	nop
 80069ec:	080070fc 	.word	0x080070fc
 80069f0:	0800711c 	.word	0x0800711c
 80069f4:	080070dc 	.word	0x080070dc

080069f8 <_write_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_write_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fd fcbb 	bl	8004382 <_write>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_write_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_write_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000280 	.word	0x20000280

08006a1c <__swsetup_r>:
 8006a1c:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <__swsetup_r+0xcc>)
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	4606      	mov	r6, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	b125      	cbz	r5, 8006a32 <__swsetup_r+0x16>
 8006a28:	69ab      	ldr	r3, [r5, #24]
 8006a2a:	b913      	cbnz	r3, 8006a32 <__swsetup_r+0x16>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f7ff f8ef 	bl	8005c10 <__sinit>
 8006a32:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <__swsetup_r+0xd0>)
 8006a34:	429c      	cmp	r4, r3
 8006a36:	d10f      	bne.n	8006a58 <__swsetup_r+0x3c>
 8006a38:	686c      	ldr	r4, [r5, #4]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a40:	0719      	lsls	r1, r3, #28
 8006a42:	d42c      	bmi.n	8006a9e <__swsetup_r+0x82>
 8006a44:	06dd      	lsls	r5, r3, #27
 8006a46:	d411      	bmi.n	8006a6c <__swsetup_r+0x50>
 8006a48:	2309      	movs	r3, #9
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a56:	e03e      	b.n	8006ad6 <__swsetup_r+0xba>
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <__swsetup_r+0xd4>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <__swsetup_r+0x46>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7eb      	b.n	8006a3a <__swsetup_r+0x1e>
 8006a62:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <__swsetup_r+0xd8>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7e6      	b.n	8006a3a <__swsetup_r+0x1e>
 8006a6c:	0758      	lsls	r0, r3, #29
 8006a6e:	d512      	bpl.n	8006a96 <__swsetup_r+0x7a>
 8006a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a72:	b141      	cbz	r1, 8006a86 <__swsetup_r+0x6a>
 8006a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a78:	4299      	cmp	r1, r3
 8006a7a:	d002      	beq.n	8006a82 <__swsetup_r+0x66>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f7ff fd11 	bl	80064a4 <_free_r>
 8006a82:	2300      	movs	r3, #0
 8006a84:	6363      	str	r3, [r4, #52]	; 0x34
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f043 0308 	orr.w	r3, r3, #8
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	b94b      	cbnz	r3, 8006ab6 <__swsetup_r+0x9a>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aac:	d003      	beq.n	8006ab6 <__swsetup_r+0x9a>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f959 	bl	8006d68 <__smakebuf_r>
 8006ab6:	89a0      	ldrh	r0, [r4, #12]
 8006ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006abc:	f010 0301 	ands.w	r3, r0, #1
 8006ac0:	d00a      	beq.n	8006ad8 <__swsetup_r+0xbc>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	6963      	ldr	r3, [r4, #20]
 8006ac8:	425b      	negs	r3, r3
 8006aca:	61a3      	str	r3, [r4, #24]
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	b943      	cbnz	r3, 8006ae2 <__swsetup_r+0xc6>
 8006ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ad4:	d1ba      	bne.n	8006a4c <__swsetup_r+0x30>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	0781      	lsls	r1, r0, #30
 8006ada:	bf58      	it	pl
 8006adc:	6963      	ldrpl	r3, [r4, #20]
 8006ade:	60a3      	str	r3, [r4, #8]
 8006ae0:	e7f4      	b.n	8006acc <__swsetup_r+0xb0>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e7f7      	b.n	8006ad6 <__swsetup_r+0xba>
 8006ae6:	bf00      	nop
 8006ae8:	2000000c 	.word	0x2000000c
 8006aec:	080070fc 	.word	0x080070fc
 8006af0:	0800711c 	.word	0x0800711c
 8006af4:	080070dc 	.word	0x080070dc

08006af8 <__assert_func>:
 8006af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006afa:	4614      	mov	r4, r2
 8006afc:	461a      	mov	r2, r3
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <__assert_func+0x2c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4605      	mov	r5, r0
 8006b04:	68d8      	ldr	r0, [r3, #12]
 8006b06:	b14c      	cbz	r4, 8006b1c <__assert_func+0x24>
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <__assert_func+0x30>)
 8006b0a:	9100      	str	r1, [sp, #0]
 8006b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b10:	4906      	ldr	r1, [pc, #24]	; (8006b2c <__assert_func+0x34>)
 8006b12:	462b      	mov	r3, r5
 8006b14:	f000 f8e0 	bl	8006cd8 <fiprintf>
 8006b18:	f000 f9a3 	bl	8006e62 <abort>
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <__assert_func+0x38>)
 8006b1e:	461c      	mov	r4, r3
 8006b20:	e7f3      	b.n	8006b0a <__assert_func+0x12>
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
 8006b28:	080072ad 	.word	0x080072ad
 8006b2c:	080072ba 	.word	0x080072ba
 8006b30:	080072e8 	.word	0x080072e8

08006b34 <_close_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	; (8006b50 <_close_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fd fc3b 	bl	80043ba <_close>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_close_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_close_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000280 	.word	0x20000280

08006b54 <__sflush_r>:
 8006b54:	898a      	ldrh	r2, [r1, #12]
 8006b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	0710      	lsls	r0, r2, #28
 8006b5e:	460c      	mov	r4, r1
 8006b60:	d458      	bmi.n	8006c14 <__sflush_r+0xc0>
 8006b62:	684b      	ldr	r3, [r1, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc05      	bgt.n	8006b74 <__sflush_r+0x20>
 8006b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dc02      	bgt.n	8006b74 <__sflush_r+0x20>
 8006b6e:	2000      	movs	r0, #0
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b76:	2e00      	cmp	r6, #0
 8006b78:	d0f9      	beq.n	8006b6e <__sflush_r+0x1a>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b80:	682f      	ldr	r7, [r5, #0]
 8006b82:	602b      	str	r3, [r5, #0]
 8006b84:	d032      	beq.n	8006bec <__sflush_r+0x98>
 8006b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	075a      	lsls	r2, r3, #29
 8006b8c:	d505      	bpl.n	8006b9a <__sflush_r+0x46>
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	1ac0      	subs	r0, r0, r3
 8006b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b94:	b10b      	cbz	r3, 8006b9a <__sflush_r+0x46>
 8006b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b98:	1ac0      	subs	r0, r0, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba0:	6a21      	ldr	r1, [r4, #32]
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b0      	blx	r6
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	d106      	bne.n	8006bba <__sflush_r+0x66>
 8006bac:	6829      	ldr	r1, [r5, #0]
 8006bae:	291d      	cmp	r1, #29
 8006bb0:	d82c      	bhi.n	8006c0c <__sflush_r+0xb8>
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <__sflush_r+0x108>)
 8006bb4:	40ca      	lsrs	r2, r1
 8006bb6:	07d6      	lsls	r6, r2, #31
 8006bb8:	d528      	bpl.n	8006c0c <__sflush_r+0xb8>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	6062      	str	r2, [r4, #4]
 8006bbe:	04d9      	lsls	r1, r3, #19
 8006bc0:	6922      	ldr	r2, [r4, #16]
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	d504      	bpl.n	8006bd0 <__sflush_r+0x7c>
 8006bc6:	1c42      	adds	r2, r0, #1
 8006bc8:	d101      	bne.n	8006bce <__sflush_r+0x7a>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	b903      	cbnz	r3, 8006bd0 <__sflush_r+0x7c>
 8006bce:	6560      	str	r0, [r4, #84]	; 0x54
 8006bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd2:	602f      	str	r7, [r5, #0]
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	d0ca      	beq.n	8006b6e <__sflush_r+0x1a>
 8006bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d002      	beq.n	8006be6 <__sflush_r+0x92>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7ff fc5f 	bl	80064a4 <_free_r>
 8006be6:	2000      	movs	r0, #0
 8006be8:	6360      	str	r0, [r4, #52]	; 0x34
 8006bea:	e7c1      	b.n	8006b70 <__sflush_r+0x1c>
 8006bec:	6a21      	ldr	r1, [r4, #32]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b0      	blx	r6
 8006bf4:	1c41      	adds	r1, r0, #1
 8006bf6:	d1c7      	bne.n	8006b88 <__sflush_r+0x34>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0c4      	beq.n	8006b88 <__sflush_r+0x34>
 8006bfe:	2b1d      	cmp	r3, #29
 8006c00:	d001      	beq.n	8006c06 <__sflush_r+0xb2>
 8006c02:	2b16      	cmp	r3, #22
 8006c04:	d101      	bne.n	8006c0a <__sflush_r+0xb6>
 8006c06:	602f      	str	r7, [r5, #0]
 8006c08:	e7b1      	b.n	8006b6e <__sflush_r+0x1a>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	e7ad      	b.n	8006b70 <__sflush_r+0x1c>
 8006c14:	690f      	ldr	r7, [r1, #16]
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	d0a9      	beq.n	8006b6e <__sflush_r+0x1a>
 8006c1a:	0793      	lsls	r3, r2, #30
 8006c1c:	680e      	ldr	r6, [r1, #0]
 8006c1e:	bf08      	it	eq
 8006c20:	694b      	ldreq	r3, [r1, #20]
 8006c22:	600f      	str	r7, [r1, #0]
 8006c24:	bf18      	it	ne
 8006c26:	2300      	movne	r3, #0
 8006c28:	eba6 0807 	sub.w	r8, r6, r7
 8006c2c:	608b      	str	r3, [r1, #8]
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	dd9c      	ble.n	8006b6e <__sflush_r+0x1a>
 8006c34:	6a21      	ldr	r1, [r4, #32]
 8006c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c38:	4643      	mov	r3, r8
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b0      	blx	r6
 8006c40:	2800      	cmp	r0, #0
 8006c42:	dc06      	bgt.n	8006c52 <__sflush_r+0xfe>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c50:	e78e      	b.n	8006b70 <__sflush_r+0x1c>
 8006c52:	4407      	add	r7, r0
 8006c54:	eba8 0800 	sub.w	r8, r8, r0
 8006c58:	e7e9      	b.n	8006c2e <__sflush_r+0xda>
 8006c5a:	bf00      	nop
 8006c5c:	20400001 	.word	0x20400001

08006c60 <_fflush_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	690b      	ldr	r3, [r1, #16]
 8006c64:	4605      	mov	r5, r0
 8006c66:	460c      	mov	r4, r1
 8006c68:	b913      	cbnz	r3, 8006c70 <_fflush_r+0x10>
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	b118      	cbz	r0, 8006c7a <_fflush_r+0x1a>
 8006c72:	6983      	ldr	r3, [r0, #24]
 8006c74:	b90b      	cbnz	r3, 8006c7a <_fflush_r+0x1a>
 8006c76:	f7fe ffcb 	bl	8005c10 <__sinit>
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <_fflush_r+0x6c>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d11b      	bne.n	8006cb8 <_fflush_r+0x58>
 8006c80:	686c      	ldr	r4, [r5, #4]
 8006c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0ef      	beq.n	8006c6a <_fflush_r+0xa>
 8006c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c8c:	07d0      	lsls	r0, r2, #31
 8006c8e:	d404      	bmi.n	8006c9a <_fflush_r+0x3a>
 8006c90:	0599      	lsls	r1, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_fflush_r+0x3a>
 8006c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c96:	f7ff f85e 	bl	8005d56 <__retarget_lock_acquire_recursive>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f7ff ff59 	bl	8006b54 <__sflush_r>
 8006ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca4:	07da      	lsls	r2, r3, #31
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	d4e0      	bmi.n	8006c6c <_fflush_r+0xc>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	059b      	lsls	r3, r3, #22
 8006cae:	d4dd      	bmi.n	8006c6c <_fflush_r+0xc>
 8006cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb2:	f7ff f851 	bl	8005d58 <__retarget_lock_release_recursive>
 8006cb6:	e7d9      	b.n	8006c6c <_fflush_r+0xc>
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <_fflush_r+0x70>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d101      	bne.n	8006cc2 <_fflush_r+0x62>
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	e7df      	b.n	8006c82 <_fflush_r+0x22>
 8006cc2:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <_fflush_r+0x74>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	bf08      	it	eq
 8006cc8:	68ec      	ldreq	r4, [r5, #12]
 8006cca:	e7da      	b.n	8006c82 <_fflush_r+0x22>
 8006ccc:	080070fc 	.word	0x080070fc
 8006cd0:	0800711c 	.word	0x0800711c
 8006cd4:	080070dc 	.word	0x080070dc

08006cd8 <fiprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b503      	push	{r0, r1, lr}
 8006cdc:	4601      	mov	r1, r0
 8006cde:	ab03      	add	r3, sp, #12
 8006ce0:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <fiprintf+0x20>)
 8006ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	f7ff fcaf 	bl	800664c <_vfiprintf_r>
 8006cee:	b002      	add	sp, #8
 8006cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf4:	b003      	add	sp, #12
 8006cf6:	4770      	bx	lr
 8006cf8:	2000000c 	.word	0x2000000c

08006cfc <_lseek_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	; (8006d1c <_lseek_r+0x20>)
 8006d00:	4604      	mov	r4, r0
 8006d02:	4608      	mov	r0, r1
 8006d04:	4611      	mov	r1, r2
 8006d06:	2200      	movs	r2, #0
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f7fd fb7c 	bl	8004408 <_lseek>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_lseek_r+0x1e>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_lseek_r+0x1e>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20000280 	.word	0x20000280

08006d20 <__swhatbuf_r>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	460e      	mov	r6, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	b096      	sub	sp, #88	; 0x58
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	461d      	mov	r5, r3
 8006d30:	da07      	bge.n	8006d42 <__swhatbuf_r+0x22>
 8006d32:	2300      	movs	r3, #0
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	89b3      	ldrh	r3, [r6, #12]
 8006d38:	061a      	lsls	r2, r3, #24
 8006d3a:	d410      	bmi.n	8006d5e <__swhatbuf_r+0x3e>
 8006d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d40:	e00e      	b.n	8006d60 <__swhatbuf_r+0x40>
 8006d42:	466a      	mov	r2, sp
 8006d44:	f000 f894 	bl	8006e70 <_fstat_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dbf2      	blt.n	8006d32 <__swhatbuf_r+0x12>
 8006d4c:	9a01      	ldr	r2, [sp, #4]
 8006d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d56:	425a      	negs	r2, r3
 8006d58:	415a      	adcs	r2, r3
 8006d5a:	602a      	str	r2, [r5, #0]
 8006d5c:	e7ee      	b.n	8006d3c <__swhatbuf_r+0x1c>
 8006d5e:	2340      	movs	r3, #64	; 0x40
 8006d60:	2000      	movs	r0, #0
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	b016      	add	sp, #88	; 0x58
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffca 	bl	8006d20 <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff fbd7 	bl	8006544 <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <__smakebuf_r+0x7c>)
 8006dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x74>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f863 	bl	8006e94 <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x74>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	4305      	orrs	r5, r0
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cd      	b.n	8006d80 <__smakebuf_r+0x18>
 8006de4:	08005ba9 	.word	0x08005ba9

08006de8 <__ascii_mbtowc>:
 8006de8:	b082      	sub	sp, #8
 8006dea:	b901      	cbnz	r1, 8006dee <__ascii_mbtowc+0x6>
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	b142      	cbz	r2, 8006e02 <__ascii_mbtowc+0x1a>
 8006df0:	b14b      	cbz	r3, 8006e06 <__ascii_mbtowc+0x1e>
 8006df2:	7813      	ldrb	r3, [r2, #0]
 8006df4:	600b      	str	r3, [r1, #0]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	1e10      	subs	r0, r2, #0
 8006dfa:	bf18      	it	ne
 8006dfc:	2001      	movne	r0, #1
 8006dfe:	b002      	add	sp, #8
 8006e00:	4770      	bx	lr
 8006e02:	4610      	mov	r0, r2
 8006e04:	e7fb      	b.n	8006dfe <__ascii_mbtowc+0x16>
 8006e06:	f06f 0001 	mvn.w	r0, #1
 8006e0a:	e7f8      	b.n	8006dfe <__ascii_mbtowc+0x16>

08006e0c <__malloc_lock>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	; (8006e14 <__malloc_lock+0x8>)
 8006e0e:	f7fe bfa2 	b.w	8005d56 <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	20000278 	.word	0x20000278

08006e18 <__malloc_unlock>:
 8006e18:	4801      	ldr	r0, [pc, #4]	; (8006e20 <__malloc_unlock+0x8>)
 8006e1a:	f7fe bf9d 	b.w	8005d58 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000278 	.word	0x20000278

08006e24 <_read_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_read_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fd fa88 	bl	8004348 <_read>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_read_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_read_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20000280 	.word	0x20000280

08006e48 <__ascii_wctomb>:
 8006e48:	b149      	cbz	r1, 8006e5e <__ascii_wctomb+0x16>
 8006e4a:	2aff      	cmp	r2, #255	; 0xff
 8006e4c:	bf85      	ittet	hi
 8006e4e:	238a      	movhi	r3, #138	; 0x8a
 8006e50:	6003      	strhi	r3, [r0, #0]
 8006e52:	700a      	strbls	r2, [r1, #0]
 8006e54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006e58:	bf98      	it	ls
 8006e5a:	2001      	movls	r0, #1
 8006e5c:	4770      	bx	lr
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4770      	bx	lr

08006e62 <abort>:
 8006e62:	b508      	push	{r3, lr}
 8006e64:	2006      	movs	r0, #6
 8006e66:	f000 f84d 	bl	8006f04 <raise>
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	f7fd fa62 	bl	8004334 <_exit>

08006e70 <_fstat_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	; (8006e90 <_fstat_r+0x20>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f7fd faa8 	bl	80043d2 <_fstat>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d102      	bne.n	8006e8c <_fstat_r+0x1c>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b103      	cbz	r3, 8006e8c <_fstat_r+0x1c>
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000280 	.word	0x20000280

08006e94 <_isatty_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	; (8006eb0 <_isatty_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fd faa7 	bl	80043f2 <_isatty>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_isatty_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_isatty_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000280 	.word	0x20000280

08006eb4 <_raise_r>:
 8006eb4:	291f      	cmp	r1, #31
 8006eb6:	b538      	push	{r3, r4, r5, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	d904      	bls.n	8006ec8 <_raise_r+0x14>
 8006ebe:	2316      	movs	r3, #22
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eca:	b112      	cbz	r2, 8006ed2 <_raise_r+0x1e>
 8006ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <_raise_r+0x32>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f830 	bl	8006f38 <_getpid_r>
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4601      	mov	r1, r0
 8006edc:	4620      	mov	r0, r4
 8006ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee2:	f000 b817 	b.w	8006f14 <_kill_r>
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d00a      	beq.n	8006f00 <_raise_r+0x4c>
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	d103      	bne.n	8006ef6 <_raise_r+0x42>
 8006eee:	2316      	movs	r3, #22
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7e7      	b.n	8006ec6 <_raise_r+0x12>
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006efc:	4628      	mov	r0, r5
 8006efe:	4798      	blx	r3
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7e0      	b.n	8006ec6 <_raise_r+0x12>

08006f04 <raise>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <raise+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f7ff bfd3 	b.w	8006eb4 <_raise_r>
 8006f0e:	bf00      	nop
 8006f10:	2000000c 	.word	0x2000000c

08006f14 <_kill_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	; (8006f34 <_kill_r+0x20>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fd f9f7 	bl	8004314 <_kill>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_kill_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_kill_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000280 	.word	0x20000280

08006f38 <_getpid_r>:
 8006f38:	f7fd b9e4 	b.w	8004304 <_getpid>

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
