
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009480  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08009640  08009640  00019640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d44  08009d44  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d4c  08009d4c  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08009d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000023c  08009f90  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08009f90  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021009  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003764  00000000  00000000  00041275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00018ab5  00000000  00000000  000449d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0005d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  0005e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b83c  00000000  00000000  0005fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000235af  00000000  00000000  0008b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111944  00000000  00000000  000aec0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c054f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa0  00000000  00000000  001c05a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009628 	.word	0x08009628

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	08009628 	.word	0x08009628

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001028:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800102a:	b2c4      	uxtb	r4, r0
 800102c:	2120      	movs	r1, #32
 800102e:	4620      	mov	r0, r4
 8001030:	f000 fd12 	bl	8001a58 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001034:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001038:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 800103c:	2120      	movs	r1, #32
 800103e:	4620      	mov	r0, r4
 8001040:	f000 fcf6 	bl	8001a30 <SENSOR_IO_Write>
}
 8001044:	bd10      	pop	{r4, pc}

08001046 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001046:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001048:	b2c4      	uxtb	r4, r0
 800104a:	2120      	movs	r1, #32
 800104c:	4620      	mov	r0, r4
 800104e:	f000 fd03 	bl	8001a58 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001052:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001056:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 800105a:	2120      	movs	r1, #32
 800105c:	4620      	mov	r0, r4
 800105e:	f000 fce7 	bl	8001a30 <SENSOR_IO_Write>
}
 8001062:	bd10      	pop	{r4, pc}

08001064 <HTS221_H_ReadID>:
{  
 8001064:	b510      	push	{r4, lr}
 8001066:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001068:	f000 fcda 	bl	8001a20 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800106c:	210f      	movs	r1, #15
 800106e:	b2e0      	uxtb	r0, r4
 8001070:	f000 fcf2 	bl	8001a58 <SENSOR_IO_Read>
}
 8001074:	bd10      	pop	{r4, pc}
	...

08001078 <HTS221_H_ReadHumidity>:
{
 8001078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800107c:	b083      	sub	sp, #12
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800107e:	fa5f f980 	uxtb.w	r9, r0
 8001082:	2302      	movs	r3, #2
 8001084:	aa01      	add	r2, sp, #4
 8001086:	21b0      	movs	r1, #176	; 0xb0
 8001088:	4648      	mov	r0, r9
 800108a:	f000 fcfb 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  H0_rh = buffer[0] >> 1;
 800108e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001092:	085f      	lsrs	r7, r3, #1
  H1_rh = buffer[1] >> 1;
 8001094:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8001098:	0876      	lsrs	r6, r6, #1
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800109a:	2302      	movs	r3, #2
 800109c:	aa01      	add	r2, sp, #4
 800109e:	21b6      	movs	r1, #182	; 0xb6
 80010a0:	4648      	mov	r0, r9
 80010a2:	f000 fcef 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010a6:	f89d 5005 	ldrb.w	r5, [sp, #5]
 80010aa:	022d      	lsls	r5, r5, #8
 80010ac:	b22d      	sxth	r5, r5
 80010ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010b2:	431d      	orrs	r5, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80010b4:	2302      	movs	r3, #2
 80010b6:	aa01      	add	r2, sp, #4
 80010b8:	21ba      	movs	r1, #186	; 0xba
 80010ba:	4648      	mov	r0, r9
 80010bc:	f000 fce2 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010c0:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80010c4:	0224      	lsls	r4, r4, #8
 80010c6:	b224      	sxth	r4, r4
 80010c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010cc:	431c      	orrs	r4, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80010ce:	2302      	movs	r3, #2
 80010d0:	aa01      	add	r2, sp, #4
 80010d2:	21a8      	movs	r1, #168	; 0xa8
 80010d4:	4648      	mov	r0, r9
 80010d6:	f000 fcd5 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80010e6:	4313      	orrs	r3, r2
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80010e8:	1b5b      	subs	r3, r3, r5
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f2:	1bf3      	subs	r3, r6, r7
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	1b64      	subs	r4, r4, r5
 8001102:	ee07 4a10 	vmov	s14, r4
 8001106:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800110a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800110e:	ee07 7a90 	vmov	s15, r7
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 800111a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800111e:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001122:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001154 <HTS221_H_ReadHumidity+0xdc>
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dc07      	bgt.n	8001140 <HTS221_H_ReadHumidity+0xc8>
        : tmp_f;
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d504      	bpl.n	8001144 <HTS221_H_ReadHumidity+0xcc>
 800113a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001158 <HTS221_H_ReadHumidity+0xe0>
 800113e:	e001      	b.n	8001144 <HTS221_H_ReadHumidity+0xcc>
        : ( tmp_f <    0.0f ) ?    0.0f
 8001140:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001154 <HTS221_H_ReadHumidity+0xdc>
}
 8001144:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001148:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800114c:	b003      	add	sp, #12
 800114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	447a0000 	.word	0x447a0000
 8001158:	00000000 	.word	0x00000000

0800115c <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001160:	b082      	sub	sp, #8
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001162:	fa5f f880 	uxtb.w	r8, r0
 8001166:	2302      	movs	r3, #2
 8001168:	aa01      	add	r2, sp, #4
 800116a:	21b2      	movs	r1, #178	; 0xb2
 800116c:	4640      	mov	r0, r8
 800116e:	f000 fc89 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001172:	2135      	movs	r1, #53	; 0x35
 8001174:	4640      	mov	r0, r8
 8001176:	f000 fc6f 	bl	8001a58 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800117a:	0207      	lsls	r7, r0, #8
 800117c:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001184:	431f      	orrs	r7, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001186:	0184      	lsls	r4, r0, #6
 8001188:	f404 7440 	and.w	r4, r4, #768	; 0x300
 800118c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001190:	4304      	orrs	r4, r0
  T0_degC = T0_degC_x8_u16 >> 3;
 8001192:	08ff      	lsrs	r7, r7, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001194:	08e4      	lsrs	r4, r4, #3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001196:	2304      	movs	r3, #4
 8001198:	eb0d 0203 	add.w	r2, sp, r3
 800119c:	21bc      	movs	r1, #188	; 0xbc
 800119e:	4640      	mov	r0, r8
 80011a0:	f000 fc70 	bl	8001a84 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011a4:	f89d 6005 	ldrb.w	r6, [sp, #5]
 80011a8:	0236      	lsls	r6, r6, #8
 80011aa:	b236      	sxth	r6, r6
 80011ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011b0:	431e      	orrs	r6, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80011b2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80011b6:	022d      	lsls	r5, r5, #8
 80011b8:	b22d      	sxth	r5, r5
 80011ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80011be:	431d      	orrs	r5, r3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80011c0:	2302      	movs	r3, #2
 80011c2:	aa01      	add	r2, sp, #4
 80011c4:	21aa      	movs	r1, #170	; 0xaa
 80011c6:	4640      	mov	r0, r8
 80011c8:	f000 fc5c 	bl	8001a84 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80011d8:	4313      	orrs	r3, r2

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80011da:	1b9b      	subs	r3, r3, r6
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	1be3      	subs	r3, r4, r7
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	1bad      	subs	r5, r5, r6
 80011f4:	ee07 5a10 	vmov	s14, r5
 80011f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001200:	ee07 7a90 	vmov	s15, r7
 8001204:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8001208:	ee36 0a80 	vadd.f32	s0, s13, s0
 800120c:	b002      	add	sp, #8
 800120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001212 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001212:	b500      	push	{lr}
 8001214:	b083      	sub	sp, #12
 8001216:	ab02      	add	r3, sp, #8
 8001218:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800121c:	f89d 2000 	ldrb.w	r2, [sp]
 8001220:	2120      	movs	r1, #32
 8001222:	203c      	movs	r0, #60	; 0x3c
 8001224:	f000 fc04 	bl	8001a30 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001228:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800122c:	2121      	movs	r1, #33	; 0x21
 800122e:	203c      	movs	r0, #60	; 0x3c
 8001230:	f000 fbfe 	bl	8001a30 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001234:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001238:	2122      	movs	r1, #34	; 0x22
 800123a:	203c      	movs	r0, #60	; 0x3c
 800123c:	f000 fbf8 	bl	8001a30 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001240:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001244:	2123      	movs	r1, #35	; 0x23
 8001246:	203c      	movs	r0, #60	; 0x3c
 8001248:	f000 fbf2 	bl	8001a30 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800124c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001250:	2124      	movs	r1, #36	; 0x24
 8001252:	203c      	movs	r0, #60	; 0x3c
 8001254:	f000 fbec 	bl	8001a30 <SENSOR_IO_Write>
}
 8001258:	b003      	add	sp, #12
 800125a:	f85d fb04 	ldr.w	pc, [sp], #4

0800125e <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800125e:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001260:	2122      	movs	r1, #34	; 0x22
 8001262:	203c      	movs	r0, #60	; 0x3c
 8001264:	f000 fbf8 	bl	8001a58 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001268:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800126c:	f042 0203 	orr.w	r2, r2, #3
 8001270:	2122      	movs	r1, #34	; 0x22
 8001272:	203c      	movs	r0, #60	; 0x3c
 8001274:	f000 fbdc 	bl	8001a30 <SENSOR_IO_Write>
}
 8001278:	bd08      	pop	{r3, pc}

0800127a <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800127a:	b510      	push	{r4, lr}
 800127c:	4604      	mov	r4, r0
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800127e:	2122      	movs	r1, #34	; 0x22
 8001280:	203c      	movs	r0, #60	; 0x3c
 8001282:	f000 fbe9 	bl	8001a58 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001286:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 800128a:	b10c      	cbz	r4, 8001290 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800128c:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001290:	2122      	movs	r1, #34	; 0x22
 8001292:	203c      	movs	r0, #60	; 0x3c
 8001294:	f000 fbcc 	bl	8001a30 <SENSOR_IO_Write>
}
 8001298:	bd10      	pop	{r4, pc}

0800129a <LIS3MDL_MagReadID>:
{
 800129a:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800129c:	f000 fbc0 	bl	8001a20 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80012a0:	210f      	movs	r1, #15
 80012a2:	203c      	movs	r0, #60	; 0x3c
 80012a4:	f000 fbd8 	bl	8001a58 <SENSOR_IO_Read>
}
 80012a8:	bd08      	pop	{r3, pc}
	...

080012ac <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012ac:	b530      	push	{r4, r5, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012b2:	2121      	movs	r1, #33	; 0x21
 80012b4:	203c      	movs	r0, #60	; 0x3c
 80012b6:	f000 fbcf 	bl	8001a58 <SENSOR_IO_Read>
 80012ba:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80012bc:	2306      	movs	r3, #6
 80012be:	466a      	mov	r2, sp
 80012c0:	21a8      	movs	r1, #168	; 0xa8
 80012c2:	203c      	movs	r0, #60	; 0x3c
 80012c4:	f000 fbde 	bl	8001a84 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	e00f      	b.n	80012ec <LIS3MDL_MagReadXYZ+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80012cc:	005a      	lsls	r2, r3, #1
 80012ce:	f102 0111 	add.w	r1, r2, #17
 80012d2:	4469      	add	r1, sp
 80012d4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80012d8:	3210      	adds	r2, #16
 80012da:	446a      	add	r2, sp
 80012dc:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80012e0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80012e4:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d9ed      	bls.n	80012cc <LIS3MDL_MagReadXYZ+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80012f0:	f005 0560 	and.w	r5, r5, #96	; 0x60
 80012f4:	2d40      	cmp	r5, #64	; 0x40
 80012f6:	d00c      	beq.n	8001312 <LIS3MDL_MagReadXYZ+0x66>
 80012f8:	d806      	bhi.n	8001308 <LIS3MDL_MagReadXYZ+0x5c>
 80012fa:	b16d      	cbz	r5, 8001318 <LIS3MDL_MagReadXYZ+0x6c>
 80012fc:	2d20      	cmp	r5, #32
 80012fe:	d10e      	bne.n	800131e <LIS3MDL_MagReadXYZ+0x72>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001300:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001358 <LIS3MDL_MagReadXYZ+0xac>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	e023      	b.n	8001350 <LIS3MDL_MagReadXYZ+0xa4>
  switch(ctrlm & 0x60)
 8001308:	2d60      	cmp	r5, #96	; 0x60
 800130a:	d10b      	bne.n	8001324 <LIS3MDL_MagReadXYZ+0x78>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800130c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800135c <LIS3MDL_MagReadXYZ+0xb0>
 8001310:	e7f8      	b.n	8001304 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001312:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001360 <LIS3MDL_MagReadXYZ+0xb4>
 8001316:	e7f5      	b.n	8001304 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001318:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001364 <LIS3MDL_MagReadXYZ+0xb8>
 800131c:	e7f2      	b.n	8001304 <LIS3MDL_MagReadXYZ+0x58>
  switch(ctrlm & 0x60)
 800131e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001368 <LIS3MDL_MagReadXYZ+0xbc>
 8001322:	e7ef      	b.n	8001304 <LIS3MDL_MagReadXYZ+0x58>
 8001324:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001368 <LIS3MDL_MagReadXYZ+0xbc>
 8001328:	e7ec      	b.n	8001304 <LIS3MDL_MagReadXYZ+0x58>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800132a:	aa04      	add	r2, sp, #16
 800132c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001330:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8001334:	ee07 2a90 	vmov	s15, r2
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d9ea      	bls.n	800132a <LIS3MDL_MagReadXYZ+0x7e>
  }
}
 8001354:	b005      	add	sp, #20
 8001356:	bd30      	pop	{r4, r5, pc}
 8001358:	3e947ae1 	.word	0x3e947ae1
 800135c:	3f147ae1 	.word	0x3f147ae1
 8001360:	3edc28f6 	.word	0x3edc28f6
 8001364:	3e0f5c29 	.word	0x3e0f5c29
 8001368:	00000000 	.word	0x00000000

0800136c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800136c:	b530      	push	{r4, r5, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	4605      	mov	r5, r0
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001372:	2400      	movs	r4, #0
 8001374:	e00c      	b.n	8001390 <LPS22HB_P_ReadPressure+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001376:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	b2e8      	uxtb	r0, r5
 800137e:	f000 fb6b 	bl	8001a58 <SENSOR_IO_Read>
 8001382:	f104 0308 	add.w	r3, r4, #8
 8001386:	446b      	add	r3, sp
 8001388:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 3; i++)
 800138c:	3401      	adds	r4, #1
 800138e:	b2e4      	uxtb	r4, r4
 8001390:	2c02      	cmp	r4, #2
 8001392:	d9f0      	bls.n	8001376 <LPS22HB_P_ReadPressure+0xa>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001394:	2300      	movs	r3, #0
  uint32_t tmp = 0;
 8001396:	461a      	mov	r2, r3
 8001398:	e009      	b.n	80013ae <LPS22HB_P_ReadPressure+0x42>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800139a:	f103 0108 	add.w	r1, r3, #8
 800139e:	4469      	add	r1, sp
 80013a0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 80013a4:	00d8      	lsls	r0, r3, #3
 80013a6:	4081      	lsls	r1, r0
 80013a8:	430a      	orrs	r2, r1
  for(i = 0; i < 3; i++)
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d9f3      	bls.n	800139a <LPS22HB_P_ReadPressure+0x2e>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80013b2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80013b6:	d001      	beq.n	80013bc <LPS22HB_P_ReadPressure+0x50>
    tmp |= 0xFF000000;
 80013b8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	db0a      	blt.n	80013dc <LPS22HB_P_ReadPressure+0x70>
 80013c6:	1312      	asrs	r2, r2, #12

  return (float)((float)raw_press / 100.0f);
 80013c8:	ee07 2a90 	vmov	s15, r2
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013d0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80013e4 <LPS22HB_P_ReadPressure+0x78>
 80013d4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80013d8:	b003      	add	sp, #12
 80013da:	bd30      	pop	{r4, r5, pc}
  raw_press = (raw_press * 100) / 4096;
 80013dc:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 80013e0:	e7f1      	b.n	80013c6 <LPS22HB_P_ReadPressure+0x5a>
 80013e2:	bf00      	nop
 80013e4:	42c80000 	.word	0x42c80000

080013e8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80013e8:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80013ea:	b2c4      	uxtb	r4, r0
 80013ec:	211a      	movs	r1, #26
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 fb32 	bl	8001a58 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80013f4:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	211a      	movs	r1, #26
 80013fe:	4620      	mov	r0, r4
 8001400:	f000 fb16 	bl	8001a30 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001404:	2110      	movs	r1, #16
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fb26 	bl	8001a58 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800140c:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001410:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8001414:	2110      	movs	r1, #16
 8001416:	4620      	mov	r0, r4
 8001418:	f000 fb0a 	bl	8001a30 <SENSOR_IO_Write>
}  
 800141c:	bd10      	pop	{r4, pc}

0800141e <LPS22HB_P_Init>:
{
 800141e:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8001420:	f7ff ffe2 	bl	80013e8 <LPS22HB_Init>
}
 8001424:	bd08      	pop	{r3, pc}

08001426 <LPS22HB_P_ReadID>:
{  
 8001426:	b510      	push	{r4, lr}
 8001428:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 800142a:	f000 faf9 	bl	8001a20 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800142e:	210f      	movs	r1, #15
 8001430:	b2e0      	uxtb	r0, r4
 8001432:	f000 fb11 	bl	8001a58 <SENSOR_IO_Read>
}
 8001436:	bd10      	pop	{r4, pc}

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b510      	push	{r4, lr}
 800143a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	2400      	movs	r4, #0
 800143e:	9403      	str	r4, [sp, #12]
 8001440:	9404      	str	r4, [sp, #16]
 8001442:	9405      	str	r4, [sp, #20]
 8001444:	9406      	str	r4, [sp, #24]
 8001446:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0x70>)
 800144a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800144c:	f042 0204 	orr.w	r2, r2, #4
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
 8001452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001454:	f002 0204 	and.w	r2, r2, #4
 8001458:	9200      	str	r2, [sp, #0]
 800145a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800145e:	f042 0202 	orr.w	r2, r2, #2
 8001462:	64da      	str	r2, [r3, #76]	; 0x4c
 8001464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001466:	f002 0202 	and.w	r2, r2, #2
 800146a:	9201      	str	r2, [sp, #4]
 800146c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	64da      	str	r2, [r3, #76]	; 0x4c
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	a903      	add	r1, sp, #12
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_GPIO_Init+0x74>)
 8001490:	f000 fdd8 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001494:	4622      	mov	r2, r4
 8001496:	4621      	mov	r1, r4
 8001498:	2028      	movs	r0, #40	; 0x28
 800149a:	f000 fd79 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f000 fdae 	bl	8002000 <HAL_NVIC_EnableIRQ>

}
 80014a4:	b008      	add	sp, #32
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000800 	.word	0x48000800

080014b0 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == GPIO_PIN_13) {
 80014b0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80014b4:	d000      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x8>
}
 80014b6:	4770      	bx	lr
		cur_sensor++;
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x20>)
 80014ba:	7813      	ldrb	r3, [r2, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	7013      	strb	r3, [r2, #0]
		if (cur_sensor >= 4) {
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d9f7      	bls.n	80014b6 <HAL_GPIO_EXTI_Callback+0x6>
			cur_sensor = 0;
 80014c6:	4613      	mov	r3, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	e7f3      	b.n	80014b6 <HAL_GPIO_EXTI_Callback+0x6>
 80014ce:	bf00      	nop
 80014d0:	20000258 	.word	0x20000258

080014d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 80014d4:	b510      	push	{r4, lr}
 80014d6:	b082      	sub	sp, #8
		memset(uart_buffer, 0, 100);
 80014d8:	2264      	movs	r2, #100	; 0x64
 80014da:	2100      	movs	r1, #0
 80014dc:	4826      	ldr	r0, [pc, #152]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014de:	f003 fc3b 	bl	8004d58 <memset>
		switch (cur_sensor) {
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d841      	bhi.n	800156e <HAL_TIM_PeriodElapsedCallback+0x9a>
 80014ea:	e8df f003 	tbb	[pc, r3]
 80014ee:	1602      	.short	0x1602
 80014f0:	3023      	.short	0x3023
			float temp_reading = BSP_TSENSOR_ReadTemp();
 80014f2:	f000 fb59 	bl	8001ba8 <BSP_TSENSOR_ReadTemp>
 80014f6:	ee10 0a10 	vmov	r0, s0
			sprintf(uart_buffer, "Temperature: %f \r\n", temp_reading);
 80014fa:	f7ff f83d 	bl	8000578 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	491f      	ldr	r1, [pc, #124]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001504:	481c      	ldr	r0, [pc, #112]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001506:	f004 faaf 	bl	8005a68 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 800150a:	2314      	movs	r3, #20
 800150c:	2264      	movs	r2, #100	; 0x64
 800150e:	491a      	ldr	r1, [pc, #104]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001510:	481c      	ldr	r0, [pc, #112]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001512:	f003 fa7c 	bl	8004a0e <HAL_UART_Transmit>
}
 8001516:	b002      	add	sp, #8
 8001518:	bd10      	pop	{r4, pc}
			float humid_reading = BSP_HSENSOR_ReadHumidity();
 800151a:	f000 fad9 	bl	8001ad0 <BSP_HSENSOR_ReadHumidity>
 800151e:	ee10 0a10 	vmov	r0, s0
			sprintf(uart_buffer, "Humidity: %f \r\n", humid_reading);
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4917      	ldr	r1, [pc, #92]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800152e:	f004 fa9b 	bl	8005a68 <siprintf>
		} break;
 8001532:	e7ea      	b.n	800150a <HAL_TIM_PeriodElapsedCallback+0x36>
			float pres_reading = BSP_PSENSOR_ReadPressure();
 8001534:	f000 fb1c 	bl	8001b70 <BSP_PSENSOR_ReadPressure>
 8001538:	ee10 0a10 	vmov	r0, s0
			sprintf(uart_buffer, "Pressure: %f \r\n", pres_reading);
 800153c:	f7ff f81c 	bl	8000578 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4911      	ldr	r1, [pc, #68]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001548:	f004 fa8e 	bl	8005a68 <siprintf>
		} break;
 800154c:	e7dd      	b.n	800150a <HAL_TIM_PeriodElapsedCallback+0x36>
			BSP_MAGNETO_GetXYZ(magneto_value);
 800154e:	4c10      	ldr	r4, [pc, #64]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001550:	4620      	mov	r0, r4
 8001552:	f000 faed 	bl	8001b30 <BSP_MAGNETO_GetXYZ>
			sprintf(uart_buffer, "Magneto: X=%d\tY=%d\tZ=%d \r\n", magneto_value[0], magneto_value[1], magneto_value[2]);
 8001556:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001560:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001564:	490b      	ldr	r1, [pc, #44]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001568:	f004 fa7e 	bl	8005a68 <siprintf>
		} break;
 800156c:	e7cd      	b.n	800150a <HAL_TIM_PeriodElapsedCallback+0x36>
			cur_sensor = 0;
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e7c9      	b.n	800150a <HAL_TIM_PeriodElapsedCallback+0x36>
 8001576:	bf00      	nop
 8001578:	2000039c 	.word	0x2000039c
 800157c:	20000258 	.word	0x20000258
 8001580:	08009640 	.word	0x08009640
 8001584:	200002f4 	.word	0x200002f4
 8001588:	08009654 	.word	0x08009654
 800158c:	08009664 	.word	0x08009664
 8001590:	2000038c 	.word	0x2000038c
 8001594:	08009674 	.word	0x08009674

08001598 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159a:	e7fe      	b.n	800159a <Error_Handler+0x2>

0800159c <MX_I2C2_Init>:
{
 800159c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800159e:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_I2C2_Init+0x48>)
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C2_Init+0x4c>)
 80015a2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C2_Init+0x50>)
 80015a6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ac:	2201      	movs	r2, #1
 80015ae:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015b2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ba:	f001 f8a3 	bl	8002704 <HAL_I2C_Init>
 80015be:	b950      	cbnz	r0, 80015d6 <MX_I2C2_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_I2C2_Init+0x48>)
 80015c4:	f001 fac2 	bl	8002b4c <HAL_I2CEx_ConfigAnalogFilter>
 80015c8:	b938      	cbnz	r0, 80015da <MX_I2C2_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_I2C2_Init+0x48>)
 80015ce:	f001 faeb 	bl	8002ba8 <HAL_I2CEx_ConfigDigitalFilter>
 80015d2:	b920      	cbnz	r0, 80015de <MX_I2C2_Init+0x42>
}
 80015d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015d6:	f7ff ffdf 	bl	8001598 <Error_Handler>
    Error_Handler();
 80015da:	f7ff ffdd 	bl	8001598 <Error_Handler>
    Error_Handler();
 80015de:	f7ff ffdb 	bl	8001598 <Error_Handler>
 80015e2:	bf00      	nop
 80015e4:	2000025c 	.word	0x2000025c
 80015e8:	40005800 	.word	0x40005800
 80015ec:	00303d5b 	.word	0x00303d5b

080015f0 <MX_TIM2_Init>:
{
 80015f0:	b500      	push	{lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	9304      	str	r3, [sp, #16]
 80015f8:	9305      	str	r3, [sp, #20]
 80015fa:	9306      	str	r3, [sp, #24]
 80015fc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_TIM2_Init+0x68>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1200;
 800160c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001610:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000;
 8001614:	f242 7210 	movw	r2, #10000	; 0x2710
 8001618:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161e:	f002 fe51 	bl	80042c4 <HAL_TIM_Base_Init>
 8001622:	b990      	cbnz	r0, 800164a <MX_TIM2_Init+0x5a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800162a:	a904      	add	r1, sp, #16
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <MX_TIM2_Init+0x68>)
 800162e:	f002 fe87 	bl	8004340 <HAL_TIM_ConfigClockSource>
 8001632:	b960      	cbnz	r0, 800164e <MX_TIM2_Init+0x5e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163a:	a901      	add	r1, sp, #4
 800163c:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM2_Init+0x68>)
 800163e:	f002 feff 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	b930      	cbnz	r0, 8001652 <MX_TIM2_Init+0x62>
}
 8001644:	b009      	add	sp, #36	; 0x24
 8001646:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800164a:	f7ff ffa5 	bl	8001598 <Error_Handler>
    Error_Handler();
 800164e:	f7ff ffa3 	bl	8001598 <Error_Handler>
    Error_Handler();
 8001652:	f7ff ffa1 	bl	8001598 <Error_Handler>
 8001656:	bf00      	nop
 8001658:	200002a8 	.word	0x200002a8

0800165c <MX_USART1_UART_Init>:
{
 800165c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <MX_USART1_UART_Init+0x58>)
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_USART1_UART_Init+0x5c>)
 8001662:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001664:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001668:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	2300      	movs	r3, #0
 800166c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800166e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001670:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001672:	220c      	movs	r2, #12
 8001674:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001680:	f003 fa6e 	bl	8004b60 <HAL_UART_Init>
 8001684:	b970      	cbnz	r0, 80016a4 <MX_USART1_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <MX_USART1_UART_Init+0x58>)
 800168a:	f003 fae2 	bl	8004c52 <HAL_UARTEx_SetTxFifoThreshold>
 800168e:	b958      	cbnz	r0, 80016a8 <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_USART1_UART_Init+0x58>)
 8001694:	f003 fb02 	bl	8004c9c <HAL_UARTEx_SetRxFifoThreshold>
 8001698:	b940      	cbnz	r0, 80016ac <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_USART1_UART_Init+0x58>)
 800169c:	f003 faba 	bl	8004c14 <HAL_UARTEx_DisableFifoMode>
 80016a0:	b930      	cbnz	r0, 80016b0 <MX_USART1_UART_Init+0x54>
}
 80016a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016a4:	f7ff ff78 	bl	8001598 <Error_Handler>
    Error_Handler();
 80016a8:	f7ff ff76 	bl	8001598 <Error_Handler>
    Error_Handler();
 80016ac:	f7ff ff74 	bl	8001598 <Error_Handler>
    Error_Handler();
 80016b0:	f7ff ff72 	bl	8001598 <Error_Handler>
 80016b4:	200002f4 	.word	0x200002f4
 80016b8:	40013800 	.word	0x40013800

080016bc <SystemClock_Config>:
{
 80016bc:	b500      	push	{lr}
 80016be:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c0:	2244      	movs	r2, #68	; 0x44
 80016c2:	2100      	movs	r1, #0
 80016c4:	a805      	add	r0, sp, #20
 80016c6:	f003 fb47 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ca:	2000      	movs	r0, #0
 80016cc:	9000      	str	r0, [sp, #0]
 80016ce:	9001      	str	r0, [sp, #4]
 80016d0:	9002      	str	r0, [sp, #8]
 80016d2:	9003      	str	r0, [sp, #12]
 80016d4:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80016d6:	f001 faa5 	bl	8002c24 <HAL_PWREx_ControlVoltageScaling>
 80016da:	bb18      	cbnz	r0, 8001724 <SystemClock_Config+0x68>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ee:	2204      	movs	r2, #4
 80016f0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80016f2:	223c      	movs	r2, #60	; 0x3c
 80016f4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fa:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	a805      	add	r0, sp, #20
 80016fe:	f001 fbf9 	bl	8002ef4 <HAL_RCC_OscConfig>
 8001702:	b988      	cbnz	r0, 8001728 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2303      	movs	r3, #3
 800170a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001710:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001712:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001714:	2105      	movs	r1, #5
 8001716:	4668      	mov	r0, sp
 8001718:	f001 ff34 	bl	8003584 <HAL_RCC_ClockConfig>
 800171c:	b930      	cbnz	r0, 800172c <SystemClock_Config+0x70>
}
 800171e:	b017      	add	sp, #92	; 0x5c
 8001720:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001724:	f7ff ff38 	bl	8001598 <Error_Handler>
    Error_Handler();
 8001728:	f7ff ff36 	bl	8001598 <Error_Handler>
    Error_Handler();
 800172c:	f7ff ff34 	bl	8001598 <Error_Handler>

08001730 <main>:
{
 8001730:	b508      	push	{r3, lr}
  HAL_Init();
 8001732:	f000 fbf9 	bl	8001f28 <HAL_Init>
  SystemClock_Config();
 8001736:	f7ff ffc1 	bl	80016bc <SystemClock_Config>
  MX_GPIO_Init();
 800173a:	f7ff fe7d 	bl	8001438 <MX_GPIO_Init>
  MX_I2C2_Init();
 800173e:	f7ff ff2d 	bl	800159c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001742:	f7ff ff55 	bl	80015f0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001746:	f7ff ff89 	bl	800165c <MX_USART1_UART_Init>
  cur_sensor = 0;
 800174a:	2100      	movs	r1, #0
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <main+0x174>)
 800174e:	7019      	strb	r1, [r3, #0]
  memset(uart_buffer, 0, 100);
 8001750:	2264      	movs	r2, #100	; 0x64
 8001752:	4855      	ldr	r0, [pc, #340]	; (80018a8 <main+0x178>)
 8001754:	f003 fb00 	bl	8004d58 <memset>
  temp_status = BSP_TSENSOR_Init();
 8001758:	f000 fa14 	bl	8001b84 <BSP_TSENSOR_Init>
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <main+0x17c>)
 800175e:	6018      	str	r0, [r3, #0]
  if (temp_status == 0) {
 8001760:	2800      	cmp	r0, #0
 8001762:	d173      	bne.n	800184c <main+0x11c>
	  strcpy(uart_buffer, "The temperature sensor is successfully initialised.\r\n");
 8001764:	4c50      	ldr	r4, [pc, #320]	; (80018a8 <main+0x178>)
 8001766:	4d52      	ldr	r5, [pc, #328]	; (80018b0 <main+0x180>)
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001778:	f844 0b04 	str.w	r0, [r4], #4
 800177c:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 800177e:	4d4a      	ldr	r5, [pc, #296]	; (80018a8 <main+0x178>)
 8001780:	2314      	movs	r3, #20
 8001782:	2264      	movs	r2, #100	; 0x64
 8001784:	4629      	mov	r1, r5
 8001786:	484b      	ldr	r0, [pc, #300]	; (80018b4 <main+0x184>)
 8001788:	f003 f941 	bl	8004a0e <HAL_UART_Transmit>
  humid_status = BSP_HSENSOR_Init();
 800178c:	f000 f98a 	bl	8001aa4 <BSP_HSENSOR_Init>
 8001790:	4604      	mov	r4, r0
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <main+0x188>)
 8001794:	6018      	str	r0, [r3, #0]
  memset(uart_buffer, 0, 100);
 8001796:	2264      	movs	r2, #100	; 0x64
 8001798:	2100      	movs	r1, #0
 800179a:	4628      	mov	r0, r5
 800179c:	f003 fadc 	bl	8004d58 <memset>
  if (humid_status == 0) {
 80017a0:	2c00      	cmp	r4, #0
 80017a2:	d15e      	bne.n	8001862 <main+0x132>
	  strcpy(uart_buffer, "The humidity sensor is successfully initialised.\r\n");
 80017a4:	462c      	mov	r4, r5
 80017a6:	4d45      	ldr	r5, [pc, #276]	; (80018bc <main+0x18c>)
 80017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	f824 3b02 	strh.w	r3, [r4], #2
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 80017be:	4d3a      	ldr	r5, [pc, #232]	; (80018a8 <main+0x178>)
 80017c0:	2314      	movs	r3, #20
 80017c2:	2264      	movs	r2, #100	; 0x64
 80017c4:	4629      	mov	r1, r5
 80017c6:	483b      	ldr	r0, [pc, #236]	; (80018b4 <main+0x184>)
 80017c8:	f003 f921 	bl	8004a0e <HAL_UART_Transmit>
  pres_status = BSP_PSENSOR_Init();
 80017cc:	f000 f9ba 	bl	8001b44 <BSP_PSENSOR_Init>
 80017d0:	4604      	mov	r4, r0
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <main+0x190>)
 80017d4:	6018      	str	r0, [r3, #0]
  memset(uart_buffer, 0, 100);
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	2100      	movs	r1, #0
 80017da:	4628      	mov	r0, r5
 80017dc:	f003 fabc 	bl	8004d58 <memset>
  if (pres_status == 0) {
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d149      	bne.n	8001878 <main+0x148>
	  strcpy(uart_buffer, "The pressure sensor is successfully initialised.\r\n");
 80017e4:	462c      	mov	r4, r5
 80017e6:	4d37      	ldr	r5, [pc, #220]	; (80018c4 <main+0x194>)
 80017e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	f824 3b02 	strh.w	r3, [r4], #2
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 80017fe:	4d2a      	ldr	r5, [pc, #168]	; (80018a8 <main+0x178>)
 8001800:	2314      	movs	r3, #20
 8001802:	2264      	movs	r2, #100	; 0x64
 8001804:	4629      	mov	r1, r5
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <main+0x184>)
 8001808:	f003 f901 	bl	8004a0e <HAL_UART_Transmit>
  mag_status = BSP_MAGNETO_Init();
 800180c:	f000 f96a 	bl	8001ae4 <BSP_MAGNETO_Init>
 8001810:	4604      	mov	r4, r0
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <main+0x198>)
 8001814:	7018      	strb	r0, [r3, #0]
  memset(uart_buffer, 0, 100);
 8001816:	2264      	movs	r2, #100	; 0x64
 8001818:	2100      	movs	r1, #0
 800181a:	4628      	mov	r0, r5
 800181c:	f003 fa9c 	bl	8004d58 <memset>
  if (mag_status == MAGNETO_OK) {
 8001820:	2c00      	cmp	r4, #0
 8001822:	d134      	bne.n	800188e <main+0x15e>
	  strcpy(uart_buffer, "The magneto sensor is successfully initialised.\r\n");
 8001824:	462c      	mov	r4, r5
 8001826:	4d29      	ldr	r5, [pc, #164]	; (80018cc <main+0x19c>)
 8001828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 8001838:	2314      	movs	r3, #20
 800183a:	2264      	movs	r2, #100	; 0x64
 800183c:	491a      	ldr	r1, [pc, #104]	; (80018a8 <main+0x178>)
 800183e:	481d      	ldr	r0, [pc, #116]	; (80018b4 <main+0x184>)
 8001840:	f003 f8e5 	bl	8004a0e <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <main+0x1a0>)
 8001846:	f002 fbc1 	bl	8003fcc <HAL_TIM_Base_Start_IT>
  while (1)
 800184a:	e7fe      	b.n	800184a <main+0x11a>
	  strcpy(uart_buffer, "Initialisation for the temperature sensor failed.\r\n");
 800184c:	4c16      	ldr	r4, [pc, #88]	; (80018a8 <main+0x178>)
 800184e:	4d21      	ldr	r5, [pc, #132]	; (80018d4 <main+0x1a4>)
 8001850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	e78d      	b.n	800177e <main+0x4e>
	  strcpy(uart_buffer, "Initialisation for the humidity sensor failed.\r\n");
 8001862:	4c11      	ldr	r4, [pc, #68]	; (80018a8 <main+0x178>)
 8001864:	4d1c      	ldr	r5, [pc, #112]	; (80018d8 <main+0x1a8>)
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	7023      	strb	r3, [r4, #0]
 8001876:	e7a2      	b.n	80017be <main+0x8e>
	  strcpy(uart_buffer, "Initialisation for the pressure sensor failed.\r\n");
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <main+0x178>)
 800187a:	4d18      	ldr	r5, [pc, #96]	; (80018dc <main+0x1ac>)
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	7023      	strb	r3, [r4, #0]
 800188c:	e7b7      	b.n	80017fe <main+0xce>
	  strcpy(uart_buffer, "Initialisation for the magneto sensor failed.\r\n");
 800188e:	4c06      	ldr	r4, [pc, #24]	; (80018a8 <main+0x178>)
 8001890:	4d13      	ldr	r5, [pc, #76]	; (80018e0 <main+0x1b0>)
 8001892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018a2:	e7c9      	b.n	8001838 <main+0x108>
 80018a4:	20000258 	.word	0x20000258
 80018a8:	2000039c 	.word	0x2000039c
 80018ac:	20000398 	.word	0x20000398
 80018b0:	08009690 	.word	0x08009690
 80018b4:	200002f4 	.word	0x200002f4
 80018b8:	20000384 	.word	0x20000384
 80018bc:	080096fc 	.word	0x080096fc
 80018c0:	20000394 	.word	0x20000394
 80018c4:	08009764 	.word	0x08009764
 80018c8:	20000388 	.word	0x20000388
 80018cc:	080097cc 	.word	0x080097cc
 80018d0:	200002a8 	.word	0x200002a8
 80018d4:	080096c8 	.word	0x080096c8
 80018d8:	08009730 	.word	0x08009730
 80018dc:	08009798 	.word	0x08009798
 80018e0:	08009800 	.word	0x08009800

080018e4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80018e4:	b530      	push	{r4, r5, lr}
 80018e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018e8:	4c20      	ldr	r4, [pc, #128]	; (800196c <I2Cx_MspInit+0x88>)
 80018ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001900:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800190e:	2304      	movs	r3, #4
 8001910:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001912:	4d17      	ldr	r5, [pc, #92]	; (8001970 <I2Cx_MspInit+0x8c>)
 8001914:	a903      	add	r1, sp, #12
 8001916:	4628      	mov	r0, r5
 8001918:	f000 fb94 	bl	8002044 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800191c:	a903      	add	r1, sp, #12
 800191e:	4628      	mov	r0, r5
 8001920:	f000 fb90 	bl	8002044 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192a:	65a3      	str	r3, [r4, #88]	; 0x58
 800192c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001936:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800193c:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800193e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001940:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001944:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	210f      	movs	r1, #15
 800194a:	2021      	movs	r0, #33	; 0x21
 800194c:	f000 fb20 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001950:	2021      	movs	r0, #33	; 0x21
 8001952:	f000 fb55 	bl	8002000 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	2022      	movs	r0, #34	; 0x22
 800195c:	f000 fb18 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001960:	2022      	movs	r0, #34	; 0x22
 8001962:	f000 fb4d 	bl	8002000 <HAL_NVIC_EnableIRQ>
}
 8001966:	b009      	add	sp, #36	; 0x24
 8001968:	bd30      	pop	{r4, r5, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	48000400 	.word	0x48000400

08001974 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <I2Cx_Init+0x30>)
 800197a:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <I2Cx_Init+0x34>)
 800197e:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001980:	2500      	movs	r5, #0
 8001982:	6085      	str	r5, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001984:	2301      	movs	r3, #1
 8001986:	60c3      	str	r3, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001988:	6105      	str	r5, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800198a:	6145      	str	r5, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800198c:	61c5      	str	r5, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800198e:	6205      	str	r5, [r0, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001990:	f7ff ffa8 	bl	80018e4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001994:	4620      	mov	r0, r4
 8001996:	f000 feb5 	bl	8002704 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800199a:	4629      	mov	r1, r5
 800199c:	4620      	mov	r0, r4
 800199e:	f001 f8d5 	bl	8002b4c <HAL_I2CEx_ConfigAnalogFilter>
}
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	40005800 	.word	0x40005800
 80019a8:	00702681 	.word	0x00702681

080019ac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80019ac:	b510      	push	{r4, lr}
 80019ae:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80019b0:	f000 ff06 	bl	80027c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff ffdd 	bl	8001974 <I2Cx_Init>
}
 80019ba:	bd10      	pop	{r4, pc}

080019bc <I2Cx_WriteMultiple>:
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	4605      	mov	r5, r0
 80019c2:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c8:	9102      	str	r1, [sp, #8]
 80019ca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80019ce:	9101      	str	r1, [sp, #4]
 80019d0:	9908      	ldr	r1, [sp, #32]
 80019d2:	9100      	str	r1, [sp, #0]
 80019d4:	4621      	mov	r1, r4
 80019d6:	f000 ff0c 	bl	80027f2 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80019da:	4606      	mov	r6, r0
 80019dc:	b910      	cbnz	r0, 80019e4 <I2Cx_WriteMultiple+0x28>
}
 80019de:	4630      	mov	r0, r6
 80019e0:	b004      	add	sp, #16
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80019e4:	4621      	mov	r1, r4
 80019e6:	4628      	mov	r0, r5
 80019e8:	f7ff ffe0 	bl	80019ac <I2Cx_Error>
 80019ec:	e7f7      	b.n	80019de <I2Cx_WriteMultiple+0x22>

080019ee <I2Cx_ReadMultiple>:
{
 80019ee:	b570      	push	{r4, r5, r6, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	4605      	mov	r5, r0
 80019f4:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019fa:	9102      	str	r1, [sp, #8]
 80019fc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001a00:	9101      	str	r1, [sp, #4]
 8001a02:	9908      	ldr	r1, [sp, #32]
 8001a04:	9100      	str	r1, [sp, #0]
 8001a06:	4621      	mov	r1, r4
 8001a08:	f000 ffc8 	bl	800299c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001a0c:	4606      	mov	r6, r0
 8001a0e:	b910      	cbnz	r0, 8001a16 <I2Cx_ReadMultiple+0x28>
}
 8001a10:	4630      	mov	r0, r6
 8001a12:	b004      	add	sp, #16
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001a16:	4621      	mov	r1, r4
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff ffc7 	bl	80019ac <I2Cx_Error>
 8001a1e:	e7f7      	b.n	8001a10 <I2Cx_ReadMultiple+0x22>

08001a20 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a20:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <SENSOR_IO_Init+0xc>)
 8001a24:	f7ff ffa6 	bl	8001974 <I2Cx_Init>
}
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000400 	.word	0x20000400

08001a30 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a30:	b500      	push	{lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	f10d 020f 	add.w	r2, sp, #15
 8001a40:	9200      	str	r2, [sp, #0]
 8001a42:	460a      	mov	r2, r1
 8001a44:	4601      	mov	r1, r0
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <SENSOR_IO_Write+0x24>)
 8001a48:	f7ff ffb8 	bl	80019bc <I2Cx_WriteMultiple>
}
 8001a4c:	b005      	add	sp, #20
 8001a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a52:	bf00      	nop
 8001a54:	20000400 	.word	0x20000400

08001a58 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001a58:	b500      	push	{lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f10d 010f 	add.w	r1, sp, #15
 8001a6c:	9100      	str	r1, [sp, #0]
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <SENSOR_IO_Read+0x28>)
 8001a72:	f7ff ffbc 	bl	80019ee <I2Cx_ReadMultiple>

  return read_value;
}
 8001a76:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001a7a:	b005      	add	sp, #20
 8001a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a80:	20000400 	.word	0x20000400

08001a84 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001a84:	b500      	push	{lr}
 8001a86:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	9200      	str	r2, [sp, #0]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	460a      	mov	r2, r1
 8001a90:	4601      	mov	r1, r0
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <SENSOR_IO_ReadMultiple+0x1c>)
 8001a94:	f7ff ffab 	bl	80019ee <I2Cx_ReadMultiple>
}
 8001a98:	b280      	uxth	r0, r0
 8001a9a:	b003      	add	sp, #12
 8001a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa0:	20000400 	.word	0x20000400

08001aa4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001aa4:	b508      	push	{r3, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <BSP_HSENSOR_Init+0x24>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	20be      	movs	r0, #190	; 0xbe
 8001aac:	4798      	blx	r3
 8001aae:	28bc      	cmp	r0, #188	; 0xbc
 8001ab0:	d001      	beq.n	8001ab6 <BSP_HSENSOR_Init+0x12>
  {
    ret = HSENSOR_ERROR;
 8001ab2:	2001      	movs	r0, #1
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
    ret = HSENSOR_OK;
  }
  
  return ret;
}
 8001ab4:	bd08      	pop	{r3, pc}
    Hsensor_drv = &HTS221_H_Drv;
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <BSP_HSENSOR_Init+0x24>)
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <BSP_HSENSOR_Init+0x28>)
 8001aba:	6013      	str	r3, [r2, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	20be      	movs	r0, #190	; 0xbe
 8001ac0:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e7f6      	b.n	8001ab4 <BSP_HSENSOR_Init+0x10>
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	2000044c 	.word	0x2000044c

08001ad0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001ad0:	b508      	push	{r3, lr}
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <BSP_HSENSOR_ReadHumidity+0x10>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	20be      	movs	r0, #190	; 0xbe
 8001ada:	4798      	blx	r3
}
 8001adc:	bd08      	pop	{r3, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000044c 	.word	0x2000044c

08001ae4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	b082      	sub	sp, #8
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <BSP_MAGNETO_Init+0x44>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4798      	blx	r3
 8001aee:	283d      	cmp	r0, #61	; 0x3d
 8001af0:	d002      	beq.n	8001af8 <BSP_MAGNETO_Init+0x14>
  {
    ret = MAGNETO_ERROR;
 8001af2:	2001      	movs	r0, #1
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
  } 

  return ret;  
}
 8001af4:	b002      	add	sp, #8
 8001af6:	bd10      	pop	{r4, pc}
    MagnetoDrv = &Lis3mdlMagDrv;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <BSP_MAGNETO_Init+0x44>)
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <BSP_MAGNETO_Init+0x48>)
 8001afc:	6013      	str	r3, [r2, #0]
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001afe:	2258      	movs	r2, #88	; 0x58
 8001b00:	f88d 2000 	strb.w	r2, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001b04:	2400      	movs	r4, #0
 8001b06:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001b0a:	f88d 4002 	strb.w	r4, [sp, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001b0e:	2208      	movs	r2, #8
 8001b10:	f88d 2003 	strb.w	r2, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	f88d 2004 	strb.w	r2, [sp, #4]
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	aa02      	add	r2, sp, #8
 8001b1e:	e912 0003 	ldmdb	r2, {r0, r1}
 8001b22:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001b24:	4620      	mov	r0, r4
 8001b26:	e7e5      	b.n	8001af4 <BSP_MAGNETO_Init+0x10>
 8001b28:	2000001c 	.word	0x2000001c
 8001b2c:	20000450 	.word	0x20000450

08001b30 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001b30:	b508      	push	{r3, lr}
  if(MagnetoDrv != NULL)
 8001b32:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <BSP_MAGNETO_GetXYZ+0x10>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b113      	cbz	r3, 8001b3e <BSP_MAGNETO_GetXYZ+0xe>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	b103      	cbz	r3, 8001b3e <BSP_MAGNETO_GetXYZ+0xe>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001b3c:	4798      	blx	r3
    }
  }
}
 8001b3e:	bd08      	pop	{r3, pc}
 8001b40:	20000450 	.word	0x20000450

08001b44 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001b44:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <BSP_PSENSOR_Init+0x24>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	20ba      	movs	r0, #186	; 0xba
 8001b4c:	4798      	blx	r3
 8001b4e:	28b1      	cmp	r0, #177	; 0xb1
 8001b50:	d001      	beq.n	8001b56 <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 8001b52:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 8001b54:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <BSP_PSENSOR_Init+0x24>)
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <BSP_PSENSOR_Init+0x28>)
 8001b5a:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	20ba      	movs	r0, #186	; 0xba
 8001b60:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e7f6      	b.n	8001b54 <BSP_PSENSOR_Init+0x10>
 8001b66:	bf00      	nop
 8001b68:	20000050 	.word	0x20000050
 8001b6c:	20000454 	.word	0x20000454

08001b70 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001b70:	b508      	push	{r3, lr}
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001b72:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <BSP_PSENSOR_ReadPressure+0x10>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	20ba      	movs	r0, #186	; 0xba
 8001b7a:	4798      	blx	r3
}
 8001b7c:	bd08      	pop	{r3, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000454 	.word	0x20000454

08001b84 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001b84:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001b86:	4c06      	ldr	r4, [pc, #24]	; (8001ba0 <BSP_TSENSOR_Init+0x1c>)
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <BSP_TSENSOR_Init+0x20>)
 8001b8a:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001b8c:	f7ff ff48 	bl	8001a20 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2100      	movs	r1, #0
 8001b96:	20be      	movs	r0, #190	; 0xbe
 8001b98:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000458 	.word	0x20000458
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001ba8:	b508      	push	{r3, lr}
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <BSP_TSENSOR_ReadTemp+0x10>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	20be      	movs	r0, #190	; 0xbe
 8001bb2:	4798      	blx	r3
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000458 	.word	0x20000458

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_MspInit+0x2c>)
 8001bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60
 8001bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bca:	f002 0201 	and.w	r2, r2, #1
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd8:	659a      	str	r2, [r3, #88]	; 0x58
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be4:	b002      	add	sp, #8
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b510      	push	{r4, lr}
 8001bee:	b0ac      	sub	sp, #176	; 0xb0
 8001bf0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	9127      	str	r1, [sp, #156]	; 0x9c
 8001bf6:	9128      	str	r1, [sp, #160]	; 0xa0
 8001bf8:	9129      	str	r1, [sp, #164]	; 0xa4
 8001bfa:	912a      	str	r1, [sp, #168]	; 0xa8
 8001bfc:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfe:	2294      	movs	r2, #148	; 0x94
 8001c00:	a802      	add	r0, sp, #8
 8001c02:	f003 f8a9 	bl	8004d58 <memset>
  if(hi2c->Instance==I2C2)
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_I2C_MspInit+0x84>)
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c0e:	b02c      	add	sp, #176	; 0xb0
 8001c10:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	9302      	str	r3, [sp, #8]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c1a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	a802      	add	r0, sp, #8
 8001c1e:	f001 ff37 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	bb10      	cbnz	r0, 8001c6a <HAL_I2C_MspInit+0x7e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4c13      	ldr	r4, [pc, #76]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001c2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c3c:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	a927      	add	r1, sp, #156	; 0x9c
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <HAL_I2C_MspInit+0x8c>)
 8001c52:	f000 f9f7 	bl	8002044 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9b01      	ldr	r3, [sp, #4]
}
 8001c68:	e7d1      	b.n	8001c0e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001c6a:	f7ff fc95 	bl	8001598 <Error_Handler>
 8001c6e:	e7d9      	b.n	8001c24 <HAL_I2C_MspInit+0x38>
 8001c70:	40005800 	.word	0x40005800
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000400 	.word	0x48000400

08001c7c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8001c7c:	6802      	ldr	r2, [r0, #0]
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_I2C_MspDeInit+0x30>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d000      	beq.n	8001c86 <HAL_I2C_MspDeInit+0xa>
 8001c84:	4770      	bx	lr
{
 8001c86:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_I2C_MspDeInit+0x34>)
 8001c8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001c92:	4c08      	ldr	r4, [pc, #32]	; (8001cb4 <HAL_I2C_MspDeInit+0x38>)
 8001c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f000 facb 	bl	8002234 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 fac6 	bl	8002234 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	bf00      	nop
 8001cac:	40005800 	.word	0x40005800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001cb8:	6803      	ldr	r3, [r0, #0]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d000      	beq.n	8001cc2 <HAL_TIM_Base_MspInit+0xa>
 8001cc0:	4770      	bx	lr
{
 8001cc2:	b500      	push	{lr}
 8001cc4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4611      	mov	r1, r2
 8001ce0:	201c      	movs	r0, #28
 8001ce2:	f000 f955 	bl	8001f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce6:	201c      	movs	r0, #28
 8001ce8:	f000 f98a 	bl	8002000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cec:	b003      	add	sp, #12
 8001cee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	b0ac      	sub	sp, #176	; 0xb0
 8001cf8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	9127      	str	r1, [sp, #156]	; 0x9c
 8001cfe:	9128      	str	r1, [sp, #160]	; 0xa0
 8001d00:	9129      	str	r1, [sp, #164]	; 0xa4
 8001d02:	912a      	str	r1, [sp, #168]	; 0xa8
 8001d04:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d06:	2294      	movs	r2, #148	; 0x94
 8001d08:	a802      	add	r0, sp, #8
 8001d0a:	f003 f825 	bl	8004d58 <memset>
  if(huart->Instance==USART1)
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x80>)
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d16:	b02c      	add	sp, #176	; 0xb0
 8001d18:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d22:	a802      	add	r0, sp, #8
 8001d24:	f001 feb4 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8001d28:	bb08      	cbnz	r0, 8001d6e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_UART_MspInit+0x84>)
 8001d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d32:	661a      	str	r2, [r3, #96]	; 0x60
 8001d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d40:	f042 0202 	orr.w	r2, r2, #2
 8001d44:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d60:	2307      	movs	r3, #7
 8001d62:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	a927      	add	r1, sp, #156	; 0x9c
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_UART_MspInit+0x88>)
 8001d68:	f000 f96c 	bl	8002044 <HAL_GPIO_Init>
}
 8001d6c:	e7d3      	b.n	8001d16 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001d6e:	f7ff fc13 	bl	8001598 <Error_Handler>
 8001d72:	e7da      	b.n	8001d2a <HAL_UART_MspInit+0x36>
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler>

08001d82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler>

08001d84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler>

08001d86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler>

08001d88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler>

08001d8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f8d9 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bd08      	pop	{r3, pc}

08001d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d9a:	4802      	ldr	r0, [pc, #8]	; (8001da4 <TIM2_IRQHandler+0xc>)
 8001d9c:	f002 f960 	bl	8004060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop
 8001da4:	200002a8 	.word	0x200002a8

08001da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001daa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dae:	f000 fadb 	bl	8002368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db2:	bd08      	pop	{r3, pc}

08001db4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001db4:	2001      	movs	r0, #1
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dba:	f002 ff95 	bl	8004ce8 <__errno>
 8001dbe:	2316      	movs	r3, #22
 8001dc0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc6:	bd08      	pop	{r3, pc}

08001dc8 <_exit>:

void _exit (int status)
{
 8001dc8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001dca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dce:	f7ff fff3 	bl	8001db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0xa>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2500      	movs	r5, #0
 8001ddc:	e006      	b.n	8001dec <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001dde:	f3af 8000 	nop.w
 8001de2:	4621      	mov	r1, r4
 8001de4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001dea:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	42b5      	cmp	r5, r6
 8001dee:	dbf6      	blt.n	8001dde <_read+0xa>
	}

return len;
}
 8001df0:	4630      	mov	r0, r6
 8001df2:	bd70      	pop	{r4, r5, r6, pc}

08001df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	460c      	mov	r4, r1
 8001df8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	e004      	b.n	8001e08 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001dfe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	3501      	adds	r5, #1
 8001e08:	42b5      	cmp	r5, r6
 8001e0a:	dbf8      	blt.n	8001dfe <_write+0xa>
	}
	return len;
}
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}

08001e10 <_close>:

int _close(int file)
{
	return -1;
}
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	4770      	bx	lr

08001e20 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e20:	2001      	movs	r0, #1
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e24:	2000      	movs	r0, #0
 8001e26:	4770      	bx	lr

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <_sbrk+0x38>)
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <_sbrk+0x40>)
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	b140      	cbz	r0, 8001e48 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <_sbrk+0x40>)
 8001e38:	6800      	ldr	r0, [r0, #0]
 8001e3a:	4403      	add	r3, r0
 8001e3c:	1a52      	subs	r2, r2, r1
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d806      	bhi.n	8001e50 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <_sbrk+0x40>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001e46:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <_sbrk+0x40>)
 8001e4a:	4c08      	ldr	r4, [pc, #32]	; (8001e6c <_sbrk+0x44>)
 8001e4c:	6004      	str	r4, [r0, #0]
 8001e4e:	e7f2      	b.n	8001e36 <_sbrk+0xe>
    errno = ENOMEM;
 8001e50:	f002 ff4a 	bl	8004ce8 <__errno>
 8001e54:	230c      	movs	r3, #12
 8001e56:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5c:	e7f3      	b.n	8001e46 <_sbrk+0x1e>
 8001e5e:	bf00      	nop
 8001e60:	200a0000 	.word	0x200a0000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	2000045c 	.word	0x2000045c
 8001e6c:	20000478 	.word	0x20000478

08001e70 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <SystemInit+0x10>)
 8001e72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e88:	f7ff fff2 	bl	8001e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	; (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f002 ff1f 	bl	8004cf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7ff fc3b 	bl	8001730 <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ebc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001ec8:	08009d54 	.word	0x08009d54
  ldr r2, =_sbss
 8001ecc:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001ed0:	20000474 	.word	0x20000474

08001ed4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_IRQHandler>
	...

08001ed8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_InitTick+0x44>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b90b      	cbnz	r3, 8001ee2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ede:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ee0:	4770      	bx	lr
{
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <HAL_InitTick+0x48>)
 8001ef0:	6810      	ldr	r0, [r2, #0]
 8001ef2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ef6:	f000 f891 	bl	800201c <HAL_SYSTICK_Config>
 8001efa:	b968      	cbnz	r0, 8001f18 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efc:	2c0f      	cmp	r4, #15
 8001efe:	d901      	bls.n	8001f04 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001f00:	2001      	movs	r0, #1
 8001f02:	e00a      	b.n	8001f1a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	4621      	mov	r1, r4
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f0c:	f000 f840 	bl	8001f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_InitTick+0x4c>)
 8001f12:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2000      	movs	r0, #0
 8001f16:	e000      	b.n	8001f1a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
}
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	20000060 	.word	0x20000060
 8001f20:	2000005c 	.word	0x2000005c
 8001f24:	20000064 	.word	0x20000064

08001f28 <HAL_Init>:
{
 8001f28:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f81e 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff ffd1 	bl	8001ed8 <HAL_InitTick>
 8001f36:	b110      	cbz	r0, 8001f3e <HAL_Init+0x16>
    status = HAL_ERROR;
 8001f38:	2401      	movs	r4, #1
}
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001f40:	f7ff fe3c 	bl	8001bbc <HAL_MspInit>
 8001f44:	e7f9      	b.n	8001f3a <HAL_Init+0x12>
	...

08001f48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_IncTick+0x10>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_IncTick+0x14>)
 8001f4e:	6811      	ldr	r1, [r2, #0]
 8001f50:	440b      	add	r3, r1
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000060 	.word	0x20000060
 8001f5c:	20000460 	.word	0x20000460

08001f60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <HAL_GetTick+0x8>)
 8001f62:	6818      	ldr	r0, [r3, #0]
}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000460 	.word	0x20000460

08001f6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	0200      	lsls	r0, r0, #8
 8001f7a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f88:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_NVIC_SetPriority+0x68>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9a:	f1c3 0c07 	rsb	ip, r3, #7
 8001f9e:	f1bc 0f04 	cmp.w	ip, #4
 8001fa2:	bf28      	it	cs
 8001fa4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa8:	f103 0e04 	add.w	lr, r3, #4
 8001fac:	f1be 0f06 	cmp.w	lr, #6
 8001fb0:	d918      	bls.n	8001fe4 <HAL_NVIC_SetPriority+0x54>
 8001fb2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001fb8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001fbc:	ea21 010c 	bic.w	r1, r1, ip
 8001fc0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc2:	fa0e f303 	lsl.w	r3, lr, r3
 8001fc6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fca:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	db0b      	blt.n	8001fe8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	0109      	lsls	r1, r1, #4
 8001fd2:	b2c9      	uxtb	r1, r1
 8001fd4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001fd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001fdc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001fe0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e7e5      	b.n	8001fb4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	f000 000f 	and.w	r0, r0, #15
 8001fec:	0109      	lsls	r1, r1, #4
 8001fee:	b2c9      	uxtb	r1, r1
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_NVIC_SetPriority+0x6c>)
 8001ff2:	5419      	strb	r1, [r3, r0]
 8001ff4:	e7f4      	b.n	8001fe0 <HAL_NVIC_SetPriority+0x50>
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00
 8001ffc:	e000ed14 	.word	0xe000ed14

08002000 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002000:	2800      	cmp	r0, #0
 8002002:	db07      	blt.n	8002014 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002004:	f000 021f 	and.w	r2, r0, #31
 8002008:	0940      	lsrs	r0, r0, #5
 800200a:	2301      	movs	r3, #1
 800200c:	4093      	lsls	r3, r2
 800200e:	4a02      	ldr	r2, [pc, #8]	; (8002018 <HAL_NVIC_EnableIRQ+0x18>)
 8002010:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	3801      	subs	r0, #1
 800201e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002022:	d20b      	bcs.n	800203c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002024:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002028:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_SYSTICK_Config+0x24>)
 800202c:	21f0      	movs	r1, #240	; 0xf0
 800202e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002032:	2000      	movs	r0, #0
 8002034:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	2207      	movs	r2, #7
 8002038:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800203c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002048:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e062      	b.n	8002112 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800204e:	005e      	lsls	r6, r3, #1
 8002050:	2403      	movs	r4, #3
 8002052:	40b4      	lsls	r4, r6
 8002054:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002058:	68cc      	ldr	r4, [r1, #12]
 800205a:	40b4      	lsls	r4, r6
 800205c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800205e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002062:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002066:	684c      	ldr	r4, [r1, #4]
 8002068:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800206c:	409c      	lsls	r4, r3
 800206e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002072:	6044      	str	r4, [r0, #4]
 8002074:	e05f      	b.n	8002136 <HAL_GPIO_Init+0xf2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002076:	08dd      	lsrs	r5, r3, #3
 8002078:	3508      	adds	r5, #8
 800207a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207e:	f003 0407 	and.w	r4, r3, #7
 8002082:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002086:	240f      	movs	r4, #15
 8002088:	fa04 f40c 	lsl.w	r4, r4, ip
 800208c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002090:	690c      	ldr	r4, [r1, #16]
 8002092:	fa04 f40c 	lsl.w	r4, r4, ip
 8002096:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800209a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800209e:	e061      	b.n	8002164 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a0:	2407      	movs	r4, #7
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 80020a4:	2400      	movs	r4, #0
 80020a6:	fa04 f40e 	lsl.w	r4, r4, lr
 80020aa:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ac:	f10c 0c02 	add.w	ip, ip, #2
 80020b0:	4d5c      	ldr	r5, [pc, #368]	; (8002224 <HAL_GPIO_Init+0x1e0>)
 80020b2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b6:	4c5c      	ldr	r4, [pc, #368]	; (8002228 <HAL_GPIO_Init+0x1e4>)
 80020b8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80020ba:	43d4      	mvns	r4, r2
 80020bc:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c0:	684f      	ldr	r7, [r1, #4]
 80020c2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80020c6:	d001      	beq.n	80020cc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80020c8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80020cc:	4d56      	ldr	r5, [pc, #344]	; (8002228 <HAL_GPIO_Init+0x1e4>)
 80020ce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80020d0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80020d2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d6:	684f      	ldr	r7, [r1, #4]
 80020d8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80020dc:	d001      	beq.n	80020e2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80020de:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80020e2:	4d51      	ldr	r5, [pc, #324]	; (8002228 <HAL_GPIO_Init+0x1e4>)
 80020e4:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020e6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80020e8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ec:	684f      	ldr	r7, [r1, #4]
 80020ee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80020f2:	d001      	beq.n	80020f8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80020f4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80020f8:	4d4b      	ldr	r5, [pc, #300]	; (8002228 <HAL_GPIO_Init+0x1e4>)
 80020fa:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80020fc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80020fe:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002100:	684e      	ldr	r6, [r1, #4]
 8002102:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002106:	d001      	beq.n	800210c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002108:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800210c:	4a46      	ldr	r2, [pc, #280]	; (8002228 <HAL_GPIO_Init+0x1e4>)
 800210e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002110:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	680a      	ldr	r2, [r1, #0]
 8002114:	fa32 f403 	lsrs.w	r4, r2, r3
 8002118:	f000 8081 	beq.w	800221e <HAL_GPIO_Init+0x1da>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800211c:	f04f 0c01 	mov.w	ip, #1
 8002120:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002124:	ea1c 0202 	ands.w	r2, ip, r2
 8002128:	d0f2      	beq.n	8002110 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212a:	684c      	ldr	r4, [r1, #4]
 800212c:	f004 0403 	and.w	r4, r4, #3
 8002130:	3c01      	subs	r4, #1
 8002132:	2c01      	cmp	r4, #1
 8002134:	d98a      	bls.n	800204c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	684c      	ldr	r4, [r1, #4]
 8002138:	f004 0403 	and.w	r4, r4, #3
 800213c:	2c03      	cmp	r4, #3
 800213e:	d00c      	beq.n	800215a <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8002140:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002142:	005d      	lsls	r5, r3, #1
 8002144:	f04f 0c03 	mov.w	ip, #3
 8002148:	fa0c fc05 	lsl.w	ip, ip, r5
 800214c:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	688c      	ldr	r4, [r1, #8]
 8002152:	40ac      	lsls	r4, r5
 8002154:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002158:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	684c      	ldr	r4, [r1, #4]
 800215c:	f004 0403 	and.w	r4, r4, #3
 8002160:	2c02      	cmp	r4, #2
 8002162:	d088      	beq.n	8002076 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002164:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002166:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800216a:	f04f 0c03 	mov.w	ip, #3
 800216e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002172:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002176:	684c      	ldr	r4, [r1, #4]
 8002178:	f004 0403 	and.w	r4, r4, #3
 800217c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002180:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002184:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002186:	684c      	ldr	r4, [r1, #4]
 8002188:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800218c:	d0c0      	beq.n	8002110 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4c27      	ldr	r4, [pc, #156]	; (800222c <HAL_GPIO_Init+0x1e8>)
 8002190:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002192:	f045 0501 	orr.w	r5, r5, #1
 8002196:	6625      	str	r5, [r4, #96]	; 0x60
 8002198:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800219a:	f004 0401 	and.w	r4, r4, #1
 800219e:	9401      	str	r4, [sp, #4]
 80021a0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80021a2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80021a6:	f10c 0502 	add.w	r5, ip, #2
 80021aa:	4c1e      	ldr	r4, [pc, #120]	; (8002224 <HAL_GPIO_Init+0x1e0>)
 80021ac:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b0:	f003 0403 	and.w	r4, r3, #3
 80021b4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80021b8:	240f      	movs	r4, #15
 80021ba:	fa04 f40e 	lsl.w	r4, r4, lr
 80021be:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80021c6:	f43f af6d 	beq.w	80020a4 <HAL_GPIO_Init+0x60>
 80021ca:	4c19      	ldr	r4, [pc, #100]	; (8002230 <HAL_GPIO_Init+0x1ec>)
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	d01a      	beq.n	8002206 <HAL_GPIO_Init+0x1c2>
 80021d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021d4:	42a0      	cmp	r0, r4
 80021d6:	d018      	beq.n	800220a <HAL_GPIO_Init+0x1c6>
 80021d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021dc:	42a0      	cmp	r0, r4
 80021de:	d016      	beq.n	800220e <HAL_GPIO_Init+0x1ca>
 80021e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021e4:	42a0      	cmp	r0, r4
 80021e6:	d014      	beq.n	8002212 <HAL_GPIO_Init+0x1ce>
 80021e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021ec:	42a0      	cmp	r0, r4
 80021ee:	d012      	beq.n	8002216 <HAL_GPIO_Init+0x1d2>
 80021f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	d010      	beq.n	800221a <HAL_GPIO_Init+0x1d6>
 80021f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021fc:	42a0      	cmp	r0, r4
 80021fe:	f43f af4f 	beq.w	80020a0 <HAL_GPIO_Init+0x5c>
 8002202:	2408      	movs	r4, #8
 8002204:	e74f      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 8002206:	2401      	movs	r4, #1
 8002208:	e74d      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 800220a:	2402      	movs	r4, #2
 800220c:	e74b      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 800220e:	2403      	movs	r4, #3
 8002210:	e749      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 8002212:	2404      	movs	r4, #4
 8002214:	e747      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 8002216:	2405      	movs	r4, #5
 8002218:	e745      	b.n	80020a6 <HAL_GPIO_Init+0x62>
 800221a:	2406      	movs	r4, #6
 800221c:	e743      	b.n	80020a6 <HAL_GPIO_Init+0x62>
  }
}
 800221e:	b003      	add	sp, #12
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	40010400 	.word	0x40010400
 800222c:	40021000 	.word	0x40021000
 8002230:	48000400 	.word	0x48000400

08002234 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8002234:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002236:	fa31 f203 	lsrs.w	r2, r1, r3
 800223a:	f000 808d 	beq.w	8002358 <HAL_GPIO_DeInit+0x124>
{
 800223e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002240:	e02e      	b.n	80022a0 <HAL_GPIO_DeInit+0x6c>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002242:	2507      	movs	r5, #7
 8002244:	e000      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 8002246:	2500      	movs	r5, #0
 8002248:	fa05 fc0c 	lsl.w	ip, r5, ip
 800224c:	45a4      	cmp	ip, r4
 800224e:	d067      	beq.n	8002320 <HAL_GPIO_DeInit+0xec>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002250:	6804      	ldr	r4, [r0, #0]
 8002252:	005d      	lsls	r5, r3, #1
 8002254:	f04f 0c03 	mov.w	ip, #3
 8002258:	fa0c fc05 	lsl.w	ip, ip, r5
 800225c:	ea44 040c 	orr.w	r4, r4, ip
 8002260:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002262:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002266:	f10e 0e08 	add.w	lr, lr, #8
 800226a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800226e:	f003 0507 	and.w	r5, r3, #7
 8002272:	00ae      	lsls	r6, r5, #2
 8002274:	250f      	movs	r5, #15
 8002276:	40b5      	lsls	r5, r6
 8002278:	ea24 0405 	bic.w	r4, r4, r5
 800227c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002280:	6884      	ldr	r4, [r0, #8]
 8002282:	ea24 040c 	bic.w	r4, r4, ip
 8002286:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002288:	6844      	ldr	r4, [r0, #4]
 800228a:	ea24 0202 	bic.w	r2, r4, r2
 800228e:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002290:	68c2      	ldr	r2, [r0, #12]
 8002292:	ea22 020c 	bic.w	r2, r2, ip
 8002296:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002298:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800229a:	fa31 f203 	lsrs.w	r2, r1, r3
 800229e:	d05a      	beq.n	8002356 <HAL_GPIO_DeInit+0x122>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022a0:	2201      	movs	r2, #1
 80022a2:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80022a4:	ea12 0701 	ands.w	r7, r2, r1
 80022a8:	d0f6      	beq.n	8002298 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80022aa:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80022ae:	f10e 0502 	add.w	r5, lr, #2
 80022b2:	4c2a      	ldr	r4, [pc, #168]	; (800235c <HAL_GPIO_DeInit+0x128>)
 80022b4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022b8:	f003 0c03 	and.w	ip, r3, #3
 80022bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80022c0:	250f      	movs	r5, #15
 80022c2:	fa05 f60c 	lsl.w	r6, r5, ip
 80022c6:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022c8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80022cc:	d0bb      	beq.n	8002246 <HAL_GPIO_DeInit+0x12>
 80022ce:	4d24      	ldr	r5, [pc, #144]	; (8002360 <HAL_GPIO_DeInit+0x12c>)
 80022d0:	42a8      	cmp	r0, r5
 80022d2:	d019      	beq.n	8002308 <HAL_GPIO_DeInit+0xd4>
 80022d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d8:	42a8      	cmp	r0, r5
 80022da:	d017      	beq.n	800230c <HAL_GPIO_DeInit+0xd8>
 80022dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022e0:	42a8      	cmp	r0, r5
 80022e2:	d015      	beq.n	8002310 <HAL_GPIO_DeInit+0xdc>
 80022e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_DeInit+0xe0>
 80022ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022f0:	42a8      	cmp	r0, r5
 80022f2:	d011      	beq.n	8002318 <HAL_GPIO_DeInit+0xe4>
 80022f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022f8:	42a8      	cmp	r0, r5
 80022fa:	d00f      	beq.n	800231c <HAL_GPIO_DeInit+0xe8>
 80022fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002300:	42a8      	cmp	r0, r5
 8002302:	d09e      	beq.n	8002242 <HAL_GPIO_DeInit+0xe>
 8002304:	2508      	movs	r5, #8
 8002306:	e79f      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 8002308:	2501      	movs	r5, #1
 800230a:	e79d      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 800230c:	2502      	movs	r5, #2
 800230e:	e79b      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 8002310:	2503      	movs	r5, #3
 8002312:	e799      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 8002314:	2504      	movs	r5, #4
 8002316:	e797      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 8002318:	2505      	movs	r5, #5
 800231a:	e795      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
 800231c:	2506      	movs	r5, #6
 800231e:	e793      	b.n	8002248 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8002320:	4c10      	ldr	r4, [pc, #64]	; (8002364 <HAL_GPIO_DeInit+0x130>)
 8002322:	6825      	ldr	r5, [r4, #0]
 8002324:	ea25 0507 	bic.w	r5, r5, r7
 8002328:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800232a:	6865      	ldr	r5, [r4, #4]
 800232c:	ea25 0507 	bic.w	r5, r5, r7
 8002330:	6065      	str	r5, [r4, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8002332:	68e5      	ldr	r5, [r4, #12]
 8002334:	ea25 0507 	bic.w	r5, r5, r7
 8002338:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800233a:	68a5      	ldr	r5, [r4, #8]
 800233c:	ea25 0707 	bic.w	r7, r5, r7
 8002340:	60a7      	str	r7, [r4, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002342:	4f06      	ldr	r7, [pc, #24]	; (800235c <HAL_GPIO_DeInit+0x128>)
 8002344:	f10e 0402 	add.w	r4, lr, #2
 8002348:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800234c:	ea25 0506 	bic.w	r5, r5, r6
 8002350:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8002354:	e77c      	b.n	8002250 <HAL_GPIO_DeInit+0x1c>
  }
}
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	48000400 	.word	0x48000400
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002368:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4203      	tst	r3, r0
 8002370:	d100      	bne.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002372:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002376:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002378:	f7ff f89a 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
}
 800237c:	e7f9      	b.n	8002372 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800237e:	bf00      	nop
 8002380:	40010400 	.word	0x40010400

08002384 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	f012 0f02 	tst.w	r2, #2
 800238c:	d001      	beq.n	8002392 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	6803      	ldr	r3, [r0, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	f012 0f01 	tst.w	r2, #1
 800239a:	d103      	bne.n	80023a4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	619a      	str	r2, [r3, #24]
  }
}
 80023a4:	4770      	bx	lr

080023a6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023a6:	b410      	push	{r4}
 80023a8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80023ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023b2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b4:	4321      	orrs	r1, r4
 80023b6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023ba:	6802      	ldr	r2, [r0, #0]
 80023bc:	6853      	ldr	r3, [r2, #4]
 80023be:	0d64      	lsrs	r4, r4, #21
 80023c0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80023c4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80023c8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80023cc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80023d0:	f044 0403 	orr.w	r4, r4, #3
 80023d4:	ea23 0404 	bic.w	r4, r3, r4
 80023d8:	4321      	orrs	r1, r4
 80023da:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <I2C_IsErrorOccurred>:
{
 80023e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e6:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80023e8:	6803      	ldr	r3, [r0, #0]
 80023ea:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ec:	f017 0710 	ands.w	r7, r7, #16
 80023f0:	d04c      	beq.n	800248c <I2C_IsErrorOccurred+0xaa>
 80023f2:	460e      	mov	r6, r1
 80023f4:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	6998      	ldr	r0, [r3, #24]
 8002400:	f010 0f20 	tst.w	r0, #32
 8002404:	d13b      	bne.n	800247e <I2C_IsErrorOccurred+0x9c>
 8002406:	2d00      	cmp	r5, #0
 8002408:	d139      	bne.n	800247e <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 800240a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800240e:	d0f5      	beq.n	80023fc <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002410:	f7ff fda6 	bl	8001f60 <HAL_GetTick>
 8002414:	eba0 0008 	sub.w	r0, r0, r8
 8002418:	42b0      	cmp	r0, r6
 800241a:	d801      	bhi.n	8002420 <I2C_IsErrorOccurred+0x3e>
 800241c:	2e00      	cmp	r6, #0
 800241e:	d1ed      	bne.n	80023fc <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002420:	6821      	ldr	r1, [r4, #0]
 8002422:	684b      	ldr	r3, [r1, #4]
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8002428:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800242c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800242e:	6988      	ldr	r0, [r1, #24]
 8002430:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002434:	d002      	beq.n	800243c <I2C_IsErrorOccurred+0x5a>
 8002436:	b90b      	cbnz	r3, 800243c <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8002438:	2a20      	cmp	r2, #32
 800243a:	d118      	bne.n	800246e <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f013 0f20 	tst.w	r3, #32
 8002444:	d1da      	bne.n	80023fc <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002446:	f7ff fd8b 	bl	8001f60 <HAL_GetTick>
 800244a:	eba0 0008 	sub.w	r0, r0, r8
 800244e:	2819      	cmp	r0, #25
 8002450:	d9f4      	bls.n	800243c <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800245a:	2320      	movs	r3, #32
 800245c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	2300      	movs	r3, #0
 8002462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8002466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800246a:	2501      	movs	r5, #1
 800246c:	e7e6      	b.n	800243c <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800246e:	684b      	ldr	r3, [r1, #4]
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002476:	f7ff fd73 	bl	8001f60 <HAL_GetTick>
 800247a:	4680      	mov	r8, r0
 800247c:	e7de      	b.n	800243c <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800247e:	2d00      	cmp	r5, #0
 8002480:	d140      	bne.n	8002504 <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002482:	2220      	movs	r2, #32
 8002484:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002486:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002488:	2501      	movs	r5, #1
 800248a:	e000      	b.n	800248e <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002492:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002496:	d005      	beq.n	80024a4 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8002498:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800249c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80024a2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024a8:	d006      	beq.n	80024b8 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 80024aa:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b4:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80024b6:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024b8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80024bc:	d024      	beq.n	8002508 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 80024be:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c8:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80024ca:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ff59 	bl	8002384 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	6853      	ldr	r3, [r2, #4]
 80024d6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80024da:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80024de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80024e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024ea:	431f      	orrs	r7, r3
 80024ec:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	2320      	movs	r3, #32
 80024f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80024fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80024fe:	4628      	mov	r0, r5
 8002500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8002504:	2704      	movs	r7, #4
 8002506:	e7c2      	b.n	800248e <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8002508:	2d00      	cmp	r5, #0
 800250a:	d0f8      	beq.n	80024fe <I2C_IsErrorOccurred+0x11c>
 800250c:	e7de      	b.n	80024cc <I2C_IsErrorOccurred+0xea>

0800250e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800250e:	b570      	push	{r4, r5, r6, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	460d      	mov	r5, r1
 8002514:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f013 0f02 	tst.w	r3, #2
 800251e:	d11d      	bne.n	800255c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	4632      	mov	r2, r6
 8002522:	4629      	mov	r1, r5
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff5c 	bl	80023e2 <I2C_IsErrorOccurred>
 800252a:	b9c8      	cbnz	r0, 8002560 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800252c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002530:	d0f1      	beq.n	8002516 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7ff fd15 	bl	8001f60 <HAL_GetTick>
 8002536:	1b80      	subs	r0, r0, r6
 8002538:	42a8      	cmp	r0, r5
 800253a:	d801      	bhi.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800253c:	2d00      	cmp	r5, #0
 800253e:	d1ea      	bne.n	8002516 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	2320      	movs	r3, #32
 800254a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002554:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002558:	2001      	movs	r0, #1
 800255a:	e000      	b.n	800255e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
}
 800255e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
 8002562:	e7fc      	b.n	800255e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002564 <I2C_WaitOnFlagUntilTimeout>:
{
 8002564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002568:	4606      	mov	r6, r0
 800256a:	4688      	mov	r8, r1
 800256c:	4617      	mov	r7, r2
 800256e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002570:	6834      	ldr	r4, [r6, #0]
 8002572:	69a4      	ldr	r4, [r4, #24]
 8002574:	ea38 0304 	bics.w	r3, r8, r4
 8002578:	bf0c      	ite	eq
 800257a:	f04f 0c01 	moveq.w	ip, #1
 800257e:	f04f 0c00 	movne.w	ip, #0
 8002582:	45bc      	cmp	ip, r7
 8002584:	d118      	bne.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8002586:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800258a:	d0f1      	beq.n	8002570 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff fce8 	bl	8001f60 <HAL_GetTick>
 8002590:	9b06      	ldr	r3, [sp, #24]
 8002592:	1ac0      	subs	r0, r0, r3
 8002594:	42a8      	cmp	r0, r5
 8002596:	d801      	bhi.n	800259c <I2C_WaitOnFlagUntilTimeout+0x38>
 8002598:	2d00      	cmp	r5, #0
 800259a:	d1e9      	bne.n	8002570 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800259e:	f043 0320 	orr.w	r3, r3, #32
 80025a2:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	2320      	movs	r3, #32
 80025a6:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80025b0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	e000      	b.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80025b8:	2000      	movs	r0, #0
}
 80025ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080025c0 <I2C_RequestMemoryWrite>:
{
 80025c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	4604      	mov	r4, r0
 80025c8:	4690      	mov	r8, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	9e08      	ldr	r6, [sp, #32]
 80025ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <I2C_RequestMemoryWrite+0x78>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d8:	b2ea      	uxtb	r2, r5
 80025da:	f7ff fee4 	bl	80023a6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	463a      	mov	r2, r7
 80025e0:	4631      	mov	r1, r6
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff ff93 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 80025e8:	b9f8      	cbnz	r0, 800262a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ea:	2d01      	cmp	r5, #1
 80025ec:	d10e      	bne.n	800260c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	fa5f f288 	uxtb.w	r2, r8
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025f6:	9700      	str	r7, [sp, #0]
 80025f8:	4633      	mov	r3, r6
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff ffb0 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002604:	b9a8      	cbnz	r0, 8002632 <I2C_RequestMemoryWrite+0x72>
}
 8002606:	b002      	add	sp, #8
 8002608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002614:	463a      	mov	r2, r7
 8002616:	4631      	mov	r1, r6
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff ff78 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 800261e:	b930      	cbnz	r0, 800262e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	fa5f f288 	uxtb.w	r2, r8
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
 8002628:	e7e5      	b.n	80025f6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
 800262c:	e7eb      	b.n	8002606 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800262e:	2001      	movs	r0, #1
 8002630:	e7e9      	b.n	8002606 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e7e7      	b.n	8002606 <I2C_RequestMemoryWrite+0x46>
 8002636:	bf00      	nop
 8002638:	80002000 	.word	0x80002000

0800263c <I2C_RequestMemoryRead>:
{
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	4604      	mov	r4, r0
 8002644:	4690      	mov	r8, r2
 8002646:	461d      	mov	r5, r3
 8002648:	9e08      	ldr	r6, [sp, #32]
 800264a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <I2C_RequestMemoryRead+0x74>)
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2300      	movs	r3, #0
 8002652:	b2ea      	uxtb	r2, r5
 8002654:	f7ff fea7 	bl	80023a6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002658:	463a      	mov	r2, r7
 800265a:	4631      	mov	r1, r6
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff ff56 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 8002662:	b9f8      	cbnz	r0, 80026a4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002664:	2d01      	cmp	r5, #1
 8002666:	d10e      	bne.n	8002686 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	fa5f f288 	uxtb.w	r2, r8
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002670:	9700      	str	r7, [sp, #0]
 8002672:	4633      	mov	r3, r6
 8002674:	2200      	movs	r2, #0
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff73 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 800267e:	b9a8      	cbnz	r0, 80026ac <I2C_RequestMemoryRead+0x70>
}
 8002680:	b002      	add	sp, #8
 8002682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268e:	463a      	mov	r2, r7
 8002690:	4631      	mov	r1, r6
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff ff3b 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 8002698:	b930      	cbnz	r0, 80026a8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	fa5f f288 	uxtb.w	r2, r8
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
 80026a2:	e7e5      	b.n	8002670 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e7eb      	b.n	8002680 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7e9      	b.n	8002680 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7e7      	b.n	8002680 <I2C_RequestMemoryRead+0x44>
 80026b0:	80002000 	.word	0x80002000

080026b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	4605      	mov	r5, r0
 80026b8:	460c      	mov	r4, r1
 80026ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f013 0f20 	tst.w	r3, #32
 80026c4:	d11a      	bne.n	80026fc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c6:	4632      	mov	r2, r6
 80026c8:	4621      	mov	r1, r4
 80026ca:	4628      	mov	r0, r5
 80026cc:	f7ff fe89 	bl	80023e2 <I2C_IsErrorOccurred>
 80026d0:	b9b0      	cbnz	r0, 8002700 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7ff fc45 	bl	8001f60 <HAL_GetTick>
 80026d6:	1b80      	subs	r0, r0, r6
 80026d8:	42a0      	cmp	r0, r4
 80026da:	d801      	bhi.n	80026e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d1ed      	bne.n	80026bc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	2320      	movs	r3, #32
 80026ea:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026f4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
}
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80026fc:	2000      	movs	r0, #0
 80026fe:	e7fc      	b.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
 8002702:	e7fa      	b.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002704 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002704:	2800      	cmp	r0, #0
 8002706:	d059      	beq.n	80027bc <HAL_I2C_Init+0xb8>
{
 8002708:	b510      	push	{r4, lr}
 800270a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002710:	2b00      	cmp	r3, #0
 8002712:	d043      	beq.n	800279c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002714:	2324      	movs	r3, #36	; 0x24
 8002716:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002724:	6863      	ldr	r3, [r4, #4]
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800272c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	6893      	ldr	r3, [r2, #8]
 8002732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002736:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d033      	beq.n	80027a6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800273e:	68a3      	ldr	r3, [r4, #8]
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002746:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002748:	68e3      	ldr	r3, [r4, #12]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d031      	beq.n	80027b2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	6853      	ldr	r3, [r2, #4]
 8002752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	68d3      	ldr	r3, [r2, #12]
 8002760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002764:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	6962      	ldr	r2, [r4, #20]
 800276a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800276c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002774:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002776:	69e3      	ldr	r3, [r4, #28]
 8002778:	6a21      	ldr	r1, [r4, #32]
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278a:	2000      	movs	r0, #0
 800278c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	2320      	movs	r3, #32
 8002790:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800279a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800279c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80027a0:	f7ff fa24 	bl	8001bec <HAL_I2C_MspInit>
 80027a4:	e7b6      	b.n	8002714 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	e7ca      	b.n	8002748 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e7c8      	b.n	800274e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80027bc:	2001      	movs	r0, #1
}
 80027be:	4770      	bx	lr

080027c0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80027c0:	b1a8      	cbz	r0, 80027ee <HAL_I2C_DeInit+0x2e>
{
 80027c2:	b510      	push	{r4, lr}
 80027c4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c6:	2324      	movs	r3, #36	; 0x24
 80027c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80027cc:	6802      	ldr	r2, [r0, #0]
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80027d6:	f7ff fa51 	bl	8001c7c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027da:	2000      	movs	r0, #0
 80027dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80027de:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80027e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80027ec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
}
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2C_Mem_Write>:
{
 80027f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f6:	b083      	sub	sp, #12
 80027f8:	460e      	mov	r6, r1
 80027fa:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80027fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002804:	b2c9      	uxtb	r1, r1
 8002806:	2920      	cmp	r1, #32
 8002808:	f040 80bb 	bne.w	8002982 <HAL_I2C_Mem_Write+0x190>
 800280c:	4604      	mov	r4, r0
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8002812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002814:	b1cb      	cbz	r3, 800284a <HAL_I2C_Mem_Write+0x58>
 8002816:	f1ba 0f00 	cmp.w	sl, #0
 800281a:	d016      	beq.n	800284a <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800281c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002820:	2b01      	cmp	r3, #1
 8002822:	f000 80b2 	beq.w	800298a <HAL_I2C_Mem_Write+0x198>
 8002826:	f04f 0b01 	mov.w	fp, #1
 800282a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800282e:	f7ff fb97 	bl	8001f60 <HAL_GetTick>
 8002832:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002834:	9000      	str	r0, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	465a      	mov	r2, fp
 800283a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff fe90 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002844:	b130      	cbz	r0, 8002854 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
 8002848:	e09c      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800284a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002850:	2001      	movs	r0, #1
 8002852:	e097      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002854:	2321      	movs	r3, #33	; 0x21
 8002856:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800285a:	2340      	movs	r3, #64	; 0x40
 800285c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002866:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002868:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800286c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800286e:	9701      	str	r7, [sp, #4]
 8002870:	9500      	str	r5, [sp, #0]
 8002872:	464b      	mov	r3, r9
 8002874:	4642      	mov	r2, r8
 8002876:	4631      	mov	r1, r6
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fea1 	bl	80025c0 <I2C_RequestMemoryWrite>
 800287e:	b970      	cbnz	r0, 800289e <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d90f      	bls.n	80028a8 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800288c:	2300      	movs	r3, #0
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002894:	4631      	mov	r1, r6
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fd85 	bl	80023a6 <I2C_TransferConfig>
 800289c:	e021      	b.n	80028e2 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80028a4:	4658      	mov	r0, fp
 80028a6:	e06d      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80028a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028aa:	b292      	uxth	r2, r2
 80028ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4631      	mov	r1, r6
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fd73 	bl	80023a6 <I2C_TransferConfig>
 80028c0:	e00f      	b.n	80028e2 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80028c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028c4:	b292      	uxth	r2, r2
 80028c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4631      	mov	r1, r6
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fd66 	bl	80023a6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80028da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d033      	beq.n	800294a <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	463a      	mov	r2, r7
 80028e4:	4629      	mov	r1, r5
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff fe11 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d14e      	bne.n	800298e <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80028f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028fa:	3301      	adds	r3, #1
 80028fc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002908:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002910:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002912:	b292      	uxth	r2, r2
 8002914:	2a00      	cmp	r2, #0
 8002916:	d0e0      	beq.n	80028da <HAL_I2C_Mem_Write+0xe8>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1de      	bne.n	80028da <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291c:	9700      	str	r7, [sp, #0]
 800291e:	462b      	mov	r3, r5
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff fe1d 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 800292a:	bb90      	cbnz	r0, 8002992 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d9c6      	bls.n	80028c2 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002940:	4631      	mov	r1, r6
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fd2f 	bl	80023a6 <I2C_TransferConfig>
 8002948:	e7c7      	b.n	80028da <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	463a      	mov	r2, r7
 800294c:	4629      	mov	r1, r5
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff feb0 	bl	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002954:	b9f8      	cbnz	r0, 8002996 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	2220      	movs	r2, #32
 800295a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800295c:	6821      	ldr	r1, [r4, #0]
 800295e:	684b      	ldr	r3, [r1, #4]
 8002960:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002964:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002968:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800297c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002980:	e000      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8002982:	2002      	movs	r0, #2
}
 8002984:	b003      	add	sp, #12
 8002986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800298a:	2002      	movs	r0, #2
 800298c:	e7fa      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 800298e:	2001      	movs	r0, #1
 8002990:	e7f8      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e7f6      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
 8002998:	e7f4      	b.n	8002984 <HAL_I2C_Mem_Write+0x192>
	...

0800299c <HAL_I2C_Mem_Read>:
{
 800299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a0:	b083      	sub	sp, #12
 80029a2:	460e      	mov	r6, r1
 80029a4:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80029a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029aa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80029ae:	b2c9      	uxtb	r1, r1
 80029b0:	2920      	cmp	r1, #32
 80029b2:	f040 80bc 	bne.w	8002b2e <HAL_I2C_Mem_Read+0x192>
 80029b6:	4604      	mov	r4, r0
 80029b8:	4690      	mov	r8, r2
 80029ba:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80029bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029be:	b1cb      	cbz	r3, 80029f4 <HAL_I2C_Mem_Read+0x58>
 80029c0:	f1ba 0f00 	cmp.w	sl, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80029c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	f000 80b3 	beq.w	8002b36 <HAL_I2C_Mem_Read+0x19a>
 80029d0:	f04f 0b01 	mov.w	fp, #1
 80029d4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80029d8:	f7ff fac2 	bl	8001f60 <HAL_GetTick>
 80029dc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029de:	9000      	str	r0, [sp, #0]
 80029e0:	2319      	movs	r3, #25
 80029e2:	465a      	mov	r2, fp
 80029e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff fdbb 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 80029ee:	b130      	cbz	r0, 80029fe <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80029f0:	2001      	movs	r0, #1
 80029f2:	e09d      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f8:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
 80029fc:	e098      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029fe:	2322      	movs	r3, #34	; 0x22
 8002a00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a10:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a12:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a16:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a18:	9701      	str	r7, [sp, #4]
 8002a1a:	9500      	str	r5, [sp, #0]
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	4642      	mov	r2, r8
 8002a20:	4631      	mov	r1, r6
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fe0a 	bl	800263c <I2C_RequestMemoryRead>
 8002a28:	b970      	cbnz	r0, 8002a48 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2bff      	cmp	r3, #255	; 0xff
 8002a30:	d90f      	bls.n	8002a52 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_I2C_Mem_Read+0x1ac>)
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a3e:	4631      	mov	r1, r6
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff fcb0 	bl	80023a6 <I2C_TransferConfig>
 8002a46:	e021      	b.n	8002a8c <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a4e:	4658      	mov	r0, fp
 8002a50:	e06e      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8002a52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a54:	b292      	uxth	r2, r2
 8002a56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a58:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_I2C_Mem_Read+0x1ac>)
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	4631      	mov	r1, r6
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fc9e 	bl	80023a6 <I2C_TransferConfig>
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8002a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7ff fc91 	bl	80023a6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d034      	beq.n	8002af6 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a8c:	9700      	str	r7, [sp, #0]
 8002a8e:	462b      	mov	r3, r5
 8002a90:	2200      	movs	r2, #0
 8002a92:	2104      	movs	r1, #4
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fd65 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d14d      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002aac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ab4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002abe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0de      	beq.n	8002a84 <HAL_I2C_Mem_Read+0xe8>
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d1dc      	bne.n	8002a84 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aca:	9700      	str	r7, [sp, #0]
 8002acc:	462b      	mov	r3, r5
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fd47 	bl	8002564 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	bb90      	cbnz	r0, 8002b3e <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d9c5      	bls.n	8002a6c <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aec:	4631      	mov	r1, r6
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff fc59 	bl	80023a6 <I2C_TransferConfig>
 8002af4:	e7c6      	b.n	8002a84 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	463a      	mov	r2, r7
 8002af8:	4629      	mov	r1, r5
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fdda 	bl	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b00:	b9f8      	cbnz	r0, 8002b42 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	2220      	movs	r2, #32
 8002b06:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b08:	6821      	ldr	r1, [r4, #0]
 8002b0a:	684b      	ldr	r3, [r1, #4]
 8002b0c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002b10:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002b14:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002b28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002b2c:	e000      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8002b2e:	2002      	movs	r0, #2
}
 8002b30:	b003      	add	sp, #12
 8002b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002b36:	2002      	movs	r0, #2
 8002b38:	e7fa      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e7f8      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7f6      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7f4      	b.n	8002b30 <HAL_I2C_Mem_Read+0x194>
 8002b46:	bf00      	nop
 8002b48:	80002400 	.word	0x80002400

08002b4c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d124      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d022      	beq.n	8002ba4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b64:	2324      	movs	r3, #36	; 0x24
 8002b66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6a:	6802      	ldr	r2, [r0, #0]
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b74:	6802      	ldr	r2, [r0, #0]
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b7e:	6802      	ldr	r2, [r0, #0]
 8002b80:	6813      	ldr	r3, [r2, #0]
 8002b82:	4319      	orrs	r1, r3
 8002b84:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b86:	6802      	ldr	r2, [r0, #0]
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	2320      	movs	r3, #32
 8002b92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002ba4:	2002      	movs	r0, #2
  }
}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d122      	bne.n	8002bf8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d020      	beq.n	8002bfc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	2324      	movs	r3, #36	; 0x24
 8002bc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	6802      	ldr	r2, [r0, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bd0:	6802      	ldr	r2, [r0, #0]
 8002bd2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bdc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	2320      	movs	r3, #32
 8002bea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002bfc:	2002      	movs	r0, #2
  }
}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_PWREx_GetVoltageRange+0x20>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c08:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002c0c:	d004      	beq.n	8002c18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c0e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002c12:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8002c16:	d100      	bne.n	8002c1a <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c18:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c1e:	e7fb      	b.n	8002c18 <HAL_PWREx_GetVoltageRange+0x18>
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d136      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d008      	beq.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c36:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c44:	2000      	movs	r0, #0
 8002c46:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c48:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c60:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2232      	movs	r2, #50	; 0x32
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c76:	e000      	b.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8002c78:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c7c:	6952      	ldr	r2, [r2, #20]
 8002c7e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c82:	d001      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f7      	bne.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c90:	d144      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8002c92:	2000      	movs	r0, #0
 8002c94:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c9a:	d008      	beq.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002caa:	2000      	movs	r0, #0
 8002cac:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d008      	beq.n	8002cce <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002cbe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8002cca:	2000      	movs	r0, #0
 8002ccc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002cd0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2232      	movs	r2, #50	; 0x32
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0c9b      	lsrs	r3, r3, #18
 8002cfa:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfc:	e000      	b.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8002cfe:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002d02:	6952      	ldr	r2, [r2, #20]
 8002d04:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d08:	d001      	beq.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0xea>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f7      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d16:	d103      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
 8002d1a:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d1c:	2003      	movs	r0, #3
 8002d1e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d20:	2003      	movs	r0, #3
}
 8002d22:	4770      	bx	lr
 8002d24:	40007000 	.word	0x40007000
 8002d28:	2000005c 	.word	0x2000005c
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <RCC_GetSysClockFreqFromPLLSource>:
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d01d      	beq.n	8002d78 <RCC_GetSysClockFreqFromPLLSource+0x48>
  uint32_t msirange = 0U;
 8002d3c:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d029      	beq.n	8002d9e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d100      	bne.n	8002d50 <RCC_GetSysClockFreqFromPLLSource+0x20>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d4e:	4916      	ldr	r1, [pc, #88]	; (8002da8 <RCC_GetSysClockFreqFromPLLSource+0x78>)
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d52:	68d3      	ldr	r3, [r2, #12]
 8002d54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d58:	3301      	adds	r3, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d5a:	68d0      	ldr	r0, [r2, #12]
 8002d5c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002d60:	fb01 f000 	mul.w	r0, r1, r0
 8002d64:	fbb0 f0f3 	udiv	r0, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d68:	68d3      	ldr	r3, [r2, #12]
 8002d6a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8002d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d76:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f013 0f08 	tst.w	r3, #8
 8002d80:	d108      	bne.n	8002d94 <RCC_GetSysClockFreqFromPLLSource+0x64>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <RCC_GetSysClockFreqFromPLLSource+0x7c>)
 8002d8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d92:	e7d4      	b.n	8002d3e <RCC_GetSysClockFreqFromPLLSource+0xe>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d9c:	e7f6      	b.n	8002d8c <RCC_GetSysClockFreqFromPLLSource+0x5c>
  switch (pllsource)
 8002d9e:	4904      	ldr	r1, [pc, #16]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002da0:	e7d6      	b.n	8002d50 <RCC_GetSysClockFreqFromPLLSource+0x20>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	08009848 	.word	0x08009848
 8002db0:	00f42400 	.word	0x00f42400

08002db4 <RCC_SetFlashLatencyFromMSIRange>:
{
 8002db4:	b530      	push	{r4, r5, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002dc2:	d00a      	beq.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8002dc4:	f7ff ff1c 	bl	8002c00 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002dcc:	d016      	beq.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8002dce:	2c7f      	cmp	r4, #127	; 0x7f
 8002dd0:	d81e      	bhi.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8002dd2:	2c70      	cmp	r4, #112	; 0x70
 8002dd4:	d02b      	beq.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	e01b      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4d17      	ldr	r5, [pc, #92]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002ddc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	65ab      	str	r3, [r5, #88]	; 0x58
 8002de4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002dee:	f7ff ff07 	bl	8002c00 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	65ab      	str	r3, [r5, #88]	; 0x58
 8002dfa:	e7e5      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002dfc:	2c80      	cmp	r4, #128	; 0x80
 8002dfe:	d903      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 8002e00:	2ca0      	cmp	r4, #160	; 0xa0
 8002e02:	d903      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2102      	movs	r1, #2
 8002e06:	e004      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e08:	2100      	movs	r1, #0
 8002e0a:	e002      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	e000      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e10:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	f023 030f 	bic.w	r3, r3, #15
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d104      	bne.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 8002e28:	2000      	movs	r0, #0
}
 8002e2a:	b003      	add	sp, #12
 8002e2c:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e2e:	2101      	movs	r1, #1
 8002e30:	e7ef      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
 8002e34:	e7f9      	b.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40022000 	.word	0x40022000

08002e40 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e42:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4a:	f013 030c 	ands.w	r3, r3, #12
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x26>
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d006      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d01f      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	4602      	mov	r2, r0
 8002e60:	e010      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e62:	2a01      	cmp	r2, #1
 8002e64:	d1f6      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e66:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	f012 0f08 	tst.w	r2, #8
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e72:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002e76:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e80:	b143      	cbz	r3, 8002e94 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e82:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002e88:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e92:	e7f2      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002e94:	4610      	mov	r0, r2
 8002e96:	e7f5      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002e98:	4814      	ldr	r0, [pc, #80]	; (8002eec <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e7f2      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002e9e:	4814      	ldr	r0, [pc, #80]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	e7ef      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d016      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x9e>
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d100      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb6:	490b      	ldr	r1, [pc, #44]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb8:	68c8      	ldr	r0, [r1, #12]
 8002eba:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002ebe:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ec0:	68c8      	ldr	r0, [r1, #12]
 8002ec2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002ec6:	fb02 f000 	mul.w	r0, r2, r0
 8002eca:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ece:	68cb      	ldr	r3, [r1, #12]
 8002ed0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002ed8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002edc:	e7d4      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetSysClockFreq+0xac>)
 8002ee0:	e7e9      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x76>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08009848 	.word	0x08009848
 8002eec:	00f42400 	.word	0x00f42400
 8002ef0:	007a1200 	.word	0x007a1200

08002ef4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f000 832e 	beq.w	8003556 <HAL_RCC_OscConfig+0x662>
{
 8002efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efc:	b083      	sub	sp, #12
 8002efe:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f00:	4b96      	ldr	r3, [pc, #600]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f02:	689d      	ldr	r5, [r3, #8]
 8002f04:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f08:	68de      	ldr	r6, [r3, #12]
 8002f0a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	f013 0f10 	tst.w	r3, #16
 8002f14:	d05a      	beq.n	8002fcc <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f16:	b1e5      	cbz	r5, 8002f52 <HAL_RCC_OscConfig+0x5e>
 8002f18:	2d0c      	cmp	r5, #12
 8002f1a:	d018      	beq.n	8002f4e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f1c:	69a3      	ldr	r3, [r4, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80bb 	beq.w	800309a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002f24:	4a8d      	ldr	r2, [pc, #564]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f817 	bl	8001f60 <HAL_GetTick>
 8002f32:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f34:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f013 0f02 	tst.w	r3, #2
 8002f3c:	f040 809a 	bne.w	8003074 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f40:	f7ff f80e 	bl	8001f60 <HAL_GetTick>
 8002f44:	1bc0      	subs	r0, r0, r7
 8002f46:	2802      	cmp	r0, #2
 8002f48:	d9f4      	bls.n	8002f34 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	e30e      	b.n	800356c <HAL_RCC_OscConfig+0x678>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f4e:	2e01      	cmp	r6, #1
 8002f50:	d1e4      	bne.n	8002f1c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	4b82      	ldr	r3, [pc, #520]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f013 0f02 	tst.w	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_OscConfig+0x70>
 8002f5c:	69a3      	ldr	r3, [r4, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 82fb 	beq.w	800355a <HAL_RCC_OscConfig+0x666>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f64:	6a20      	ldr	r0, [r4, #32]
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f013 0f08 	tst.w	r3, #8
 8002f6e:	d05b      	beq.n	8003028 <HAL_RCC_OscConfig+0x134>
 8002f70:	4b7a      	ldr	r3, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	d85c      	bhi.n	8003036 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f7c:	4b77      	ldr	r3, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	f042 0208 	orr.w	r2, r2, #8
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f8c:	6a21      	ldr	r1, [r4, #32]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f98:	69e1      	ldr	r1, [r4, #28]
 8002f9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f9e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa0:	2d00      	cmp	r5, #0
 8002fa2:	d060      	beq.n	8003066 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa4:	f7ff ff4c 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fb0:	4a6b      	ldr	r2, [pc, #428]	; (8003160 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	40d8      	lsrs	r0, r3
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f7fe ff89 	bl	8001ed8 <HAL_InitTick>
        if(status != HAL_OK)
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	f040 82d0 	bne.w	800356c <HAL_RCC_OscConfig+0x678>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f013 0f01 	tst.w	r3, #1
 8002fd2:	f000 8081 	beq.w	80030d8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fd6:	2d08      	cmp	r5, #8
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1d2>
 8002fda:	2d0c      	cmp	r5, #12
 8002fdc:	d071      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	f000 8097 	beq.w	8003116 <HAL_RCC_OscConfig+0x222>
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	f000 8099 	beq.w	8003122 <HAL_RCC_OscConfig+0x22e>
 8002ff0:	4b5a      	ldr	r3, [pc, #360]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003000:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8099 	beq.w	800313c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800300a:	f7fe ffa9 	bl	8001f60 <HAL_GetTick>
 800300e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003010:	4b52      	ldr	r3, [pc, #328]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003018:	d15e      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301a:	f7fe ffa1 	bl	8001f60 <HAL_GetTick>
 800301e:	1bc0      	subs	r0, r0, r7
 8003020:	2864      	cmp	r0, #100	; 0x64
 8003022:	d9f5      	bls.n	8003010 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003024:	2003      	movs	r0, #3
 8003026:	e2a1      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x268>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	e7a0      	b.n	8002f78 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003036:	f7ff febd 	bl	8002db4 <RCC_SetFlashLatencyFromMSIRange>
 800303a:	2800      	cmp	r0, #0
 800303c:	f040 828f 	bne.w	800355e <HAL_RCC_OscConfig+0x66a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	f042 0208 	orr.w	r2, r2, #8
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003050:	6a21      	ldr	r1, [r4, #32]
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800305c:	69e1      	ldr	r1, [r4, #28]
 800305e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e79e      	b.n	8002fa4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003066:	6a20      	ldr	r0, [r4, #32]
 8003068:	f7ff fea4 	bl	8002db4 <RCC_SetFlashLatencyFromMSIRange>
 800306c:	2800      	cmp	r0, #0
 800306e:	d099      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
 8003072:	e27b      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f042 0208 	orr.w	r2, r2, #8
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003084:	6a21      	ldr	r1, [r4, #32]
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003090:	69e1      	ldr	r1, [r4, #28]
 8003092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	e798      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800309a:	4a30      	ldr	r2, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x268>)
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff5c 	bl	8001f60 <HAL_GetTick>
 80030a8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCC_OscConfig+0x268>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f013 0f02 	tst.w	r3, #2
 80030b2:	d08b      	beq.n	8002fcc <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fe ff54 	bl	8001f60 <HAL_GetTick>
 80030b8:	1bc0      	subs	r0, r0, r7
 80030ba:	2802      	cmp	r0, #2
 80030bc:	d9f5      	bls.n	80030aa <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
 80030c0:	e254      	b.n	800356c <HAL_RCC_OscConfig+0x678>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030c2:	2e03      	cmp	r6, #3
 80030c4:	d18b      	bne.n	8002fde <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x268>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ce:	d003      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1e4>
 80030d0:	6863      	ldr	r3, [r4, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8245 	beq.w	8003562 <HAL_RCC_OscConfig+0x66e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f013 0f02 	tst.w	r3, #2
 80030de:	d058      	beq.n	8003192 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030e0:	2d04      	cmp	r5, #4
 80030e2:	d045      	beq.n	8003170 <HAL_RCC_OscConfig+0x27c>
 80030e4:	2d0c      	cmp	r5, #12
 80030e6:	d041      	beq.n	800316c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e8:	68e3      	ldr	r3, [r4, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d077      	beq.n	80031de <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x268>)
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030f8:	f7fe ff32 	bl	8001f60 <HAL_GetTick>
 80030fc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003106:	d161      	bne.n	80031cc <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe ff2a 	bl	8001f60 <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	2802      	cmp	r0, #2
 8003110:	d9f5      	bls.n	80030fe <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
 8003114:	e22a      	b.n	800356c <HAL_RCC_OscConfig+0x678>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e76f      	b.n	8003002 <HAL_RCC_OscConfig+0x10e>
 8003122:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003126:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e762      	b.n	8003002 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800313c:	f7fe ff10 	bl	8001f60 <HAL_GetTick>
 8003140:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800314a:	d0c5      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe ff08 	bl	8001f60 <HAL_GetTick>
 8003150:	1bc0      	subs	r0, r0, r7
 8003152:	2864      	cmp	r0, #100	; 0x64
 8003154:	d9f5      	bls.n	8003142 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e208      	b.n	800356c <HAL_RCC_OscConfig+0x678>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	08009830 	.word	0x08009830
 8003164:	2000005c 	.word	0x2000005c
 8003168:	20000064 	.word	0x20000064
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800316c:	2e02      	cmp	r6, #2
 800316e:	d1bb      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003170:	4ba4      	ldr	r3, [pc, #656]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003178:	d003      	beq.n	8003182 <HAL_RCC_OscConfig+0x28e>
 800317a:	68e3      	ldr	r3, [r4, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 81f2 	beq.w	8003566 <HAL_RCC_OscConfig+0x672>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4aa0      	ldr	r2, [pc, #640]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003184:	6853      	ldr	r3, [r2, #4]
 8003186:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800318a:	6921      	ldr	r1, [r4, #16]
 800318c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003190:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	f013 0f08 	tst.w	r3, #8
 8003198:	d04c      	beq.n	8003234 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	b39b      	cbz	r3, 8003206 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800319e:	4a99      	ldr	r2, [pc, #612]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80031a0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031ac:	f7fe fed8 	bl	8001f60 <HAL_GetTick>
 80031b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	f013 0f02 	tst.w	r3, #2
 80031bc:	d13a      	bne.n	8003234 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fecf 	bl	8001f60 <HAL_GetTick>
 80031c2:	1b80      	subs	r0, r0, r6
 80031c4:	2802      	cmp	r0, #2
 80031c6:	d9f4      	bls.n	80031b2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80031c8:	2003      	movs	r0, #3
 80031ca:	e1cf      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4a8d      	ldr	r2, [pc, #564]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80031ce:	6853      	ldr	r3, [r2, #4]
 80031d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031d4:	6921      	ldr	r1, [r4, #16]
 80031d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	e7d9      	b.n	8003192 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80031de:	4a89      	ldr	r2, [pc, #548]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031e8:	f7fe feba 	bl	8001f60 <HAL_GetTick>
 80031ec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80031f6:	d0cc      	beq.n	8003192 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe feb2 	bl	8001f60 <HAL_GetTick>
 80031fc:	1b80      	subs	r0, r0, r6
 80031fe:	2802      	cmp	r0, #2
 8003200:	d9f5      	bls.n	80031ee <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8003202:	2003      	movs	r0, #3
 8003204:	e1b2      	b.n	800356c <HAL_RCC_OscConfig+0x678>
      __HAL_RCC_LSI_DISABLE();
 8003206:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003208:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003214:	f7fe fea4 	bl	8001f60 <HAL_GetTick>
 8003218:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800321a:	4b7a      	ldr	r3, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	f013 0f02 	tst.w	r3, #2
 8003224:	d006      	beq.n	8003234 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fe9b 	bl	8001f60 <HAL_GetTick>
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	2802      	cmp	r0, #2
 800322e:	d9f4      	bls.n	800321a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8003230:	2003      	movs	r0, #3
 8003232:	e19b      	b.n	800356c <HAL_RCC_OscConfig+0x678>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	f013 0f04 	tst.w	r3, #4
 800323a:	d07a      	beq.n	8003332 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800323c:	4b71      	ldr	r3, [pc, #452]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003244:	d136      	bne.n	80032b4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003248:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800324a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800324e:	659a      	str	r2, [r3, #88]	; 0x58
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800325a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x514>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003264:	d028      	beq.n	80032b8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	68a3      	ldr	r3, [r4, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d039      	beq.n	80032e0 <HAL_RCC_OscConfig+0x3ec>
 800326c:	2b05      	cmp	r3, #5
 800326e:	d03f      	beq.n	80032f0 <HAL_RCC_OscConfig+0x3fc>
 8003270:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003272:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800327e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328a:	68a3      	ldr	r3, [r4, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03d      	beq.n	800330c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8003290:	f7fe fe66 	bl	8001f60 <HAL_GetTick>
 8003294:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f013 0f02 	tst.w	r3, #2
 80032a0:	d146      	bne.n	8003330 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe fe5d 	bl	8001f60 <HAL_GetTick>
 80032a6:	1bc0      	subs	r0, r0, r7
 80032a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032ac:	4298      	cmp	r0, r3
 80032ae:	d9f2      	bls.n	8003296 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
 80032b2:	e15b      	b.n	800356c <HAL_RCC_OscConfig+0x678>
    FlagStatus       pwrclkchanged = RESET;
 80032b4:	2600      	movs	r6, #0
 80032b6:	e7d1      	b.n	800325c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b8:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x514>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032c2:	f7fe fe4d 	bl	8001f60 <HAL_GetTick>
 80032c6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x514>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032d0:	d1c9      	bne.n	8003266 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe fe45 	bl	8001f60 <HAL_GetTick>
 80032d6:	1bc0      	subs	r0, r0, r7
 80032d8:	2802      	cmp	r0, #2
 80032da:	d9f5      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80032dc:	2003      	movs	r0, #3
 80032de:	e145      	b.n	800356c <HAL_RCC_OscConfig+0x678>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80032e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ee:	e7cc      	b.n	800328a <HAL_RCC_OscConfig+0x396>
 80032f0:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80032f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032f6:	f042 0204 	orr.w	r2, r2, #4
 80032fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80032fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800330a:	e7be      	b.n	800328a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800330c:	f7fe fe28 	bl	8001f60 <HAL_GetTick>
 8003310:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003312:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	f013 0f02 	tst.w	r3, #2
 800331c:	d008      	beq.n	8003330 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fe1f 	bl	8001f60 <HAL_GetTick>
 8003322:	1bc0      	subs	r0, r0, r7
 8003324:	f241 3388 	movw	r3, #5000	; 0x1388
 8003328:	4298      	cmp	r0, r3
 800332a:	d9f2      	bls.n	8003312 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800332c:	2003      	movs	r0, #3
 800332e:	e11d      	b.n	800356c <HAL_RCC_OscConfig+0x678>
    if(pwrclkchanged == SET)
 8003330:	b9e6      	cbnz	r6, 800336c <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	f013 0f20 	tst.w	r3, #32
 8003338:	d035      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800333a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800333c:	b1e3      	cbz	r3, 8003378 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800333e:	4a31      	ldr	r2, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003340:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800334c:	f7fe fe08 	bl	8001f60 <HAL_GetTick>
 8003350:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 8003354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003358:	f013 0f02 	tst.w	r3, #2
 800335c:	d123      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335e:	f7fe fdff 	bl	8001f60 <HAL_GetTick>
 8003362:	1b80      	subs	r0, r0, r6
 8003364:	2802      	cmp	r0, #2
 8003366:	d9f4      	bls.n	8003352 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003368:	2003      	movs	r0, #3
 800336a:	e0ff      	b.n	800356c <HAL_RCC_OscConfig+0x678>
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4a25      	ldr	r2, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 800336e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6593      	str	r3, [r2, #88]	; 0x58
 8003376:	e7dc      	b.n	8003332 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 800337a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003386:	f7fe fdeb 	bl	8001f60 <HAL_GetTick>
 800338a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 800338e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003392:	f013 0f02 	tst.w	r3, #2
 8003396:	d006      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003398:	f7fe fde2 	bl	8001f60 <HAL_GetTick>
 800339c:	1b80      	subs	r0, r0, r6
 800339e:	2802      	cmp	r0, #2
 80033a0:	d9f4      	bls.n	800338c <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80033a2:	2003      	movs	r0, #3
 80033a4:	e0e2      	b.n	800356c <HAL_RCC_OscConfig+0x678>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80de 	beq.w	800356a <HAL_RCC_OscConfig+0x676>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d02c      	beq.n	800340c <HAL_RCC_OscConfig+0x518>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b2:	2d0c      	cmp	r5, #12
 80033b4:	f000 80e0 	beq.w	8003578 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80033c0:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 80033c8:	d104      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4e0>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80033cc:	68d3      	ldr	r3, [r2, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80033d6:	68d3      	ldr	r3, [r2, #12]
 80033d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80033e2:	f7fe fdbd 	bl	8001f60 <HAL_GetTick>
 80033e6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x510>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033f0:	f000 80af 	beq.w	8003552 <HAL_RCC_OscConfig+0x65e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe fdb4 	bl	8001f60 <HAL_GetTick>
 80033f8:	1b00      	subs	r0, r0, r4
 80033fa:	2802      	cmp	r0, #2
 80033fc:	d9f4      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 80033fe:	2003      	movs	r0, #3
 8003400:	e0b4      	b.n	800356c <HAL_RCC_OscConfig+0x678>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
      pll_config = RCC->PLLCFGR;
 800340c:	4b5b      	ldr	r3, [pc, #364]	; (800357c <HAL_RCC_OscConfig+0x688>)
 800340e:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	f003 0103 	and.w	r1, r3, #3
 8003414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003416:	4291      	cmp	r1, r2
 8003418:	d00f      	beq.n	800343a <HAL_RCC_OscConfig+0x546>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341a:	2d0c      	cmp	r5, #12
 800341c:	f000 80a8 	beq.w	8003570 <HAL_RCC_OscConfig+0x67c>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003420:	4b56      	ldr	r3, [pc, #344]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003428:	f040 80a4 	bne.w	8003574 <HAL_RCC_OscConfig+0x680>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_OscConfig+0x688>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003434:	d02b      	beq.n	800348e <HAL_RCC_OscConfig+0x59a>
            return HAL_ERROR;
 8003436:	2001      	movs	r0, #1
 8003438:	e098      	b.n	800356c <HAL_RCC_OscConfig+0x678>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800343e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003440:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003446:	d1e8      	bne.n	800341a <HAL_RCC_OscConfig+0x526>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003448:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800344c:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003452:	d1e2      	bne.n	800341a <HAL_RCC_OscConfig+0x526>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003454:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003458:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800345e:	d1dc      	bne.n	800341a <HAL_RCC_OscConfig+0x526>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003460:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003464:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800346a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800346e:	d1d4      	bne.n	800341a <HAL_RCC_OscConfig+0x526>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003470:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003474:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800347e:	d1cc      	bne.n	800341a <HAL_RCC_OscConfig+0x526>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003480:	4b3e      	ldr	r3, [pc, #248]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003488:	d049      	beq.n	800351e <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 800348a:	2000      	movs	r0, #0
 800348c:	e06e      	b.n	800356c <HAL_RCC_OscConfig+0x678>
            __HAL_RCC_PLL_DISABLE();
 800348e:	4a3b      	ldr	r2, [pc, #236]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003496:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003498:	f7fe fd62 	bl	8001f60 <HAL_GetTick>
 800349c:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_OscConfig+0x688>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034a6:	d006      	beq.n	80034b6 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fd5a 	bl	8001f60 <HAL_GetTick>
 80034ac:	1b40      	subs	r0, r0, r5
 80034ae:	2802      	cmp	r0, #2
 80034b0:	d9f5      	bls.n	800349e <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 80034b2:	2003      	movs	r0, #3
 80034b4:	e05a      	b.n	800356c <HAL_RCC_OscConfig+0x678>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_RCC_OscConfig+0x688>)
 80034b8:	68d3      	ldr	r3, [r2, #12]
 80034ba:	4931      	ldr	r1, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x68c>)
 80034bc:	4019      	ands	r1, r3
 80034be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034c2:	3801      	subs	r0, #1
 80034c4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80034c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80034ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034d0:	0840      	lsrs	r0, r0, #1
 80034d2:	3801      	subs	r0, #1
 80034d4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80034d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034da:	0840      	lsrs	r0, r0, #1
 80034dc:	3801      	subs	r0, #1
 80034de:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80034e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80034e8:	430b      	orrs	r3, r1
 80034ea:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f4:	68d3      	ldr	r3, [r2, #12]
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fa:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80034fc:	f7fe fd30 	bl	8001f60 <HAL_GetTick>
 8003500:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x626>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe fd28 	bl	8001f60 <HAL_GetTick>
 8003510:	1b00      	subs	r0, r0, r4
 8003512:	2802      	cmp	r0, #2
 8003514:	d9f5      	bls.n	8003502 <HAL_RCC_OscConfig+0x60e>
                return HAL_TIMEOUT;
 8003516:	2003      	movs	r0, #3
 8003518:	e028      	b.n	800356c <HAL_RCC_OscConfig+0x678>
  return HAL_OK;
 800351a:	2000      	movs	r0, #0
 800351c:	e026      	b.n	800356c <HAL_RCC_OscConfig+0x678>
          __HAL_RCC_PLL_ENABLE();
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003526:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800352e:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003530:	f7fe fd16 	bl	8001f60 <HAL_GetTick>
 8003534:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_RCC_OscConfig+0x688>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x65a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fd0e 	bl	8001f60 <HAL_GetTick>
 8003544:	1b03      	subs	r3, r0, r4
 8003546:	2b02      	cmp	r3, #2
 8003548:	d9f5      	bls.n	8003536 <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 800354a:	2003      	movs	r0, #3
 800354c:	e00e      	b.n	800356c <HAL_RCC_OscConfig+0x678>
  return HAL_OK;
 800354e:	2000      	movs	r0, #0
 8003550:	e00c      	b.n	800356c <HAL_RCC_OscConfig+0x678>
 8003552:	2000      	movs	r0, #0
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x678>
    return HAL_ERROR;
 8003556:	2001      	movs	r0, #1
}
 8003558:	4770      	bx	lr
        return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	e006      	b.n	800356c <HAL_RCC_OscConfig+0x678>
            return HAL_ERROR;
 800355e:	2001      	movs	r0, #1
 8003560:	e004      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        return HAL_ERROR;
 8003562:	2001      	movs	r0, #1
 8003564:	e002      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x678>
  return HAL_OK;
 800356a:	2000      	movs	r0, #0
}
 800356c:	b003      	add	sp, #12
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003570:	2001      	movs	r0, #1
 8003572:	e7fb      	b.n	800356c <HAL_RCC_OscConfig+0x678>
            return HAL_ERROR;
 8003574:	2001      	movs	r0, #1
 8003576:	e7f9      	b.n	800356c <HAL_RCC_OscConfig+0x678>
        return HAL_ERROR;
 8003578:	2001      	movs	r0, #1
 800357a:	e7f7      	b.n	800356c <HAL_RCC_OscConfig+0x678>
 800357c:	40021000 	.word	0x40021000
 8003580:	019d800c 	.word	0x019d800c

08003584 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003584:	2800      	cmp	r0, #0
 8003586:	f000 80dc 	beq.w	8003742 <HAL_RCC_ClockConfig+0x1be>
{
 800358a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358c:	460c      	mov	r4, r1
 800358e:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	428b      	cmp	r3, r1
 800359a:	d20b      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359c:	4a6d      	ldr	r2, [pc, #436]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f023 030f 	bic.w	r3, r3, #15
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	428b      	cmp	r3, r1
 80035b0:	f040 80c9 	bne.w	8003746 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b4:	682e      	ldr	r6, [r5, #0]
 80035b6:	f016 0601 	ands.w	r6, r6, #1
 80035ba:	d075      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x124>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035bc:	686b      	ldr	r3, [r5, #4]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d00d      	beq.n	80035de <HAL_RCC_ClockConfig+0x5a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d035      	beq.n	8003632 <HAL_RCC_ClockConfig+0xae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d161      	bne.n	800368e <HAL_RCC_ClockConfig+0x10a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f013 0f02 	tst.w	r3, #2
 80035d8:	d131      	bne.n	800363e <HAL_RCC_ClockConfig+0xba>
          return HAL_ERROR;
 80035da:	2001      	movs	r0, #1
 80035dc:	e0a8      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x68>
        return HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
 80035ea:	e0a1      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035ec:	f7ff fba0 	bl	8002d30 <RCC_GetSysClockFreqFromPLLSource>
 80035f0:	4b5a      	ldr	r3, [pc, #360]	; (800375c <HAL_RCC_ClockConfig+0x1d8>)
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d952      	bls.n	800369c <HAL_RCC_ClockConfig+0x118>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035f6:	4b58      	ldr	r3, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80035fe:	d108      	bne.n	8003612 <HAL_RCC_ClockConfig+0x8e>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003600:	4a55      	ldr	r2, [pc, #340]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003602:	6893      	ldr	r3, [r2, #8]
 8003604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800360e:	2680      	movs	r6, #128	; 0x80
 8003610:	e022      	b.n	8003658 <HAL_RCC_ClockConfig+0xd4>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003612:	682e      	ldr	r6, [r5, #0]
 8003614:	f016 0602 	ands.w	r6, r6, #2
 8003618:	d01e      	beq.n	8003658 <HAL_RCC_ClockConfig+0xd4>
 800361a:	68ab      	ldr	r3, [r5, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d13f      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x11c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003620:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003622:	6893      	ldr	r3, [r2, #8]
 8003624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800362e:	2680      	movs	r6, #128	; 0x80
 8003630:	e012      	b.n	8003658 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800363a:	f000 8086 	beq.w	800374a <HAL_RCC_ClockConfig+0x1c6>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800363e:	f7ff fbff 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_ClockConfig+0x1d8>)
 8003644:	4298      	cmp	r0, r3
 8003646:	d92d      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x120>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003648:	4a43      	ldr	r2, [pc, #268]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 800364a:	6893      	ldr	r3, [r2, #8]
 800364c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003656:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003658:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 800365a:	6893      	ldr	r3, [r2, #8]
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	6869      	ldr	r1, [r5, #4]
 8003662:	430b      	orrs	r3, r1
 8003664:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003666:	f7fe fc7b 	bl	8001f60 <HAL_GetTick>
 800366a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366c:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	686a      	ldr	r2, [r5, #4]
 8003676:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x124>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fe fc70 	bl	8001f60 <HAL_GetTick>
 8003680:	1bc0      	subs	r0, r0, r7
 8003682:	f241 3388 	movw	r3, #5000	; 0x1388
 8003686:	4298      	cmp	r0, r3
 8003688:	d9f0      	bls.n	800366c <HAL_RCC_ClockConfig+0xe8>
        return HAL_TIMEOUT;
 800368a:	2003      	movs	r0, #3
 800368c:	e050      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368e:	4b32      	ldr	r3, [pc, #200]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003696:	d1d2      	bne.n	800363e <HAL_RCC_ClockConfig+0xba>
          return HAL_ERROR;
 8003698:	2001      	movs	r0, #1
 800369a:	e049      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800369c:	2600      	movs	r6, #0
 800369e:	e7db      	b.n	8003658 <HAL_RCC_ClockConfig+0xd4>
 80036a0:	2600      	movs	r6, #0
 80036a2:	e7d9      	b.n	8003658 <HAL_RCC_ClockConfig+0xd4>
 80036a4:	2600      	movs	r6, #0
 80036a6:	e7d7      	b.n	8003658 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	f013 0f02 	tst.w	r3, #2
 80036ae:	d040      	beq.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 80036b2:	6893      	ldr	r3, [r2, #8]
 80036b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b8:	68a9      	ldr	r1, [r5, #8]
 80036ba:	430b      	orrs	r3, r1
 80036bc:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d90a      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	f023 030f 	bic.w	r3, r3, #15
 80036d2:	4323      	orrs	r3, r4
 80036d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d136      	bne.n	800374e <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	f013 0f04 	tst.w	r3, #4
 80036e6:	d006      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x172>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 80036ea:	6893      	ldr	r3, [r2, #8]
 80036ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036f0:	68e9      	ldr	r1, [r5, #12]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	f013 0f08 	tst.w	r3, #8
 80036fc:	d007      	beq.n	800370e <HAL_RCC_ClockConfig+0x18a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003700:	6893      	ldr	r3, [r2, #8]
 8003702:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003706:	6929      	ldr	r1, [r5, #16]
 8003708:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800370c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800370e:	f7ff fb97 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800371a:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_RCC_ClockConfig+0x1dc>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	40d8      	lsrs	r0, r3
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_RCC_ClockConfig+0x1e0>)
 8003726:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_ClockConfig+0x1e4>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	f7fe fbd4 	bl	8001ed8 <HAL_InitTick>
}
 8003730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8003732:	2e80      	cmp	r6, #128	; 0x80
 8003734:	d1c3      	bne.n	80036be <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003738:	6893      	ldr	r3, [r2, #8]
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	6093      	str	r3, [r2, #8]
 8003740:	e7bd      	b.n	80036be <HAL_RCC_ClockConfig+0x13a>
    return HAL_ERROR;
 8003742:	2001      	movs	r0, #1
}
 8003744:	4770      	bx	lr
      return HAL_ERROR;
 8003746:	2001      	movs	r0, #1
 8003748:	e7f2      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
          return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
 800374c:	e7f0      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
      return HAL_ERROR;
 800374e:	2001      	movs	r0, #1
 8003750:	e7ee      	b.n	8003730 <HAL_RCC_ClockConfig+0x1ac>
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	04c4b400 	.word	0x04c4b400
 8003760:	08009830 	.word	0x08009830
 8003764:	2000005c 	.word	0x2000005c
 8003768:	20000064 	.word	0x20000064

0800376c <HAL_RCC_GetHCLKFreq>:
}
 800376c:	4b01      	ldr	r3, [pc, #4]	; (8003774 <HAL_RCC_GetHCLKFreq+0x8>)
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000005c 	.word	0x2000005c

08003778 <HAL_RCC_GetPCLK1Freq>:
{
 8003778:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800377a:	f7ff fff7 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	f003 031f 	and.w	r3, r3, #31
}
 800378e:	40d8      	lsrs	r0, r3
 8003790:	bd08      	pop	{r3, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	08009840 	.word	0x08009840

0800379c <HAL_RCC_GetPCLK2Freq>:
{
 800379c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800379e:	f7ff ffe5 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	f003 031f 	and.w	r3, r3, #31
}
 80037b2:	40d8      	lsrs	r0, r3
 80037b4:	bd08      	pop	{r3, pc}
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08009840 	.word	0x08009840

080037c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f013 0f03 	tst.w	r3, #3
 80037ce:	d00e      	beq.n	80037ee <RCCEx_PLLSAI2_Config+0x2e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	6802      	ldr	r2, [r0, #0]
 80037da:	4293      	cmp	r3, r2
 80037dc:	d002      	beq.n	80037e4 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037de:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80037e0:	4628      	mov	r0, r5
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80037e4:	2a00      	cmp	r2, #0
 80037e6:	f000 8095 	beq.w	8003914 <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2500      	movs	r5, #0
 80037ec:	e009      	b.n	8003802 <RCCEx_PLLSAI2_Config+0x42>
    switch(PllSai2->PLLSAI2Source)
 80037ee:	6803      	ldr	r3, [r0, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d054      	beq.n	800389e <RCCEx_PLLSAI2_Config+0xde>
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d059      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0xec>
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d043      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0xc4>
 80037fc:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80037fe:	2d00      	cmp	r5, #0
 8003800:	d1ee      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8003802:	4a45      	ldr	r2, [pc, #276]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003804:	6813      	ldr	r3, [r2, #0]
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800380c:	f7fe fba8 	bl	8001f60 <HAL_GetTick>
 8003810:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800381a:	d005      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800381c:	f7fe fba0 	bl	8001f60 <HAL_GetTick>
 8003820:	1b83      	subs	r3, r0, r6
 8003822:	2b02      	cmp	r3, #2
 8003824:	d9f5      	bls.n	8003812 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_TIMEOUT;
 8003826:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8003828:	2d00      	cmp	r5, #0
 800382a:	d1d9      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800382c:	2f00      	cmp	r7, #0
 800382e:	d14b      	bne.n	80038c8 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003830:	4839      	ldr	r0, [pc, #228]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003832:	6943      	ldr	r3, [r0, #20]
 8003834:	4a39      	ldr	r2, [pc, #228]	; (800391c <RCCEx_PLLSAI2_Config+0x15c>)
 8003836:	401a      	ands	r2, r3
 8003838:	68a1      	ldr	r1, [r4, #8]
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	06db      	lsls	r3, r3, #27
 800383e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003842:	6861      	ldr	r1, [r4, #4]
 8003844:	3901      	subs	r1, #1
 8003846:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800384a:	4313      	orrs	r3, r2
 800384c:	6143      	str	r3, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800384e:	4a32      	ldr	r2, [pc, #200]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003856:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003858:	f7fe fb82 	bl	8001f60 <HAL_GetTick>
 800385c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003866:	d105      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003868:	f7fe fb7a 	bl	8001f60 <HAL_GetTick>
 800386c:	1b83      	subs	r3, r0, r6
 800386e:	2b02      	cmp	r3, #2
 8003870:	d9f5      	bls.n	800385e <RCCEx_PLLSAI2_Config+0x9e>
          status = HAL_TIMEOUT;
 8003872:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8003874:	2d00      	cmp	r5, #0
 8003876:	d1b3      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003878:	4a27      	ldr	r2, [pc, #156]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 800387a:	6953      	ldr	r3, [r2, #20]
 800387c:	69a1      	ldr	r1, [r4, #24]
 800387e:	430b      	orrs	r3, r1
 8003880:	6153      	str	r3, [r2, #20]
 8003882:	e7ad      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	f012 0f02 	tst.w	r2, #2
 800388c:	d01a      	beq.n	80038c4 <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800388e:	4922      	ldr	r1, [pc, #136]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 8003890:	68ca      	ldr	r2, [r1, #12]
 8003892:	f022 0203 	bic.w	r2, r2, #3
 8003896:	4313      	orrs	r3, r2
 8003898:	60cb      	str	r3, [r1, #12]
 800389a:	2500      	movs	r5, #0
 800389c:	e7af      	b.n	80037fe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038a6:	d1f2      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xce>
        status = HAL_ERROR;
 80038a8:	2501      	movs	r5, #1
 80038aa:	e7a8      	b.n	80037fe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80038b4:	d1eb      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80038be:	d1e6      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_ERROR;
 80038c0:	2501      	movs	r5, #1
 80038c2:	e79c      	b.n	80037fe <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_ERROR;
 80038c4:	2501      	movs	r5, #1
 80038c6:	e79a      	b.n	80037fe <RCCEx_PLLSAI2_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 80038c8:	2f01      	cmp	r7, #1
 80038ca:	d011      	beq.n	80038f0 <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038cc:	4812      	ldr	r0, [pc, #72]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80038ce:	6943      	ldr	r3, [r0, #20]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <RCCEx_PLLSAI2_Config+0x160>)
 80038d2:	401a      	ands	r2, r3
 80038d4:	68a1      	ldr	r1, [r4, #8]
 80038d6:	6963      	ldr	r3, [r4, #20]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	065b      	lsls	r3, r3, #25
 80038de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038e2:	6861      	ldr	r1, [r4, #4]
 80038e4:	3901      	subs	r1, #1
 80038e6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80038ea:	4313      	orrs	r3, r2
 80038ec:	6143      	str	r3, [r0, #20]
 80038ee:	e7ae      	b.n	800384e <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f0:	4809      	ldr	r0, [pc, #36]	; (8003918 <RCCEx_PLLSAI2_Config+0x158>)
 80038f2:	6943      	ldr	r3, [r0, #20]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <RCCEx_PLLSAI2_Config+0x164>)
 80038f6:	401a      	ands	r2, r3
 80038f8:	68a1      	ldr	r1, [r4, #8]
 80038fa:	6923      	ldr	r3, [r4, #16]
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	055b      	lsls	r3, r3, #21
 8003902:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003906:	6861      	ldr	r1, [r4, #4]
 8003908:	3901      	subs	r1, #1
 800390a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800390e:	4313      	orrs	r3, r2
 8003910:	6143      	str	r3, [r0, #20]
 8003912:	e79c      	b.n	800384e <RCCEx_PLLSAI2_Config+0x8e>
      status = HAL_ERROR;
 8003914:	2501      	movs	r5, #1
 8003916:	e763      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x20>
 8003918:	40021000 	.word	0x40021000
 800391c:	07ff800f 	.word	0x07ff800f
 8003920:	f9ff800f 	.word	0xf9ff800f
 8003924:	ff9f800f 	.word	0xff9f800f

08003928 <RCCEx_PLLSAI1_Config>:
{
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	4604      	mov	r4, r0
 800392c:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800392e:	4b54      	ldr	r3, [pc, #336]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f013 0f03 	tst.w	r3, #3
 8003936:	d00e      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003938:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	6802      	ldr	r2, [r0, #0]
 8003942:	4293      	cmp	r3, r2
 8003944:	d002      	beq.n	800394c <RCCEx_PLLSAI1_Config+0x24>
      status = HAL_ERROR;
 8003946:	2501      	movs	r5, #1
}
 8003948:	4628      	mov	r0, r5
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800394c:	2a00      	cmp	r2, #0
 800394e:	f000 8095 	beq.w	8003a7c <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2500      	movs	r5, #0
 8003954:	e009      	b.n	800396a <RCCEx_PLLSAI1_Config+0x42>
    switch(PllSai1->PLLSAI1Source)
 8003956:	6803      	ldr	r3, [r0, #0]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d054      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0xde>
 800395c:	2b03      	cmp	r3, #3
 800395e:	d059      	beq.n	8003a14 <RCCEx_PLLSAI1_Config+0xec>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d043      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0xc4>
 8003964:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8003966:	2d00      	cmp	r5, #0
 8003968:	d1ee      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800396a:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003972:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003974:	f7fe faf4 	bl	8001f60 <HAL_GetTick>
 8003978:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397a:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003982:	d005      	beq.n	8003990 <RCCEx_PLLSAI1_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003984:	f7fe faec 	bl	8001f60 <HAL_GetTick>
 8003988:	1b83      	subs	r3, r0, r6
 800398a:	2b02      	cmp	r3, #2
 800398c:	d9f5      	bls.n	800397a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_TIMEOUT;
 800398e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8003990:	2d00      	cmp	r5, #0
 8003992:	d1d9      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8003994:	2f00      	cmp	r7, #0
 8003996:	d14b      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4839      	ldr	r0, [pc, #228]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 800399a:	6903      	ldr	r3, [r0, #16]
 800399c:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <RCCEx_PLLSAI1_Config+0x15c>)
 800399e:	401a      	ands	r2, r3
 80039a0:	68a1      	ldr	r1, [r4, #8]
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	06db      	lsls	r3, r3, #27
 80039a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80039aa:	6861      	ldr	r1, [r4, #4]
 80039ac:	3901      	subs	r1, #1
 80039ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80039b2:	4313      	orrs	r3, r2
 80039b4:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b6:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039c0:	f7fe face 	bl	8001f60 <HAL_GetTick>
 80039c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80039ce:	d105      	bne.n	80039dc <RCCEx_PLLSAI1_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d0:	f7fe fac6 	bl	8001f60 <HAL_GetTick>
 80039d4:	1b83      	subs	r3, r0, r6
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d9f5      	bls.n	80039c6 <RCCEx_PLLSAI1_Config+0x9e>
          status = HAL_TIMEOUT;
 80039da:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80039dc:	2d00      	cmp	r5, #0
 80039de:	d1b3      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e0:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 80039e2:	6913      	ldr	r3, [r2, #16]
 80039e4:	69a1      	ldr	r1, [r4, #24]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6113      	str	r3, [r2, #16]
 80039ea:	e7ad      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ec:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	f012 0f02 	tst.w	r2, #2
 80039f4:	d01a      	beq.n	8003a2c <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039f6:	4922      	ldr	r1, [pc, #136]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 80039f8:	68ca      	ldr	r2, [r1, #12]
 80039fa:	f022 0203 	bic.w	r2, r2, #3
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
 8003a02:	2500      	movs	r5, #0
 8003a04:	e7af      	b.n	8003966 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a0e:	d1f2      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xce>
        status = HAL_ERROR;
 8003a10:	2501      	movs	r5, #1
 8003a12:	e7a8      	b.n	8003966 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003a1c:	d1eb      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003a26:	d1e6      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_ERROR;
 8003a28:	2501      	movs	r5, #1
 8003a2a:	e79c      	b.n	8003966 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_ERROR;
 8003a2c:	2501      	movs	r5, #1
 8003a2e:	e79a      	b.n	8003966 <RCCEx_PLLSAI1_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a30:	2f01      	cmp	r7, #1
 8003a32:	d011      	beq.n	8003a58 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a34:	4812      	ldr	r0, [pc, #72]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003a36:	6903      	ldr	r3, [r0, #16]
 8003a38:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <RCCEx_PLLSAI1_Config+0x160>)
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	68a1      	ldr	r1, [r4, #8]
 8003a3e:	6963      	ldr	r3, [r4, #20]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	065b      	lsls	r3, r3, #25
 8003a46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a4a:	6861      	ldr	r1, [r4, #4]
 8003a4c:	3901      	subs	r1, #1
 8003a4e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003a52:	4313      	orrs	r3, r2
 8003a54:	6103      	str	r3, [r0, #16]
 8003a56:	e7ae      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a58:	4809      	ldr	r0, [pc, #36]	; (8003a80 <RCCEx_PLLSAI1_Config+0x158>)
 8003a5a:	6903      	ldr	r3, [r0, #16]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <RCCEx_PLLSAI1_Config+0x164>)
 8003a5e:	401a      	ands	r2, r3
 8003a60:	68a1      	ldr	r1, [r4, #8]
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	3b01      	subs	r3, #1
 8003a68:	055b      	lsls	r3, r3, #21
 8003a6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a6e:	6861      	ldr	r1, [r4, #4]
 8003a70:	3901      	subs	r1, #1
 8003a72:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003a76:	4313      	orrs	r3, r2
 8003a78:	6103      	str	r3, [r0, #16]
 8003a7a:	e79c      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0x8e>
      status = HAL_ERROR;
 8003a7c:	2501      	movs	r5, #1
 8003a7e:	e763      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x20>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	07ff800f 	.word	0x07ff800f
 8003a88:	f9ff800f 	.word	0xf9ff800f
 8003a8c:	ff9f800f 	.word	0xff9f800f

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a98:	6803      	ldr	r3, [r0, #0]
 8003a9a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a9e:	d034      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d01f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aa6:	d80b      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8003aa8:	b323      	cbz	r3, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d105      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	3020      	adds	r0, #32
 8003ab2:	f7ff fe85 	bl	80037c0 <RCCEx_PLLSAI2_Config>
 8003ab6:	4606      	mov	r6, r0
      break;
 8003ab8:	e021      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003aba:	2701      	movs	r7, #1
 8003abc:	463e      	mov	r6, r7
 8003abe:	e026      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003ac0:	2b60      	cmp	r3, #96	; 0x60
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ac8:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aca:	4a63      	ldr	r2, [pc, #396]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003acc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003ad0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003ad4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003adc:	2700      	movs	r7, #0
 8003ade:	e016      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ae0:	2701      	movs	r7, #1
 8003ae2:	463e      	mov	r6, r7
 8003ae4:	e013      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ae6:	4a5c      	ldr	r2, [pc, #368]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ae8:	68d3      	ldr	r3, [r2, #12]
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af0:	2600      	movs	r6, #0
 8003af2:	e7ea      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003af4:	2100      	movs	r1, #0
 8003af6:	3004      	adds	r0, #4
 8003af8:	f7ff ff16 	bl	8003928 <RCCEx_PLLSAI1_Config>
 8003afc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003afe:	2e00      	cmp	r6, #0
 8003b00:	d0e3      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003b02:	4637      	mov	r7, r6
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b06:	2600      	movs	r6, #0
 8003b08:	e7df      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b0a:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b0c:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b14:	d033      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1c:	d022      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b1e:	d80d      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003b20:	b333      	cbz	r3, 8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8003b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b26:	d106      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f104 0020 	add.w	r0, r4, #32
 8003b2e:	f7ff fe47 	bl	80037c0 <RCCEx_PLLSAI2_Config>
 8003b32:	4606      	mov	r6, r0
      break;
 8003b34:	e008      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b36:	2701      	movs	r7, #1
 8003b38:	463e      	mov	r6, r7
 8003b3a:	e020      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b40:	d002      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d10a      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(ret == HAL_OK)
 8003b48:	b9c6      	cbnz	r6, 8003b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b4a:	4a43      	ldr	r2, [pc, #268]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b4c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b54:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b5e:	2701      	movs	r7, #1
 8003b60:	463e      	mov	r6, r7
 8003b62:	e00c      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b64:	4a3c      	ldr	r2, [pc, #240]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b66:	68d3      	ldr	r3, [r2, #12]
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	60d3      	str	r3, [r2, #12]
      break;
 8003b6e:	e7eb      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b70:	2100      	movs	r1, #0
 8003b72:	1d20      	adds	r0, r4, #4
 8003b74:	f7ff fed8 	bl	8003928 <RCCEx_PLLSAI1_Config>
 8003b78:	4606      	mov	r6, r0
      break;
 8003b7a:	e7e5      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003b7c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b84:	d071      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b86:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b8e:	d14e      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b98:	659a      	str	r2, [r3, #88]	; 0x58
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ba4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003bb2:	f7fe f9d5 	bl	8001f60 <HAL_GetTick>
 8003bb6:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bc0:	d105      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fe f9cd 	bl	8001f60 <HAL_GetTick>
 8003bc6:	1b40      	subs	r0, r0, r5
 8003bc8:	2802      	cmp	r0, #2
 8003bca:	d9f5      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 8003bcc:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8003bce:	2e00      	cmp	r6, #0
 8003bd0:	d146      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bd8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bde:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d012      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003be8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003bf4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003bf8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003c00:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003c04:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c0c:	f013 0f01 	tst.w	r3, #1
 8003c10:	d110      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      if(ret == HAL_OK)
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	f040 8159 	bne.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x43a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c18:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003c26:	430b      	orrs	r3, r1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	e019      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    FlagStatus       pwrclkchanged = RESET;
 8003c2e:	f04f 0800 	mov.w	r8, #0
 8003c32:	e7b9      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 8003c34:	f7fe f994 	bl	8001f60 <HAL_GetTick>
 8003c38:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f013 0f02 	tst.w	r3, #2
 8003c44:	d1e5      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x182>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe f98b 	bl	8001f60 <HAL_GetTick>
 8003c4a:	1b40      	subs	r0, r0, r5
 8003c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c50:	4298      	cmp	r0, r3
 8003c52:	d9f2      	bls.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            ret = HAL_TIMEOUT;
 8003c54:	2603      	movs	r6, #3
 8003c56:	e7dc      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
      status = ret;
 8003c60:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8003c62:	f1b8 0f00 	cmp.w	r8, #0
 8003c66:	f040 8132 	bne.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	f013 0f01 	tst.w	r3, #1
 8003c70:	d008      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c72:	4ab6      	ldr	r2, [pc, #728]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003c74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	f013 0f02 	tst.w	r3, #2
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c8c:	4aaf      	ldr	r2, [pc, #700]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003c8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c92:	f023 030c 	bic.w	r3, r3, #12
 8003c96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f013 0f04 	tst.w	r3, #4
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca6:	4aa9      	ldr	r2, [pc, #676]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003ca8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cb0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f013 0f08 	tst.w	r3, #8
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cc0:	4aa2      	ldr	r2, [pc, #648]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003cc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	f013 0f10 	tst.w	r3, #16
 8003cd8:	d008      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cda:	4a9c      	ldr	r2, [pc, #624]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003cdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	f013 0f20 	tst.w	r3, #32
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf4:	4a95      	ldr	r2, [pc, #596]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003cf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cfa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cfe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003d00:	430b      	orrs	r3, r1
 8003d02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0e:	4a8f      	ldr	r2, [pc, #572]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d14:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003d18:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d26:	d008      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d28:	4a88      	ldr	r2, [pc, #544]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d2e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d32:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003d34:	430b      	orrs	r3, r1
 8003d36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d42:	4a82      	ldr	r2, [pc, #520]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d4c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5c:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d76:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d90:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003d92:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003daa:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003dac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003db0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003db4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003db6:	430b      	orrs	r3, r1
 8003db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	f000 808a 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x44a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dca:	f000 808b 	beq.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003dd4:	d01f      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	f000 808b 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003de0:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003de2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003df2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003df6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dfe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e04:	d07f      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x476>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0a:	f000 8082 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e12:	f000 8084 	beq.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x48e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003e1c:	d00f      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1e:	4a4b      	ldr	r2, [pc, #300]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003e20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e24:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003e28:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e36:	d07b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e3c:	d07d      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003e44:	d00e      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e46:	4a41      	ldr	r2, [pc, #260]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003e48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e4c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003e50:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003e54:	430b      	orrs	r3, r1
 8003e56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e62:	d075      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e6c:	4a37      	ldr	r2, [pc, #220]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003e6e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003e86:	d009      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e88:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003e8a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003e8e:	f023 0318 	bic.w	r3, r3, #24
 8003e92:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003ea6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003eaa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003eae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003eb8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ec0:	d04e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
}
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8003eca:	4637      	mov	r7, r6
 8003ecc:	e6c9      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003ed0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed8:	e6c7      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eda:	68d3      	ldr	r3, [r2, #12]
 8003edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee0:	60d3      	str	r3, [r2, #12]
 8003ee2:	e774      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x33e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	1d20      	adds	r0, r4, #4
 8003ee8:	f7ff fd1e 	bl	8003928 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f43f af6e 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x33e>
          status = ret;
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	e76b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003ef8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f04:	e77b      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f06:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003f08:	68d3      	ldr	r3, [r2, #12]
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e781      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003f14:	68d3      	ldr	r3, [r2, #12]
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	60d3      	str	r3, [r2, #12]
 8003f1c:	e77b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1e:	2101      	movs	r1, #1
 8003f20:	1d20      	adds	r0, r4, #4
 8003f22:	f7ff fd01 	bl	8003928 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f43f af75 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
        status = ret;
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	e772      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	68d3      	ldr	r3, [r2, #12]
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
 8003f38:	e781      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	1d20      	adds	r0, r4, #4
 8003f3e:	f7ff fcf3 	bl	8003928 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003f42:	2800      	cmp	r0, #0
 8003f44:	f43f af7b 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        status = ret;
 8003f48:	4607      	mov	r7, r0
 8003f4a:	e778      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003f4c:	40021000 	.word	0x40021000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f50:	2102      	movs	r1, #2
 8003f52:	1d20      	adds	r0, r4, #4
 8003f54:	f7ff fce8 	bl	8003928 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d083      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        status = ret;
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	e781      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	68d3      	ldr	r3, [r2, #12]
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	e7ab      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003f6a:	bf00      	nop

08003f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	6a04      	ldr	r4, [r0, #32]
 8003f72:	f024 0401 	bic.w	r4, r4, #1
 8003f76:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f78:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f82:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003f86:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f88:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f8a:	6203      	str	r3, [r0, #32]
}
 8003f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f92:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f94:	6a04      	ldr	r4, [r0, #32]
 8003f96:	f024 0410 	bic.w	r4, r4, #16
 8003f9a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f9e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa0:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fb2:	6203      	str	r3, [r0, #32]
}
 8003fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fba:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	6083      	str	r3, [r0, #8]
}
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003fcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d136      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fdc:	6802      	ldr	r2, [r0, #0]
 8003fde:	68d3      	ldr	r3, [r2, #12]
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	6803      	ldr	r3, [r0, #0]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_TIM_Base_Start_IT+0x84>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01c      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d019      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 8003ff4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d015      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 8003ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004000:	4293      	cmp	r3, r2
 8004002:	d011      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 8004004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004008:	4293      	cmp	r3, r2
 800400a:	d00d      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 800400c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
 8004014:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004018:	4293      	cmp	r3, r2
 800401a:	d005      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004024:	2000      	movs	r0, #0
 8004026:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <HAL_TIM_Base_Start_IT+0x88>)
 800402c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	2a06      	cmp	r2, #6
 8004030:	d00a      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x7c>
 8004032:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004036:	d009      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004040:	2000      	movs	r0, #0
 8004042:	4770      	bx	lr
    return HAL_ERROR;
 8004044:	2001      	movs	r0, #1
 8004046:	4770      	bx	lr
  return HAL_OK;
 8004048:	2000      	movs	r0, #0
 800404a:	4770      	bx	lr
 800404c:	2000      	movs	r0, #0
}
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	00010007 	.word	0x00010007

08004058 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_IC_CaptureCallback>:
}
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_TriggerCallback>:
}
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_IRQHandler>:
{
 8004060:	b510      	push	{r4, lr}
 8004062:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004064:	6803      	ldr	r3, [r0, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	f012 0f02 	tst.w	r2, #2
 800406c:	d011      	beq.n	8004092 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	f012 0f02 	tst.w	r2, #2
 8004074:	d00d      	beq.n	8004092 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004076:	f06f 0202 	mvn.w	r2, #2
 800407a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800407c:	2301      	movs	r3, #1
 800407e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f013 0f03 	tst.w	r3, #3
 8004088:	d079      	beq.n	800417e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800408a:	f7ff ffe6 	bl	800405a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	2300      	movs	r3, #0
 8004090:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	f012 0f04 	tst.w	r2, #4
 800409a:	d012      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	f012 0f04 	tst.w	r2, #4
 80040a2:	d00e      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a4:	f06f 0204 	mvn.w	r2, #4
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040aa:	2302      	movs	r3, #2
 80040ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80040b6:	d068      	beq.n	800418a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff ffce 	bl	800405a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	2300      	movs	r3, #0
 80040c0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	f012 0f08 	tst.w	r2, #8
 80040ca:	d012      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	f012 0f08 	tst.w	r2, #8
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040d4:	f06f 0208 	mvn.w	r2, #8
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040da:	2304      	movs	r3, #4
 80040dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f013 0f03 	tst.w	r3, #3
 80040e6:	d057      	beq.n	8004198 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff ffb6 	bl	800405a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	2300      	movs	r3, #0
 80040f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	f012 0f10 	tst.w	r2, #16
 80040fa:	d012      	beq.n	8004122 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	f012 0f10 	tst.w	r2, #16
 8004102:	d00e      	beq.n	8004122 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004104:	f06f 0210 	mvn.w	r2, #16
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410a:	2308      	movs	r3, #8
 800410c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004116:	d046      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff ff9e 	bl	800405a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	2300      	movs	r3, #0
 8004120:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	f012 0f01 	tst.w	r2, #1
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	f012 0f01 	tst.w	r2, #1
 8004132:	d13f      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	f012 0f80 	tst.w	r2, #128	; 0x80
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004144:	d13d      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800414e:	d003      	beq.n	8004158 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004156:	d13b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004168:	d139      	bne.n	80041de <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	f012 0f20 	tst.w	r2, #32
 8004172:	d003      	beq.n	800417c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	f012 0f20 	tst.w	r2, #32
 800417a:	d137      	bne.n	80041ec <HAL_TIM_IRQHandler+0x18c>
}
 800417c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	f7ff ff6b 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff ff6a 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
 8004188:	e781      	b.n	800408e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff ff64 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff ff63 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
 8004196:	e792      	b.n	80040be <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff ff5d 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff ff5c 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
 80041a4:	e7a3      	b.n	80040ee <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff ff56 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff ff55 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
 80041b2:	e7b4      	b.n	800411e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	f06f 0201 	mvn.w	r2, #1
 80041b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7fd f98a 	bl	80014d4 <HAL_TIM_PeriodElapsedCallback>
 80041c0:	e7b8      	b.n	8004134 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 f986 	bl	80044da <HAL_TIMEx_BreakCallback>
 80041ce:	e7ba      	b.n	8004146 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 f980 	bl	80044dc <HAL_TIMEx_Break2Callback>
 80041dc:	e7bc      	b.n	8004158 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7ff ff3a 	bl	800405e <HAL_TIM_TriggerCallback>
 80041ea:	e7be      	b.n	800416a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f970 	bl	80044d8 <HAL_TIMEx_CommutCallback>
}
 80041f8:	e7c0      	b.n	800417c <HAL_TIM_IRQHandler+0x11c>
	...

080041fc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80041fc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fe:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <TIM_Base_SetConfig+0xc4>)
 8004200:	4290      	cmp	r0, r2
 8004202:	d012      	beq.n	800422a <TIM_Base_SetConfig+0x2e>
 8004204:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004208:	d00f      	beq.n	800422a <TIM_Base_SetConfig+0x2e>
 800420a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800420e:	4290      	cmp	r0, r2
 8004210:	d00b      	beq.n	800422a <TIM_Base_SetConfig+0x2e>
 8004212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004216:	4290      	cmp	r0, r2
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0x2e>
 800421a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800421e:	4290      	cmp	r0, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0x2e>
 8004222:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004226:	4290      	cmp	r0, r2
 8004228:	d103      	bne.n	8004232 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800422e:	684a      	ldr	r2, [r1, #4]
 8004230:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004232:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <TIM_Base_SetConfig+0xc4>)
 8004234:	4290      	cmp	r0, r2
 8004236:	d01e      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 8004238:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800423c:	d01b      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 800423e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004242:	4290      	cmp	r0, r2
 8004244:	d017      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 8004246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800424a:	4290      	cmp	r0, r2
 800424c:	d013      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 800424e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004252:	4290      	cmp	r0, r2
 8004254:	d00f      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 8004256:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800425a:	4290      	cmp	r0, r2
 800425c:	d00b      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 800425e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004262:	4290      	cmp	r0, r2
 8004264:	d007      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 8004266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800426a:	4290      	cmp	r0, r2
 800426c:	d003      	beq.n	8004276 <TIM_Base_SetConfig+0x7a>
 800426e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004272:	4290      	cmp	r0, r2
 8004274:	d103      	bne.n	800427e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	68ca      	ldr	r2, [r1, #12]
 800427c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	694a      	ldr	r2, [r1, #20]
 8004284:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004286:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	688b      	ldr	r3, [r1, #8]
 800428a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800428c:	680b      	ldr	r3, [r1, #0]
 800428e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <TIM_Base_SetConfig+0xc4>)
 8004292:	4298      	cmp	r0, r3
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0xba>
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	4298      	cmp	r0, r3
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0xba>
 800429e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80042a2:	4298      	cmp	r0, r3
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0xba>
 80042a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042aa:	4298      	cmp	r0, r3
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0xba>
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	4298      	cmp	r0, r3
 80042b4:	d101      	bne.n	80042ba <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80042b6:	690b      	ldr	r3, [r1, #16]
 80042b8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80042ba:	2301      	movs	r3, #1
 80042bc:	6143      	str	r3, [r0, #20]
}
 80042be:	4770      	bx	lr
 80042c0:	40012c00 	.word	0x40012c00

080042c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80042c4:	b360      	cbz	r0, 8004320 <HAL_TIM_Base_Init+0x5c>
{
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042ce:	b313      	cbz	r3, 8004316 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	2302      	movs	r3, #2
 80042d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d6:	4621      	mov	r1, r4
 80042d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80042dc:	f7ff ff8e 	bl	80041fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80042ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80042f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80042f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004306:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800430a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800430e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004312:	2000      	movs	r0, #0
}
 8004314:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004316:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800431a:	f7fd fccd 	bl	8001cb8 <HAL_TIM_Base_MspInit>
 800431e:	e7d7      	b.n	80042d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004320:	2001      	movs	r0, #1
}
 8004322:	4770      	bx	lr

08004324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004324:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004326:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800432c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004330:	430a      	orrs	r2, r1
 8004332:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	6082      	str	r2, [r0, #8]
}
 8004338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004340:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d076      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xf6>
{
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800434c:	2301      	movs	r3, #1
 800434e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004352:	2302      	movs	r3, #2
 8004354:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004358:	6802      	ldr	r2, [r0, #0]
 800435a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <HAL_TIM_ConfigClockSource+0xfc>)
 800435e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004360:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004362:	680b      	ldr	r3, [r1, #0]
 8004364:	2b60      	cmp	r3, #96	; 0x60
 8004366:	d04c      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xc2>
 8004368:	d829      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x7e>
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d054      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xd8>
 800436e:	d90c      	bls.n	800438a <HAL_TIM_ConfigClockSource+0x4a>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d122      	bne.n	80043ba <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004374:	68ca      	ldr	r2, [r1, #12]
 8004376:	6849      	ldr	r1, [r1, #4]
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	f7ff fdf7 	bl	8003f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800437e:	2150      	movs	r1, #80	; 0x50
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	f7ff fe1a 	bl	8003fba <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2000      	movs	r0, #0
      break;
 8004388:	e005      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800438a:	2b20      	cmp	r3, #32
 800438c:	d00d      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x6a>
 800438e:	d909      	bls.n	80043a4 <HAL_TIM_ConfigClockSource+0x64>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d00a      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8004394:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004396:	2301      	movs	r3, #1
 8004398:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800439c:	2300      	movs	r3, #0
 800439e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80043a2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80043a4:	b10b      	cbz	r3, 80043aa <HAL_TIM_ConfigClockSource+0x6a>
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d105      	bne.n	80043b6 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043aa:	4619      	mov	r1, r3
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	f7ff fe04 	bl	8003fba <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2000      	movs	r0, #0
      break;
 80043b4:	e7ef      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
 80043b8:	e7ed      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
 80043ba:	2001      	movs	r0, #1
 80043bc:	e7eb      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c2:	d034      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xee>
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d10c      	bne.n	80043e4 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 80043ca:	68cb      	ldr	r3, [r1, #12]
 80043cc:	684a      	ldr	r2, [r1, #4]
 80043ce:	6889      	ldr	r1, [r1, #8]
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	f7ff ffa7 	bl	8004324 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	6893      	ldr	r3, [r2, #8]
 80043da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043de:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2000      	movs	r0, #0
      break;
 80043e2:	e7d8      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d124      	bne.n	8004432 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 80043e8:	68cb      	ldr	r3, [r1, #12]
 80043ea:	684a      	ldr	r2, [r1, #4]
 80043ec:	6889      	ldr	r1, [r1, #8]
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	f7ff ff98 	bl	8004324 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80043fc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2000      	movs	r0, #0
      break;
 8004400:	e7c9      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004402:	68ca      	ldr	r2, [r1, #12]
 8004404:	6849      	ldr	r1, [r1, #4]
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f7ff fdc3 	bl	8003f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	f7ff fdd3 	bl	8003fba <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2000      	movs	r0, #0
      break;
 8004416:	e7be      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004418:	68ca      	ldr	r2, [r1, #12]
 800441a:	6849      	ldr	r1, [r1, #4]
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	f7ff fda5 	bl	8003f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	f7ff fdc8 	bl	8003fba <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2000      	movs	r0, #0
      break;
 800442c:	e7b3      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800442e:	2000      	movs	r0, #0
 8004430:	e7b1      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004432:	2001      	movs	r0, #1
 8004434:	e7af      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8004436:	2002      	movs	r0, #2
}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	fffe0088 	.word	0xfffe0088

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004440:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d042      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8004448:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800444a:	2301      	movs	r3, #1
 800444c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800445a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800445c:	4d1d      	ldr	r5, [pc, #116]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800445e:	42aa      	cmp	r2, r5
 8004460:	d003      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8004462:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004466:	42aa      	cmp	r2, r5
 8004468:	d103      	bne.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800446a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800446e:	684d      	ldr	r5, [r1, #4]
 8004470:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004476:	680d      	ldr	r5, [r1, #0]
 8004478:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447c:	6803      	ldr	r3, [r0, #0]
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d016      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d013      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800448a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800449a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80044a2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80044aa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d104      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b6:	688a      	ldr	r2, [r1, #8]
 80044b8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ba:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	2301      	movs	r3, #1
 80044be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c2:	2300      	movs	r3, #0
 80044c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80044c8:	4618      	mov	r0, r3
}
 80044ca:	bc30      	pop	{r4, r5}
 80044cc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80044ce:	2002      	movs	r0, #2
}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	4770      	bx	lr

080044da <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044dc:	4770      	bx	lr
	...

080044e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80044e4:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e6:	6883      	ldr	r3, [r0, #8]
 80044e8:	6902      	ldr	r2, [r0, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	6942      	ldr	r2, [r0, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	69c2      	ldr	r2, [r0, #28]
 80044f2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	4a96      	ldr	r2, [pc, #600]	; (8004750 <UART_SetConfig+0x270>)
 80044f8:	4002      	ands	r2, r0
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fe:	6822      	ldr	r2, [r4, #0]
 8004500:	6853      	ldr	r3, [r2, #4]
 8004502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004506:	68e1      	ldr	r1, [r4, #12]
 8004508:	430b      	orrs	r3, r1
 800450a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	4b90      	ldr	r3, [pc, #576]	; (8004754 <UART_SetConfig+0x274>)
 8004512:	429a      	cmp	r2, r3
 8004514:	d001      	beq.n	800451a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004516:	6a23      	ldr	r3, [r4, #32]
 8004518:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451a:	6893      	ldr	r3, [r2, #8]
 800451c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004520:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004524:	430b      	orrs	r3, r1
 8004526:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800452c:	f023 030f 	bic.w	r3, r3, #15
 8004530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004532:	430b      	orrs	r3, r1
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	4a87      	ldr	r2, [pc, #540]	; (8004758 <UART_SetConfig+0x278>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d010      	beq.n	8004560 <UART_SetConfig+0x80>
 800453e:	4a87      	ldr	r2, [pc, #540]	; (800475c <UART_SetConfig+0x27c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d021      	beq.n	8004588 <UART_SetConfig+0xa8>
 8004544:	4a86      	ldr	r2, [pc, #536]	; (8004760 <UART_SetConfig+0x280>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d037      	beq.n	80045ba <UART_SetConfig+0xda>
 800454a:	4a86      	ldr	r2, [pc, #536]	; (8004764 <UART_SetConfig+0x284>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d05c      	beq.n	800460a <UART_SetConfig+0x12a>
 8004550:	4a85      	ldr	r2, [pc, #532]	; (8004768 <UART_SetConfig+0x288>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d06b      	beq.n	800462e <UART_SetConfig+0x14e>
 8004556:	4a7f      	ldr	r2, [pc, #508]	; (8004754 <UART_SetConfig+0x274>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d07d      	beq.n	8004658 <UART_SetConfig+0x178>
 800455c:	2210      	movs	r2, #16
 800455e:	e03a      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004560:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8004564:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	2a03      	cmp	r2, #3
 800456e:	d809      	bhi.n	8004584 <UART_SetConfig+0xa4>
 8004570:	e8df f002 	tbb	[pc, r2]
 8004574:	06870402 	.word	0x06870402
 8004578:	2201      	movs	r2, #1
 800457a:	e02c      	b.n	80045d6 <UART_SetConfig+0xf6>
 800457c:	2204      	movs	r2, #4
 800457e:	e02a      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004580:	2208      	movs	r2, #8
 8004582:	e028      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004584:	2210      	movs	r2, #16
 8004586:	e026      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004588:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800458c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004590:	f002 020c 	and.w	r2, r2, #12
 8004594:	2a0c      	cmp	r2, #12
 8004596:	d80e      	bhi.n	80045b6 <UART_SetConfig+0xd6>
 8004598:	e8df f002 	tbb	[pc, r2]
 800459c:	0d0d0d07 	.word	0x0d0d0d07
 80045a0:	0d0d0d09 	.word	0x0d0d0d09
 80045a4:	0d0d0d75 	.word	0x0d0d0d75
 80045a8:	0b          	.byte	0x0b
 80045a9:	00          	.byte	0x00
 80045aa:	2200      	movs	r2, #0
 80045ac:	e013      	b.n	80045d6 <UART_SetConfig+0xf6>
 80045ae:	2204      	movs	r2, #4
 80045b0:	e011      	b.n	80045d6 <UART_SetConfig+0xf6>
 80045b2:	2208      	movs	r2, #8
 80045b4:	e00f      	b.n	80045d6 <UART_SetConfig+0xf6>
 80045b6:	2210      	movs	r2, #16
 80045b8:	e00d      	b.n	80045d6 <UART_SetConfig+0xf6>
 80045ba:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80045be:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045c2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80045c6:	2a20      	cmp	r2, #32
 80045c8:	d05f      	beq.n	800468a <UART_SetConfig+0x1aa>
 80045ca:	d81a      	bhi.n	8004602 <UART_SetConfig+0x122>
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	d05e      	beq.n	800468e <UART_SetConfig+0x1ae>
 80045d0:	2a10      	cmp	r2, #16
 80045d2:	d15e      	bne.n	8004692 <UART_SetConfig+0x1b2>
 80045d4:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045d6:	495f      	ldr	r1, [pc, #380]	; (8004754 <UART_SetConfig+0x274>)
 80045d8:	428b      	cmp	r3, r1
 80045da:	d076      	beq.n	80046ca <UART_SetConfig+0x1ea>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045dc:	69e0      	ldr	r0, [r4, #28]
 80045de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045e2:	f000 80c9 	beq.w	8004778 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e6:	2a08      	cmp	r2, #8
 80045e8:	f200 8134 	bhi.w	8004854 <UART_SetConfig+0x374>
 80045ec:	e8df f012 	tbh	[pc, r2, lsl #1]
 80045f0:	011900f7 	.word	0x011900f7
 80045f4:	013200f5 	.word	0x013200f5
 80045f8:	0132011c 	.word	0x0132011c
 80045fc:	01320132 	.word	0x01320132
 8004600:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	2a30      	cmp	r2, #48	; 0x30
 8004604:	d147      	bne.n	8004696 <UART_SetConfig+0x1b6>
 8004606:	2208      	movs	r2, #8
 8004608:	e7e5      	b.n	80045d6 <UART_SetConfig+0xf6>
 800460a:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800460e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004612:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004616:	2a80      	cmp	r2, #128	; 0x80
 8004618:	d03f      	beq.n	800469a <UART_SetConfig+0x1ba>
 800461a:	d804      	bhi.n	8004626 <UART_SetConfig+0x146>
 800461c:	b3fa      	cbz	r2, 800469e <UART_SetConfig+0x1be>
 800461e:	2a40      	cmp	r2, #64	; 0x40
 8004620:	d13f      	bne.n	80046a2 <UART_SetConfig+0x1c2>
 8004622:	2204      	movs	r2, #4
 8004624:	e7d7      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004626:	2ac0      	cmp	r2, #192	; 0xc0
 8004628:	d13d      	bne.n	80046a6 <UART_SetConfig+0x1c6>
 800462a:	2208      	movs	r2, #8
 800462c:	e7d3      	b.n	80045d6 <UART_SetConfig+0xf6>
 800462e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8004632:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004636:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800463a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800463e:	d034      	beq.n	80046aa <UART_SetConfig+0x1ca>
 8004640:	d805      	bhi.n	800464e <UART_SetConfig+0x16e>
 8004642:	b3a2      	cbz	r2, 80046ae <UART_SetConfig+0x1ce>
 8004644:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004648:	d133      	bne.n	80046b2 <UART_SetConfig+0x1d2>
 800464a:	2204      	movs	r2, #4
 800464c:	e7c3      	b.n	80045d6 <UART_SetConfig+0xf6>
 800464e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004652:	d130      	bne.n	80046b6 <UART_SetConfig+0x1d6>
 8004654:	2208      	movs	r2, #8
 8004656:	e7be      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004658:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800465c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004660:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004664:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004668:	d027      	beq.n	80046ba <UART_SetConfig+0x1da>
 800466a:	d805      	bhi.n	8004678 <UART_SetConfig+0x198>
 800466c:	b33a      	cbz	r2, 80046be <UART_SetConfig+0x1de>
 800466e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004672:	d126      	bne.n	80046c2 <UART_SetConfig+0x1e2>
 8004674:	2204      	movs	r2, #4
 8004676:	e7ae      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004678:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800467c:	d123      	bne.n	80046c6 <UART_SetConfig+0x1e6>
 800467e:	2208      	movs	r2, #8
 8004680:	e7a9      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004682:	2202      	movs	r2, #2
 8004684:	e7a7      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004686:	2202      	movs	r2, #2
 8004688:	e7a5      	b.n	80045d6 <UART_SetConfig+0xf6>
 800468a:	2202      	movs	r2, #2
 800468c:	e7a3      	b.n	80045d6 <UART_SetConfig+0xf6>
 800468e:	2200      	movs	r2, #0
 8004690:	e7a1      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004692:	2210      	movs	r2, #16
 8004694:	e79f      	b.n	80045d6 <UART_SetConfig+0xf6>
 8004696:	2210      	movs	r2, #16
 8004698:	e79d      	b.n	80045d6 <UART_SetConfig+0xf6>
 800469a:	2202      	movs	r2, #2
 800469c:	e79b      	b.n	80045d6 <UART_SetConfig+0xf6>
 800469e:	2200      	movs	r2, #0
 80046a0:	e799      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046a2:	2210      	movs	r2, #16
 80046a4:	e797      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046a6:	2210      	movs	r2, #16
 80046a8:	e795      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046aa:	2202      	movs	r2, #2
 80046ac:	e793      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046ae:	2200      	movs	r2, #0
 80046b0:	e791      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046b2:	2210      	movs	r2, #16
 80046b4:	e78f      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046b6:	2210      	movs	r2, #16
 80046b8:	e78d      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046ba:	2202      	movs	r2, #2
 80046bc:	e78b      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046be:	2200      	movs	r2, #0
 80046c0:	e789      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046c2:	2210      	movs	r2, #16
 80046c4:	e787      	b.n	80045d6 <UART_SetConfig+0xf6>
 80046c6:	2210      	movs	r2, #16
 80046c8:	e785      	b.n	80045d6 <UART_SetConfig+0xf6>
    switch (clocksource)
 80046ca:	2a08      	cmp	r2, #8
 80046cc:	f200 80b2 	bhi.w	8004834 <UART_SetConfig+0x354>
 80046d0:	e8df f002 	tbb	[pc, r2]
 80046d4:	b03bb008 	.word	0xb03bb008
 80046d8:	b0b0b038 	.word	0xb0b0b038
 80046dc:	05          	.byte	0x05
 80046dd:	00          	.byte	0x00
 80046de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80046e2:	e004      	b.n	80046ee <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7ff f848 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046e8:	2800      	cmp	r0, #0
 80046ea:	f000 80a5 	beq.w	8004838 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <UART_SetConfig+0x28c>)
 80046f2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80046f6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046fa:	6865      	ldr	r5, [r4, #4]
 80046fc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004700:	4299      	cmp	r1, r3
 8004702:	f200 809b 	bhi.w	800483c <UART_SetConfig+0x35c>
 8004706:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800470a:	f200 8099 	bhi.w	8004840 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800470e:	2600      	movs	r6, #0
 8004710:	4633      	mov	r3, r6
 8004712:	4631      	mov	r1, r6
 8004714:	f7fc fad0 	bl	8000cb8 <__aeabi_uldivmod>
 8004718:	0209      	lsls	r1, r1, #8
 800471a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800471e:	0200      	lsls	r0, r0, #8
 8004720:	086b      	lsrs	r3, r5, #1
 8004722:	18c0      	adds	r0, r0, r3
 8004724:	462a      	mov	r2, r5
 8004726:	4633      	mov	r3, r6
 8004728:	f141 0100 	adc.w	r1, r1, #0
 800472c:	f7fc fac4 	bl	8000cb8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004730:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <UART_SetConfig+0x290>)
 8004736:	429a      	cmp	r2, r3
 8004738:	f200 8084 	bhi.w	8004844 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	60d8      	str	r0, [r3, #12]
 8004740:	4630      	mov	r0, r6
 8004742:	e065      	b.n	8004810 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8004744:	f7fe fb7c 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
        break;
 8004748:	e7ce      	b.n	80046e8 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800474a:	480a      	ldr	r0, [pc, #40]	; (8004774 <UART_SetConfig+0x294>)
 800474c:	e7cf      	b.n	80046ee <UART_SetConfig+0x20e>
 800474e:	bf00      	nop
 8004750:	cfff69f3 	.word	0xcfff69f3
 8004754:	40008000 	.word	0x40008000
 8004758:	40013800 	.word	0x40013800
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	08009878 	.word	0x08009878
 8004770:	000ffcff 	.word	0x000ffcff
 8004774:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8004778:	2a08      	cmp	r2, #8
 800477a:	d865      	bhi.n	8004848 <UART_SetConfig+0x368>
 800477c:	e8df f002 	tbb	[pc, r2]
 8004780:	64052707 	.word	0x64052707
 8004784:	6464642a 	.word	0x6464642a
 8004788:	0b          	.byte	0x0b
 8004789:	00          	.byte	0x00
 800478a:	4835      	ldr	r0, [pc, #212]	; (8004860 <UART_SetConfig+0x380>)
 800478c:	e003      	b.n	8004796 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800478e:	f7fe fff3 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004792:	2800      	cmp	r0, #0
 8004794:	d05a      	beq.n	800484c <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004796:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004798:	4b32      	ldr	r3, [pc, #200]	; (8004864 <UART_SetConfig+0x384>)
 800479a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800479e:	fbb0 f0f3 	udiv	r0, r0, r3
 80047a2:	6862      	ldr	r2, [r4, #4]
 80047a4:	0853      	lsrs	r3, r2, #1
 80047a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80047aa:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ae:	f1a0 0210 	sub.w	r2, r0, #16
 80047b2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d84a      	bhi.n	8004850 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ba:	b283      	uxth	r3, r0
 80047bc:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80047c4:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	60d8      	str	r0, [r3, #12]
 80047ca:	2000      	movs	r0, #0
 80047cc:	e020      	b.n	8004810 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ce:	f7fe ffe5 	bl	800379c <HAL_RCC_GetPCLK2Freq>
        break;
 80047d2:	e7de      	b.n	8004792 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 80047d4:	f7fe fb34 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
        break;
 80047d8:	e7db      	b.n	8004792 <UART_SetConfig+0x2b2>
    switch (clocksource)
 80047da:	4821      	ldr	r0, [pc, #132]	; (8004860 <UART_SetConfig+0x380>)
 80047dc:	e003      	b.n	80047e6 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047de:	f7fe ffcb 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d038      	beq.n	8004858 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <UART_SetConfig+0x384>)
 80047ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80047ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80047f8:	fbb0 f0f3 	udiv	r0, r0, r3
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fc:	f1a0 0210 	sub.w	r2, r0, #16
 8004800:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004804:	429a      	cmp	r2, r3
 8004806:	d829      	bhi.n	800485c <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	b280      	uxth	r0, r0
 800480c:	60d8      	str	r0, [r3, #12]
 800480e:	2000      	movs	r0, #0
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004816:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800481e:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8004820:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004822:	f7fe ffbb 	bl	800379c <HAL_RCC_GetPCLK2Freq>
        break;
 8004826:	e7dc      	b.n	80047e2 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8004828:	f7fe fb0a 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
        break;
 800482c:	e7d9      	b.n	80047e2 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800482e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004832:	e7d8      	b.n	80047e6 <UART_SetConfig+0x306>
    switch (clocksource)
 8004834:	2001      	movs	r0, #1
 8004836:	e7eb      	b.n	8004810 <UART_SetConfig+0x330>
 8004838:	2000      	movs	r0, #0
 800483a:	e7e9      	b.n	8004810 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800483c:	2001      	movs	r0, #1
 800483e:	e7e7      	b.n	8004810 <UART_SetConfig+0x330>
 8004840:	2001      	movs	r0, #1
 8004842:	e7e5      	b.n	8004810 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e7e3      	b.n	8004810 <UART_SetConfig+0x330>
    switch (clocksource)
 8004848:	2001      	movs	r0, #1
 800484a:	e7e1      	b.n	8004810 <UART_SetConfig+0x330>
 800484c:	2000      	movs	r0, #0
 800484e:	e7df      	b.n	8004810 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8004850:	2001      	movs	r0, #1
 8004852:	e7dd      	b.n	8004810 <UART_SetConfig+0x330>
    switch (clocksource)
 8004854:	2001      	movs	r0, #1
 8004856:	e7db      	b.n	8004810 <UART_SetConfig+0x330>
 8004858:	2000      	movs	r0, #0
 800485a:	e7d9      	b.n	8004810 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800485c:	2001      	movs	r0, #1
 800485e:	e7d7      	b.n	8004810 <UART_SetConfig+0x330>
 8004860:	00f42400 	.word	0x00f42400
 8004864:	08009878 	.word	0x08009878

08004868 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800486a:	f013 0f01 	tst.w	r3, #1
 800486e:	d006      	beq.n	800487e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004870:	6802      	ldr	r2, [r0, #0]
 8004872:	6853      	ldr	r3, [r2, #4]
 8004874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004878:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800487a:	430b      	orrs	r3, r1
 800487c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004880:	f013 0f02 	tst.w	r3, #2
 8004884:	d006      	beq.n	8004894 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004886:	6802      	ldr	r2, [r0, #0]
 8004888:	6853      	ldr	r3, [r2, #4]
 800488a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004890:	430b      	orrs	r3, r1
 8004892:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004894:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004896:	f013 0f04 	tst.w	r3, #4
 800489a:	d006      	beq.n	80048aa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	6853      	ldr	r3, [r2, #4]
 80048a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048ac:	f013 0f08 	tst.w	r3, #8
 80048b0:	d006      	beq.n	80048c0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b2:	6802      	ldr	r2, [r0, #0]
 80048b4:	6853      	ldr	r3, [r2, #4]
 80048b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ba:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80048bc:	430b      	orrs	r3, r1
 80048be:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048c2:	f013 0f10 	tst.w	r3, #16
 80048c6:	d006      	beq.n	80048d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c8:	6802      	ldr	r2, [r0, #0]
 80048ca:	6893      	ldr	r3, [r2, #8]
 80048cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048d8:	f013 0f20 	tst.w	r3, #32
 80048dc:	d006      	beq.n	80048ec <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048de:	6802      	ldr	r2, [r0, #0]
 80048e0:	6893      	ldr	r3, [r2, #8]
 80048e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f4:	6802      	ldr	r2, [r0, #0]
 80048f6:	6853      	ldr	r3, [r2, #4]
 80048f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80048fe:	430b      	orrs	r3, r1
 8004900:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004902:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004908:	d00b      	beq.n	8004922 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800490a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800490c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004910:	d006      	beq.n	8004920 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004912:	6802      	ldr	r2, [r0, #0]
 8004914:	6853      	ldr	r3, [r2, #4]
 8004916:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800491a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800491c:	430b      	orrs	r3, r1
 800491e:	6053      	str	r3, [r2, #4]
  }
}
 8004920:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800492a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800492c:	430b      	orrs	r3, r1
 800492e:	6053      	str	r3, [r2, #4]
 8004930:	e7eb      	b.n	800490a <UART_AdvFeatureConfig+0xa2>

08004932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004932:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004936:	4605      	mov	r5, r0
 8004938:	460f      	mov	r7, r1
 800493a:	4616      	mov	r6, r2
 800493c:	4699      	mov	r9, r3
 800493e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004942:	682c      	ldr	r4, [r5, #0]
 8004944:	69e4      	ldr	r4, [r4, #28]
 8004946:	ea37 0304 	bics.w	r3, r7, r4
 800494a:	bf0c      	ite	eq
 800494c:	f04f 0c01 	moveq.w	ip, #1
 8004950:	f04f 0c00 	movne.w	ip, #0
 8004954:	45b4      	cmp	ip, r6
 8004956:	d157      	bne.n	8004a08 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800495c:	d0f1      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fd faff 	bl	8001f60 <HAL_GetTick>
 8004962:	eba0 0009 	sub.w	r0, r0, r9
 8004966:	4540      	cmp	r0, r8
 8004968:	d82f      	bhi.n	80049ca <UART_WaitOnFlagUntilTimeout+0x98>
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	d02c      	beq.n	80049ca <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f012 0f04 	tst.w	r2, #4
 8004978:	d0e3      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004980:	d0df      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004986:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004988:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	e852 3f00 	ldrex	r3, [r2]
 800498e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	e842 3100 	strex	r1, r3, [r2]
 8004996:	2900      	cmp	r1, #0
 8004998:	d1f6      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f102 0308 	add.w	r3, r2, #8
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	3208      	adds	r2, #8
 80049aa:	e842 3100 	strex	r1, r3, [r2]
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d1f3      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 80049b2:	2320      	movs	r3, #32
 80049b4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80049b8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049bc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c0:	2300      	movs	r3, #0
 80049c2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 80049c6:	2003      	movs	r0, #3
 80049c8:	e01f      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049ca:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	e852 3f00 	ldrex	r3, [r2]
 80049d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	e842 3100 	strex	r1, r3, [r2]
 80049d8:	2900      	cmp	r1, #0
 80049da:	d1f6      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	f102 0308 	add.w	r3, r2, #8
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	3208      	adds	r2, #8
 80049ec:	e842 3100 	strex	r1, r3, [r2]
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d1f3      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80049f4:	2320      	movs	r3, #32
 80049f6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049fa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80049fe:	2300      	movs	r3, #0
 8004a00:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8004a04:	2003      	movs	r0, #3
 8004a06:	e000      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2000      	movs	r0, #0
}
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004a0e <HAL_UART_Transmit>:
{
 8004a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004a16:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d158      	bne.n	8004ad0 <HAL_UART_Transmit+0xc2>
 8004a1e:	4604      	mov	r4, r0
 8004a20:	460d      	mov	r5, r1
 8004a22:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004a24:	2900      	cmp	r1, #0
 8004a26:	d057      	beq.n	8004ad8 <HAL_UART_Transmit+0xca>
 8004a28:	2a00      	cmp	r2, #0
 8004a2a:	d057      	beq.n	8004adc <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8004a2c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d055      	beq.n	8004ae0 <HAL_UART_Transmit+0xd2>
 8004a34:	2301      	movs	r3, #1
 8004a36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a40:	2321      	movs	r3, #33	; 0x21
 8004a42:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8004a46:	f7fd fa8b 	bl	8001f60 <HAL_GetTick>
 8004a4a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004a4c:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a50:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68a3      	ldr	r3, [r4, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d005      	beq.n	8004a68 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8004a5c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004a60:	2300      	movs	r3, #0
 8004a62:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8004a66:	e014      	b.n	8004a92 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	b113      	cbz	r3, 8004a72 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8004a6c:	f04f 0800 	mov.w	r8, #0
 8004a70:	e7f6      	b.n	8004a60 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8004a72:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004a74:	2500      	movs	r5, #0
 8004a76:	e7f3      	b.n	8004a60 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a78:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004a84:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8004a88:	b292      	uxth	r2, r2
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a92:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	b173      	cbz	r3, 8004ab8 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	9600      	str	r6, [sp, #0]
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7ff ff45 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	b9e0      	cbnz	r0, 8004ae4 <HAL_UART_Transmit+0xd6>
      if (pdata8bits == NULL)
 8004aaa:	2d00      	cmp	r5, #0
 8004aac:	d0e4      	beq.n	8004a78 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ab6:	e7e5      	b.n	8004a84 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	9600      	str	r6, [sp, #0]
 8004aba:	463b      	mov	r3, r7
 8004abc:	2200      	movs	r2, #0
 8004abe:	2140      	movs	r1, #64	; 0x40
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff ff36 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	b978      	cbnz	r0, 8004ae8 <HAL_UART_Transmit+0xda>
    huart->gState = HAL_UART_STATE_READY;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8004ad0:	2002      	movs	r0, #2
}
 8004ad2:	b002      	add	sp, #8
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
 8004ada:	e7fa      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>
 8004adc:	2001      	movs	r0, #1
 8004ade:	e7f8      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8004ae0:	2002      	movs	r0, #2
 8004ae2:	e7f6      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	e7f4      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	e7f2      	b.n	8004ad2 <HAL_UART_Transmit+0xc4>

08004aec <UART_CheckIdleState>:
{
 8004aec:	b530      	push	{r4, r5, lr}
 8004aee:	b083      	sub	sp, #12
 8004af0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8004af8:	f7fd fa32 	bl	8001f60 <HAL_GetTick>
 8004afc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	f012 0f08 	tst.w	r2, #8
 8004b06:	d10f      	bne.n	8004b28 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f013 0f04 	tst.w	r3, #4
 8004b10:	d118      	bne.n	8004b44 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	2320      	movs	r3, #32
 8004b14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8004b20:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004b24:	b003      	add	sp, #12
 8004b26:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff fefb 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d0e3      	beq.n	8004b08 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004b40:	2003      	movs	r0, #3
 8004b42:	e7ef      	b.n	8004b24 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7ff feed 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d0da      	beq.n	8004b12 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	e7e1      	b.n	8004b24 <UART_CheckIdleState+0x38>

08004b60 <HAL_UART_Init>:
  if (huart == NULL)
 8004b60:	b378      	cbz	r0, 8004bc2 <HAL_UART_Init+0x62>
{
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004b6a:	b30b      	cbz	r3, 8004bb0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	2324      	movs	r3, #36	; 0x24
 8004b6e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7ff fcaf 	bl	80044e0 <UART_SetConfig>
 8004b82:	2801      	cmp	r0, #1
 8004b84:	d013      	beq.n	8004bae <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b88:	b9bb      	cbnz	r3, 8004bba <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	6853      	ldr	r3, [r2, #4]
 8004b8e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b92:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	6893      	ldr	r3, [r2, #8]
 8004b98:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b9c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff ff9f 	bl	8004aec <UART_CheckIdleState>
}
 8004bae:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004bb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8004bb4:	f7fd f89e 	bl	8001cf4 <HAL_UART_MspInit>
 8004bb8:	e7d8      	b.n	8004b6c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff fe54 	bl	8004868 <UART_AdvFeatureConfig>
 8004bc0:	e7e3      	b.n	8004b8a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004bc2:	2001      	movs	r0, #1
}
 8004bc4:	4770      	bx	lr
	...

08004bc8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004bca:	b92b      	cbnz	r3, 8004bd8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bd2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004bd6:	4770      	bx	lr
{
 8004bd8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bda:	6803      	ldr	r3, [r0, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004be2:	6899      	ldr	r1, [r3, #8]
 8004be4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004be6:	4d09      	ldr	r5, [pc, #36]	; (8004c0c <UARTEx_SetNbDataToProcess+0x44>)
 8004be8:	5c6b      	ldrb	r3, [r5, r1]
 8004bea:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bec:	4c08      	ldr	r4, [pc, #32]	; (8004c10 <UARTEx_SetNbDataToProcess+0x48>)
 8004bee:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bf0:	fb93 f3f1 	sdiv	r3, r3, r1
 8004bf4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bf8:	5cab      	ldrb	r3, [r5, r2]
 8004bfa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bfc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c02:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004c06:	bc30      	pop	{r4, r5}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	08009898 	.word	0x08009898
 8004c10:	08009890 	.word	0x08009890

08004c14 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004c14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d018      	beq.n	8004c4e <HAL_UARTEx_DisableFifoMode+0x3a>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004c22:	2324      	movs	r3, #36	; 0x24
 8004c24:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c28:	6803      	ldr	r3, [r0, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	f021 0101 	bic.w	r1, r1, #1
 8004c32:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c34:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c3c:	6801      	ldr	r1, [r0, #0]
 8004c3e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004c46:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004c4e:	2002      	movs	r0, #2
}
 8004c50:	4770      	bx	lr

08004c52 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004c52:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004c54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d01d      	beq.n	8004c98 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	2324      	movs	r3, #36	; 0x24
 8004c66:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c76:	6802      	ldr	r2, [r0, #0]
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004c7e:	4319      	orrs	r1, r3
 8004c80:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004c82:	f7ff ffa1 	bl	8004bc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004c90:	2000      	movs	r0, #0
 8004c92:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004c98:	2002      	movs	r0, #2
 8004c9a:	e7fc      	b.n	8004c96 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004c9c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004c9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004c9e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004cae:	2324      	movs	r3, #36	; 0x24
 8004cb0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb4:	6803      	ldr	r3, [r0, #0]
 8004cb6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cc0:	6802      	ldr	r2, [r0, #0]
 8004cc2:	6893      	ldr	r3, [r2, #8]
 8004cc4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8004cc8:	4319      	orrs	r1, r3
 8004cca:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004ccc:	f7ff ff7c 	bl	8004bc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004ce0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	e7fc      	b.n	8004ce0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08004ce8 <__errno>:
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <__errno+0x8>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000068 	.word	0x20000068

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	; (8004d2c <__libc_init_array+0x38>)
 8004cf8:	4c0d      	ldr	r4, [pc, #52]	; (8004d30 <__libc_init_array+0x3c>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	2600      	movs	r6, #0
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	4d0b      	ldr	r5, [pc, #44]	; (8004d34 <__libc_init_array+0x40>)
 8004d06:	4c0c      	ldr	r4, [pc, #48]	; (8004d38 <__libc_init_array+0x44>)
 8004d08:	f004 fc8e 	bl	8009628 <_init>
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	2600      	movs	r6, #0
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	08009d4c 	.word	0x08009d4c
 8004d30:	08009d4c 	.word	0x08009d4c
 8004d34:	08009d4c 	.word	0x08009d4c
 8004d38:	08009d50 	.word	0x08009d50

08004d3c <memcpy>:
 8004d3c:	440a      	add	r2, r1
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d44:	d100      	bne.n	8004d48 <memcpy+0xc>
 8004d46:	4770      	bx	lr
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d52:	4291      	cmp	r1, r2
 8004d54:	d1f9      	bne.n	8004d4a <memcpy+0xe>
 8004d56:	bd10      	pop	{r4, pc}

08004d58 <memset>:
 8004d58:	4402      	add	r2, r0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <__cvt>:
 8004d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	ec55 4b10 	vmov	r4, r5, d0
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	460e      	mov	r6, r1
 8004d74:	4619      	mov	r1, r3
 8004d76:	462b      	mov	r3, r5
 8004d78:	bfbb      	ittet	lt
 8004d7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d7e:	461d      	movlt	r5, r3
 8004d80:	2300      	movge	r3, #0
 8004d82:	232d      	movlt	r3, #45	; 0x2d
 8004d84:	700b      	strb	r3, [r1, #0]
 8004d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d8c:	4691      	mov	r9, r2
 8004d8e:	f023 0820 	bic.w	r8, r3, #32
 8004d92:	bfbc      	itt	lt
 8004d94:	4622      	movlt	r2, r4
 8004d96:	4614      	movlt	r4, r2
 8004d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d9c:	d005      	beq.n	8004daa <__cvt+0x42>
 8004d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004da2:	d100      	bne.n	8004da6 <__cvt+0x3e>
 8004da4:	3601      	adds	r6, #1
 8004da6:	2102      	movs	r1, #2
 8004da8:	e000      	b.n	8004dac <__cvt+0x44>
 8004daa:	2103      	movs	r1, #3
 8004dac:	ab03      	add	r3, sp, #12
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	ab02      	add	r3, sp, #8
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	ec45 4b10 	vmov	d0, r4, r5
 8004db8:	4653      	mov	r3, sl
 8004dba:	4632      	mov	r2, r6
 8004dbc:	f001 fdac 	bl	8006918 <_dtoa_r>
 8004dc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	d102      	bne.n	8004dce <__cvt+0x66>
 8004dc8:	f019 0f01 	tst.w	r9, #1
 8004dcc:	d022      	beq.n	8004e14 <__cvt+0xac>
 8004dce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dd2:	eb07 0906 	add.w	r9, r7, r6
 8004dd6:	d110      	bne.n	8004dfa <__cvt+0x92>
 8004dd8:	783b      	ldrb	r3, [r7, #0]
 8004dda:	2b30      	cmp	r3, #48	; 0x30
 8004ddc:	d10a      	bne.n	8004df4 <__cvt+0x8c>
 8004dde:	2200      	movs	r2, #0
 8004de0:	2300      	movs	r3, #0
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb fe87 	bl	8000af8 <__aeabi_dcmpeq>
 8004dea:	b918      	cbnz	r0, 8004df4 <__cvt+0x8c>
 8004dec:	f1c6 0601 	rsb	r6, r6, #1
 8004df0:	f8ca 6000 	str.w	r6, [sl]
 8004df4:	f8da 3000 	ldr.w	r3, [sl]
 8004df8:	4499      	add	r9, r3
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	f7fb fe79 	bl	8000af8 <__aeabi_dcmpeq>
 8004e06:	b108      	cbz	r0, 8004e0c <__cvt+0xa4>
 8004e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e0c:	2230      	movs	r2, #48	; 0x30
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	454b      	cmp	r3, r9
 8004e12:	d307      	bcc.n	8004e24 <__cvt+0xbc>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e18:	1bdb      	subs	r3, r3, r7
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	b004      	add	sp, #16
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	1c59      	adds	r1, r3, #1
 8004e26:	9103      	str	r1, [sp, #12]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e7f0      	b.n	8004e0e <__cvt+0xa6>

08004e2c <__exponent>:
 8004e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2900      	cmp	r1, #0
 8004e32:	bfb8      	it	lt
 8004e34:	4249      	neglt	r1, r1
 8004e36:	f803 2b02 	strb.w	r2, [r3], #2
 8004e3a:	bfb4      	ite	lt
 8004e3c:	222d      	movlt	r2, #45	; 0x2d
 8004e3e:	222b      	movge	r2, #43	; 0x2b
 8004e40:	2909      	cmp	r1, #9
 8004e42:	7042      	strb	r2, [r0, #1]
 8004e44:	dd2a      	ble.n	8004e9c <__exponent+0x70>
 8004e46:	f10d 0407 	add.w	r4, sp, #7
 8004e4a:	46a4      	mov	ip, r4
 8004e4c:	270a      	movs	r7, #10
 8004e4e:	46a6      	mov	lr, r4
 8004e50:	460a      	mov	r2, r1
 8004e52:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e56:	fb07 1516 	mls	r5, r7, r6, r1
 8004e5a:	3530      	adds	r5, #48	; 0x30
 8004e5c:	2a63      	cmp	r2, #99	; 0x63
 8004e5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004e62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e66:	4631      	mov	r1, r6
 8004e68:	dcf1      	bgt.n	8004e4e <__exponent+0x22>
 8004e6a:	3130      	adds	r1, #48	; 0x30
 8004e6c:	f1ae 0502 	sub.w	r5, lr, #2
 8004e70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e74:	1c44      	adds	r4, r0, #1
 8004e76:	4629      	mov	r1, r5
 8004e78:	4561      	cmp	r1, ip
 8004e7a:	d30a      	bcc.n	8004e92 <__exponent+0x66>
 8004e7c:	f10d 0209 	add.w	r2, sp, #9
 8004e80:	eba2 020e 	sub.w	r2, r2, lr
 8004e84:	4565      	cmp	r5, ip
 8004e86:	bf88      	it	hi
 8004e88:	2200      	movhi	r2, #0
 8004e8a:	4413      	add	r3, r2
 8004e8c:	1a18      	subs	r0, r3, r0
 8004e8e:	b003      	add	sp, #12
 8004e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e9a:	e7ed      	b.n	8004e78 <__exponent+0x4c>
 8004e9c:	2330      	movs	r3, #48	; 0x30
 8004e9e:	3130      	adds	r1, #48	; 0x30
 8004ea0:	7083      	strb	r3, [r0, #2]
 8004ea2:	70c1      	strb	r1, [r0, #3]
 8004ea4:	1d03      	adds	r3, r0, #4
 8004ea6:	e7f1      	b.n	8004e8c <__exponent+0x60>

08004ea8 <_printf_float>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	ed2d 8b02 	vpush	{d8}
 8004eb0:	b08d      	sub	sp, #52	; 0x34
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004eb8:	4616      	mov	r6, r2
 8004eba:	461f      	mov	r7, r3
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	f002 fe89 	bl	8007bd4 <_localeconv_r>
 8004ec2:	f8d0 a000 	ldr.w	sl, [r0]
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f7fb f99a 	bl	8000200 <strlen>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004edc:	3307      	adds	r3, #7
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	f103 0208 	add.w	r2, r3, #8
 8004ee6:	f8c8 2000 	str.w	r2, [r8]
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ef2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004efa:	9307      	str	r3, [sp, #28]
 8004efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f00:	ee08 0a10 	vmov	s16, r0
 8004f04:	4b9f      	ldr	r3, [pc, #636]	; (8005184 <_printf_float+0x2dc>)
 8004f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f0e:	f7fb fe25 	bl	8000b5c <__aeabi_dcmpun>
 8004f12:	bb88      	cbnz	r0, 8004f78 <_printf_float+0xd0>
 8004f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f18:	4b9a      	ldr	r3, [pc, #616]	; (8005184 <_printf_float+0x2dc>)
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f1e:	f7fb fdff 	bl	8000b20 <__aeabi_dcmple>
 8004f22:	bb48      	cbnz	r0, 8004f78 <_printf_float+0xd0>
 8004f24:	2200      	movs	r2, #0
 8004f26:	2300      	movs	r3, #0
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	f7fb fdee 	bl	8000b0c <__aeabi_dcmplt>
 8004f30:	b110      	cbz	r0, 8004f38 <_printf_float+0x90>
 8004f32:	232d      	movs	r3, #45	; 0x2d
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f38:	4b93      	ldr	r3, [pc, #588]	; (8005188 <_printf_float+0x2e0>)
 8004f3a:	4894      	ldr	r0, [pc, #592]	; (800518c <_printf_float+0x2e4>)
 8004f3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f40:	bf94      	ite	ls
 8004f42:	4698      	movls	r8, r3
 8004f44:	4680      	movhi	r8, r0
 8004f46:	2303      	movs	r3, #3
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	9b05      	ldr	r3, [sp, #20]
 8004f4c:	f023 0204 	bic.w	r2, r3, #4
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	f04f 0900 	mov.w	r9, #0
 8004f56:	9700      	str	r7, [sp, #0]
 8004f58:	4633      	mov	r3, r6
 8004f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 f9d8 	bl	8005314 <_printf_common>
 8004f64:	3001      	adds	r0, #1
 8004f66:	f040 8090 	bne.w	800508a <_printf_float+0x1e2>
 8004f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f6e:	b00d      	add	sp, #52	; 0x34
 8004f70:	ecbd 8b02 	vpop	{d8}
 8004f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4649      	mov	r1, r9
 8004f80:	f7fb fdec 	bl	8000b5c <__aeabi_dcmpun>
 8004f84:	b140      	cbz	r0, 8004f98 <_printf_float+0xf0>
 8004f86:	464b      	mov	r3, r9
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfbc      	itt	lt
 8004f8c:	232d      	movlt	r3, #45	; 0x2d
 8004f8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f92:	487f      	ldr	r0, [pc, #508]	; (8005190 <_printf_float+0x2e8>)
 8004f94:	4b7f      	ldr	r3, [pc, #508]	; (8005194 <_printf_float+0x2ec>)
 8004f96:	e7d1      	b.n	8004f3c <_printf_float+0x94>
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f9e:	9206      	str	r2, [sp, #24]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	d13f      	bne.n	8005024 <_printf_float+0x17c>
 8004fa4:	2306      	movs	r3, #6
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	6861      	ldr	r1, [r4, #4]
 8004fac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9303      	str	r3, [sp, #12]
 8004fb4:	ab0a      	add	r3, sp, #40	; 0x28
 8004fb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fba:	ab09      	add	r3, sp, #36	; 0x24
 8004fbc:	ec49 8b10 	vmov	d0, r8, r9
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7ff fecd 	bl	8004d68 <__cvt>
 8004fce:	9b06      	ldr	r3, [sp, #24]
 8004fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fd2:	2b47      	cmp	r3, #71	; 0x47
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	d108      	bne.n	8004fea <_printf_float+0x142>
 8004fd8:	1cc8      	adds	r0, r1, #3
 8004fda:	db02      	blt.n	8004fe2 <_printf_float+0x13a>
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	dd41      	ble.n	8005066 <_printf_float+0x1be>
 8004fe2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8004fea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fee:	d820      	bhi.n	8005032 <_printf_float+0x18a>
 8004ff0:	3901      	subs	r1, #1
 8004ff2:	465a      	mov	r2, fp
 8004ff4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ff8:	9109      	str	r1, [sp, #36]	; 0x24
 8004ffa:	f7ff ff17 	bl	8004e2c <__exponent>
 8004ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005000:	1813      	adds	r3, r2, r0
 8005002:	2a01      	cmp	r2, #1
 8005004:	4681      	mov	r9, r0
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	dc02      	bgt.n	8005010 <_printf_float+0x168>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	07d2      	lsls	r2, r2, #31
 800500e:	d501      	bpl.n	8005014 <_printf_float+0x16c>
 8005010:	3301      	adds	r3, #1
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005018:	2b00      	cmp	r3, #0
 800501a:	d09c      	beq.n	8004f56 <_printf_float+0xae>
 800501c:	232d      	movs	r3, #45	; 0x2d
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005022:	e798      	b.n	8004f56 <_printf_float+0xae>
 8005024:	9a06      	ldr	r2, [sp, #24]
 8005026:	2a47      	cmp	r2, #71	; 0x47
 8005028:	d1be      	bne.n	8004fa8 <_printf_float+0x100>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1bc      	bne.n	8004fa8 <_printf_float+0x100>
 800502e:	2301      	movs	r3, #1
 8005030:	e7b9      	b.n	8004fa6 <_printf_float+0xfe>
 8005032:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005036:	d118      	bne.n	800506a <_printf_float+0x1c2>
 8005038:	2900      	cmp	r1, #0
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	dd0b      	ble.n	8005056 <_printf_float+0x1ae>
 800503e:	6121      	str	r1, [r4, #16]
 8005040:	b913      	cbnz	r3, 8005048 <_printf_float+0x1a0>
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	07d0      	lsls	r0, r2, #31
 8005046:	d502      	bpl.n	800504e <_printf_float+0x1a6>
 8005048:	3301      	adds	r3, #1
 800504a:	440b      	add	r3, r1
 800504c:	6123      	str	r3, [r4, #16]
 800504e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005050:	f04f 0900 	mov.w	r9, #0
 8005054:	e7de      	b.n	8005014 <_printf_float+0x16c>
 8005056:	b913      	cbnz	r3, 800505e <_printf_float+0x1b6>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	07d2      	lsls	r2, r2, #31
 800505c:	d501      	bpl.n	8005062 <_printf_float+0x1ba>
 800505e:	3302      	adds	r3, #2
 8005060:	e7f4      	b.n	800504c <_printf_float+0x1a4>
 8005062:	2301      	movs	r3, #1
 8005064:	e7f2      	b.n	800504c <_printf_float+0x1a4>
 8005066:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506c:	4299      	cmp	r1, r3
 800506e:	db05      	blt.n	800507c <_printf_float+0x1d4>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	6121      	str	r1, [r4, #16]
 8005074:	07d8      	lsls	r0, r3, #31
 8005076:	d5ea      	bpl.n	800504e <_printf_float+0x1a6>
 8005078:	1c4b      	adds	r3, r1, #1
 800507a:	e7e7      	b.n	800504c <_printf_float+0x1a4>
 800507c:	2900      	cmp	r1, #0
 800507e:	bfd4      	ite	le
 8005080:	f1c1 0202 	rsble	r2, r1, #2
 8005084:	2201      	movgt	r2, #1
 8005086:	4413      	add	r3, r2
 8005088:	e7e0      	b.n	800504c <_printf_float+0x1a4>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	055a      	lsls	r2, r3, #21
 800508e:	d407      	bmi.n	80050a0 <_printf_float+0x1f8>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	4642      	mov	r2, r8
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	d12c      	bne.n	80050f8 <_printf_float+0x250>
 800509e:	e764      	b.n	8004f6a <_printf_float+0xc2>
 80050a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050a4:	f240 80e0 	bls.w	8005268 <_printf_float+0x3c0>
 80050a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050ac:	2200      	movs	r2, #0
 80050ae:	2300      	movs	r3, #0
 80050b0:	f7fb fd22 	bl	8000af8 <__aeabi_dcmpeq>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d034      	beq.n	8005122 <_printf_float+0x27a>
 80050b8:	4a37      	ldr	r2, [pc, #220]	; (8005198 <_printf_float+0x2f0>)
 80050ba:	2301      	movs	r3, #1
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	f43f af51 	beq.w	8004f6a <_printf_float+0xc2>
 80050c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050cc:	429a      	cmp	r2, r3
 80050ce:	db02      	blt.n	80050d6 <_printf_float+0x22e>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	07d8      	lsls	r0, r3, #31
 80050d4:	d510      	bpl.n	80050f8 <_printf_float+0x250>
 80050d6:	ee18 3a10 	vmov	r3, s16
 80050da:	4652      	mov	r2, sl
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af41 	beq.w	8004f6a <_printf_float+0xc2>
 80050e8:	f04f 0800 	mov.w	r8, #0
 80050ec:	f104 091a 	add.w	r9, r4, #26
 80050f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4543      	cmp	r3, r8
 80050f6:	dc09      	bgt.n	800510c <_printf_float+0x264>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	079b      	lsls	r3, r3, #30
 80050fc:	f100 8105 	bmi.w	800530a <_printf_float+0x462>
 8005100:	68e0      	ldr	r0, [r4, #12]
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	4298      	cmp	r0, r3
 8005106:	bfb8      	it	lt
 8005108:	4618      	movlt	r0, r3
 800510a:	e730      	b.n	8004f6e <_printf_float+0xc6>
 800510c:	2301      	movs	r3, #1
 800510e:	464a      	mov	r2, r9
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af27 	beq.w	8004f6a <_printf_float+0xc2>
 800511c:	f108 0801 	add.w	r8, r8, #1
 8005120:	e7e6      	b.n	80050f0 <_printf_float+0x248>
 8005122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	dc39      	bgt.n	800519c <_printf_float+0x2f4>
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <_printf_float+0x2f0>)
 800512a:	2301      	movs	r3, #1
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af19 	beq.w	8004f6a <_printf_float+0xc2>
 8005138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800513c:	4313      	orrs	r3, r2
 800513e:	d102      	bne.n	8005146 <_printf_float+0x29e>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	d5d8      	bpl.n	80050f8 <_printf_float+0x250>
 8005146:	ee18 3a10 	vmov	r3, s16
 800514a:	4652      	mov	r2, sl
 800514c:	4631      	mov	r1, r6
 800514e:	4628      	mov	r0, r5
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f af09 	beq.w	8004f6a <_printf_float+0xc2>
 8005158:	f04f 0900 	mov.w	r9, #0
 800515c:	f104 0a1a 	add.w	sl, r4, #26
 8005160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005162:	425b      	negs	r3, r3
 8005164:	454b      	cmp	r3, r9
 8005166:	dc01      	bgt.n	800516c <_printf_float+0x2c4>
 8005168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516a:	e792      	b.n	8005092 <_printf_float+0x1ea>
 800516c:	2301      	movs	r3, #1
 800516e:	4652      	mov	r2, sl
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	f43f aef7 	beq.w	8004f6a <_printf_float+0xc2>
 800517c:	f109 0901 	add.w	r9, r9, #1
 8005180:	e7ee      	b.n	8005160 <_printf_float+0x2b8>
 8005182:	bf00      	nop
 8005184:	7fefffff 	.word	0x7fefffff
 8005188:	080098a4 	.word	0x080098a4
 800518c:	080098a8 	.word	0x080098a8
 8005190:	080098b0 	.word	0x080098b0
 8005194:	080098ac 	.word	0x080098ac
 8005198:	080098b4 	.word	0x080098b4
 800519c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800519e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051a0:	429a      	cmp	r2, r3
 80051a2:	bfa8      	it	ge
 80051a4:	461a      	movge	r2, r3
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	4691      	mov	r9, r2
 80051aa:	dc37      	bgt.n	800521c <_printf_float+0x374>
 80051ac:	f04f 0b00 	mov.w	fp, #0
 80051b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051b4:	f104 021a 	add.w	r2, r4, #26
 80051b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	eba3 0309 	sub.w	r3, r3, r9
 80051c0:	455b      	cmp	r3, fp
 80051c2:	dc33      	bgt.n	800522c <_printf_float+0x384>
 80051c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c8:	429a      	cmp	r2, r3
 80051ca:	db3b      	blt.n	8005244 <_printf_float+0x39c>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	07da      	lsls	r2, r3, #31
 80051d0:	d438      	bmi.n	8005244 <_printf_float+0x39c>
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	9a05      	ldr	r2, [sp, #20]
 80051d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051d8:	1a9a      	subs	r2, r3, r2
 80051da:	eba3 0901 	sub.w	r9, r3, r1
 80051de:	4591      	cmp	r9, r2
 80051e0:	bfa8      	it	ge
 80051e2:	4691      	movge	r9, r2
 80051e4:	f1b9 0f00 	cmp.w	r9, #0
 80051e8:	dc35      	bgt.n	8005256 <_printf_float+0x3ae>
 80051ea:	f04f 0800 	mov.w	r8, #0
 80051ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051f2:	f104 0a1a 	add.w	sl, r4, #26
 80051f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	eba3 0309 	sub.w	r3, r3, r9
 8005200:	4543      	cmp	r3, r8
 8005202:	f77f af79 	ble.w	80050f8 <_printf_float+0x250>
 8005206:	2301      	movs	r3, #1
 8005208:	4652      	mov	r2, sl
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f aeaa 	beq.w	8004f6a <_printf_float+0xc2>
 8005216:	f108 0801 	add.w	r8, r8, #1
 800521a:	e7ec      	b.n	80051f6 <_printf_float+0x34e>
 800521c:	4613      	mov	r3, r2
 800521e:	4631      	mov	r1, r6
 8005220:	4642      	mov	r2, r8
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	d1c0      	bne.n	80051ac <_printf_float+0x304>
 800522a:	e69e      	b.n	8004f6a <_printf_float+0xc2>
 800522c:	2301      	movs	r3, #1
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	9205      	str	r2, [sp, #20]
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f ae97 	beq.w	8004f6a <_printf_float+0xc2>
 800523c:	9a05      	ldr	r2, [sp, #20]
 800523e:	f10b 0b01 	add.w	fp, fp, #1
 8005242:	e7b9      	b.n	80051b8 <_printf_float+0x310>
 8005244:	ee18 3a10 	vmov	r3, s16
 8005248:	4652      	mov	r2, sl
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	d1be      	bne.n	80051d2 <_printf_float+0x32a>
 8005254:	e689      	b.n	8004f6a <_printf_float+0xc2>
 8005256:	9a05      	ldr	r2, [sp, #20]
 8005258:	464b      	mov	r3, r9
 800525a:	4442      	add	r2, r8
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	d1c1      	bne.n	80051ea <_printf_float+0x342>
 8005266:	e680      	b.n	8004f6a <_printf_float+0xc2>
 8005268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800526a:	2a01      	cmp	r2, #1
 800526c:	dc01      	bgt.n	8005272 <_printf_float+0x3ca>
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d538      	bpl.n	80052e4 <_printf_float+0x43c>
 8005272:	2301      	movs	r3, #1
 8005274:	4642      	mov	r2, r8
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	f43f ae74 	beq.w	8004f6a <_printf_float+0xc2>
 8005282:	ee18 3a10 	vmov	r3, s16
 8005286:	4652      	mov	r2, sl
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f ae6b 	beq.w	8004f6a <_printf_float+0xc2>
 8005294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005298:	2200      	movs	r2, #0
 800529a:	2300      	movs	r3, #0
 800529c:	f7fb fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 80052a0:	b9d8      	cbnz	r0, 80052da <_printf_float+0x432>
 80052a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a4:	f108 0201 	add.w	r2, r8, #1
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	d10e      	bne.n	80052d2 <_printf_float+0x42a>
 80052b4:	e659      	b.n	8004f6a <_printf_float+0xc2>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4652      	mov	r2, sl
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f ae52 	beq.w	8004f6a <_printf_float+0xc2>
 80052c6:	f108 0801 	add.w	r8, r8, #1
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4543      	cmp	r3, r8
 80052d0:	dcf1      	bgt.n	80052b6 <_printf_float+0x40e>
 80052d2:	464b      	mov	r3, r9
 80052d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052d8:	e6dc      	b.n	8005094 <_printf_float+0x1ec>
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	f104 0a1a 	add.w	sl, r4, #26
 80052e2:	e7f2      	b.n	80052ca <_printf_float+0x422>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4642      	mov	r2, r8
 80052e8:	e7df      	b.n	80052aa <_printf_float+0x402>
 80052ea:	2301      	movs	r3, #1
 80052ec:	464a      	mov	r2, r9
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f ae38 	beq.w	8004f6a <_printf_float+0xc2>
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005302:	1a5b      	subs	r3, r3, r1
 8005304:	4543      	cmp	r3, r8
 8005306:	dcf0      	bgt.n	80052ea <_printf_float+0x442>
 8005308:	e6fa      	b.n	8005100 <_printf_float+0x258>
 800530a:	f04f 0800 	mov.w	r8, #0
 800530e:	f104 0919 	add.w	r9, r4, #25
 8005312:	e7f4      	b.n	80052fe <_printf_float+0x456>

08005314 <_printf_common>:
 8005314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	4616      	mov	r6, r2
 800531a:	4699      	mov	r9, r3
 800531c:	688a      	ldr	r2, [r1, #8]
 800531e:	690b      	ldr	r3, [r1, #16]
 8005320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005324:	4293      	cmp	r3, r2
 8005326:	bfb8      	it	lt
 8005328:	4613      	movlt	r3, r2
 800532a:	6033      	str	r3, [r6, #0]
 800532c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005330:	4607      	mov	r7, r0
 8005332:	460c      	mov	r4, r1
 8005334:	b10a      	cbz	r2, 800533a <_printf_common+0x26>
 8005336:	3301      	adds	r3, #1
 8005338:	6033      	str	r3, [r6, #0]
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	0699      	lsls	r1, r3, #26
 800533e:	bf42      	ittt	mi
 8005340:	6833      	ldrmi	r3, [r6, #0]
 8005342:	3302      	addmi	r3, #2
 8005344:	6033      	strmi	r3, [r6, #0]
 8005346:	6825      	ldr	r5, [r4, #0]
 8005348:	f015 0506 	ands.w	r5, r5, #6
 800534c:	d106      	bne.n	800535c <_printf_common+0x48>
 800534e:	f104 0a19 	add.w	sl, r4, #25
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	6832      	ldr	r2, [r6, #0]
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	42ab      	cmp	r3, r5
 800535a:	dc26      	bgt.n	80053aa <_printf_common+0x96>
 800535c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005360:	1e13      	subs	r3, r2, #0
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	bf18      	it	ne
 8005366:	2301      	movne	r3, #1
 8005368:	0692      	lsls	r2, r2, #26
 800536a:	d42b      	bmi.n	80053c4 <_printf_common+0xb0>
 800536c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	3001      	adds	r0, #1
 8005378:	d01e      	beq.n	80053b8 <_printf_common+0xa4>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	68e5      	ldr	r5, [r4, #12]
 800537e:	6832      	ldr	r2, [r6, #0]
 8005380:	f003 0306 	and.w	r3, r3, #6
 8005384:	2b04      	cmp	r3, #4
 8005386:	bf08      	it	eq
 8005388:	1aad      	subeq	r5, r5, r2
 800538a:	68a3      	ldr	r3, [r4, #8]
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	bf0c      	ite	eq
 8005390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005394:	2500      	movne	r5, #0
 8005396:	4293      	cmp	r3, r2
 8005398:	bfc4      	itt	gt
 800539a:	1a9b      	subgt	r3, r3, r2
 800539c:	18ed      	addgt	r5, r5, r3
 800539e:	2600      	movs	r6, #0
 80053a0:	341a      	adds	r4, #26
 80053a2:	42b5      	cmp	r5, r6
 80053a4:	d11a      	bne.n	80053dc <_printf_common+0xc8>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e008      	b.n	80053bc <_printf_common+0xa8>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4652      	mov	r2, sl
 80053ae:	4649      	mov	r1, r9
 80053b0:	4638      	mov	r0, r7
 80053b2:	47c0      	blx	r8
 80053b4:	3001      	adds	r0, #1
 80053b6:	d103      	bne.n	80053c0 <_printf_common+0xac>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	3501      	adds	r5, #1
 80053c2:	e7c6      	b.n	8005352 <_printf_common+0x3e>
 80053c4:	18e1      	adds	r1, r4, r3
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	2030      	movs	r0, #48	; 0x30
 80053ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ce:	4422      	add	r2, r4
 80053d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d8:	3302      	adds	r3, #2
 80053da:	e7c7      	b.n	800536c <_printf_common+0x58>
 80053dc:	2301      	movs	r3, #1
 80053de:	4622      	mov	r2, r4
 80053e0:	4649      	mov	r1, r9
 80053e2:	4638      	mov	r0, r7
 80053e4:	47c0      	blx	r8
 80053e6:	3001      	adds	r0, #1
 80053e8:	d0e6      	beq.n	80053b8 <_printf_common+0xa4>
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7d9      	b.n	80053a2 <_printf_common+0x8e>
	...

080053f0 <_printf_i>:
 80053f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	7e0f      	ldrb	r7, [r1, #24]
 80053f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053f8:	2f78      	cmp	r7, #120	; 0x78
 80053fa:	4691      	mov	r9, r2
 80053fc:	4680      	mov	r8, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	469a      	mov	sl, r3
 8005402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005406:	d807      	bhi.n	8005418 <_printf_i+0x28>
 8005408:	2f62      	cmp	r7, #98	; 0x62
 800540a:	d80a      	bhi.n	8005422 <_printf_i+0x32>
 800540c:	2f00      	cmp	r7, #0
 800540e:	f000 80d8 	beq.w	80055c2 <_printf_i+0x1d2>
 8005412:	2f58      	cmp	r7, #88	; 0x58
 8005414:	f000 80a3 	beq.w	800555e <_printf_i+0x16e>
 8005418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800541c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005420:	e03a      	b.n	8005498 <_printf_i+0xa8>
 8005422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005426:	2b15      	cmp	r3, #21
 8005428:	d8f6      	bhi.n	8005418 <_printf_i+0x28>
 800542a:	a101      	add	r1, pc, #4	; (adr r1, 8005430 <_printf_i+0x40>)
 800542c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005430:	08005489 	.word	0x08005489
 8005434:	0800549d 	.word	0x0800549d
 8005438:	08005419 	.word	0x08005419
 800543c:	08005419 	.word	0x08005419
 8005440:	08005419 	.word	0x08005419
 8005444:	08005419 	.word	0x08005419
 8005448:	0800549d 	.word	0x0800549d
 800544c:	08005419 	.word	0x08005419
 8005450:	08005419 	.word	0x08005419
 8005454:	08005419 	.word	0x08005419
 8005458:	08005419 	.word	0x08005419
 800545c:	080055a9 	.word	0x080055a9
 8005460:	080054cd 	.word	0x080054cd
 8005464:	0800558b 	.word	0x0800558b
 8005468:	08005419 	.word	0x08005419
 800546c:	08005419 	.word	0x08005419
 8005470:	080055cb 	.word	0x080055cb
 8005474:	08005419 	.word	0x08005419
 8005478:	080054cd 	.word	0x080054cd
 800547c:	08005419 	.word	0x08005419
 8005480:	08005419 	.word	0x08005419
 8005484:	08005593 	.word	0x08005593
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	1d1a      	adds	r2, r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	602a      	str	r2, [r5, #0]
 8005490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005498:	2301      	movs	r3, #1
 800549a:	e0a3      	b.n	80055e4 <_printf_i+0x1f4>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	6829      	ldr	r1, [r5, #0]
 80054a0:	0606      	lsls	r6, r0, #24
 80054a2:	f101 0304 	add.w	r3, r1, #4
 80054a6:	d50a      	bpl.n	80054be <_printf_i+0xce>
 80054a8:	680e      	ldr	r6, [r1, #0]
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xc8>
 80054b0:	232d      	movs	r3, #45	; 0x2d
 80054b2:	4276      	negs	r6, r6
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b8:	485e      	ldr	r0, [pc, #376]	; (8005634 <_printf_i+0x244>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e019      	b.n	80054f2 <_printf_i+0x102>
 80054be:	680e      	ldr	r6, [r1, #0]
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054c6:	bf18      	it	ne
 80054c8:	b236      	sxthne	r6, r6
 80054ca:	e7ef      	b.n	80054ac <_printf_i+0xbc>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	1d19      	adds	r1, r3, #4
 80054d2:	6029      	str	r1, [r5, #0]
 80054d4:	0601      	lsls	r1, r0, #24
 80054d6:	d501      	bpl.n	80054dc <_printf_i+0xec>
 80054d8:	681e      	ldr	r6, [r3, #0]
 80054da:	e002      	b.n	80054e2 <_printf_i+0xf2>
 80054dc:	0646      	lsls	r6, r0, #25
 80054de:	d5fb      	bpl.n	80054d8 <_printf_i+0xe8>
 80054e0:	881e      	ldrh	r6, [r3, #0]
 80054e2:	4854      	ldr	r0, [pc, #336]	; (8005634 <_printf_i+0x244>)
 80054e4:	2f6f      	cmp	r7, #111	; 0x6f
 80054e6:	bf0c      	ite	eq
 80054e8:	2308      	moveq	r3, #8
 80054ea:	230a      	movne	r3, #10
 80054ec:	2100      	movs	r1, #0
 80054ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054f2:	6865      	ldr	r5, [r4, #4]
 80054f4:	60a5      	str	r5, [r4, #8]
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	bfa2      	ittt	ge
 80054fa:	6821      	ldrge	r1, [r4, #0]
 80054fc:	f021 0104 	bicge.w	r1, r1, #4
 8005500:	6021      	strge	r1, [r4, #0]
 8005502:	b90e      	cbnz	r6, 8005508 <_printf_i+0x118>
 8005504:	2d00      	cmp	r5, #0
 8005506:	d04d      	beq.n	80055a4 <_printf_i+0x1b4>
 8005508:	4615      	mov	r5, r2
 800550a:	fbb6 f1f3 	udiv	r1, r6, r3
 800550e:	fb03 6711 	mls	r7, r3, r1, r6
 8005512:	5dc7      	ldrb	r7, [r0, r7]
 8005514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005518:	4637      	mov	r7, r6
 800551a:	42bb      	cmp	r3, r7
 800551c:	460e      	mov	r6, r1
 800551e:	d9f4      	bls.n	800550a <_printf_i+0x11a>
 8005520:	2b08      	cmp	r3, #8
 8005522:	d10b      	bne.n	800553c <_printf_i+0x14c>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	07de      	lsls	r6, r3, #31
 8005528:	d508      	bpl.n	800553c <_printf_i+0x14c>
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	4299      	cmp	r1, r3
 8005530:	bfde      	ittt	le
 8005532:	2330      	movle	r3, #48	; 0x30
 8005534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005538:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800553c:	1b52      	subs	r2, r2, r5
 800553e:	6122      	str	r2, [r4, #16]
 8005540:	f8cd a000 	str.w	sl, [sp]
 8005544:	464b      	mov	r3, r9
 8005546:	aa03      	add	r2, sp, #12
 8005548:	4621      	mov	r1, r4
 800554a:	4640      	mov	r0, r8
 800554c:	f7ff fee2 	bl	8005314 <_printf_common>
 8005550:	3001      	adds	r0, #1
 8005552:	d14c      	bne.n	80055ee <_printf_i+0x1fe>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005558:	b004      	add	sp, #16
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	4835      	ldr	r0, [pc, #212]	; (8005634 <_printf_i+0x244>)
 8005560:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005564:	6829      	ldr	r1, [r5, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f851 6b04 	ldr.w	r6, [r1], #4
 800556c:	6029      	str	r1, [r5, #0]
 800556e:	061d      	lsls	r5, r3, #24
 8005570:	d514      	bpl.n	800559c <_printf_i+0x1ac>
 8005572:	07df      	lsls	r7, r3, #31
 8005574:	bf44      	itt	mi
 8005576:	f043 0320 	orrmi.w	r3, r3, #32
 800557a:	6023      	strmi	r3, [r4, #0]
 800557c:	b91e      	cbnz	r6, 8005586 <_printf_i+0x196>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f023 0320 	bic.w	r3, r3, #32
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	2310      	movs	r3, #16
 8005588:	e7b0      	b.n	80054ec <_printf_i+0xfc>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f043 0320 	orr.w	r3, r3, #32
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	2378      	movs	r3, #120	; 0x78
 8005594:	4828      	ldr	r0, [pc, #160]	; (8005638 <_printf_i+0x248>)
 8005596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800559a:	e7e3      	b.n	8005564 <_printf_i+0x174>
 800559c:	0659      	lsls	r1, r3, #25
 800559e:	bf48      	it	mi
 80055a0:	b2b6      	uxthmi	r6, r6
 80055a2:	e7e6      	b.n	8005572 <_printf_i+0x182>
 80055a4:	4615      	mov	r5, r2
 80055a6:	e7bb      	b.n	8005520 <_printf_i+0x130>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	6826      	ldr	r6, [r4, #0]
 80055ac:	6961      	ldr	r1, [r4, #20]
 80055ae:	1d18      	adds	r0, r3, #4
 80055b0:	6028      	str	r0, [r5, #0]
 80055b2:	0635      	lsls	r5, r6, #24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	d501      	bpl.n	80055bc <_printf_i+0x1cc>
 80055b8:	6019      	str	r1, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <_printf_i+0x1d2>
 80055bc:	0670      	lsls	r0, r6, #25
 80055be:	d5fb      	bpl.n	80055b8 <_printf_i+0x1c8>
 80055c0:	8019      	strh	r1, [r3, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	4615      	mov	r5, r2
 80055c8:	e7ba      	b.n	8005540 <_printf_i+0x150>
 80055ca:	682b      	ldr	r3, [r5, #0]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	602a      	str	r2, [r5, #0]
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7fa fe1a 	bl	8000210 <memchr>
 80055dc:	b108      	cbz	r0, 80055e2 <_printf_i+0x1f2>
 80055de:	1b40      	subs	r0, r0, r5
 80055e0:	6060      	str	r0, [r4, #4]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	2300      	movs	r3, #0
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ec:	e7a8      	b.n	8005540 <_printf_i+0x150>
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4649      	mov	r1, r9
 80055f4:	4640      	mov	r0, r8
 80055f6:	47d0      	blx	sl
 80055f8:	3001      	adds	r0, #1
 80055fa:	d0ab      	beq.n	8005554 <_printf_i+0x164>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	079b      	lsls	r3, r3, #30
 8005600:	d413      	bmi.n	800562a <_printf_i+0x23a>
 8005602:	68e0      	ldr	r0, [r4, #12]
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	4298      	cmp	r0, r3
 8005608:	bfb8      	it	lt
 800560a:	4618      	movlt	r0, r3
 800560c:	e7a4      	b.n	8005558 <_printf_i+0x168>
 800560e:	2301      	movs	r3, #1
 8005610:	4632      	mov	r2, r6
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	47d0      	blx	sl
 8005618:	3001      	adds	r0, #1
 800561a:	d09b      	beq.n	8005554 <_printf_i+0x164>
 800561c:	3501      	adds	r5, #1
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	9903      	ldr	r1, [sp, #12]
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	42ab      	cmp	r3, r5
 8005626:	dcf2      	bgt.n	800560e <_printf_i+0x21e>
 8005628:	e7eb      	b.n	8005602 <_printf_i+0x212>
 800562a:	2500      	movs	r5, #0
 800562c:	f104 0619 	add.w	r6, r4, #25
 8005630:	e7f5      	b.n	800561e <_printf_i+0x22e>
 8005632:	bf00      	nop
 8005634:	080098b6 	.word	0x080098b6
 8005638:	080098c7 	.word	0x080098c7

0800563c <_scanf_float>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	b087      	sub	sp, #28
 8005642:	4617      	mov	r7, r2
 8005644:	9303      	str	r3, [sp, #12]
 8005646:	688b      	ldr	r3, [r1, #8]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800564e:	bf83      	ittte	hi
 8005650:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005654:	195b      	addhi	r3, r3, r5
 8005656:	9302      	strhi	r3, [sp, #8]
 8005658:	2300      	movls	r3, #0
 800565a:	bf86      	itte	hi
 800565c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005660:	608b      	strhi	r3, [r1, #8]
 8005662:	9302      	strls	r3, [sp, #8]
 8005664:	680b      	ldr	r3, [r1, #0]
 8005666:	468b      	mov	fp, r1
 8005668:	2500      	movs	r5, #0
 800566a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800566e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005672:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005676:	4680      	mov	r8, r0
 8005678:	460c      	mov	r4, r1
 800567a:	465e      	mov	r6, fp
 800567c:	46aa      	mov	sl, r5
 800567e:	46a9      	mov	r9, r5
 8005680:	9501      	str	r5, [sp, #4]
 8005682:	68a2      	ldr	r2, [r4, #8]
 8005684:	b152      	cbz	r2, 800569c <_scanf_float+0x60>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b4e      	cmp	r3, #78	; 0x4e
 800568c:	d864      	bhi.n	8005758 <_scanf_float+0x11c>
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d83c      	bhi.n	800570c <_scanf_float+0xd0>
 8005692:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005696:	b2c8      	uxtb	r0, r1
 8005698:	280e      	cmp	r0, #14
 800569a:	d93a      	bls.n	8005712 <_scanf_float+0xd6>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	d003      	beq.n	80056aa <_scanf_float+0x6e>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80056ae:	f1ba 0f01 	cmp.w	sl, #1
 80056b2:	f200 8113 	bhi.w	80058dc <_scanf_float+0x2a0>
 80056b6:	455e      	cmp	r6, fp
 80056b8:	f200 8105 	bhi.w	80058c6 <_scanf_float+0x28a>
 80056bc:	2501      	movs	r5, #1
 80056be:	4628      	mov	r0, r5
 80056c0:	b007      	add	sp, #28
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056ca:	2a0d      	cmp	r2, #13
 80056cc:	d8e6      	bhi.n	800569c <_scanf_float+0x60>
 80056ce:	a101      	add	r1, pc, #4	; (adr r1, 80056d4 <_scanf_float+0x98>)
 80056d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056d4:	08005813 	.word	0x08005813
 80056d8:	0800569d 	.word	0x0800569d
 80056dc:	0800569d 	.word	0x0800569d
 80056e0:	0800569d 	.word	0x0800569d
 80056e4:	08005873 	.word	0x08005873
 80056e8:	0800584b 	.word	0x0800584b
 80056ec:	0800569d 	.word	0x0800569d
 80056f0:	0800569d 	.word	0x0800569d
 80056f4:	08005821 	.word	0x08005821
 80056f8:	0800569d 	.word	0x0800569d
 80056fc:	0800569d 	.word	0x0800569d
 8005700:	0800569d 	.word	0x0800569d
 8005704:	0800569d 	.word	0x0800569d
 8005708:	080057d9 	.word	0x080057d9
 800570c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005710:	e7db      	b.n	80056ca <_scanf_float+0x8e>
 8005712:	290e      	cmp	r1, #14
 8005714:	d8c2      	bhi.n	800569c <_scanf_float+0x60>
 8005716:	a001      	add	r0, pc, #4	; (adr r0, 800571c <_scanf_float+0xe0>)
 8005718:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800571c:	080057cb 	.word	0x080057cb
 8005720:	0800569d 	.word	0x0800569d
 8005724:	080057cb 	.word	0x080057cb
 8005728:	0800585f 	.word	0x0800585f
 800572c:	0800569d 	.word	0x0800569d
 8005730:	08005779 	.word	0x08005779
 8005734:	080057b5 	.word	0x080057b5
 8005738:	080057b5 	.word	0x080057b5
 800573c:	080057b5 	.word	0x080057b5
 8005740:	080057b5 	.word	0x080057b5
 8005744:	080057b5 	.word	0x080057b5
 8005748:	080057b5 	.word	0x080057b5
 800574c:	080057b5 	.word	0x080057b5
 8005750:	080057b5 	.word	0x080057b5
 8005754:	080057b5 	.word	0x080057b5
 8005758:	2b6e      	cmp	r3, #110	; 0x6e
 800575a:	d809      	bhi.n	8005770 <_scanf_float+0x134>
 800575c:	2b60      	cmp	r3, #96	; 0x60
 800575e:	d8b2      	bhi.n	80056c6 <_scanf_float+0x8a>
 8005760:	2b54      	cmp	r3, #84	; 0x54
 8005762:	d077      	beq.n	8005854 <_scanf_float+0x218>
 8005764:	2b59      	cmp	r3, #89	; 0x59
 8005766:	d199      	bne.n	800569c <_scanf_float+0x60>
 8005768:	2d07      	cmp	r5, #7
 800576a:	d197      	bne.n	800569c <_scanf_float+0x60>
 800576c:	2508      	movs	r5, #8
 800576e:	e029      	b.n	80057c4 <_scanf_float+0x188>
 8005770:	2b74      	cmp	r3, #116	; 0x74
 8005772:	d06f      	beq.n	8005854 <_scanf_float+0x218>
 8005774:	2b79      	cmp	r3, #121	; 0x79
 8005776:	e7f6      	b.n	8005766 <_scanf_float+0x12a>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	05c8      	lsls	r0, r1, #23
 800577c:	d51a      	bpl.n	80057b4 <_scanf_float+0x178>
 800577e:	9b02      	ldr	r3, [sp, #8]
 8005780:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005784:	6021      	str	r1, [r4, #0]
 8005786:	f109 0901 	add.w	r9, r9, #1
 800578a:	b11b      	cbz	r3, 8005794 <_scanf_float+0x158>
 800578c:	3b01      	subs	r3, #1
 800578e:	3201      	adds	r2, #1
 8005790:	9302      	str	r3, [sp, #8]
 8005792:	60a2      	str	r2, [r4, #8]
 8005794:	68a3      	ldr	r3, [r4, #8]
 8005796:	3b01      	subs	r3, #1
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	3301      	adds	r3, #1
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	f340 8084 	ble.w	80058b4 <_scanf_float+0x278>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	e766      	b.n	8005682 <_scanf_float+0x46>
 80057b4:	eb1a 0f05 	cmn.w	sl, r5
 80057b8:	f47f af70 	bne.w	800569c <_scanf_float+0x60>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80057c2:	6022      	str	r2, [r4, #0]
 80057c4:	f806 3b01 	strb.w	r3, [r6], #1
 80057c8:	e7e4      	b.n	8005794 <_scanf_float+0x158>
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	0610      	lsls	r0, r2, #24
 80057ce:	f57f af65 	bpl.w	800569c <_scanf_float+0x60>
 80057d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d6:	e7f4      	b.n	80057c2 <_scanf_float+0x186>
 80057d8:	f1ba 0f00 	cmp.w	sl, #0
 80057dc:	d10e      	bne.n	80057fc <_scanf_float+0x1c0>
 80057de:	f1b9 0f00 	cmp.w	r9, #0
 80057e2:	d10e      	bne.n	8005802 <_scanf_float+0x1c6>
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057ee:	d108      	bne.n	8005802 <_scanf_float+0x1c6>
 80057f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	f04f 0a01 	mov.w	sl, #1
 80057fa:	e7e3      	b.n	80057c4 <_scanf_float+0x188>
 80057fc:	f1ba 0f02 	cmp.w	sl, #2
 8005800:	d055      	beq.n	80058ae <_scanf_float+0x272>
 8005802:	2d01      	cmp	r5, #1
 8005804:	d002      	beq.n	800580c <_scanf_float+0x1d0>
 8005806:	2d04      	cmp	r5, #4
 8005808:	f47f af48 	bne.w	800569c <_scanf_float+0x60>
 800580c:	3501      	adds	r5, #1
 800580e:	b2ed      	uxtb	r5, r5
 8005810:	e7d8      	b.n	80057c4 <_scanf_float+0x188>
 8005812:	f1ba 0f01 	cmp.w	sl, #1
 8005816:	f47f af41 	bne.w	800569c <_scanf_float+0x60>
 800581a:	f04f 0a02 	mov.w	sl, #2
 800581e:	e7d1      	b.n	80057c4 <_scanf_float+0x188>
 8005820:	b97d      	cbnz	r5, 8005842 <_scanf_float+0x206>
 8005822:	f1b9 0f00 	cmp.w	r9, #0
 8005826:	f47f af3c 	bne.w	80056a2 <_scanf_float+0x66>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005830:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005834:	f47f af39 	bne.w	80056aa <_scanf_float+0x6e>
 8005838:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	2501      	movs	r5, #1
 8005840:	e7c0      	b.n	80057c4 <_scanf_float+0x188>
 8005842:	2d03      	cmp	r5, #3
 8005844:	d0e2      	beq.n	800580c <_scanf_float+0x1d0>
 8005846:	2d05      	cmp	r5, #5
 8005848:	e7de      	b.n	8005808 <_scanf_float+0x1cc>
 800584a:	2d02      	cmp	r5, #2
 800584c:	f47f af26 	bne.w	800569c <_scanf_float+0x60>
 8005850:	2503      	movs	r5, #3
 8005852:	e7b7      	b.n	80057c4 <_scanf_float+0x188>
 8005854:	2d06      	cmp	r5, #6
 8005856:	f47f af21 	bne.w	800569c <_scanf_float+0x60>
 800585a:	2507      	movs	r5, #7
 800585c:	e7b2      	b.n	80057c4 <_scanf_float+0x188>
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	0591      	lsls	r1, r2, #22
 8005862:	f57f af1b 	bpl.w	800569c <_scanf_float+0x60>
 8005866:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800586a:	6022      	str	r2, [r4, #0]
 800586c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005870:	e7a8      	b.n	80057c4 <_scanf_float+0x188>
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005878:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800587c:	d006      	beq.n	800588c <_scanf_float+0x250>
 800587e:	0550      	lsls	r0, r2, #21
 8005880:	f57f af0c 	bpl.w	800569c <_scanf_float+0x60>
 8005884:	f1b9 0f00 	cmp.w	r9, #0
 8005888:	f43f af0f 	beq.w	80056aa <_scanf_float+0x6e>
 800588c:	0591      	lsls	r1, r2, #22
 800588e:	bf58      	it	pl
 8005890:	9901      	ldrpl	r1, [sp, #4]
 8005892:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005896:	bf58      	it	pl
 8005898:	eba9 0101 	subpl.w	r1, r9, r1
 800589c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80058a0:	bf58      	it	pl
 80058a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058a6:	6022      	str	r2, [r4, #0]
 80058a8:	f04f 0900 	mov.w	r9, #0
 80058ac:	e78a      	b.n	80057c4 <_scanf_float+0x188>
 80058ae:	f04f 0a03 	mov.w	sl, #3
 80058b2:	e787      	b.n	80057c4 <_scanf_float+0x188>
 80058b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058b8:	4639      	mov	r1, r7
 80058ba:	4640      	mov	r0, r8
 80058bc:	4798      	blx	r3
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f aedf 	beq.w	8005682 <_scanf_float+0x46>
 80058c4:	e6ea      	b.n	800569c <_scanf_float+0x60>
 80058c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058ce:	463a      	mov	r2, r7
 80058d0:	4640      	mov	r0, r8
 80058d2:	4798      	blx	r3
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	e6ec      	b.n	80056b6 <_scanf_float+0x7a>
 80058dc:	1e6b      	subs	r3, r5, #1
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d825      	bhi.n	800592e <_scanf_float+0x2f2>
 80058e2:	2d02      	cmp	r5, #2
 80058e4:	d836      	bhi.n	8005954 <_scanf_float+0x318>
 80058e6:	455e      	cmp	r6, fp
 80058e8:	f67f aee8 	bls.w	80056bc <_scanf_float+0x80>
 80058ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058f4:	463a      	mov	r2, r7
 80058f6:	4640      	mov	r0, r8
 80058f8:	4798      	blx	r3
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	e7f1      	b.n	80058e6 <_scanf_float+0x2aa>
 8005902:	9802      	ldr	r0, [sp, #8]
 8005904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005908:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	463a      	mov	r2, r7
 8005910:	4640      	mov	r0, r8
 8005912:	4798      	blx	r3
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	3b01      	subs	r3, #1
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800591e:	fa5f fa8a 	uxtb.w	sl, sl
 8005922:	f1ba 0f02 	cmp.w	sl, #2
 8005926:	d1ec      	bne.n	8005902 <_scanf_float+0x2c6>
 8005928:	3d03      	subs	r5, #3
 800592a:	b2ed      	uxtb	r5, r5
 800592c:	1b76      	subs	r6, r6, r5
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	05da      	lsls	r2, r3, #23
 8005932:	d52f      	bpl.n	8005994 <_scanf_float+0x358>
 8005934:	055b      	lsls	r3, r3, #21
 8005936:	d510      	bpl.n	800595a <_scanf_float+0x31e>
 8005938:	455e      	cmp	r6, fp
 800593a:	f67f aebf 	bls.w	80056bc <_scanf_float+0x80>
 800593e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005946:	463a      	mov	r2, r7
 8005948:	4640      	mov	r0, r8
 800594a:	4798      	blx	r3
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	3b01      	subs	r3, #1
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	e7f1      	b.n	8005938 <_scanf_float+0x2fc>
 8005954:	46aa      	mov	sl, r5
 8005956:	9602      	str	r6, [sp, #8]
 8005958:	e7df      	b.n	800591a <_scanf_float+0x2de>
 800595a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	2965      	cmp	r1, #101	; 0x65
 8005962:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005966:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	d00c      	beq.n	8005988 <_scanf_float+0x34c>
 800596e:	2945      	cmp	r1, #69	; 0x45
 8005970:	d00a      	beq.n	8005988 <_scanf_float+0x34c>
 8005972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005976:	463a      	mov	r2, r7
 8005978:	4640      	mov	r0, r8
 800597a:	4798      	blx	r3
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005982:	3b01      	subs	r3, #1
 8005984:	1eb5      	subs	r5, r6, #2
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800598c:	463a      	mov	r2, r7
 800598e:	4640      	mov	r0, r8
 8005990:	4798      	blx	r3
 8005992:	462e      	mov	r6, r5
 8005994:	6825      	ldr	r5, [r4, #0]
 8005996:	f015 0510 	ands.w	r5, r5, #16
 800599a:	d159      	bne.n	8005a50 <_scanf_float+0x414>
 800599c:	7035      	strb	r5, [r6, #0]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a8:	d11b      	bne.n	80059e2 <_scanf_float+0x3a6>
 80059aa:	9b01      	ldr	r3, [sp, #4]
 80059ac:	454b      	cmp	r3, r9
 80059ae:	eba3 0209 	sub.w	r2, r3, r9
 80059b2:	d123      	bne.n	80059fc <_scanf_float+0x3c0>
 80059b4:	2200      	movs	r2, #0
 80059b6:	4659      	mov	r1, fp
 80059b8:	4640      	mov	r0, r8
 80059ba:	f000 fe97 	bl	80066ec <_strtod_r>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	f012 0f02 	tst.w	r2, #2
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	d021      	beq.n	8005a12 <_scanf_float+0x3d6>
 80059ce:	9903      	ldr	r1, [sp, #12]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	600a      	str	r2, [r1, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	e9c3 6700 	strd	r6, r7, [r3]
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60e3      	str	r3, [r4, #12]
 80059e0:	e66d      	b.n	80056be <_scanf_float+0x82>
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0e5      	beq.n	80059b4 <_scanf_float+0x378>
 80059e8:	9905      	ldr	r1, [sp, #20]
 80059ea:	230a      	movs	r3, #10
 80059ec:	462a      	mov	r2, r5
 80059ee:	3101      	adds	r1, #1
 80059f0:	4640      	mov	r0, r8
 80059f2:	f000 ff03 	bl	80067fc <_strtol_r>
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	9e05      	ldr	r6, [sp, #20]
 80059fa:	1ac2      	subs	r2, r0, r3
 80059fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a00:	429e      	cmp	r6, r3
 8005a02:	bf28      	it	cs
 8005a04:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a08:	4912      	ldr	r1, [pc, #72]	; (8005a54 <_scanf_float+0x418>)
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 f82c 	bl	8005a68 <siprintf>
 8005a10:	e7d0      	b.n	80059b4 <_scanf_float+0x378>
 8005a12:	9903      	ldr	r1, [sp, #12]
 8005a14:	f012 0f04 	tst.w	r2, #4
 8005a18:	f103 0204 	add.w	r2, r3, #4
 8005a1c:	600a      	str	r2, [r1, #0]
 8005a1e:	d1d9      	bne.n	80059d4 <_scanf_float+0x398>
 8005a20:	f8d3 8000 	ldr.w	r8, [r3]
 8005a24:	ee10 2a10 	vmov	r2, s0
 8005a28:	ee10 0a10 	vmov	r0, s0
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4639      	mov	r1, r7
 8005a30:	f7fb f894 	bl	8000b5c <__aeabi_dcmpun>
 8005a34:	b128      	cbz	r0, 8005a42 <_scanf_float+0x406>
 8005a36:	4808      	ldr	r0, [pc, #32]	; (8005a58 <_scanf_float+0x41c>)
 8005a38:	f000 f810 	bl	8005a5c <nanf>
 8005a3c:	ed88 0a00 	vstr	s0, [r8]
 8005a40:	e7cb      	b.n	80059da <_scanf_float+0x39e>
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fb f8e7 	bl	8000c18 <__aeabi_d2f>
 8005a4a:	f8c8 0000 	str.w	r0, [r8]
 8005a4e:	e7c4      	b.n	80059da <_scanf_float+0x39e>
 8005a50:	2500      	movs	r5, #0
 8005a52:	e634      	b.n	80056be <_scanf_float+0x82>
 8005a54:	080098d8 	.word	0x080098d8
 8005a58:	08009ce0 	.word	0x08009ce0

08005a5c <nanf>:
 8005a5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a64 <nanf+0x8>
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	7fc00000 	.word	0x7fc00000

08005a68 <siprintf>:
 8005a68:	b40e      	push	{r1, r2, r3}
 8005a6a:	b500      	push	{lr}
 8005a6c:	b09c      	sub	sp, #112	; 0x70
 8005a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a70:	9002      	str	r0, [sp, #8]
 8005a72:	9006      	str	r0, [sp, #24]
 8005a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a78:	4809      	ldr	r0, [pc, #36]	; (8005aa0 <siprintf+0x38>)
 8005a7a:	9107      	str	r1, [sp, #28]
 8005a7c:	9104      	str	r1, [sp, #16]
 8005a7e:	4909      	ldr	r1, [pc, #36]	; (8005aa4 <siprintf+0x3c>)
 8005a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a84:	9105      	str	r1, [sp, #20]
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	a902      	add	r1, sp, #8
 8005a8c:	f002 fed4 	bl	8008838 <_svfiprintf_r>
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	b01c      	add	sp, #112	; 0x70
 8005a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a9c:	b003      	add	sp, #12
 8005a9e:	4770      	bx	lr
 8005aa0:	20000068 	.word	0x20000068
 8005aa4:	ffff0208 	.word	0xffff0208

08005aa8 <sulp>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	ec45 4b10 	vmov	d0, r4, r5
 8005ab2:	4616      	mov	r6, r2
 8005ab4:	f002 fc1e 	bl	80082f4 <__ulp>
 8005ab8:	ec51 0b10 	vmov	r0, r1, d0
 8005abc:	b17e      	cbz	r6, 8005ade <sulp+0x36>
 8005abe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dd09      	ble.n	8005ade <sulp+0x36>
 8005aca:	051b      	lsls	r3, r3, #20
 8005acc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ad0:	2400      	movs	r4, #0
 8005ad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f7fa fda5 	bl	8000628 <__aeabi_dmul>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}

08005ae0 <_strtod_l>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b02 	vpush	{d8}
 8005ae8:	b09d      	sub	sp, #116	; 0x74
 8005aea:	461f      	mov	r7, r3
 8005aec:	2300      	movs	r3, #0
 8005aee:	9318      	str	r3, [sp, #96]	; 0x60
 8005af0:	4ba2      	ldr	r3, [pc, #648]	; (8005d7c <_strtod_l+0x29c>)
 8005af2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	4604      	mov	r4, r0
 8005afa:	4618      	mov	r0, r3
 8005afc:	4688      	mov	r8, r1
 8005afe:	f7fa fb7f 	bl	8000200 <strlen>
 8005b02:	f04f 0a00 	mov.w	sl, #0
 8005b06:	4605      	mov	r5, r0
 8005b08:	f04f 0b00 	mov.w	fp, #0
 8005b0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	2a2b      	cmp	r2, #43	; 0x2b
 8005b16:	d04e      	beq.n	8005bb6 <_strtod_l+0xd6>
 8005b18:	d83b      	bhi.n	8005b92 <_strtod_l+0xb2>
 8005b1a:	2a0d      	cmp	r2, #13
 8005b1c:	d834      	bhi.n	8005b88 <_strtod_l+0xa8>
 8005b1e:	2a08      	cmp	r2, #8
 8005b20:	d834      	bhi.n	8005b8c <_strtod_l+0xac>
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d03e      	beq.n	8005ba4 <_strtod_l+0xc4>
 8005b26:	2300      	movs	r3, #0
 8005b28:	930a      	str	r3, [sp, #40]	; 0x28
 8005b2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005b2c:	7833      	ldrb	r3, [r6, #0]
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	f040 80b0 	bne.w	8005c94 <_strtod_l+0x1b4>
 8005b34:	7873      	ldrb	r3, [r6, #1]
 8005b36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b3a:	2b58      	cmp	r3, #88	; 0x58
 8005b3c:	d168      	bne.n	8005c10 <_strtod_l+0x130>
 8005b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	ab18      	add	r3, sp, #96	; 0x60
 8005b44:	9702      	str	r7, [sp, #8]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	4a8d      	ldr	r2, [pc, #564]	; (8005d80 <_strtod_l+0x2a0>)
 8005b4a:	ab19      	add	r3, sp, #100	; 0x64
 8005b4c:	a917      	add	r1, sp, #92	; 0x5c
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 fd38 	bl	80075c4 <__gethex>
 8005b54:	f010 0707 	ands.w	r7, r0, #7
 8005b58:	4605      	mov	r5, r0
 8005b5a:	d005      	beq.n	8005b68 <_strtod_l+0x88>
 8005b5c:	2f06      	cmp	r7, #6
 8005b5e:	d12c      	bne.n	8005bba <_strtod_l+0xda>
 8005b60:	3601      	adds	r6, #1
 8005b62:	2300      	movs	r3, #0
 8005b64:	9617      	str	r6, [sp, #92]	; 0x5c
 8005b66:	930a      	str	r3, [sp, #40]	; 0x28
 8005b68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f040 8590 	bne.w	8006690 <_strtod_l+0xbb0>
 8005b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b72:	b1eb      	cbz	r3, 8005bb0 <_strtod_l+0xd0>
 8005b74:	4652      	mov	r2, sl
 8005b76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b7a:	ec43 2b10 	vmov	d0, r2, r3
 8005b7e:	b01d      	add	sp, #116	; 0x74
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	2a20      	cmp	r2, #32
 8005b8a:	d1cc      	bne.n	8005b26 <_strtod_l+0x46>
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b90:	e7be      	b.n	8005b10 <_strtod_l+0x30>
 8005b92:	2a2d      	cmp	r2, #45	; 0x2d
 8005b94:	d1c7      	bne.n	8005b26 <_strtod_l+0x46>
 8005b96:	2201      	movs	r2, #1
 8005b98:	920a      	str	r2, [sp, #40]	; 0x28
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1c2      	bne.n	8005b2a <_strtod_l+0x4a>
 8005ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ba6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 856e 	bne.w	800668c <_strtod_l+0xbac>
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	e7e1      	b.n	8005b7a <_strtod_l+0x9a>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	e7ee      	b.n	8005b98 <_strtod_l+0xb8>
 8005bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005bbc:	b13a      	cbz	r2, 8005bce <_strtod_l+0xee>
 8005bbe:	2135      	movs	r1, #53	; 0x35
 8005bc0:	a81a      	add	r0, sp, #104	; 0x68
 8005bc2:	f002 fca2 	bl	800850a <__copybits>
 8005bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f002 f861 	bl	8007c90 <_Bfree>
 8005bce:	3f01      	subs	r7, #1
 8005bd0:	2f04      	cmp	r7, #4
 8005bd2:	d806      	bhi.n	8005be2 <_strtod_l+0x102>
 8005bd4:	e8df f007 	tbb	[pc, r7]
 8005bd8:	1714030a 	.word	0x1714030a
 8005bdc:	0a          	.byte	0x0a
 8005bdd:	00          	.byte	0x00
 8005bde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005be2:	0728      	lsls	r0, r5, #28
 8005be4:	d5c0      	bpl.n	8005b68 <_strtod_l+0x88>
 8005be6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005bea:	e7bd      	b.n	8005b68 <_strtod_l+0x88>
 8005bec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005bf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005bfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005bfe:	e7f0      	b.n	8005be2 <_strtod_l+0x102>
 8005c00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005d84 <_strtod_l+0x2a4>
 8005c04:	e7ed      	b.n	8005be2 <_strtod_l+0x102>
 8005c06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005c0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005c0e:	e7e8      	b.n	8005be2 <_strtod_l+0x102>
 8005c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d0f9      	beq.n	8005c10 <_strtod_l+0x130>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0a3      	beq.n	8005b68 <_strtod_l+0x88>
 8005c20:	2301      	movs	r3, #1
 8005c22:	f04f 0900 	mov.w	r9, #0
 8005c26:	9304      	str	r3, [sp, #16]
 8005c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c2a:	9308      	str	r3, [sp, #32]
 8005c2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c30:	464f      	mov	r7, r9
 8005c32:	220a      	movs	r2, #10
 8005c34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005c36:	7806      	ldrb	r6, [r0, #0]
 8005c38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005c3c:	b2d9      	uxtb	r1, r3
 8005c3e:	2909      	cmp	r1, #9
 8005c40:	d92a      	bls.n	8005c98 <_strtod_l+0x1b8>
 8005c42:	9905      	ldr	r1, [sp, #20]
 8005c44:	462a      	mov	r2, r5
 8005c46:	f002 ff0f 	bl	8008a68 <strncmp>
 8005c4a:	b398      	cbz	r0, 8005cb4 <_strtod_l+0x1d4>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4632      	mov	r2, r6
 8005c50:	463d      	mov	r5, r7
 8005c52:	9005      	str	r0, [sp, #20]
 8005c54:	4603      	mov	r3, r0
 8005c56:	2a65      	cmp	r2, #101	; 0x65
 8005c58:	d001      	beq.n	8005c5e <_strtod_l+0x17e>
 8005c5a:	2a45      	cmp	r2, #69	; 0x45
 8005c5c:	d118      	bne.n	8005c90 <_strtod_l+0x1b0>
 8005c5e:	b91d      	cbnz	r5, 8005c68 <_strtod_l+0x188>
 8005c60:	9a04      	ldr	r2, [sp, #16]
 8005c62:	4302      	orrs	r2, r0
 8005c64:	d09e      	beq.n	8005ba4 <_strtod_l+0xc4>
 8005c66:	2500      	movs	r5, #0
 8005c68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005c6c:	f108 0201 	add.w	r2, r8, #1
 8005c70:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005c76:	2a2b      	cmp	r2, #43	; 0x2b
 8005c78:	d075      	beq.n	8005d66 <_strtod_l+0x286>
 8005c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8005c7c:	d07b      	beq.n	8005d76 <_strtod_l+0x296>
 8005c7e:	f04f 0c00 	mov.w	ip, #0
 8005c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c86:	2909      	cmp	r1, #9
 8005c88:	f240 8082 	bls.w	8005d90 <_strtod_l+0x2b0>
 8005c8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c90:	2600      	movs	r6, #0
 8005c92:	e09d      	b.n	8005dd0 <_strtod_l+0x2f0>
 8005c94:	2300      	movs	r3, #0
 8005c96:	e7c4      	b.n	8005c22 <_strtod_l+0x142>
 8005c98:	2f08      	cmp	r7, #8
 8005c9a:	bfd8      	it	le
 8005c9c:	9907      	ldrle	r1, [sp, #28]
 8005c9e:	f100 0001 	add.w	r0, r0, #1
 8005ca2:	bfda      	itte	le
 8005ca4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ca8:	9307      	strle	r3, [sp, #28]
 8005caa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005cae:	3701      	adds	r7, #1
 8005cb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005cb2:	e7bf      	b.n	8005c34 <_strtod_l+0x154>
 8005cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cb6:	195a      	adds	r2, r3, r5
 8005cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cba:	5d5a      	ldrb	r2, [r3, r5]
 8005cbc:	2f00      	cmp	r7, #0
 8005cbe:	d037      	beq.n	8005d30 <_strtod_l+0x250>
 8005cc0:	9005      	str	r0, [sp, #20]
 8005cc2:	463d      	mov	r5, r7
 8005cc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	d912      	bls.n	8005cf2 <_strtod_l+0x212>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e7c2      	b.n	8005c56 <_strtod_l+0x176>
 8005cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cd6:	785a      	ldrb	r2, [r3, #1]
 8005cd8:	3001      	adds	r0, #1
 8005cda:	2a30      	cmp	r2, #48	; 0x30
 8005cdc:	d0f8      	beq.n	8005cd0 <_strtod_l+0x1f0>
 8005cde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	f200 84d9 	bhi.w	800669a <_strtod_l+0xbba>
 8005ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cea:	9005      	str	r0, [sp, #20]
 8005cec:	2000      	movs	r0, #0
 8005cee:	9308      	str	r3, [sp, #32]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	3a30      	subs	r2, #48	; 0x30
 8005cf4:	f100 0301 	add.w	r3, r0, #1
 8005cf8:	d014      	beq.n	8005d24 <_strtod_l+0x244>
 8005cfa:	9905      	ldr	r1, [sp, #20]
 8005cfc:	4419      	add	r1, r3
 8005cfe:	9105      	str	r1, [sp, #20]
 8005d00:	462b      	mov	r3, r5
 8005d02:	eb00 0e05 	add.w	lr, r0, r5
 8005d06:	210a      	movs	r1, #10
 8005d08:	4573      	cmp	r3, lr
 8005d0a:	d113      	bne.n	8005d34 <_strtod_l+0x254>
 8005d0c:	182b      	adds	r3, r5, r0
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	f105 0501 	add.w	r5, r5, #1
 8005d14:	4405      	add	r5, r0
 8005d16:	dc1c      	bgt.n	8005d52 <_strtod_l+0x272>
 8005d18:	9907      	ldr	r1, [sp, #28]
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	fb03 2301 	mla	r3, r3, r1, r2
 8005d20:	9307      	str	r3, [sp, #28]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d26:	1c51      	adds	r1, r2, #1
 8005d28:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d2a:	7852      	ldrb	r2, [r2, #1]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	e7c9      	b.n	8005cc4 <_strtod_l+0x1e4>
 8005d30:	4638      	mov	r0, r7
 8005d32:	e7d2      	b.n	8005cda <_strtod_l+0x1fa>
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	dc04      	bgt.n	8005d42 <_strtod_l+0x262>
 8005d38:	9e07      	ldr	r6, [sp, #28]
 8005d3a:	434e      	muls	r6, r1
 8005d3c:	9607      	str	r6, [sp, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	e7e2      	b.n	8005d08 <_strtod_l+0x228>
 8005d42:	f103 0c01 	add.w	ip, r3, #1
 8005d46:	f1bc 0f10 	cmp.w	ip, #16
 8005d4a:	bfd8      	it	le
 8005d4c:	fb01 f909 	mulle.w	r9, r1, r9
 8005d50:	e7f5      	b.n	8005d3e <_strtod_l+0x25e>
 8005d52:	2d10      	cmp	r5, #16
 8005d54:	bfdc      	itt	le
 8005d56:	230a      	movle	r3, #10
 8005d58:	fb03 2909 	mlale	r9, r3, r9, r2
 8005d5c:	e7e1      	b.n	8005d22 <_strtod_l+0x242>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9305      	str	r3, [sp, #20]
 8005d62:	2301      	movs	r3, #1
 8005d64:	e77c      	b.n	8005c60 <_strtod_l+0x180>
 8005d66:	f04f 0c00 	mov.w	ip, #0
 8005d6a:	f108 0202 	add.w	r2, r8, #2
 8005d6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005d74:	e785      	b.n	8005c82 <_strtod_l+0x1a2>
 8005d76:	f04f 0c01 	mov.w	ip, #1
 8005d7a:	e7f6      	b.n	8005d6a <_strtod_l+0x28a>
 8005d7c:	08009b28 	.word	0x08009b28
 8005d80:	080098e0 	.word	0x080098e0
 8005d84:	7ff00000 	.word	0x7ff00000
 8005d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d8a:	1c51      	adds	r1, r2, #1
 8005d8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d8e:	7852      	ldrb	r2, [r2, #1]
 8005d90:	2a30      	cmp	r2, #48	; 0x30
 8005d92:	d0f9      	beq.n	8005d88 <_strtod_l+0x2a8>
 8005d94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d98:	2908      	cmp	r1, #8
 8005d9a:	f63f af79 	bhi.w	8005c90 <_strtod_l+0x1b0>
 8005d9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005da2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005da4:	9206      	str	r2, [sp, #24]
 8005da6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005da8:	1c51      	adds	r1, r2, #1
 8005daa:	9117      	str	r1, [sp, #92]	; 0x5c
 8005dac:	7852      	ldrb	r2, [r2, #1]
 8005dae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005db2:	2e09      	cmp	r6, #9
 8005db4:	d937      	bls.n	8005e26 <_strtod_l+0x346>
 8005db6:	9e06      	ldr	r6, [sp, #24]
 8005db8:	1b89      	subs	r1, r1, r6
 8005dba:	2908      	cmp	r1, #8
 8005dbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005dc0:	dc02      	bgt.n	8005dc8 <_strtod_l+0x2e8>
 8005dc2:	4576      	cmp	r6, lr
 8005dc4:	bfa8      	it	ge
 8005dc6:	4676      	movge	r6, lr
 8005dc8:	f1bc 0f00 	cmp.w	ip, #0
 8005dcc:	d000      	beq.n	8005dd0 <_strtod_l+0x2f0>
 8005dce:	4276      	negs	r6, r6
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	d14d      	bne.n	8005e70 <_strtod_l+0x390>
 8005dd4:	9904      	ldr	r1, [sp, #16]
 8005dd6:	4301      	orrs	r1, r0
 8005dd8:	f47f aec6 	bne.w	8005b68 <_strtod_l+0x88>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f aee1 	bne.w	8005ba4 <_strtod_l+0xc4>
 8005de2:	2a69      	cmp	r2, #105	; 0x69
 8005de4:	d027      	beq.n	8005e36 <_strtod_l+0x356>
 8005de6:	dc24      	bgt.n	8005e32 <_strtod_l+0x352>
 8005de8:	2a49      	cmp	r2, #73	; 0x49
 8005dea:	d024      	beq.n	8005e36 <_strtod_l+0x356>
 8005dec:	2a4e      	cmp	r2, #78	; 0x4e
 8005dee:	f47f aed9 	bne.w	8005ba4 <_strtod_l+0xc4>
 8005df2:	499f      	ldr	r1, [pc, #636]	; (8006070 <_strtod_l+0x590>)
 8005df4:	a817      	add	r0, sp, #92	; 0x5c
 8005df6:	f001 fe3d 	bl	8007a74 <__match>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f43f aed2 	beq.w	8005ba4 <_strtod_l+0xc4>
 8005e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b28      	cmp	r3, #40	; 0x28
 8005e06:	d12d      	bne.n	8005e64 <_strtod_l+0x384>
 8005e08:	499a      	ldr	r1, [pc, #616]	; (8006074 <_strtod_l+0x594>)
 8005e0a:	aa1a      	add	r2, sp, #104	; 0x68
 8005e0c:	a817      	add	r0, sp, #92	; 0x5c
 8005e0e:	f001 fe45 	bl	8007a9c <__hexnan>
 8005e12:	2805      	cmp	r0, #5
 8005e14:	d126      	bne.n	8005e64 <_strtod_l+0x384>
 8005e16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005e1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005e20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005e24:	e6a0      	b.n	8005b68 <_strtod_l+0x88>
 8005e26:	210a      	movs	r1, #10
 8005e28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005e2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005e30:	e7b9      	b.n	8005da6 <_strtod_l+0x2c6>
 8005e32:	2a6e      	cmp	r2, #110	; 0x6e
 8005e34:	e7db      	b.n	8005dee <_strtod_l+0x30e>
 8005e36:	4990      	ldr	r1, [pc, #576]	; (8006078 <_strtod_l+0x598>)
 8005e38:	a817      	add	r0, sp, #92	; 0x5c
 8005e3a:	f001 fe1b 	bl	8007a74 <__match>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f43f aeb0 	beq.w	8005ba4 <_strtod_l+0xc4>
 8005e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e46:	498d      	ldr	r1, [pc, #564]	; (800607c <_strtod_l+0x59c>)
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	a817      	add	r0, sp, #92	; 0x5c
 8005e4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e4e:	f001 fe11 	bl	8007a74 <__match>
 8005e52:	b910      	cbnz	r0, 8005e5a <_strtod_l+0x37a>
 8005e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e56:	3301      	adds	r3, #1
 8005e58:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800608c <_strtod_l+0x5ac>
 8005e5e:	f04f 0a00 	mov.w	sl, #0
 8005e62:	e681      	b.n	8005b68 <_strtod_l+0x88>
 8005e64:	4886      	ldr	r0, [pc, #536]	; (8006080 <_strtod_l+0x5a0>)
 8005e66:	f002 fde7 	bl	8008a38 <nan>
 8005e6a:	ec5b ab10 	vmov	sl, fp, d0
 8005e6e:	e67b      	b.n	8005b68 <_strtod_l+0x88>
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	9807      	ldr	r0, [sp, #28]
 8005e74:	1af3      	subs	r3, r6, r3
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	bf08      	it	eq
 8005e7a:	462f      	moveq	r7, r5
 8005e7c:	2d10      	cmp	r5, #16
 8005e7e:	9306      	str	r3, [sp, #24]
 8005e80:	46a8      	mov	r8, r5
 8005e82:	bfa8      	it	ge
 8005e84:	f04f 0810 	movge.w	r8, #16
 8005e88:	f7fa fb54 	bl	8000534 <__aeabi_ui2d>
 8005e8c:	2d09      	cmp	r5, #9
 8005e8e:	4682      	mov	sl, r0
 8005e90:	468b      	mov	fp, r1
 8005e92:	dd13      	ble.n	8005ebc <_strtod_l+0x3dc>
 8005e94:	4b7b      	ldr	r3, [pc, #492]	; (8006084 <_strtod_l+0x5a4>)
 8005e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e9e:	f7fa fbc3 	bl	8000628 <__aeabi_dmul>
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	4648      	mov	r0, r9
 8005ea6:	468b      	mov	fp, r1
 8005ea8:	f7fa fb44 	bl	8000534 <__aeabi_ui2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	f7fa fa02 	bl	80002bc <__adddf3>
 8005eb8:	4682      	mov	sl, r0
 8005eba:	468b      	mov	fp, r1
 8005ebc:	2d0f      	cmp	r5, #15
 8005ebe:	dc38      	bgt.n	8005f32 <_strtod_l+0x452>
 8005ec0:	9b06      	ldr	r3, [sp, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f43f ae50 	beq.w	8005b68 <_strtod_l+0x88>
 8005ec8:	dd24      	ble.n	8005f14 <_strtod_l+0x434>
 8005eca:	2b16      	cmp	r3, #22
 8005ecc:	dc0b      	bgt.n	8005ee6 <_strtod_l+0x406>
 8005ece:	496d      	ldr	r1, [pc, #436]	; (8006084 <_strtod_l+0x5a4>)
 8005ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed8:	4652      	mov	r2, sl
 8005eda:	465b      	mov	r3, fp
 8005edc:	f7fa fba4 	bl	8000628 <__aeabi_dmul>
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	468b      	mov	fp, r1
 8005ee4:	e640      	b.n	8005b68 <_strtod_l+0x88>
 8005ee6:	9a06      	ldr	r2, [sp, #24]
 8005ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005eec:	4293      	cmp	r3, r2
 8005eee:	db20      	blt.n	8005f32 <_strtod_l+0x452>
 8005ef0:	4c64      	ldr	r4, [pc, #400]	; (8006084 <_strtod_l+0x5a4>)
 8005ef2:	f1c5 050f 	rsb	r5, r5, #15
 8005ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005efa:	4652      	mov	r2, sl
 8005efc:	465b      	mov	r3, fp
 8005efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f02:	f7fa fb91 	bl	8000628 <__aeabi_dmul>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	1b5d      	subs	r5, r3, r5
 8005f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f12:	e7e3      	b.n	8005edc <_strtod_l+0x3fc>
 8005f14:	9b06      	ldr	r3, [sp, #24]
 8005f16:	3316      	adds	r3, #22
 8005f18:	db0b      	blt.n	8005f32 <_strtod_l+0x452>
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	1b9e      	subs	r6, r3, r6
 8005f1e:	4b59      	ldr	r3, [pc, #356]	; (8006084 <_strtod_l+0x5a4>)
 8005f20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f28:	4650      	mov	r0, sl
 8005f2a:	4659      	mov	r1, fp
 8005f2c:	f7fa fca6 	bl	800087c <__aeabi_ddiv>
 8005f30:	e7d6      	b.n	8005ee0 <_strtod_l+0x400>
 8005f32:	9b06      	ldr	r3, [sp, #24]
 8005f34:	eba5 0808 	sub.w	r8, r5, r8
 8005f38:	4498      	add	r8, r3
 8005f3a:	f1b8 0f00 	cmp.w	r8, #0
 8005f3e:	dd74      	ble.n	800602a <_strtod_l+0x54a>
 8005f40:	f018 030f 	ands.w	r3, r8, #15
 8005f44:	d00a      	beq.n	8005f5c <_strtod_l+0x47c>
 8005f46:	494f      	ldr	r1, [pc, #316]	; (8006084 <_strtod_l+0x5a4>)
 8005f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	465b      	mov	r3, fp
 8005f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f54:	f7fa fb68 	bl	8000628 <__aeabi_dmul>
 8005f58:	4682      	mov	sl, r0
 8005f5a:	468b      	mov	fp, r1
 8005f5c:	f038 080f 	bics.w	r8, r8, #15
 8005f60:	d04f      	beq.n	8006002 <_strtod_l+0x522>
 8005f62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f66:	dd22      	ble.n	8005fae <_strtod_l+0x4ce>
 8005f68:	2500      	movs	r5, #0
 8005f6a:	462e      	mov	r6, r5
 8005f6c:	9507      	str	r5, [sp, #28]
 8005f6e:	9505      	str	r5, [sp, #20]
 8005f70:	2322      	movs	r3, #34	; 0x22
 8005f72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800608c <_strtod_l+0x5ac>
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	f04f 0a00 	mov.w	sl, #0
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f43f adf2 	beq.w	8005b68 <_strtod_l+0x88>
 8005f84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f86:	4620      	mov	r0, r4
 8005f88:	f001 fe82 	bl	8007c90 <_Bfree>
 8005f8c:	9905      	ldr	r1, [sp, #20]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f001 fe7e 	bl	8007c90 <_Bfree>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4620      	mov	r0, r4
 8005f98:	f001 fe7a 	bl	8007c90 <_Bfree>
 8005f9c:	9907      	ldr	r1, [sp, #28]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f001 fe76 	bl	8007c90 <_Bfree>
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f001 fe72 	bl	8007c90 <_Bfree>
 8005fac:	e5dc      	b.n	8005b68 <_strtod_l+0x88>
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <_strtod_l+0x5a8>)
 8005fb0:	9304      	str	r3, [sp, #16]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005fb8:	4650      	mov	r0, sl
 8005fba:	4659      	mov	r1, fp
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	f1b8 0f01 	cmp.w	r8, #1
 8005fc2:	dc21      	bgt.n	8006008 <_strtod_l+0x528>
 8005fc4:	b10b      	cbz	r3, 8005fca <_strtod_l+0x4ea>
 8005fc6:	4682      	mov	sl, r0
 8005fc8:	468b      	mov	fp, r1
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <_strtod_l+0x5a8>)
 8005fcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005fd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	465b      	mov	r3, fp
 8005fd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005fdc:	f7fa fb24 	bl	8000628 <__aeabi_dmul>
 8005fe0:	4b2a      	ldr	r3, [pc, #168]	; (800608c <_strtod_l+0x5ac>)
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	400b      	ands	r3, r1
 8005fe6:	492a      	ldr	r1, [pc, #168]	; (8006090 <_strtod_l+0x5b0>)
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	4682      	mov	sl, r0
 8005fec:	d8bc      	bhi.n	8005f68 <_strtod_l+0x488>
 8005fee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ff2:	428b      	cmp	r3, r1
 8005ff4:	bf86      	itte	hi
 8005ff6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006094 <_strtod_l+0x5b4>
 8005ffa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005ffe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006002:	2300      	movs	r3, #0
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	e084      	b.n	8006112 <_strtod_l+0x632>
 8006008:	f018 0f01 	tst.w	r8, #1
 800600c:	d005      	beq.n	800601a <_strtod_l+0x53a>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa fb08 	bl	8000628 <__aeabi_dmul>
 8006018:	2301      	movs	r3, #1
 800601a:	9a04      	ldr	r2, [sp, #16]
 800601c:	3208      	adds	r2, #8
 800601e:	f109 0901 	add.w	r9, r9, #1
 8006022:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006026:	9204      	str	r2, [sp, #16]
 8006028:	e7c9      	b.n	8005fbe <_strtod_l+0x4de>
 800602a:	d0ea      	beq.n	8006002 <_strtod_l+0x522>
 800602c:	f1c8 0800 	rsb	r8, r8, #0
 8006030:	f018 020f 	ands.w	r2, r8, #15
 8006034:	d00a      	beq.n	800604c <_strtod_l+0x56c>
 8006036:	4b13      	ldr	r3, [pc, #76]	; (8006084 <_strtod_l+0x5a4>)
 8006038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa fc1a 	bl	800087c <__aeabi_ddiv>
 8006048:	4682      	mov	sl, r0
 800604a:	468b      	mov	fp, r1
 800604c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006050:	d0d7      	beq.n	8006002 <_strtod_l+0x522>
 8006052:	f1b8 0f1f 	cmp.w	r8, #31
 8006056:	dd1f      	ble.n	8006098 <_strtod_l+0x5b8>
 8006058:	2500      	movs	r5, #0
 800605a:	462e      	mov	r6, r5
 800605c:	9507      	str	r5, [sp, #28]
 800605e:	9505      	str	r5, [sp, #20]
 8006060:	2322      	movs	r3, #34	; 0x22
 8006062:	f04f 0a00 	mov.w	sl, #0
 8006066:	f04f 0b00 	mov.w	fp, #0
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	e786      	b.n	8005f7c <_strtod_l+0x49c>
 800606e:	bf00      	nop
 8006070:	080098b1 	.word	0x080098b1
 8006074:	080098f4 	.word	0x080098f4
 8006078:	080098a9 	.word	0x080098a9
 800607c:	08009a34 	.word	0x08009a34
 8006080:	08009ce0 	.word	0x08009ce0
 8006084:	08009bc0 	.word	0x08009bc0
 8006088:	08009b98 	.word	0x08009b98
 800608c:	7ff00000 	.word	0x7ff00000
 8006090:	7ca00000 	.word	0x7ca00000
 8006094:	7fefffff 	.word	0x7fefffff
 8006098:	f018 0310 	ands.w	r3, r8, #16
 800609c:	bf18      	it	ne
 800609e:	236a      	movne	r3, #106	; 0x6a
 80060a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006450 <_strtod_l+0x970>
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	4650      	mov	r0, sl
 80060a8:	4659      	mov	r1, fp
 80060aa:	2300      	movs	r3, #0
 80060ac:	f018 0f01 	tst.w	r8, #1
 80060b0:	d004      	beq.n	80060bc <_strtod_l+0x5dc>
 80060b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80060b6:	f7fa fab7 	bl	8000628 <__aeabi_dmul>
 80060ba:	2301      	movs	r3, #1
 80060bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80060c0:	f109 0908 	add.w	r9, r9, #8
 80060c4:	d1f2      	bne.n	80060ac <_strtod_l+0x5cc>
 80060c6:	b10b      	cbz	r3, 80060cc <_strtod_l+0x5ec>
 80060c8:	4682      	mov	sl, r0
 80060ca:	468b      	mov	fp, r1
 80060cc:	9b04      	ldr	r3, [sp, #16]
 80060ce:	b1c3      	cbz	r3, 8006102 <_strtod_l+0x622>
 80060d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80060d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060d8:	2b00      	cmp	r3, #0
 80060da:	4659      	mov	r1, fp
 80060dc:	dd11      	ble.n	8006102 <_strtod_l+0x622>
 80060de:	2b1f      	cmp	r3, #31
 80060e0:	f340 8124 	ble.w	800632c <_strtod_l+0x84c>
 80060e4:	2b34      	cmp	r3, #52	; 0x34
 80060e6:	bfde      	ittt	le
 80060e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80060ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80060f0:	fa03 f202 	lslle.w	r2, r3, r2
 80060f4:	f04f 0a00 	mov.w	sl, #0
 80060f8:	bfcc      	ite	gt
 80060fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80060fe:	ea02 0b01 	andle.w	fp, r2, r1
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	4650      	mov	r0, sl
 8006108:	4659      	mov	r1, fp
 800610a:	f7fa fcf5 	bl	8000af8 <__aeabi_dcmpeq>
 800610e:	2800      	cmp	r0, #0
 8006110:	d1a2      	bne.n	8006058 <_strtod_l+0x578>
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	9908      	ldr	r1, [sp, #32]
 8006118:	462b      	mov	r3, r5
 800611a:	463a      	mov	r2, r7
 800611c:	4620      	mov	r0, r4
 800611e:	f001 fe1f 	bl	8007d60 <__s2b>
 8006122:	9007      	str	r0, [sp, #28]
 8006124:	2800      	cmp	r0, #0
 8006126:	f43f af1f 	beq.w	8005f68 <_strtod_l+0x488>
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	1b9e      	subs	r6, r3, r6
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	bfb4      	ite	lt
 8006134:	4633      	movlt	r3, r6
 8006136:	2300      	movge	r3, #0
 8006138:	930c      	str	r3, [sp, #48]	; 0x30
 800613a:	9b06      	ldr	r3, [sp, #24]
 800613c:	2500      	movs	r5, #0
 800613e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006142:	9312      	str	r3, [sp, #72]	; 0x48
 8006144:	462e      	mov	r6, r5
 8006146:	9b07      	ldr	r3, [sp, #28]
 8006148:	4620      	mov	r0, r4
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	f001 fd60 	bl	8007c10 <_Balloc>
 8006150:	9005      	str	r0, [sp, #20]
 8006152:	2800      	cmp	r0, #0
 8006154:	f43f af0c 	beq.w	8005f70 <_strtod_l+0x490>
 8006158:	9b07      	ldr	r3, [sp, #28]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	3202      	adds	r2, #2
 800615e:	f103 010c 	add.w	r1, r3, #12
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	300c      	adds	r0, #12
 8006166:	f7fe fde9 	bl	8004d3c <memcpy>
 800616a:	ec4b ab10 	vmov	d0, sl, fp
 800616e:	aa1a      	add	r2, sp, #104	; 0x68
 8006170:	a919      	add	r1, sp, #100	; 0x64
 8006172:	4620      	mov	r0, r4
 8006174:	f002 f93a 	bl	80083ec <__d2b>
 8006178:	ec4b ab18 	vmov	d8, sl, fp
 800617c:	9018      	str	r0, [sp, #96]	; 0x60
 800617e:	2800      	cmp	r0, #0
 8006180:	f43f aef6 	beq.w	8005f70 <_strtod_l+0x490>
 8006184:	2101      	movs	r1, #1
 8006186:	4620      	mov	r0, r4
 8006188:	f001 fe84 	bl	8007e94 <__i2b>
 800618c:	4606      	mov	r6, r0
 800618e:	2800      	cmp	r0, #0
 8006190:	f43f aeee 	beq.w	8005f70 <_strtod_l+0x490>
 8006194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006196:	9904      	ldr	r1, [sp, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	bfab      	itete	ge
 800619c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800619e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80061a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80061a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80061a6:	bfac      	ite	ge
 80061a8:	eb03 0902 	addge.w	r9, r3, r2
 80061ac:	1ad7      	sublt	r7, r2, r3
 80061ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061b0:	eba3 0801 	sub.w	r8, r3, r1
 80061b4:	4490      	add	r8, r2
 80061b6:	4ba1      	ldr	r3, [pc, #644]	; (800643c <_strtod_l+0x95c>)
 80061b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80061bc:	4598      	cmp	r8, r3
 80061be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061c2:	f280 80c7 	bge.w	8006354 <_strtod_l+0x874>
 80061c6:	eba3 0308 	sub.w	r3, r3, r8
 80061ca:	2b1f      	cmp	r3, #31
 80061cc:	eba2 0203 	sub.w	r2, r2, r3
 80061d0:	f04f 0101 	mov.w	r1, #1
 80061d4:	f300 80b1 	bgt.w	800633a <_strtod_l+0x85a>
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	930d      	str	r3, [sp, #52]	; 0x34
 80061de:	2300      	movs	r3, #0
 80061e0:	9308      	str	r3, [sp, #32]
 80061e2:	eb09 0802 	add.w	r8, r9, r2
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	45c1      	cmp	r9, r8
 80061ea:	4417      	add	r7, r2
 80061ec:	441f      	add	r7, r3
 80061ee:	464b      	mov	r3, r9
 80061f0:	bfa8      	it	ge
 80061f2:	4643      	movge	r3, r8
 80061f4:	42bb      	cmp	r3, r7
 80061f6:	bfa8      	it	ge
 80061f8:	463b      	movge	r3, r7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfc2      	ittt	gt
 80061fe:	eba8 0803 	subgt.w	r8, r8, r3
 8006202:	1aff      	subgt	r7, r7, r3
 8006204:	eba9 0903 	subgt.w	r9, r9, r3
 8006208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	dd17      	ble.n	800623e <_strtod_l+0x75e>
 800620e:	4631      	mov	r1, r6
 8006210:	461a      	mov	r2, r3
 8006212:	4620      	mov	r0, r4
 8006214:	f001 fefe 	bl	8008014 <__pow5mult>
 8006218:	4606      	mov	r6, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	f43f aea8 	beq.w	8005f70 <_strtod_l+0x490>
 8006220:	4601      	mov	r1, r0
 8006222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006224:	4620      	mov	r0, r4
 8006226:	f001 fe4b 	bl	8007ec0 <__multiply>
 800622a:	900b      	str	r0, [sp, #44]	; 0x2c
 800622c:	2800      	cmp	r0, #0
 800622e:	f43f ae9f 	beq.w	8005f70 <_strtod_l+0x490>
 8006232:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006234:	4620      	mov	r0, r4
 8006236:	f001 fd2b 	bl	8007c90 <_Bfree>
 800623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623c:	9318      	str	r3, [sp, #96]	; 0x60
 800623e:	f1b8 0f00 	cmp.w	r8, #0
 8006242:	f300 808c 	bgt.w	800635e <_strtod_l+0x87e>
 8006246:	9b06      	ldr	r3, [sp, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	dd08      	ble.n	800625e <_strtod_l+0x77e>
 800624c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800624e:	9905      	ldr	r1, [sp, #20]
 8006250:	4620      	mov	r0, r4
 8006252:	f001 fedf 	bl	8008014 <__pow5mult>
 8006256:	9005      	str	r0, [sp, #20]
 8006258:	2800      	cmp	r0, #0
 800625a:	f43f ae89 	beq.w	8005f70 <_strtod_l+0x490>
 800625e:	2f00      	cmp	r7, #0
 8006260:	dd08      	ble.n	8006274 <_strtod_l+0x794>
 8006262:	9905      	ldr	r1, [sp, #20]
 8006264:	463a      	mov	r2, r7
 8006266:	4620      	mov	r0, r4
 8006268:	f001 ff2e 	bl	80080c8 <__lshift>
 800626c:	9005      	str	r0, [sp, #20]
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f ae7e 	beq.w	8005f70 <_strtod_l+0x490>
 8006274:	f1b9 0f00 	cmp.w	r9, #0
 8006278:	dd08      	ble.n	800628c <_strtod_l+0x7ac>
 800627a:	4631      	mov	r1, r6
 800627c:	464a      	mov	r2, r9
 800627e:	4620      	mov	r0, r4
 8006280:	f001 ff22 	bl	80080c8 <__lshift>
 8006284:	4606      	mov	r6, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f ae72 	beq.w	8005f70 <_strtod_l+0x490>
 800628c:	9a05      	ldr	r2, [sp, #20]
 800628e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006290:	4620      	mov	r0, r4
 8006292:	f001 ffa5 	bl	80081e0 <__mdiff>
 8006296:	4605      	mov	r5, r0
 8006298:	2800      	cmp	r0, #0
 800629a:	f43f ae69 	beq.w	8005f70 <_strtod_l+0x490>
 800629e:	68c3      	ldr	r3, [r0, #12]
 80062a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a2:	2300      	movs	r3, #0
 80062a4:	60c3      	str	r3, [r0, #12]
 80062a6:	4631      	mov	r1, r6
 80062a8:	f001 ff7e 	bl	80081a8 <__mcmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	da60      	bge.n	8006372 <_strtod_l+0x892>
 80062b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b2:	ea53 030a 	orrs.w	r3, r3, sl
 80062b6:	f040 8082 	bne.w	80063be <_strtod_l+0x8de>
 80062ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d17d      	bne.n	80063be <_strtod_l+0x8de>
 80062c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062c6:	0d1b      	lsrs	r3, r3, #20
 80062c8:	051b      	lsls	r3, r3, #20
 80062ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062ce:	d976      	bls.n	80063be <_strtod_l+0x8de>
 80062d0:	696b      	ldr	r3, [r5, #20]
 80062d2:	b913      	cbnz	r3, 80062da <_strtod_l+0x7fa>
 80062d4:	692b      	ldr	r3, [r5, #16]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	dd71      	ble.n	80063be <_strtod_l+0x8de>
 80062da:	4629      	mov	r1, r5
 80062dc:	2201      	movs	r2, #1
 80062de:	4620      	mov	r0, r4
 80062e0:	f001 fef2 	bl	80080c8 <__lshift>
 80062e4:	4631      	mov	r1, r6
 80062e6:	4605      	mov	r5, r0
 80062e8:	f001 ff5e 	bl	80081a8 <__mcmp>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	dd66      	ble.n	80063be <_strtod_l+0x8de>
 80062f0:	9904      	ldr	r1, [sp, #16]
 80062f2:	4a53      	ldr	r2, [pc, #332]	; (8006440 <_strtod_l+0x960>)
 80062f4:	465b      	mov	r3, fp
 80062f6:	2900      	cmp	r1, #0
 80062f8:	f000 8081 	beq.w	80063fe <_strtod_l+0x91e>
 80062fc:	ea02 010b 	and.w	r1, r2, fp
 8006300:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006304:	dc7b      	bgt.n	80063fe <_strtod_l+0x91e>
 8006306:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800630a:	f77f aea9 	ble.w	8006060 <_strtod_l+0x580>
 800630e:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <_strtod_l+0x964>)
 8006310:	4650      	mov	r0, sl
 8006312:	4659      	mov	r1, fp
 8006314:	2200      	movs	r2, #0
 8006316:	f7fa f987 	bl	8000628 <__aeabi_dmul>
 800631a:	460b      	mov	r3, r1
 800631c:	4303      	orrs	r3, r0
 800631e:	bf08      	it	eq
 8006320:	2322      	moveq	r3, #34	; 0x22
 8006322:	4682      	mov	sl, r0
 8006324:	468b      	mov	fp, r1
 8006326:	bf08      	it	eq
 8006328:	6023      	streq	r3, [r4, #0]
 800632a:	e62b      	b.n	8005f84 <_strtod_l+0x4a4>
 800632c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	ea03 0a0a 	and.w	sl, r3, sl
 8006338:	e6e3      	b.n	8006102 <_strtod_l+0x622>
 800633a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800633e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800634a:	fa01 f308 	lsl.w	r3, r1, r8
 800634e:	9308      	str	r3, [sp, #32]
 8006350:	910d      	str	r1, [sp, #52]	; 0x34
 8006352:	e746      	b.n	80061e2 <_strtod_l+0x702>
 8006354:	2300      	movs	r3, #0
 8006356:	9308      	str	r3, [sp, #32]
 8006358:	2301      	movs	r3, #1
 800635a:	930d      	str	r3, [sp, #52]	; 0x34
 800635c:	e741      	b.n	80061e2 <_strtod_l+0x702>
 800635e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006360:	4642      	mov	r2, r8
 8006362:	4620      	mov	r0, r4
 8006364:	f001 feb0 	bl	80080c8 <__lshift>
 8006368:	9018      	str	r0, [sp, #96]	; 0x60
 800636a:	2800      	cmp	r0, #0
 800636c:	f47f af6b 	bne.w	8006246 <_strtod_l+0x766>
 8006370:	e5fe      	b.n	8005f70 <_strtod_l+0x490>
 8006372:	465f      	mov	r7, fp
 8006374:	d16e      	bne.n	8006454 <_strtod_l+0x974>
 8006376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800637c:	b342      	cbz	r2, 80063d0 <_strtod_l+0x8f0>
 800637e:	4a32      	ldr	r2, [pc, #200]	; (8006448 <_strtod_l+0x968>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d128      	bne.n	80063d6 <_strtod_l+0x8f6>
 8006384:	9b04      	ldr	r3, [sp, #16]
 8006386:	4651      	mov	r1, sl
 8006388:	b1eb      	cbz	r3, 80063c6 <_strtod_l+0x8e6>
 800638a:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <_strtod_l+0x960>)
 800638c:	403b      	ands	r3, r7
 800638e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006396:	d819      	bhi.n	80063cc <_strtod_l+0x8ec>
 8006398:	0d1b      	lsrs	r3, r3, #20
 800639a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	4299      	cmp	r1, r3
 80063a4:	d117      	bne.n	80063d6 <_strtod_l+0x8f6>
 80063a6:	4b29      	ldr	r3, [pc, #164]	; (800644c <_strtod_l+0x96c>)
 80063a8:	429f      	cmp	r7, r3
 80063aa:	d102      	bne.n	80063b2 <_strtod_l+0x8d2>
 80063ac:	3101      	adds	r1, #1
 80063ae:	f43f addf 	beq.w	8005f70 <_strtod_l+0x490>
 80063b2:	4b23      	ldr	r3, [pc, #140]	; (8006440 <_strtod_l+0x960>)
 80063b4:	403b      	ands	r3, r7
 80063b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80063ba:	f04f 0a00 	mov.w	sl, #0
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1a4      	bne.n	800630e <_strtod_l+0x82e>
 80063c4:	e5de      	b.n	8005f84 <_strtod_l+0x4a4>
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ca:	e7ea      	b.n	80063a2 <_strtod_l+0x8c2>
 80063cc:	4613      	mov	r3, r2
 80063ce:	e7e8      	b.n	80063a2 <_strtod_l+0x8c2>
 80063d0:	ea53 030a 	orrs.w	r3, r3, sl
 80063d4:	d08c      	beq.n	80062f0 <_strtod_l+0x810>
 80063d6:	9b08      	ldr	r3, [sp, #32]
 80063d8:	b1db      	cbz	r3, 8006412 <_strtod_l+0x932>
 80063da:	423b      	tst	r3, r7
 80063dc:	d0ef      	beq.n	80063be <_strtod_l+0x8de>
 80063de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e0:	9a04      	ldr	r2, [sp, #16]
 80063e2:	4650      	mov	r0, sl
 80063e4:	4659      	mov	r1, fp
 80063e6:	b1c3      	cbz	r3, 800641a <_strtod_l+0x93a>
 80063e8:	f7ff fb5e 	bl	8005aa8 <sulp>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	ec51 0b18 	vmov	r0, r1, d8
 80063f4:	f7f9 ff62 	bl	80002bc <__adddf3>
 80063f8:	4682      	mov	sl, r0
 80063fa:	468b      	mov	fp, r1
 80063fc:	e7df      	b.n	80063be <_strtod_l+0x8de>
 80063fe:	4013      	ands	r3, r2
 8006400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800640c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006410:	e7d5      	b.n	80063be <_strtod_l+0x8de>
 8006412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006414:	ea13 0f0a 	tst.w	r3, sl
 8006418:	e7e0      	b.n	80063dc <_strtod_l+0x8fc>
 800641a:	f7ff fb45 	bl	8005aa8 <sulp>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ec51 0b18 	vmov	r0, r1, d8
 8006426:	f7f9 ff47 	bl	80002b8 <__aeabi_dsub>
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	4682      	mov	sl, r0
 8006430:	468b      	mov	fp, r1
 8006432:	f7fa fb61 	bl	8000af8 <__aeabi_dcmpeq>
 8006436:	2800      	cmp	r0, #0
 8006438:	d0c1      	beq.n	80063be <_strtod_l+0x8de>
 800643a:	e611      	b.n	8006060 <_strtod_l+0x580>
 800643c:	fffffc02 	.word	0xfffffc02
 8006440:	7ff00000 	.word	0x7ff00000
 8006444:	39500000 	.word	0x39500000
 8006448:	000fffff 	.word	0x000fffff
 800644c:	7fefffff 	.word	0x7fefffff
 8006450:	08009908 	.word	0x08009908
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	f002 f824 	bl	80084a4 <__ratio>
 800645c:	ec59 8b10 	vmov	r8, r9, d0
 8006460:	ee10 0a10 	vmov	r0, s0
 8006464:	2200      	movs	r2, #0
 8006466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800646a:	4649      	mov	r1, r9
 800646c:	f7fa fb58 	bl	8000b20 <__aeabi_dcmple>
 8006470:	2800      	cmp	r0, #0
 8006472:	d07a      	beq.n	800656a <_strtod_l+0xa8a>
 8006474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d04a      	beq.n	8006510 <_strtod_l+0xa30>
 800647a:	4b95      	ldr	r3, [pc, #596]	; (80066d0 <_strtod_l+0xbf0>)
 800647c:	2200      	movs	r2, #0
 800647e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80066d0 <_strtod_l+0xbf0>
 8006486:	f04f 0800 	mov.w	r8, #0
 800648a:	4b92      	ldr	r3, [pc, #584]	; (80066d4 <_strtod_l+0xbf4>)
 800648c:	403b      	ands	r3, r7
 800648e:	930d      	str	r3, [sp, #52]	; 0x34
 8006490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006492:	4b91      	ldr	r3, [pc, #580]	; (80066d8 <_strtod_l+0xbf8>)
 8006494:	429a      	cmp	r2, r3
 8006496:	f040 80b0 	bne.w	80065fa <_strtod_l+0xb1a>
 800649a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800649e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80064a2:	ec4b ab10 	vmov	d0, sl, fp
 80064a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064aa:	f001 ff23 	bl	80082f4 <__ulp>
 80064ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064b2:	ec53 2b10 	vmov	r2, r3, d0
 80064b6:	f7fa f8b7 	bl	8000628 <__aeabi_dmul>
 80064ba:	4652      	mov	r2, sl
 80064bc:	465b      	mov	r3, fp
 80064be:	f7f9 fefd 	bl	80002bc <__adddf3>
 80064c2:	460b      	mov	r3, r1
 80064c4:	4983      	ldr	r1, [pc, #524]	; (80066d4 <_strtod_l+0xbf4>)
 80064c6:	4a85      	ldr	r2, [pc, #532]	; (80066dc <_strtod_l+0xbfc>)
 80064c8:	4019      	ands	r1, r3
 80064ca:	4291      	cmp	r1, r2
 80064cc:	4682      	mov	sl, r0
 80064ce:	d960      	bls.n	8006592 <_strtod_l+0xab2>
 80064d0:	ee18 3a90 	vmov	r3, s17
 80064d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80064d8:	4293      	cmp	r3, r2
 80064da:	d104      	bne.n	80064e6 <_strtod_l+0xa06>
 80064dc:	ee18 3a10 	vmov	r3, s16
 80064e0:	3301      	adds	r3, #1
 80064e2:	f43f ad45 	beq.w	8005f70 <_strtod_l+0x490>
 80064e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80066e8 <_strtod_l+0xc08>
 80064ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80064ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80064f0:	4620      	mov	r0, r4
 80064f2:	f001 fbcd 	bl	8007c90 <_Bfree>
 80064f6:	9905      	ldr	r1, [sp, #20]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f001 fbc9 	bl	8007c90 <_Bfree>
 80064fe:	4631      	mov	r1, r6
 8006500:	4620      	mov	r0, r4
 8006502:	f001 fbc5 	bl	8007c90 <_Bfree>
 8006506:	4629      	mov	r1, r5
 8006508:	4620      	mov	r0, r4
 800650a:	f001 fbc1 	bl	8007c90 <_Bfree>
 800650e:	e61a      	b.n	8006146 <_strtod_l+0x666>
 8006510:	f1ba 0f00 	cmp.w	sl, #0
 8006514:	d11b      	bne.n	800654e <_strtod_l+0xa6e>
 8006516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800651a:	b9f3      	cbnz	r3, 800655a <_strtod_l+0xa7a>
 800651c:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <_strtod_l+0xbf0>)
 800651e:	2200      	movs	r2, #0
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7fa faf2 	bl	8000b0c <__aeabi_dcmplt>
 8006528:	b9d0      	cbnz	r0, 8006560 <_strtod_l+0xa80>
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <_strtod_l+0xc00>)
 8006530:	2200      	movs	r2, #0
 8006532:	f7fa f879 	bl	8000628 <__aeabi_dmul>
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800653e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006542:	9315      	str	r3, [sp, #84]	; 0x54
 8006544:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006548:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800654c:	e79d      	b.n	800648a <_strtod_l+0x9aa>
 800654e:	f1ba 0f01 	cmp.w	sl, #1
 8006552:	d102      	bne.n	800655a <_strtod_l+0xa7a>
 8006554:	2f00      	cmp	r7, #0
 8006556:	f43f ad83 	beq.w	8006060 <_strtod_l+0x580>
 800655a:	4b62      	ldr	r3, [pc, #392]	; (80066e4 <_strtod_l+0xc04>)
 800655c:	2200      	movs	r2, #0
 800655e:	e78e      	b.n	800647e <_strtod_l+0x99e>
 8006560:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80066e0 <_strtod_l+0xc00>
 8006564:	f04f 0800 	mov.w	r8, #0
 8006568:	e7e7      	b.n	800653a <_strtod_l+0xa5a>
 800656a:	4b5d      	ldr	r3, [pc, #372]	; (80066e0 <_strtod_l+0xc00>)
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	2200      	movs	r2, #0
 8006572:	f7fa f859 	bl	8000628 <__aeabi_dmul>
 8006576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006578:	4680      	mov	r8, r0
 800657a:	4689      	mov	r9, r1
 800657c:	b933      	cbnz	r3, 800658c <_strtod_l+0xaac>
 800657e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006582:	900e      	str	r0, [sp, #56]	; 0x38
 8006584:	930f      	str	r3, [sp, #60]	; 0x3c
 8006586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800658a:	e7dd      	b.n	8006548 <_strtod_l+0xa68>
 800658c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006590:	e7f9      	b.n	8006586 <_strtod_l+0xaa6>
 8006592:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1a8      	bne.n	80064ee <_strtod_l+0xa0e>
 800659c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065a2:	0d1b      	lsrs	r3, r3, #20
 80065a4:	051b      	lsls	r3, r3, #20
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d1a1      	bne.n	80064ee <_strtod_l+0xa0e>
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7fa fb9b 	bl	8000ce8 <__aeabi_d2lz>
 80065b2:	f7fa f80b 	bl	80005cc <__aeabi_l2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe7b 	bl	80002b8 <__aeabi_dsub>
 80065c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065c8:	ea43 030a 	orr.w	r3, r3, sl
 80065cc:	4313      	orrs	r3, r2
 80065ce:	4680      	mov	r8, r0
 80065d0:	4689      	mov	r9, r1
 80065d2:	d055      	beq.n	8006680 <_strtod_l+0xba0>
 80065d4:	a336      	add	r3, pc, #216	; (adr r3, 80066b0 <_strtod_l+0xbd0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7fa fa97 	bl	8000b0c <__aeabi_dcmplt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f47f acd0 	bne.w	8005f84 <_strtod_l+0x4a4>
 80065e4:	a334      	add	r3, pc, #208	; (adr r3, 80066b8 <_strtod_l+0xbd8>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7fa faab 	bl	8000b48 <__aeabi_dcmpgt>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f43f af7b 	beq.w	80064ee <_strtod_l+0xa0e>
 80065f8:	e4c4      	b.n	8005f84 <_strtod_l+0x4a4>
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	b333      	cbz	r3, 800664c <_strtod_l+0xb6c>
 80065fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006600:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006604:	d822      	bhi.n	800664c <_strtod_l+0xb6c>
 8006606:	a32e      	add	r3, pc, #184	; (adr r3, 80066c0 <_strtod_l+0xbe0>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	4640      	mov	r0, r8
 800660e:	4649      	mov	r1, r9
 8006610:	f7fa fa86 	bl	8000b20 <__aeabi_dcmple>
 8006614:	b1a0      	cbz	r0, 8006640 <_strtod_l+0xb60>
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	f7fa fadd 	bl	8000bd8 <__aeabi_d2uiz>
 800661e:	2801      	cmp	r0, #1
 8006620:	bf38      	it	cc
 8006622:	2001      	movcc	r0, #1
 8006624:	f7f9 ff86 	bl	8000534 <__aeabi_ui2d>
 8006628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800662a:	4680      	mov	r8, r0
 800662c:	4689      	mov	r9, r1
 800662e:	bb23      	cbnz	r3, 800667a <_strtod_l+0xb9a>
 8006630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006634:	9010      	str	r0, [sp, #64]	; 0x40
 8006636:	9311      	str	r3, [sp, #68]	; 0x44
 8006638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800663c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006644:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	9309      	str	r3, [sp, #36]	; 0x24
 800664c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006650:	eeb0 0a48 	vmov.f32	s0, s16
 8006654:	eef0 0a68 	vmov.f32	s1, s17
 8006658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800665c:	f001 fe4a 	bl	80082f4 <__ulp>
 8006660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006664:	ec53 2b10 	vmov	r2, r3, d0
 8006668:	f7f9 ffde 	bl	8000628 <__aeabi_dmul>
 800666c:	ec53 2b18 	vmov	r2, r3, d8
 8006670:	f7f9 fe24 	bl	80002bc <__adddf3>
 8006674:	4682      	mov	sl, r0
 8006676:	468b      	mov	fp, r1
 8006678:	e78d      	b.n	8006596 <_strtod_l+0xab6>
 800667a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800667e:	e7db      	b.n	8006638 <_strtod_l+0xb58>
 8006680:	a311      	add	r3, pc, #68	; (adr r3, 80066c8 <_strtod_l+0xbe8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7fa fa41 	bl	8000b0c <__aeabi_dcmplt>
 800668a:	e7b2      	b.n	80065f2 <_strtod_l+0xb12>
 800668c:	2300      	movs	r3, #0
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	f7ff ba6b 	b.w	8005b70 <_strtod_l+0x90>
 800669a:	2a65      	cmp	r2, #101	; 0x65
 800669c:	f43f ab5f 	beq.w	8005d5e <_strtod_l+0x27e>
 80066a0:	2a45      	cmp	r2, #69	; 0x45
 80066a2:	f43f ab5c 	beq.w	8005d5e <_strtod_l+0x27e>
 80066a6:	2301      	movs	r3, #1
 80066a8:	f7ff bb94 	b.w	8005dd4 <_strtod_l+0x2f4>
 80066ac:	f3af 8000 	nop.w
 80066b0:	94a03595 	.word	0x94a03595
 80066b4:	3fdfffff 	.word	0x3fdfffff
 80066b8:	35afe535 	.word	0x35afe535
 80066bc:	3fe00000 	.word	0x3fe00000
 80066c0:	ffc00000 	.word	0xffc00000
 80066c4:	41dfffff 	.word	0x41dfffff
 80066c8:	94a03595 	.word	0x94a03595
 80066cc:	3fcfffff 	.word	0x3fcfffff
 80066d0:	3ff00000 	.word	0x3ff00000
 80066d4:	7ff00000 	.word	0x7ff00000
 80066d8:	7fe00000 	.word	0x7fe00000
 80066dc:	7c9fffff 	.word	0x7c9fffff
 80066e0:	3fe00000 	.word	0x3fe00000
 80066e4:	bff00000 	.word	0xbff00000
 80066e8:	7fefffff 	.word	0x7fefffff

080066ec <_strtod_r>:
 80066ec:	4b01      	ldr	r3, [pc, #4]	; (80066f4 <_strtod_r+0x8>)
 80066ee:	f7ff b9f7 	b.w	8005ae0 <_strtod_l>
 80066f2:	bf00      	nop
 80066f4:	200000d0 	.word	0x200000d0

080066f8 <_strtol_l.constprop.0>:
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fe:	d001      	beq.n	8006704 <_strtol_l.constprop.0+0xc>
 8006700:	2b24      	cmp	r3, #36	; 0x24
 8006702:	d906      	bls.n	8006712 <_strtol_l.constprop.0+0x1a>
 8006704:	f7fe faf0 	bl	8004ce8 <__errno>
 8006708:	2316      	movs	r3, #22
 800670a:	6003      	str	r3, [r0, #0]
 800670c:	2000      	movs	r0, #0
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067f8 <_strtol_l.constprop.0+0x100>
 8006716:	460d      	mov	r5, r1
 8006718:	462e      	mov	r6, r5
 800671a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800671e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006722:	f017 0708 	ands.w	r7, r7, #8
 8006726:	d1f7      	bne.n	8006718 <_strtol_l.constprop.0+0x20>
 8006728:	2c2d      	cmp	r4, #45	; 0x2d
 800672a:	d132      	bne.n	8006792 <_strtol_l.constprop.0+0x9a>
 800672c:	782c      	ldrb	r4, [r5, #0]
 800672e:	2701      	movs	r7, #1
 8006730:	1cb5      	adds	r5, r6, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d05b      	beq.n	80067ee <_strtol_l.constprop.0+0xf6>
 8006736:	2b10      	cmp	r3, #16
 8006738:	d109      	bne.n	800674e <_strtol_l.constprop.0+0x56>
 800673a:	2c30      	cmp	r4, #48	; 0x30
 800673c:	d107      	bne.n	800674e <_strtol_l.constprop.0+0x56>
 800673e:	782c      	ldrb	r4, [r5, #0]
 8006740:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006744:	2c58      	cmp	r4, #88	; 0x58
 8006746:	d14d      	bne.n	80067e4 <_strtol_l.constprop.0+0xec>
 8006748:	786c      	ldrb	r4, [r5, #1]
 800674a:	2310      	movs	r3, #16
 800674c:	3502      	adds	r5, #2
 800674e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006752:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006756:	f04f 0c00 	mov.w	ip, #0
 800675a:	fbb8 f9f3 	udiv	r9, r8, r3
 800675e:	4666      	mov	r6, ip
 8006760:	fb03 8a19 	mls	sl, r3, r9, r8
 8006764:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006768:	f1be 0f09 	cmp.w	lr, #9
 800676c:	d816      	bhi.n	800679c <_strtol_l.constprop.0+0xa4>
 800676e:	4674      	mov	r4, lr
 8006770:	42a3      	cmp	r3, r4
 8006772:	dd24      	ble.n	80067be <_strtol_l.constprop.0+0xc6>
 8006774:	f1bc 0f00 	cmp.w	ip, #0
 8006778:	db1e      	blt.n	80067b8 <_strtol_l.constprop.0+0xc0>
 800677a:	45b1      	cmp	r9, r6
 800677c:	d31c      	bcc.n	80067b8 <_strtol_l.constprop.0+0xc0>
 800677e:	d101      	bne.n	8006784 <_strtol_l.constprop.0+0x8c>
 8006780:	45a2      	cmp	sl, r4
 8006782:	db19      	blt.n	80067b8 <_strtol_l.constprop.0+0xc0>
 8006784:	fb06 4603 	mla	r6, r6, r3, r4
 8006788:	f04f 0c01 	mov.w	ip, #1
 800678c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006790:	e7e8      	b.n	8006764 <_strtol_l.constprop.0+0x6c>
 8006792:	2c2b      	cmp	r4, #43	; 0x2b
 8006794:	bf04      	itt	eq
 8006796:	782c      	ldrbeq	r4, [r5, #0]
 8006798:	1cb5      	addeq	r5, r6, #2
 800679a:	e7ca      	b.n	8006732 <_strtol_l.constprop.0+0x3a>
 800679c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80067a0:	f1be 0f19 	cmp.w	lr, #25
 80067a4:	d801      	bhi.n	80067aa <_strtol_l.constprop.0+0xb2>
 80067a6:	3c37      	subs	r4, #55	; 0x37
 80067a8:	e7e2      	b.n	8006770 <_strtol_l.constprop.0+0x78>
 80067aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80067ae:	f1be 0f19 	cmp.w	lr, #25
 80067b2:	d804      	bhi.n	80067be <_strtol_l.constprop.0+0xc6>
 80067b4:	3c57      	subs	r4, #87	; 0x57
 80067b6:	e7db      	b.n	8006770 <_strtol_l.constprop.0+0x78>
 80067b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80067bc:	e7e6      	b.n	800678c <_strtol_l.constprop.0+0x94>
 80067be:	f1bc 0f00 	cmp.w	ip, #0
 80067c2:	da05      	bge.n	80067d0 <_strtol_l.constprop.0+0xd8>
 80067c4:	2322      	movs	r3, #34	; 0x22
 80067c6:	6003      	str	r3, [r0, #0]
 80067c8:	4646      	mov	r6, r8
 80067ca:	b942      	cbnz	r2, 80067de <_strtol_l.constprop.0+0xe6>
 80067cc:	4630      	mov	r0, r6
 80067ce:	e79e      	b.n	800670e <_strtol_l.constprop.0+0x16>
 80067d0:	b107      	cbz	r7, 80067d4 <_strtol_l.constprop.0+0xdc>
 80067d2:	4276      	negs	r6, r6
 80067d4:	2a00      	cmp	r2, #0
 80067d6:	d0f9      	beq.n	80067cc <_strtol_l.constprop.0+0xd4>
 80067d8:	f1bc 0f00 	cmp.w	ip, #0
 80067dc:	d000      	beq.n	80067e0 <_strtol_l.constprop.0+0xe8>
 80067de:	1e69      	subs	r1, r5, #1
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	e7f3      	b.n	80067cc <_strtol_l.constprop.0+0xd4>
 80067e4:	2430      	movs	r4, #48	; 0x30
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1b1      	bne.n	800674e <_strtol_l.constprop.0+0x56>
 80067ea:	2308      	movs	r3, #8
 80067ec:	e7af      	b.n	800674e <_strtol_l.constprop.0+0x56>
 80067ee:	2c30      	cmp	r4, #48	; 0x30
 80067f0:	d0a5      	beq.n	800673e <_strtol_l.constprop.0+0x46>
 80067f2:	230a      	movs	r3, #10
 80067f4:	e7ab      	b.n	800674e <_strtol_l.constprop.0+0x56>
 80067f6:	bf00      	nop
 80067f8:	08009931 	.word	0x08009931

080067fc <_strtol_r>:
 80067fc:	f7ff bf7c 	b.w	80066f8 <_strtol_l.constprop.0>

08006800 <quorem>:
 8006800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	6903      	ldr	r3, [r0, #16]
 8006806:	690c      	ldr	r4, [r1, #16]
 8006808:	42a3      	cmp	r3, r4
 800680a:	4607      	mov	r7, r0
 800680c:	f2c0 8081 	blt.w	8006912 <quorem+0x112>
 8006810:	3c01      	subs	r4, #1
 8006812:	f101 0814 	add.w	r8, r1, #20
 8006816:	f100 0514 	add.w	r5, r0, #20
 800681a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006828:	3301      	adds	r3, #1
 800682a:	429a      	cmp	r2, r3
 800682c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006834:	fbb2 f6f3 	udiv	r6, r2, r3
 8006838:	d331      	bcc.n	800689e <quorem+0x9e>
 800683a:	f04f 0e00 	mov.w	lr, #0
 800683e:	4640      	mov	r0, r8
 8006840:	46ac      	mov	ip, r5
 8006842:	46f2      	mov	sl, lr
 8006844:	f850 2b04 	ldr.w	r2, [r0], #4
 8006848:	b293      	uxth	r3, r2
 800684a:	fb06 e303 	mla	r3, r6, r3, lr
 800684e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006852:	b29b      	uxth	r3, r3
 8006854:	ebaa 0303 	sub.w	r3, sl, r3
 8006858:	f8dc a000 	ldr.w	sl, [ip]
 800685c:	0c12      	lsrs	r2, r2, #16
 800685e:	fa13 f38a 	uxtah	r3, r3, sl
 8006862:	fb06 e202 	mla	r2, r6, r2, lr
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800686e:	b292      	uxth	r2, r2
 8006870:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006878:	f8bd 3000 	ldrh.w	r3, [sp]
 800687c:	4581      	cmp	r9, r0
 800687e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006882:	f84c 3b04 	str.w	r3, [ip], #4
 8006886:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800688a:	d2db      	bcs.n	8006844 <quorem+0x44>
 800688c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006890:	b92b      	cbnz	r3, 800689e <quorem+0x9e>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	3b04      	subs	r3, #4
 8006896:	429d      	cmp	r5, r3
 8006898:	461a      	mov	r2, r3
 800689a:	d32e      	bcc.n	80068fa <quorem+0xfa>
 800689c:	613c      	str	r4, [r7, #16]
 800689e:	4638      	mov	r0, r7
 80068a0:	f001 fc82 	bl	80081a8 <__mcmp>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	db24      	blt.n	80068f2 <quorem+0xf2>
 80068a8:	3601      	adds	r6, #1
 80068aa:	4628      	mov	r0, r5
 80068ac:	f04f 0c00 	mov.w	ip, #0
 80068b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80068b4:	f8d0 e000 	ldr.w	lr, [r0]
 80068b8:	b293      	uxth	r3, r2
 80068ba:	ebac 0303 	sub.w	r3, ip, r3
 80068be:	0c12      	lsrs	r2, r2, #16
 80068c0:	fa13 f38e 	uxtah	r3, r3, lr
 80068c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068d2:	45c1      	cmp	r9, r8
 80068d4:	f840 3b04 	str.w	r3, [r0], #4
 80068d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068dc:	d2e8      	bcs.n	80068b0 <quorem+0xb0>
 80068de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e6:	b922      	cbnz	r2, 80068f2 <quorem+0xf2>
 80068e8:	3b04      	subs	r3, #4
 80068ea:	429d      	cmp	r5, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	d30a      	bcc.n	8006906 <quorem+0x106>
 80068f0:	613c      	str	r4, [r7, #16]
 80068f2:	4630      	mov	r0, r6
 80068f4:	b003      	add	sp, #12
 80068f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1cc      	bne.n	800689c <quorem+0x9c>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7c7      	b.n	8006896 <quorem+0x96>
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	3b04      	subs	r3, #4
 800690a:	2a00      	cmp	r2, #0
 800690c:	d1f0      	bne.n	80068f0 <quorem+0xf0>
 800690e:	3c01      	subs	r4, #1
 8006910:	e7eb      	b.n	80068ea <quorem+0xea>
 8006912:	2000      	movs	r0, #0
 8006914:	e7ee      	b.n	80068f4 <quorem+0xf4>
	...

08006918 <_dtoa_r>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b04 	vpush	{d8-d9}
 8006920:	ec57 6b10 	vmov	r6, r7, d0
 8006924:	b093      	sub	sp, #76	; 0x4c
 8006926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800692c:	9106      	str	r1, [sp, #24]
 800692e:	ee10 aa10 	vmov	sl, s0
 8006932:	4604      	mov	r4, r0
 8006934:	9209      	str	r2, [sp, #36]	; 0x24
 8006936:	930c      	str	r3, [sp, #48]	; 0x30
 8006938:	46bb      	mov	fp, r7
 800693a:	b975      	cbnz	r5, 800695a <_dtoa_r+0x42>
 800693c:	2010      	movs	r0, #16
 800693e:	f001 f94d 	bl	8007bdc <malloc>
 8006942:	4602      	mov	r2, r0
 8006944:	6260      	str	r0, [r4, #36]	; 0x24
 8006946:	b920      	cbnz	r0, 8006952 <_dtoa_r+0x3a>
 8006948:	4ba7      	ldr	r3, [pc, #668]	; (8006be8 <_dtoa_r+0x2d0>)
 800694a:	21ea      	movs	r1, #234	; 0xea
 800694c:	48a7      	ldr	r0, [pc, #668]	; (8006bec <_dtoa_r+0x2d4>)
 800694e:	f002 f8ad 	bl	8008aac <__assert_func>
 8006952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006956:	6005      	str	r5, [r0, #0]
 8006958:	60c5      	str	r5, [r0, #12]
 800695a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	b151      	cbz	r1, 8006976 <_dtoa_r+0x5e>
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	604a      	str	r2, [r1, #4]
 8006964:	2301      	movs	r3, #1
 8006966:	4093      	lsls	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
 800696a:	4620      	mov	r0, r4
 800696c:	f001 f990 	bl	8007c90 <_Bfree>
 8006970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	1e3b      	subs	r3, r7, #0
 8006978:	bfaa      	itet	ge
 800697a:	2300      	movge	r3, #0
 800697c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006980:	f8c8 3000 	strge.w	r3, [r8]
 8006984:	4b9a      	ldr	r3, [pc, #616]	; (8006bf0 <_dtoa_r+0x2d8>)
 8006986:	bfbc      	itt	lt
 8006988:	2201      	movlt	r2, #1
 800698a:	f8c8 2000 	strlt.w	r2, [r8]
 800698e:	ea33 030b 	bics.w	r3, r3, fp
 8006992:	d11b      	bne.n	80069cc <_dtoa_r+0xb4>
 8006994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006996:	f242 730f 	movw	r3, #9999	; 0x270f
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069a0:	4333      	orrs	r3, r6
 80069a2:	f000 8592 	beq.w	80074ca <_dtoa_r+0xbb2>
 80069a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a8:	b963      	cbnz	r3, 80069c4 <_dtoa_r+0xac>
 80069aa:	4b92      	ldr	r3, [pc, #584]	; (8006bf4 <_dtoa_r+0x2dc>)
 80069ac:	e022      	b.n	80069f4 <_dtoa_r+0xdc>
 80069ae:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <_dtoa_r+0x2e0>)
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	3308      	adds	r3, #8
 80069b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	9801      	ldr	r0, [sp, #4]
 80069ba:	b013      	add	sp, #76	; 0x4c
 80069bc:	ecbd 8b04 	vpop	{d8-d9}
 80069c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	4b8b      	ldr	r3, [pc, #556]	; (8006bf4 <_dtoa_r+0x2dc>)
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	3303      	adds	r3, #3
 80069ca:	e7f3      	b.n	80069b4 <_dtoa_r+0x9c>
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	4650      	mov	r0, sl
 80069d2:	4659      	mov	r1, fp
 80069d4:	f7fa f890 	bl	8000af8 <__aeabi_dcmpeq>
 80069d8:	ec4b ab19 	vmov	d9, sl, fp
 80069dc:	4680      	mov	r8, r0
 80069de:	b158      	cbz	r0, 80069f8 <_dtoa_r+0xe0>
 80069e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e2:	2301      	movs	r3, #1
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 856b 	beq.w	80074c4 <_dtoa_r+0xbac>
 80069ee:	4883      	ldr	r0, [pc, #524]	; (8006bfc <_dtoa_r+0x2e4>)
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	1e43      	subs	r3, r0, #1
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	e7df      	b.n	80069b8 <_dtoa_r+0xa0>
 80069f8:	ec4b ab10 	vmov	d0, sl, fp
 80069fc:	aa10      	add	r2, sp, #64	; 0x40
 80069fe:	a911      	add	r1, sp, #68	; 0x44
 8006a00:	4620      	mov	r0, r4
 8006a02:	f001 fcf3 	bl	80083ec <__d2b>
 8006a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a0a:	ee08 0a10 	vmov	s16, r0
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	f000 8084 	beq.w	8006b1c <_dtoa_r+0x204>
 8006a14:	ee19 3a90 	vmov	r3, s19
 8006a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a20:	4656      	mov	r6, sl
 8006a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a2e:	4b74      	ldr	r3, [pc, #464]	; (8006c00 <_dtoa_r+0x2e8>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	4630      	mov	r0, r6
 8006a34:	4639      	mov	r1, r7
 8006a36:	f7f9 fc3f 	bl	80002b8 <__aeabi_dsub>
 8006a3a:	a365      	add	r3, pc, #404	; (adr r3, 8006bd0 <_dtoa_r+0x2b8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fdf2 	bl	8000628 <__aeabi_dmul>
 8006a44:	a364      	add	r3, pc, #400	; (adr r3, 8006bd8 <_dtoa_r+0x2c0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fc37 	bl	80002bc <__adddf3>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4628      	mov	r0, r5
 8006a52:	460f      	mov	r7, r1
 8006a54:	f7f9 fd7e 	bl	8000554 <__aeabi_i2d>
 8006a58:	a361      	add	r3, pc, #388	; (adr r3, 8006be0 <_dtoa_r+0x2c8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fde3 	bl	8000628 <__aeabi_dmul>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4630      	mov	r0, r6
 8006a68:	4639      	mov	r1, r7
 8006a6a:	f7f9 fc27 	bl	80002bc <__adddf3>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	f7fa f889 	bl	8000b88 <__aeabi_d2iz>
 8006a76:	2200      	movs	r2, #0
 8006a78:	9000      	str	r0, [sp, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7fa f844 	bl	8000b0c <__aeabi_dcmplt>
 8006a84:	b150      	cbz	r0, 8006a9c <_dtoa_r+0x184>
 8006a86:	9800      	ldr	r0, [sp, #0]
 8006a88:	f7f9 fd64 	bl	8000554 <__aeabi_i2d>
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	f7fa f832 	bl	8000af8 <__aeabi_dcmpeq>
 8006a94:	b910      	cbnz	r0, 8006a9c <_dtoa_r+0x184>
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	2b16      	cmp	r3, #22
 8006aa0:	d85a      	bhi.n	8006b58 <_dtoa_r+0x240>
 8006aa2:	9a00      	ldr	r2, [sp, #0]
 8006aa4:	4b57      	ldr	r3, [pc, #348]	; (8006c04 <_dtoa_r+0x2ec>)
 8006aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	ec51 0b19 	vmov	r0, r1, d9
 8006ab2:	f7fa f82b 	bl	8000b0c <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d050      	beq.n	8006b5c <_dtoa_r+0x244>
 8006aba:	9b00      	ldr	r3, [sp, #0]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ac6:	1b5d      	subs	r5, r3, r5
 8006ac8:	1e6b      	subs	r3, r5, #1
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	bf45      	ittet	mi
 8006ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ad2:	9304      	strmi	r3, [sp, #16]
 8006ad4:	2300      	movpl	r3, #0
 8006ad6:	2300      	movmi	r3, #0
 8006ad8:	bf4c      	ite	mi
 8006ada:	9305      	strmi	r3, [sp, #20]
 8006adc:	9304      	strpl	r3, [sp, #16]
 8006ade:	9b00      	ldr	r3, [sp, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db3d      	blt.n	8006b60 <_dtoa_r+0x248>
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	9a00      	ldr	r2, [sp, #0]
 8006ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8006aea:	4413      	add	r3, r2
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9307      	str	r3, [sp, #28]
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	f200 8089 	bhi.w	8006c0c <_dtoa_r+0x2f4>
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	bfc4      	itt	gt
 8006afe:	3b04      	subgt	r3, #4
 8006b00:	9306      	strgt	r3, [sp, #24]
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	f1a3 0302 	sub.w	r3, r3, #2
 8006b08:	bfcc      	ite	gt
 8006b0a:	2500      	movgt	r5, #0
 8006b0c:	2501      	movle	r5, #1
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	f200 8087 	bhi.w	8006c22 <_dtoa_r+0x30a>
 8006b14:	e8df f003 	tbb	[pc, r3]
 8006b18:	59383a2d 	.word	0x59383a2d
 8006b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b20:	441d      	add	r5, r3
 8006b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	bfc1      	itttt	gt
 8006b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b3a:	bfda      	itte	le
 8006b3c:	f1c3 0320 	rsble	r3, r3, #32
 8006b40:	fa06 f003 	lslle.w	r0, r6, r3
 8006b44:	4318      	orrgt	r0, r3
 8006b46:	f7f9 fcf5 	bl	8000534 <__aeabi_ui2d>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b52:	3d01      	subs	r5, #1
 8006b54:	930e      	str	r3, [sp, #56]	; 0x38
 8006b56:	e76a      	b.n	8006a2e <_dtoa_r+0x116>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7b2      	b.n	8006ac2 <_dtoa_r+0x1aa>
 8006b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b5e:	e7b1      	b.n	8006ac4 <_dtoa_r+0x1ac>
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	9a00      	ldr	r2, [sp, #0]
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	4253      	negs	r3, r2
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b70:	e7bf      	b.n	8006af2 <_dtoa_r+0x1da>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9308      	str	r3, [sp, #32]
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc55      	bgt.n	8006c28 <_dtoa_r+0x310>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b82:	461a      	mov	r2, r3
 8006b84:	9209      	str	r2, [sp, #36]	; 0x24
 8006b86:	e00c      	b.n	8006ba2 <_dtoa_r+0x28a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7f3      	b.n	8006b74 <_dtoa_r+0x25c>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	9302      	str	r3, [sp, #8]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	bfb8      	it	lt
 8006ba0:	2301      	movlt	r3, #1
 8006ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	6042      	str	r2, [r0, #4]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	f102 0614 	add.w	r6, r2, #20
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	6841      	ldr	r1, [r0, #4]
 8006bb2:	d93d      	bls.n	8006c30 <_dtoa_r+0x318>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f001 f82b 	bl	8007c10 <_Balloc>
 8006bba:	9001      	str	r0, [sp, #4]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d13b      	bne.n	8006c38 <_dtoa_r+0x320>
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <_dtoa_r+0x2f0>)
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bc8:	e6c0      	b.n	800694c <_dtoa_r+0x34>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e7df      	b.n	8006b8e <_dtoa_r+0x276>
 8006bce:	bf00      	nop
 8006bd0:	636f4361 	.word	0x636f4361
 8006bd4:	3fd287a7 	.word	0x3fd287a7
 8006bd8:	8b60c8b3 	.word	0x8b60c8b3
 8006bdc:	3fc68a28 	.word	0x3fc68a28
 8006be0:	509f79fb 	.word	0x509f79fb
 8006be4:	3fd34413 	.word	0x3fd34413
 8006be8:	08009a3e 	.word	0x08009a3e
 8006bec:	08009a55 	.word	0x08009a55
 8006bf0:	7ff00000 	.word	0x7ff00000
 8006bf4:	08009a3a 	.word	0x08009a3a
 8006bf8:	08009a31 	.word	0x08009a31
 8006bfc:	080098b5 	.word	0x080098b5
 8006c00:	3ff80000 	.word	0x3ff80000
 8006c04:	08009bc0 	.word	0x08009bc0
 8006c08:	08009ab0 	.word	0x08009ab0
 8006c0c:	2501      	movs	r5, #1
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9306      	str	r3, [sp, #24]
 8006c12:	9508      	str	r5, [sp, #32]
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2312      	movs	r3, #18
 8006c20:	e7b0      	b.n	8006b84 <_dtoa_r+0x26c>
 8006c22:	2301      	movs	r3, #1
 8006c24:	9308      	str	r3, [sp, #32]
 8006c26:	e7f5      	b.n	8006c14 <_dtoa_r+0x2fc>
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c2e:	e7b8      	b.n	8006ba2 <_dtoa_r+0x28a>
 8006c30:	3101      	adds	r1, #1
 8006c32:	6041      	str	r1, [r0, #4]
 8006c34:	0052      	lsls	r2, r2, #1
 8006c36:	e7b8      	b.n	8006baa <_dtoa_r+0x292>
 8006c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	2b0e      	cmp	r3, #14
 8006c42:	f200 809d 	bhi.w	8006d80 <_dtoa_r+0x468>
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	f000 809a 	beq.w	8006d80 <_dtoa_r+0x468>
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dd32      	ble.n	8006cb8 <_dtoa_r+0x3a0>
 8006c52:	4ab7      	ldr	r2, [pc, #732]	; (8006f30 <_dtoa_r+0x618>)
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c60:	9b00      	ldr	r3, [sp, #0]
 8006c62:	05d8      	lsls	r0, r3, #23
 8006c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c68:	d516      	bpl.n	8006c98 <_dtoa_r+0x380>
 8006c6a:	4bb2      	ldr	r3, [pc, #712]	; (8006f34 <_dtoa_r+0x61c>)
 8006c6c:	ec51 0b19 	vmov	r0, r1, d9
 8006c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c74:	f7f9 fe02 	bl	800087c <__aeabi_ddiv>
 8006c78:	f007 070f 	and.w	r7, r7, #15
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	468b      	mov	fp, r1
 8006c80:	2503      	movs	r5, #3
 8006c82:	4eac      	ldr	r6, [pc, #688]	; (8006f34 <_dtoa_r+0x61c>)
 8006c84:	b957      	cbnz	r7, 8006c9c <_dtoa_r+0x384>
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	f7f9 fdf5 	bl	800087c <__aeabi_ddiv>
 8006c92:	4682      	mov	sl, r0
 8006c94:	468b      	mov	fp, r1
 8006c96:	e028      	b.n	8006cea <_dtoa_r+0x3d2>
 8006c98:	2502      	movs	r5, #2
 8006c9a:	e7f2      	b.n	8006c82 <_dtoa_r+0x36a>
 8006c9c:	07f9      	lsls	r1, r7, #31
 8006c9e:	d508      	bpl.n	8006cb2 <_dtoa_r+0x39a>
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ca8:	f7f9 fcbe 	bl	8000628 <__aeabi_dmul>
 8006cac:	3501      	adds	r5, #1
 8006cae:	4680      	mov	r8, r0
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	107f      	asrs	r7, r7, #1
 8006cb4:	3608      	adds	r6, #8
 8006cb6:	e7e5      	b.n	8006c84 <_dtoa_r+0x36c>
 8006cb8:	f000 809b 	beq.w	8006df2 <_dtoa_r+0x4da>
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	4f9d      	ldr	r7, [pc, #628]	; (8006f34 <_dtoa_r+0x61c>)
 8006cc0:	425e      	negs	r6, r3
 8006cc2:	4b9b      	ldr	r3, [pc, #620]	; (8006f30 <_dtoa_r+0x618>)
 8006cc4:	f006 020f 	and.w	r2, r6, #15
 8006cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	ec51 0b19 	vmov	r0, r1, d9
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	1136      	asrs	r6, r6, #4
 8006cda:	4682      	mov	sl, r0
 8006cdc:	468b      	mov	fp, r1
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2502      	movs	r5, #2
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d17a      	bne.n	8006ddc <_dtoa_r+0x4c4>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1d3      	bne.n	8006c92 <_dtoa_r+0x37a>
 8006cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8082 	beq.w	8006df6 <_dtoa_r+0x4de>
 8006cf2:	4b91      	ldr	r3, [pc, #580]	; (8006f38 <_dtoa_r+0x620>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	f7f9 ff07 	bl	8000b0c <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d079      	beq.n	8006df6 <_dtoa_r+0x4de>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d076      	beq.n	8006df6 <_dtoa_r+0x4de>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dd36      	ble.n	8006d7c <_dtoa_r+0x464>
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	4650      	mov	r0, sl
 8006d12:	4659      	mov	r1, fp
 8006d14:	1e5f      	subs	r7, r3, #1
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b88      	ldr	r3, [pc, #544]	; (8006f3c <_dtoa_r+0x624>)
 8006d1a:	f7f9 fc85 	bl	8000628 <__aeabi_dmul>
 8006d1e:	9e02      	ldr	r6, [sp, #8]
 8006d20:	4682      	mov	sl, r0
 8006d22:	468b      	mov	fp, r1
 8006d24:	3501      	adds	r5, #1
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7f9 fc14 	bl	8000554 <__aeabi_i2d>
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	465b      	mov	r3, fp
 8006d30:	f7f9 fc7a 	bl	8000628 <__aeabi_dmul>
 8006d34:	4b82      	ldr	r3, [pc, #520]	; (8006f40 <_dtoa_r+0x628>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	f7f9 fac0 	bl	80002bc <__adddf3>
 8006d3c:	46d0      	mov	r8, sl
 8006d3e:	46d9      	mov	r9, fp
 8006d40:	4682      	mov	sl, r0
 8006d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d158      	bne.n	8006dfc <_dtoa_r+0x4e4>
 8006d4a:	4b7e      	ldr	r3, [pc, #504]	; (8006f44 <_dtoa_r+0x62c>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fab1 	bl	80002b8 <__aeabi_dsub>
 8006d56:	4652      	mov	r2, sl
 8006d58:	465b      	mov	r3, fp
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	f7f9 fef3 	bl	8000b48 <__aeabi_dcmpgt>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f040 8295 	bne.w	8007292 <_dtoa_r+0x97a>
 8006d68:	4652      	mov	r2, sl
 8006d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8289 	bne.w	800728e <_dtoa_r+0x976>
 8006d7c:	ec5b ab19 	vmov	sl, fp, d9
 8006d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f2c0 8148 	blt.w	8007018 <_dtoa_r+0x700>
 8006d88:	9a00      	ldr	r2, [sp, #0]
 8006d8a:	2a0e      	cmp	r2, #14
 8006d8c:	f300 8144 	bgt.w	8007018 <_dtoa_r+0x700>
 8006d90:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <_dtoa_r+0x618>)
 8006d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f280 80d5 	bge.w	8006f4c <_dtoa_r+0x634>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f300 80d1 	bgt.w	8006f4c <_dtoa_r+0x634>
 8006daa:	f040 826f 	bne.w	800728c <_dtoa_r+0x974>
 8006dae:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <_dtoa_r+0x62c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fc37 	bl	8000628 <__aeabi_dmul>
 8006dba:	4652      	mov	r2, sl
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	f7f9 feb9 	bl	8000b34 <__aeabi_dcmpge>
 8006dc2:	9e03      	ldr	r6, [sp, #12]
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 8245 	bne.w	8007256 <_dtoa_r+0x93e>
 8006dcc:	9d01      	ldr	r5, [sp, #4]
 8006dce:	2331      	movs	r3, #49	; 0x31
 8006dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	e240      	b.n	800725e <_dtoa_r+0x946>
 8006ddc:	07f2      	lsls	r2, r6, #31
 8006dde:	d505      	bpl.n	8006dec <_dtoa_r+0x4d4>
 8006de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de4:	f7f9 fc20 	bl	8000628 <__aeabi_dmul>
 8006de8:	3501      	adds	r5, #1
 8006dea:	2301      	movs	r3, #1
 8006dec:	1076      	asrs	r6, r6, #1
 8006dee:	3708      	adds	r7, #8
 8006df0:	e777      	b.n	8006ce2 <_dtoa_r+0x3ca>
 8006df2:	2502      	movs	r5, #2
 8006df4:	e779      	b.n	8006cea <_dtoa_r+0x3d2>
 8006df6:	9f00      	ldr	r7, [sp, #0]
 8006df8:	9e03      	ldr	r6, [sp, #12]
 8006dfa:	e794      	b.n	8006d26 <_dtoa_r+0x40e>
 8006dfc:	9901      	ldr	r1, [sp, #4]
 8006dfe:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <_dtoa_r+0x618>)
 8006e00:	4431      	add	r1, r6
 8006e02:	910d      	str	r1, [sp, #52]	; 0x34
 8006e04:	9908      	ldr	r1, [sp, #32]
 8006e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e0e:	2900      	cmp	r1, #0
 8006e10:	d043      	beq.n	8006e9a <_dtoa_r+0x582>
 8006e12:	494d      	ldr	r1, [pc, #308]	; (8006f48 <_dtoa_r+0x630>)
 8006e14:	2000      	movs	r0, #0
 8006e16:	f7f9 fd31 	bl	800087c <__aeabi_ddiv>
 8006e1a:	4652      	mov	r2, sl
 8006e1c:	465b      	mov	r3, fp
 8006e1e:	f7f9 fa4b 	bl	80002b8 <__aeabi_dsub>
 8006e22:	9d01      	ldr	r5, [sp, #4]
 8006e24:	4682      	mov	sl, r0
 8006e26:	468b      	mov	fp, r1
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	f7f9 feac 	bl	8000b88 <__aeabi_d2iz>
 8006e30:	4606      	mov	r6, r0
 8006e32:	f7f9 fb8f 	bl	8000554 <__aeabi_i2d>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fa3b 	bl	80002b8 <__aeabi_dsub>
 8006e42:	3630      	adds	r6, #48	; 0x30
 8006e44:	f805 6b01 	strb.w	r6, [r5], #1
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	f7f9 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d163      	bne.n	8006f20 <_dtoa_r+0x608>
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	4936      	ldr	r1, [pc, #216]	; (8006f38 <_dtoa_r+0x620>)
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f7f9 fa2a 	bl	80002b8 <__aeabi_dsub>
 8006e64:	4652      	mov	r2, sl
 8006e66:	465b      	mov	r3, fp
 8006e68:	f7f9 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 80b5 	bne.w	8006fdc <_dtoa_r+0x6c4>
 8006e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e74:	429d      	cmp	r5, r3
 8006e76:	d081      	beq.n	8006d7c <_dtoa_r+0x464>
 8006e78:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <_dtoa_r+0x624>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	4659      	mov	r1, fp
 8006e80:	f7f9 fbd2 	bl	8000628 <__aeabi_dmul>
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <_dtoa_r+0x624>)
 8006e86:	4682      	mov	sl, r0
 8006e88:	468b      	mov	fp, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f7f9 fbca 	bl	8000628 <__aeabi_dmul>
 8006e94:	4680      	mov	r8, r0
 8006e96:	4689      	mov	r9, r1
 8006e98:	e7c6      	b.n	8006e28 <_dtoa_r+0x510>
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7f9 fbc3 	bl	8000628 <__aeabi_dmul>
 8006ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	4649      	mov	r1, r9
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7f9 fe6a 	bl	8000b88 <__aeabi_d2iz>
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	f7f9 fb4d 	bl	8000554 <__aeabi_i2d>
 8006eba:	3630      	adds	r6, #48	; 0x30
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 f9f8 	bl	80002b8 <__aeabi_dsub>
 8006ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8006ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ece:	429d      	cmp	r5, r3
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	d124      	bne.n	8006f24 <_dtoa_r+0x60c>
 8006eda:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <_dtoa_r+0x630>)
 8006edc:	4650      	mov	r0, sl
 8006ede:	4659      	mov	r1, fp
 8006ee0:	f7f9 f9ec 	bl	80002bc <__adddf3>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fe2c 	bl	8000b48 <__aeabi_dcmpgt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d173      	bne.n	8006fdc <_dtoa_r+0x6c4>
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	4913      	ldr	r1, [pc, #76]	; (8006f48 <_dtoa_r+0x630>)
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7f9 f9dc 	bl	80002b8 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fe00 	bl	8000b0c <__aeabi_dcmplt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f43f af35 	beq.w	8006d7c <_dtoa_r+0x464>
 8006f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f14:	1e6b      	subs	r3, r5, #1
 8006f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d0f8      	beq.n	8006f12 <_dtoa_r+0x5fa>
 8006f20:	9700      	str	r7, [sp, #0]
 8006f22:	e049      	b.n	8006fb8 <_dtoa_r+0x6a0>
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_dtoa_r+0x624>)
 8006f26:	f7f9 fb7f 	bl	8000628 <__aeabi_dmul>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4689      	mov	r9, r1
 8006f2e:	e7bd      	b.n	8006eac <_dtoa_r+0x594>
 8006f30:	08009bc0 	.word	0x08009bc0
 8006f34:	08009b98 	.word	0x08009b98
 8006f38:	3ff00000 	.word	0x3ff00000
 8006f3c:	40240000 	.word	0x40240000
 8006f40:	401c0000 	.word	0x401c0000
 8006f44:	40140000 	.word	0x40140000
 8006f48:	3fe00000 	.word	0x3fe00000
 8006f4c:	9d01      	ldr	r5, [sp, #4]
 8006f4e:	4656      	mov	r6, sl
 8006f50:	465f      	mov	r7, fp
 8006f52:	4642      	mov	r2, r8
 8006f54:	464b      	mov	r3, r9
 8006f56:	4630      	mov	r0, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	f7f9 fc8f 	bl	800087c <__aeabi_ddiv>
 8006f5e:	f7f9 fe13 	bl	8000b88 <__aeabi_d2iz>
 8006f62:	4682      	mov	sl, r0
 8006f64:	f7f9 faf6 	bl	8000554 <__aeabi_i2d>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f7f9 fb5c 	bl	8000628 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f7c:	f7f9 f99c 	bl	80002b8 <__aeabi_dsub>
 8006f80:	f805 6b01 	strb.w	r6, [r5], #1
 8006f84:	9e01      	ldr	r6, [sp, #4]
 8006f86:	9f03      	ldr	r7, [sp, #12]
 8006f88:	1bae      	subs	r6, r5, r6
 8006f8a:	42b7      	cmp	r7, r6
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	d135      	bne.n	8006ffe <_dtoa_r+0x6e6>
 8006f92:	f7f9 f993 	bl	80002bc <__adddf3>
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	f7f9 fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 8006fa2:	b9d0      	cbnz	r0, 8006fda <_dtoa_r+0x6c2>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4639      	mov	r1, r7
 8006fac:	f7f9 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8006fb0:	b110      	cbz	r0, 8006fb8 <_dtoa_r+0x6a0>
 8006fb2:	f01a 0f01 	tst.w	sl, #1
 8006fb6:	d110      	bne.n	8006fda <_dtoa_r+0x6c2>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	f000 fe67 	bl	8007c90 <_Bfree>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9800      	ldr	r0, [sp, #0]
 8006fc6:	702b      	strb	r3, [r5, #0]
 8006fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fca:	3001      	adds	r0, #1
 8006fcc:	6018      	str	r0, [r3, #0]
 8006fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f43f acf1 	beq.w	80069b8 <_dtoa_r+0xa0>
 8006fd6:	601d      	str	r5, [r3, #0]
 8006fd8:	e4ee      	b.n	80069b8 <_dtoa_r+0xa0>
 8006fda:	9f00      	ldr	r7, [sp, #0]
 8006fdc:	462b      	mov	r3, r5
 8006fde:	461d      	mov	r5, r3
 8006fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe4:	2a39      	cmp	r2, #57	; 0x39
 8006fe6:	d106      	bne.n	8006ff6 <_dtoa_r+0x6de>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d1f7      	bne.n	8006fde <_dtoa_r+0x6c6>
 8006fee:	9901      	ldr	r1, [sp, #4]
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	3701      	adds	r7, #1
 8006ff4:	700a      	strb	r2, [r1, #0]
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e790      	b.n	8006f20 <_dtoa_r+0x608>
 8006ffe:	4ba6      	ldr	r3, [pc, #664]	; (8007298 <_dtoa_r+0x980>)
 8007000:	2200      	movs	r2, #0
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	f7f9 fd73 	bl	8000af8 <__aeabi_dcmpeq>
 8007012:	2800      	cmp	r0, #0
 8007014:	d09d      	beq.n	8006f52 <_dtoa_r+0x63a>
 8007016:	e7cf      	b.n	8006fb8 <_dtoa_r+0x6a0>
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	2a00      	cmp	r2, #0
 800701c:	f000 80d7 	beq.w	80071ce <_dtoa_r+0x8b6>
 8007020:	9a06      	ldr	r2, [sp, #24]
 8007022:	2a01      	cmp	r2, #1
 8007024:	f300 80ba 	bgt.w	800719c <_dtoa_r+0x884>
 8007028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702a:	2a00      	cmp	r2, #0
 800702c:	f000 80b2 	beq.w	8007194 <_dtoa_r+0x87c>
 8007030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007034:	9e07      	ldr	r6, [sp, #28]
 8007036:	9d04      	ldr	r5, [sp, #16]
 8007038:	9a04      	ldr	r2, [sp, #16]
 800703a:	441a      	add	r2, r3
 800703c:	9204      	str	r2, [sp, #16]
 800703e:	9a05      	ldr	r2, [sp, #20]
 8007040:	2101      	movs	r1, #1
 8007042:	441a      	add	r2, r3
 8007044:	4620      	mov	r0, r4
 8007046:	9205      	str	r2, [sp, #20]
 8007048:	f000 ff24 	bl	8007e94 <__i2b>
 800704c:	4607      	mov	r7, r0
 800704e:	2d00      	cmp	r5, #0
 8007050:	dd0c      	ble.n	800706c <_dtoa_r+0x754>
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dd09      	ble.n	800706c <_dtoa_r+0x754>
 8007058:	42ab      	cmp	r3, r5
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	bfa8      	it	ge
 800705e:	462b      	movge	r3, r5
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	9204      	str	r2, [sp, #16]
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	1aed      	subs	r5, r5, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	b31b      	cbz	r3, 80070b8 <_dtoa_r+0x7a0>
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80af 	beq.w	80071d6 <_dtoa_r+0x8be>
 8007078:	2e00      	cmp	r6, #0
 800707a:	dd13      	ble.n	80070a4 <_dtoa_r+0x78c>
 800707c:	4639      	mov	r1, r7
 800707e:	4632      	mov	r2, r6
 8007080:	4620      	mov	r0, r4
 8007082:	f000 ffc7 	bl	8008014 <__pow5mult>
 8007086:	ee18 2a10 	vmov	r2, s16
 800708a:	4601      	mov	r1, r0
 800708c:	4607      	mov	r7, r0
 800708e:	4620      	mov	r0, r4
 8007090:	f000 ff16 	bl	8007ec0 <__multiply>
 8007094:	ee18 1a10 	vmov	r1, s16
 8007098:	4680      	mov	r8, r0
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fdf8 	bl	8007c90 <_Bfree>
 80070a0:	ee08 8a10 	vmov	s16, r8
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	1b9a      	subs	r2, r3, r6
 80070a8:	d006      	beq.n	80070b8 <_dtoa_r+0x7a0>
 80070aa:	ee18 1a10 	vmov	r1, s16
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 ffb0 	bl	8008014 <__pow5mult>
 80070b4:	ee08 0a10 	vmov	s16, r0
 80070b8:	2101      	movs	r1, #1
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 feea 	bl	8007e94 <__i2b>
 80070c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	4606      	mov	r6, r0
 80070c6:	f340 8088 	ble.w	80071da <_dtoa_r+0x8c2>
 80070ca:	461a      	mov	r2, r3
 80070cc:	4601      	mov	r1, r0
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 ffa0 	bl	8008014 <__pow5mult>
 80070d4:	9b06      	ldr	r3, [sp, #24]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	4606      	mov	r6, r0
 80070da:	f340 8081 	ble.w	80071e0 <_dtoa_r+0x8c8>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	6933      	ldr	r3, [r6, #16]
 80070e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070e8:	6918      	ldr	r0, [r3, #16]
 80070ea:	f000 fe83 	bl	8007df4 <__hi0bits>
 80070ee:	f1c0 0020 	rsb	r0, r0, #32
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	4418      	add	r0, r3
 80070f6:	f010 001f 	ands.w	r0, r0, #31
 80070fa:	f000 8092 	beq.w	8007222 <_dtoa_r+0x90a>
 80070fe:	f1c0 0320 	rsb	r3, r0, #32
 8007102:	2b04      	cmp	r3, #4
 8007104:	f340 808a 	ble.w	800721c <_dtoa_r+0x904>
 8007108:	f1c0 001c 	rsb	r0, r0, #28
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	4403      	add	r3, r0
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	9b05      	ldr	r3, [sp, #20]
 8007114:	4403      	add	r3, r0
 8007116:	4405      	add	r5, r0
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd07      	ble.n	8007130 <_dtoa_r+0x818>
 8007120:	ee18 1a10 	vmov	r1, s16
 8007124:	461a      	mov	r2, r3
 8007126:	4620      	mov	r0, r4
 8007128:	f000 ffce 	bl	80080c8 <__lshift>
 800712c:	ee08 0a10 	vmov	s16, r0
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd05      	ble.n	8007142 <_dtoa_r+0x82a>
 8007136:	4631      	mov	r1, r6
 8007138:	461a      	mov	r2, r3
 800713a:	4620      	mov	r0, r4
 800713c:	f000 ffc4 	bl	80080c8 <__lshift>
 8007140:	4606      	mov	r6, r0
 8007142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d06e      	beq.n	8007226 <_dtoa_r+0x90e>
 8007148:	ee18 0a10 	vmov	r0, s16
 800714c:	4631      	mov	r1, r6
 800714e:	f001 f82b 	bl	80081a8 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	da67      	bge.n	8007226 <_dtoa_r+0x90e>
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	ee18 1a10 	vmov	r1, s16
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	220a      	movs	r2, #10
 8007162:	2300      	movs	r3, #0
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fdb5 	bl	8007cd4 <__multadd>
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	ee08 0a10 	vmov	s16, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 81b1 	beq.w	80074d8 <_dtoa_r+0xbc0>
 8007176:	2300      	movs	r3, #0
 8007178:	4639      	mov	r1, r7
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fda9 	bl	8007cd4 <__multadd>
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 808e 	bgt.w	80072a8 <_dtoa_r+0x990>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc51      	bgt.n	8007236 <_dtoa_r+0x91e>
 8007192:	e089      	b.n	80072a8 <_dtoa_r+0x990>
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e74b      	b.n	8007034 <_dtoa_r+0x71c>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b07      	ldrlt	r3, [sp, #28]
 80071a8:	9607      	strlt	r6, [sp, #28]
 80071aa:	1af2      	sublt	r2, r6, r3
 80071ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071ae:	bfb6      	itet	lt
 80071b0:	189b      	addlt	r3, r3, r2
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	bfb8      	it	lt
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb7      	itett	lt
 80071c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80071c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80071c8:	1a9d      	sublt	r5, r3, r2
 80071ca:	2300      	movlt	r3, #0
 80071cc:	e734      	b.n	8007038 <_dtoa_r+0x720>
 80071ce:	9e07      	ldr	r6, [sp, #28]
 80071d0:	9d04      	ldr	r5, [sp, #16]
 80071d2:	9f08      	ldr	r7, [sp, #32]
 80071d4:	e73b      	b.n	800704e <_dtoa_r+0x736>
 80071d6:	9a07      	ldr	r2, [sp, #28]
 80071d8:	e767      	b.n	80070aa <_dtoa_r+0x792>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	dc18      	bgt.n	8007212 <_dtoa_r+0x8fa>
 80071e0:	f1ba 0f00 	cmp.w	sl, #0
 80071e4:	d115      	bne.n	8007212 <_dtoa_r+0x8fa>
 80071e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071ea:	b993      	cbnz	r3, 8007212 <_dtoa_r+0x8fa>
 80071ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071f0:	0d1b      	lsrs	r3, r3, #20
 80071f2:	051b      	lsls	r3, r3, #20
 80071f4:	b183      	cbz	r3, 8007218 <_dtoa_r+0x900>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	9b05      	ldr	r3, [sp, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	f04f 0801 	mov.w	r8, #1
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	f47f af6a 	bne.w	80070e2 <_dtoa_r+0x7ca>
 800720e:	2001      	movs	r0, #1
 8007210:	e76f      	b.n	80070f2 <_dtoa_r+0x7da>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	e7f6      	b.n	8007206 <_dtoa_r+0x8ee>
 8007218:	4698      	mov	r8, r3
 800721a:	e7f4      	b.n	8007206 <_dtoa_r+0x8ee>
 800721c:	f43f af7d 	beq.w	800711a <_dtoa_r+0x802>
 8007220:	4618      	mov	r0, r3
 8007222:	301c      	adds	r0, #28
 8007224:	e772      	b.n	800710c <_dtoa_r+0x7f4>
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc37      	bgt.n	800729c <_dtoa_r+0x984>
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	2b02      	cmp	r3, #2
 8007230:	dd34      	ble.n	800729c <_dtoa_r+0x984>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	b96b      	cbnz	r3, 8007256 <_dtoa_r+0x93e>
 800723a:	4631      	mov	r1, r6
 800723c:	2205      	movs	r2, #5
 800723e:	4620      	mov	r0, r4
 8007240:	f000 fd48 	bl	8007cd4 <__multadd>
 8007244:	4601      	mov	r1, r0
 8007246:	4606      	mov	r6, r0
 8007248:	ee18 0a10 	vmov	r0, s16
 800724c:	f000 ffac 	bl	80081a8 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	f73f adbb 	bgt.w	8006dcc <_dtoa_r+0x4b4>
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	9d01      	ldr	r5, [sp, #4]
 800725a:	43db      	mvns	r3, r3
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	4631      	mov	r1, r6
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fd13 	bl	8007c90 <_Bfree>
 800726a:	2f00      	cmp	r7, #0
 800726c:	f43f aea4 	beq.w	8006fb8 <_dtoa_r+0x6a0>
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	d005      	beq.n	8007282 <_dtoa_r+0x96a>
 8007276:	45b8      	cmp	r8, r7
 8007278:	d003      	beq.n	8007282 <_dtoa_r+0x96a>
 800727a:	4641      	mov	r1, r8
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fd07 	bl	8007c90 <_Bfree>
 8007282:	4639      	mov	r1, r7
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fd03 	bl	8007c90 <_Bfree>
 800728a:	e695      	b.n	8006fb8 <_dtoa_r+0x6a0>
 800728c:	2600      	movs	r6, #0
 800728e:	4637      	mov	r7, r6
 8007290:	e7e1      	b.n	8007256 <_dtoa_r+0x93e>
 8007292:	9700      	str	r7, [sp, #0]
 8007294:	4637      	mov	r7, r6
 8007296:	e599      	b.n	8006dcc <_dtoa_r+0x4b4>
 8007298:	40240000 	.word	0x40240000
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80ca 	beq.w	8007438 <_dtoa_r+0xb20>
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	dd05      	ble.n	80072b8 <_dtoa_r+0x9a0>
 80072ac:	4639      	mov	r1, r7
 80072ae:	462a      	mov	r2, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 ff09 	bl	80080c8 <__lshift>
 80072b6:	4607      	mov	r7, r0
 80072b8:	f1b8 0f00 	cmp.w	r8, #0
 80072bc:	d05b      	beq.n	8007376 <_dtoa_r+0xa5e>
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fca5 	bl	8007c10 <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <_dtoa_r+0x9be>
 80072ca:	4b87      	ldr	r3, [pc, #540]	; (80074e8 <_dtoa_r+0xbd0>)
 80072cc:	4602      	mov	r2, r0
 80072ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072d2:	f7ff bb3b 	b.w	800694c <_dtoa_r+0x34>
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	3202      	adds	r2, #2
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	f107 010c 	add.w	r1, r7, #12
 80072e0:	300c      	adds	r0, #12
 80072e2:	f7fd fd2b 	bl	8004d3c <memcpy>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4629      	mov	r1, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 feec 	bl	80080c8 <__lshift>
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	f103 0901 	add.w	r9, r3, #1
 80072f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	f00a 0301 	and.w	r3, sl, #1
 8007302:	46b8      	mov	r8, r7
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	4607      	mov	r7, r0
 8007308:	4631      	mov	r1, r6
 800730a:	ee18 0a10 	vmov	r0, s16
 800730e:	f7ff fa77 	bl	8006800 <quorem>
 8007312:	4641      	mov	r1, r8
 8007314:	9002      	str	r0, [sp, #8]
 8007316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800731a:	ee18 0a10 	vmov	r0, s16
 800731e:	f000 ff43 	bl	80081a8 <__mcmp>
 8007322:	463a      	mov	r2, r7
 8007324:	9003      	str	r0, [sp, #12]
 8007326:	4631      	mov	r1, r6
 8007328:	4620      	mov	r0, r4
 800732a:	f000 ff59 	bl	80081e0 <__mdiff>
 800732e:	68c2      	ldr	r2, [r0, #12]
 8007330:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007334:	4605      	mov	r5, r0
 8007336:	bb02      	cbnz	r2, 800737a <_dtoa_r+0xa62>
 8007338:	4601      	mov	r1, r0
 800733a:	ee18 0a10 	vmov	r0, s16
 800733e:	f000 ff33 	bl	80081a8 <__mcmp>
 8007342:	4602      	mov	r2, r0
 8007344:	4629      	mov	r1, r5
 8007346:	4620      	mov	r0, r4
 8007348:	9207      	str	r2, [sp, #28]
 800734a:	f000 fca1 	bl	8007c90 <_Bfree>
 800734e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007352:	ea43 0102 	orr.w	r1, r3, r2
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	430b      	orrs	r3, r1
 800735a:	464d      	mov	r5, r9
 800735c:	d10f      	bne.n	800737e <_dtoa_r+0xa66>
 800735e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007362:	d02a      	beq.n	80073ba <_dtoa_r+0xaa2>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd02      	ble.n	8007370 <_dtoa_r+0xa58>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007370:	f88b a000 	strb.w	sl, [fp]
 8007374:	e775      	b.n	8007262 <_dtoa_r+0x94a>
 8007376:	4638      	mov	r0, r7
 8007378:	e7ba      	b.n	80072f0 <_dtoa_r+0x9d8>
 800737a:	2201      	movs	r2, #1
 800737c:	e7e2      	b.n	8007344 <_dtoa_r+0xa2c>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db04      	blt.n	800738e <_dtoa_r+0xa76>
 8007384:	9906      	ldr	r1, [sp, #24]
 8007386:	430b      	orrs	r3, r1
 8007388:	9904      	ldr	r1, [sp, #16]
 800738a:	430b      	orrs	r3, r1
 800738c:	d122      	bne.n	80073d4 <_dtoa_r+0xabc>
 800738e:	2a00      	cmp	r2, #0
 8007390:	ddee      	ble.n	8007370 <_dtoa_r+0xa58>
 8007392:	ee18 1a10 	vmov	r1, s16
 8007396:	2201      	movs	r2, #1
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fe95 	bl	80080c8 <__lshift>
 800739e:	4631      	mov	r1, r6
 80073a0:	ee08 0a10 	vmov	s16, r0
 80073a4:	f000 ff00 	bl	80081a8 <__mcmp>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	dc03      	bgt.n	80073b4 <_dtoa_r+0xa9c>
 80073ac:	d1e0      	bne.n	8007370 <_dtoa_r+0xa58>
 80073ae:	f01a 0f01 	tst.w	sl, #1
 80073b2:	d0dd      	beq.n	8007370 <_dtoa_r+0xa58>
 80073b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073b8:	d1d7      	bne.n	800736a <_dtoa_r+0xa52>
 80073ba:	2339      	movs	r3, #57	; 0x39
 80073bc:	f88b 3000 	strb.w	r3, [fp]
 80073c0:	462b      	mov	r3, r5
 80073c2:	461d      	mov	r5, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073ca:	2a39      	cmp	r2, #57	; 0x39
 80073cc:	d071      	beq.n	80074b2 <_dtoa_r+0xb9a>
 80073ce:	3201      	adds	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e746      	b.n	8007262 <_dtoa_r+0x94a>
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	dd07      	ble.n	80073e8 <_dtoa_r+0xad0>
 80073d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073dc:	d0ed      	beq.n	80073ba <_dtoa_r+0xaa2>
 80073de:	f10a 0301 	add.w	r3, sl, #1
 80073e2:	f88b 3000 	strb.w	r3, [fp]
 80073e6:	e73c      	b.n	8007262 <_dtoa_r+0x94a>
 80073e8:	9b05      	ldr	r3, [sp, #20]
 80073ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80073ee:	4599      	cmp	r9, r3
 80073f0:	d047      	beq.n	8007482 <_dtoa_r+0xb6a>
 80073f2:	ee18 1a10 	vmov	r1, s16
 80073f6:	2300      	movs	r3, #0
 80073f8:	220a      	movs	r2, #10
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fc6a 	bl	8007cd4 <__multadd>
 8007400:	45b8      	cmp	r8, r7
 8007402:	ee08 0a10 	vmov	s16, r0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f04f 020a 	mov.w	r2, #10
 800740e:	4641      	mov	r1, r8
 8007410:	4620      	mov	r0, r4
 8007412:	d106      	bne.n	8007422 <_dtoa_r+0xb0a>
 8007414:	f000 fc5e 	bl	8007cd4 <__multadd>
 8007418:	4680      	mov	r8, r0
 800741a:	4607      	mov	r7, r0
 800741c:	f109 0901 	add.w	r9, r9, #1
 8007420:	e772      	b.n	8007308 <_dtoa_r+0x9f0>
 8007422:	f000 fc57 	bl	8007cd4 <__multadd>
 8007426:	4639      	mov	r1, r7
 8007428:	4680      	mov	r8, r0
 800742a:	2300      	movs	r3, #0
 800742c:	220a      	movs	r2, #10
 800742e:	4620      	mov	r0, r4
 8007430:	f000 fc50 	bl	8007cd4 <__multadd>
 8007434:	4607      	mov	r7, r0
 8007436:	e7f1      	b.n	800741c <_dtoa_r+0xb04>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	9d01      	ldr	r5, [sp, #4]
 800743e:	ee18 0a10 	vmov	r0, s16
 8007442:	4631      	mov	r1, r6
 8007444:	f7ff f9dc 	bl	8006800 <quorem>
 8007448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f805 ab01 	strb.w	sl, [r5], #1
 8007452:	1aea      	subs	r2, r5, r3
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	4293      	cmp	r3, r2
 8007458:	dd09      	ble.n	800746e <_dtoa_r+0xb56>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	2300      	movs	r3, #0
 8007460:	220a      	movs	r2, #10
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fc36 	bl	8007cd4 <__multadd>
 8007468:	ee08 0a10 	vmov	s16, r0
 800746c:	e7e7      	b.n	800743e <_dtoa_r+0xb26>
 800746e:	9b02      	ldr	r3, [sp, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfc8      	it	gt
 8007474:	461d      	movgt	r5, r3
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	bfd8      	it	le
 800747a:	2501      	movle	r5, #1
 800747c:	441d      	add	r5, r3
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	ee18 1a10 	vmov	r1, s16
 8007486:	2201      	movs	r2, #1
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fe1d 	bl	80080c8 <__lshift>
 800748e:	4631      	mov	r1, r6
 8007490:	ee08 0a10 	vmov	s16, r0
 8007494:	f000 fe88 	bl	80081a8 <__mcmp>
 8007498:	2800      	cmp	r0, #0
 800749a:	dc91      	bgt.n	80073c0 <_dtoa_r+0xaa8>
 800749c:	d102      	bne.n	80074a4 <_dtoa_r+0xb8c>
 800749e:	f01a 0f01 	tst.w	sl, #1
 80074a2:	d18d      	bne.n	80073c0 <_dtoa_r+0xaa8>
 80074a4:	462b      	mov	r3, r5
 80074a6:	461d      	mov	r5, r3
 80074a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ac:	2a30      	cmp	r2, #48	; 0x30
 80074ae:	d0fa      	beq.n	80074a6 <_dtoa_r+0xb8e>
 80074b0:	e6d7      	b.n	8007262 <_dtoa_r+0x94a>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d184      	bne.n	80073c2 <_dtoa_r+0xaaa>
 80074b8:	9b00      	ldr	r3, [sp, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2331      	movs	r3, #49	; 0x31
 80074c0:	7013      	strb	r3, [r2, #0]
 80074c2:	e6ce      	b.n	8007262 <_dtoa_r+0x94a>
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <_dtoa_r+0xbd4>)
 80074c6:	f7ff ba95 	b.w	80069f4 <_dtoa_r+0xdc>
 80074ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f47f aa6e 	bne.w	80069ae <_dtoa_r+0x96>
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <_dtoa_r+0xbd8>)
 80074d4:	f7ff ba8e 	b.w	80069f4 <_dtoa_r+0xdc>
 80074d8:	9b02      	ldr	r3, [sp, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dcae      	bgt.n	800743c <_dtoa_r+0xb24>
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	f73f aea8 	bgt.w	8007236 <_dtoa_r+0x91e>
 80074e6:	e7a9      	b.n	800743c <_dtoa_r+0xb24>
 80074e8:	08009ab0 	.word	0x08009ab0
 80074ec:	080098b4 	.word	0x080098b4
 80074f0:	08009a31 	.word	0x08009a31

080074f4 <rshift>:
 80074f4:	6903      	ldr	r3, [r0, #16]
 80074f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007502:	f100 0414 	add.w	r4, r0, #20
 8007506:	dd45      	ble.n	8007594 <rshift+0xa0>
 8007508:	f011 011f 	ands.w	r1, r1, #31
 800750c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007510:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007514:	d10c      	bne.n	8007530 <rshift+0x3c>
 8007516:	f100 0710 	add.w	r7, r0, #16
 800751a:	4629      	mov	r1, r5
 800751c:	42b1      	cmp	r1, r6
 800751e:	d334      	bcc.n	800758a <rshift+0x96>
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	1eea      	subs	r2, r5, #3
 8007526:	4296      	cmp	r6, r2
 8007528:	bf38      	it	cc
 800752a:	2300      	movcc	r3, #0
 800752c:	4423      	add	r3, r4
 800752e:	e015      	b.n	800755c <rshift+0x68>
 8007530:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007534:	f1c1 0820 	rsb	r8, r1, #32
 8007538:	40cf      	lsrs	r7, r1
 800753a:	f105 0e04 	add.w	lr, r5, #4
 800753e:	46a1      	mov	r9, r4
 8007540:	4576      	cmp	r6, lr
 8007542:	46f4      	mov	ip, lr
 8007544:	d815      	bhi.n	8007572 <rshift+0x7e>
 8007546:	1a9a      	subs	r2, r3, r2
 8007548:	0092      	lsls	r2, r2, #2
 800754a:	3a04      	subs	r2, #4
 800754c:	3501      	adds	r5, #1
 800754e:	42ae      	cmp	r6, r5
 8007550:	bf38      	it	cc
 8007552:	2200      	movcc	r2, #0
 8007554:	18a3      	adds	r3, r4, r2
 8007556:	50a7      	str	r7, [r4, r2]
 8007558:	b107      	cbz	r7, 800755c <rshift+0x68>
 800755a:	3304      	adds	r3, #4
 800755c:	1b1a      	subs	r2, r3, r4
 800755e:	42a3      	cmp	r3, r4
 8007560:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007564:	bf08      	it	eq
 8007566:	2300      	moveq	r3, #0
 8007568:	6102      	str	r2, [r0, #16]
 800756a:	bf08      	it	eq
 800756c:	6143      	streq	r3, [r0, #20]
 800756e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007572:	f8dc c000 	ldr.w	ip, [ip]
 8007576:	fa0c fc08 	lsl.w	ip, ip, r8
 800757a:	ea4c 0707 	orr.w	r7, ip, r7
 800757e:	f849 7b04 	str.w	r7, [r9], #4
 8007582:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007586:	40cf      	lsrs	r7, r1
 8007588:	e7da      	b.n	8007540 <rshift+0x4c>
 800758a:	f851 cb04 	ldr.w	ip, [r1], #4
 800758e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007592:	e7c3      	b.n	800751c <rshift+0x28>
 8007594:	4623      	mov	r3, r4
 8007596:	e7e1      	b.n	800755c <rshift+0x68>

08007598 <__hexdig_fun>:
 8007598:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800759c:	2b09      	cmp	r3, #9
 800759e:	d802      	bhi.n	80075a6 <__hexdig_fun+0xe>
 80075a0:	3820      	subs	r0, #32
 80075a2:	b2c0      	uxtb	r0, r0
 80075a4:	4770      	bx	lr
 80075a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d801      	bhi.n	80075b2 <__hexdig_fun+0x1a>
 80075ae:	3847      	subs	r0, #71	; 0x47
 80075b0:	e7f7      	b.n	80075a2 <__hexdig_fun+0xa>
 80075b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d801      	bhi.n	80075be <__hexdig_fun+0x26>
 80075ba:	3827      	subs	r0, #39	; 0x27
 80075bc:	e7f1      	b.n	80075a2 <__hexdig_fun+0xa>
 80075be:	2000      	movs	r0, #0
 80075c0:	4770      	bx	lr
	...

080075c4 <__gethex>:
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	ed2d 8b02 	vpush	{d8}
 80075cc:	b089      	sub	sp, #36	; 0x24
 80075ce:	ee08 0a10 	vmov	s16, r0
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	4bb4      	ldr	r3, [pc, #720]	; (80078a8 <__gethex+0x2e4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	468b      	mov	fp, r1
 80075de:	4690      	mov	r8, r2
 80075e0:	f7f8 fe0e 	bl	8000200 <strlen>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	f8db 2000 	ldr.w	r2, [fp]
 80075ea:	4403      	add	r3, r0
 80075ec:	4682      	mov	sl, r0
 80075ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075f2:	9305      	str	r3, [sp, #20]
 80075f4:	1c93      	adds	r3, r2, #2
 80075f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075fe:	32fe      	adds	r2, #254	; 0xfe
 8007600:	18d1      	adds	r1, r2, r3
 8007602:	461f      	mov	r7, r3
 8007604:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007608:	9100      	str	r1, [sp, #0]
 800760a:	2830      	cmp	r0, #48	; 0x30
 800760c:	d0f8      	beq.n	8007600 <__gethex+0x3c>
 800760e:	f7ff ffc3 	bl	8007598 <__hexdig_fun>
 8007612:	4604      	mov	r4, r0
 8007614:	2800      	cmp	r0, #0
 8007616:	d13a      	bne.n	800768e <__gethex+0xca>
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	4652      	mov	r2, sl
 800761c:	4638      	mov	r0, r7
 800761e:	f001 fa23 	bl	8008a68 <strncmp>
 8007622:	4605      	mov	r5, r0
 8007624:	2800      	cmp	r0, #0
 8007626:	d168      	bne.n	80076fa <__gethex+0x136>
 8007628:	f817 000a 	ldrb.w	r0, [r7, sl]
 800762c:	eb07 060a 	add.w	r6, r7, sl
 8007630:	f7ff ffb2 	bl	8007598 <__hexdig_fun>
 8007634:	2800      	cmp	r0, #0
 8007636:	d062      	beq.n	80076fe <__gethex+0x13a>
 8007638:	4633      	mov	r3, r6
 800763a:	7818      	ldrb	r0, [r3, #0]
 800763c:	2830      	cmp	r0, #48	; 0x30
 800763e:	461f      	mov	r7, r3
 8007640:	f103 0301 	add.w	r3, r3, #1
 8007644:	d0f9      	beq.n	800763a <__gethex+0x76>
 8007646:	f7ff ffa7 	bl	8007598 <__hexdig_fun>
 800764a:	2301      	movs	r3, #1
 800764c:	fab0 f480 	clz	r4, r0
 8007650:	0964      	lsrs	r4, r4, #5
 8007652:	4635      	mov	r5, r6
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	463a      	mov	r2, r7
 8007658:	4616      	mov	r6, r2
 800765a:	3201      	adds	r2, #1
 800765c:	7830      	ldrb	r0, [r6, #0]
 800765e:	f7ff ff9b 	bl	8007598 <__hexdig_fun>
 8007662:	2800      	cmp	r0, #0
 8007664:	d1f8      	bne.n	8007658 <__gethex+0x94>
 8007666:	9901      	ldr	r1, [sp, #4]
 8007668:	4652      	mov	r2, sl
 800766a:	4630      	mov	r0, r6
 800766c:	f001 f9fc 	bl	8008a68 <strncmp>
 8007670:	b980      	cbnz	r0, 8007694 <__gethex+0xd0>
 8007672:	b94d      	cbnz	r5, 8007688 <__gethex+0xc4>
 8007674:	eb06 050a 	add.w	r5, r6, sl
 8007678:	462a      	mov	r2, r5
 800767a:	4616      	mov	r6, r2
 800767c:	3201      	adds	r2, #1
 800767e:	7830      	ldrb	r0, [r6, #0]
 8007680:	f7ff ff8a 	bl	8007598 <__hexdig_fun>
 8007684:	2800      	cmp	r0, #0
 8007686:	d1f8      	bne.n	800767a <__gethex+0xb6>
 8007688:	1bad      	subs	r5, r5, r6
 800768a:	00ad      	lsls	r5, r5, #2
 800768c:	e004      	b.n	8007698 <__gethex+0xd4>
 800768e:	2400      	movs	r4, #0
 8007690:	4625      	mov	r5, r4
 8007692:	e7e0      	b.n	8007656 <__gethex+0x92>
 8007694:	2d00      	cmp	r5, #0
 8007696:	d1f7      	bne.n	8007688 <__gethex+0xc4>
 8007698:	7833      	ldrb	r3, [r6, #0]
 800769a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800769e:	2b50      	cmp	r3, #80	; 0x50
 80076a0:	d13b      	bne.n	800771a <__gethex+0x156>
 80076a2:	7873      	ldrb	r3, [r6, #1]
 80076a4:	2b2b      	cmp	r3, #43	; 0x2b
 80076a6:	d02c      	beq.n	8007702 <__gethex+0x13e>
 80076a8:	2b2d      	cmp	r3, #45	; 0x2d
 80076aa:	d02e      	beq.n	800770a <__gethex+0x146>
 80076ac:	1c71      	adds	r1, r6, #1
 80076ae:	f04f 0900 	mov.w	r9, #0
 80076b2:	7808      	ldrb	r0, [r1, #0]
 80076b4:	f7ff ff70 	bl	8007598 <__hexdig_fun>
 80076b8:	1e43      	subs	r3, r0, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b18      	cmp	r3, #24
 80076be:	d82c      	bhi.n	800771a <__gethex+0x156>
 80076c0:	f1a0 0210 	sub.w	r2, r0, #16
 80076c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076c8:	f7ff ff66 	bl	8007598 <__hexdig_fun>
 80076cc:	1e43      	subs	r3, r0, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b18      	cmp	r3, #24
 80076d2:	d91d      	bls.n	8007710 <__gethex+0x14c>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	d000      	beq.n	80076dc <__gethex+0x118>
 80076da:	4252      	negs	r2, r2
 80076dc:	4415      	add	r5, r2
 80076de:	f8cb 1000 	str.w	r1, [fp]
 80076e2:	b1e4      	cbz	r4, 800771e <__gethex+0x15a>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bf14      	ite	ne
 80076ea:	2700      	movne	r7, #0
 80076ec:	2706      	moveq	r7, #6
 80076ee:	4638      	mov	r0, r7
 80076f0:	b009      	add	sp, #36	; 0x24
 80076f2:	ecbd 8b02 	vpop	{d8}
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	463e      	mov	r6, r7
 80076fc:	4625      	mov	r5, r4
 80076fe:	2401      	movs	r4, #1
 8007700:	e7ca      	b.n	8007698 <__gethex+0xd4>
 8007702:	f04f 0900 	mov.w	r9, #0
 8007706:	1cb1      	adds	r1, r6, #2
 8007708:	e7d3      	b.n	80076b2 <__gethex+0xee>
 800770a:	f04f 0901 	mov.w	r9, #1
 800770e:	e7fa      	b.n	8007706 <__gethex+0x142>
 8007710:	230a      	movs	r3, #10
 8007712:	fb03 0202 	mla	r2, r3, r2, r0
 8007716:	3a10      	subs	r2, #16
 8007718:	e7d4      	b.n	80076c4 <__gethex+0x100>
 800771a:	4631      	mov	r1, r6
 800771c:	e7df      	b.n	80076de <__gethex+0x11a>
 800771e:	1bf3      	subs	r3, r6, r7
 8007720:	3b01      	subs	r3, #1
 8007722:	4621      	mov	r1, r4
 8007724:	2b07      	cmp	r3, #7
 8007726:	dc0b      	bgt.n	8007740 <__gethex+0x17c>
 8007728:	ee18 0a10 	vmov	r0, s16
 800772c:	f000 fa70 	bl	8007c10 <_Balloc>
 8007730:	4604      	mov	r4, r0
 8007732:	b940      	cbnz	r0, 8007746 <__gethex+0x182>
 8007734:	4b5d      	ldr	r3, [pc, #372]	; (80078ac <__gethex+0x2e8>)
 8007736:	4602      	mov	r2, r0
 8007738:	21de      	movs	r1, #222	; 0xde
 800773a:	485d      	ldr	r0, [pc, #372]	; (80078b0 <__gethex+0x2ec>)
 800773c:	f001 f9b6 	bl	8008aac <__assert_func>
 8007740:	3101      	adds	r1, #1
 8007742:	105b      	asrs	r3, r3, #1
 8007744:	e7ee      	b.n	8007724 <__gethex+0x160>
 8007746:	f100 0914 	add.w	r9, r0, #20
 800774a:	f04f 0b00 	mov.w	fp, #0
 800774e:	f1ca 0301 	rsb	r3, sl, #1
 8007752:	f8cd 9008 	str.w	r9, [sp, #8]
 8007756:	f8cd b000 	str.w	fp, [sp]
 800775a:	9306      	str	r3, [sp, #24]
 800775c:	42b7      	cmp	r7, r6
 800775e:	d340      	bcc.n	80077e2 <__gethex+0x21e>
 8007760:	9802      	ldr	r0, [sp, #8]
 8007762:	9b00      	ldr	r3, [sp, #0]
 8007764:	f840 3b04 	str.w	r3, [r0], #4
 8007768:	eba0 0009 	sub.w	r0, r0, r9
 800776c:	1080      	asrs	r0, r0, #2
 800776e:	0146      	lsls	r6, r0, #5
 8007770:	6120      	str	r0, [r4, #16]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fb3e 	bl	8007df4 <__hi0bits>
 8007778:	1a30      	subs	r0, r6, r0
 800777a:	f8d8 6000 	ldr.w	r6, [r8]
 800777e:	42b0      	cmp	r0, r6
 8007780:	dd63      	ble.n	800784a <__gethex+0x286>
 8007782:	1b87      	subs	r7, r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fee2 	bl	8008550 <__any_on>
 800778c:	4682      	mov	sl, r0
 800778e:	b1a8      	cbz	r0, 80077bc <__gethex+0x1f8>
 8007790:	1e7b      	subs	r3, r7, #1
 8007792:	1159      	asrs	r1, r3, #5
 8007794:	f003 021f 	and.w	r2, r3, #31
 8007798:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800779c:	f04f 0a01 	mov.w	sl, #1
 80077a0:	fa0a f202 	lsl.w	r2, sl, r2
 80077a4:	420a      	tst	r2, r1
 80077a6:	d009      	beq.n	80077bc <__gethex+0x1f8>
 80077a8:	4553      	cmp	r3, sl
 80077aa:	dd05      	ble.n	80077b8 <__gethex+0x1f4>
 80077ac:	1eb9      	subs	r1, r7, #2
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fece 	bl	8008550 <__any_on>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d145      	bne.n	8007844 <__gethex+0x280>
 80077b8:	f04f 0a02 	mov.w	sl, #2
 80077bc:	4639      	mov	r1, r7
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff fe98 	bl	80074f4 <rshift>
 80077c4:	443d      	add	r5, r7
 80077c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	da4c      	bge.n	8007868 <__gethex+0x2a4>
 80077ce:	ee18 0a10 	vmov	r0, s16
 80077d2:	4621      	mov	r1, r4
 80077d4:	f000 fa5c 	bl	8007c90 <_Bfree>
 80077d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077da:	2300      	movs	r3, #0
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	27a3      	movs	r7, #163	; 0xa3
 80077e0:	e785      	b.n	80076ee <__gethex+0x12a>
 80077e2:	1e73      	subs	r3, r6, #1
 80077e4:	9a05      	ldr	r2, [sp, #20]
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d019      	beq.n	8007824 <__gethex+0x260>
 80077f0:	f1bb 0f20 	cmp.w	fp, #32
 80077f4:	d107      	bne.n	8007806 <__gethex+0x242>
 80077f6:	9b02      	ldr	r3, [sp, #8]
 80077f8:	9a00      	ldr	r2, [sp, #0]
 80077fa:	f843 2b04 	str.w	r2, [r3], #4
 80077fe:	9302      	str	r3, [sp, #8]
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	469b      	mov	fp, r3
 8007806:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800780a:	f7ff fec5 	bl	8007598 <__hexdig_fun>
 800780e:	9b00      	ldr	r3, [sp, #0]
 8007810:	f000 000f 	and.w	r0, r0, #15
 8007814:	fa00 f00b 	lsl.w	r0, r0, fp
 8007818:	4303      	orrs	r3, r0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	f10b 0b04 	add.w	fp, fp, #4
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	e00d      	b.n	8007840 <__gethex+0x27c>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	9a06      	ldr	r2, [sp, #24]
 8007828:	4413      	add	r3, r2
 800782a:	42bb      	cmp	r3, r7
 800782c:	d3e0      	bcc.n	80077f0 <__gethex+0x22c>
 800782e:	4618      	mov	r0, r3
 8007830:	9901      	ldr	r1, [sp, #4]
 8007832:	9307      	str	r3, [sp, #28]
 8007834:	4652      	mov	r2, sl
 8007836:	f001 f917 	bl	8008a68 <strncmp>
 800783a:	9b07      	ldr	r3, [sp, #28]
 800783c:	2800      	cmp	r0, #0
 800783e:	d1d7      	bne.n	80077f0 <__gethex+0x22c>
 8007840:	461e      	mov	r6, r3
 8007842:	e78b      	b.n	800775c <__gethex+0x198>
 8007844:	f04f 0a03 	mov.w	sl, #3
 8007848:	e7b8      	b.n	80077bc <__gethex+0x1f8>
 800784a:	da0a      	bge.n	8007862 <__gethex+0x29e>
 800784c:	1a37      	subs	r7, r6, r0
 800784e:	4621      	mov	r1, r4
 8007850:	ee18 0a10 	vmov	r0, s16
 8007854:	463a      	mov	r2, r7
 8007856:	f000 fc37 	bl	80080c8 <__lshift>
 800785a:	1bed      	subs	r5, r5, r7
 800785c:	4604      	mov	r4, r0
 800785e:	f100 0914 	add.w	r9, r0, #20
 8007862:	f04f 0a00 	mov.w	sl, #0
 8007866:	e7ae      	b.n	80077c6 <__gethex+0x202>
 8007868:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800786c:	42a8      	cmp	r0, r5
 800786e:	dd72      	ble.n	8007956 <__gethex+0x392>
 8007870:	1b45      	subs	r5, r0, r5
 8007872:	42ae      	cmp	r6, r5
 8007874:	dc36      	bgt.n	80078e4 <__gethex+0x320>
 8007876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d02a      	beq.n	80078d4 <__gethex+0x310>
 800787e:	2b03      	cmp	r3, #3
 8007880:	d02c      	beq.n	80078dc <__gethex+0x318>
 8007882:	2b01      	cmp	r3, #1
 8007884:	d11c      	bne.n	80078c0 <__gethex+0x2fc>
 8007886:	42ae      	cmp	r6, r5
 8007888:	d11a      	bne.n	80078c0 <__gethex+0x2fc>
 800788a:	2e01      	cmp	r6, #1
 800788c:	d112      	bne.n	80078b4 <__gethex+0x2f0>
 800788e:	9a04      	ldr	r2, [sp, #16]
 8007890:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	2301      	movs	r3, #1
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	f8c9 3000 	str.w	r3, [r9]
 800789e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078a0:	2762      	movs	r7, #98	; 0x62
 80078a2:	601c      	str	r4, [r3, #0]
 80078a4:	e723      	b.n	80076ee <__gethex+0x12a>
 80078a6:	bf00      	nop
 80078a8:	08009b28 	.word	0x08009b28
 80078ac:	08009ab0 	.word	0x08009ab0
 80078b0:	08009ac1 	.word	0x08009ac1
 80078b4:	1e71      	subs	r1, r6, #1
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 fe4a 	bl	8008550 <__any_on>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d1e6      	bne.n	800788e <__gethex+0x2ca>
 80078c0:	ee18 0a10 	vmov	r0, s16
 80078c4:	4621      	mov	r1, r4
 80078c6:	f000 f9e3 	bl	8007c90 <_Bfree>
 80078ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078cc:	2300      	movs	r3, #0
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	2750      	movs	r7, #80	; 0x50
 80078d2:	e70c      	b.n	80076ee <__gethex+0x12a>
 80078d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f2      	bne.n	80078c0 <__gethex+0x2fc>
 80078da:	e7d8      	b.n	800788e <__gethex+0x2ca>
 80078dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1d5      	bne.n	800788e <__gethex+0x2ca>
 80078e2:	e7ed      	b.n	80078c0 <__gethex+0x2fc>
 80078e4:	1e6f      	subs	r7, r5, #1
 80078e6:	f1ba 0f00 	cmp.w	sl, #0
 80078ea:	d131      	bne.n	8007950 <__gethex+0x38c>
 80078ec:	b127      	cbz	r7, 80078f8 <__gethex+0x334>
 80078ee:	4639      	mov	r1, r7
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fe2d 	bl	8008550 <__any_on>
 80078f6:	4682      	mov	sl, r0
 80078f8:	117b      	asrs	r3, r7, #5
 80078fa:	2101      	movs	r1, #1
 80078fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007900:	f007 071f 	and.w	r7, r7, #31
 8007904:	fa01 f707 	lsl.w	r7, r1, r7
 8007908:	421f      	tst	r7, r3
 800790a:	4629      	mov	r1, r5
 800790c:	4620      	mov	r0, r4
 800790e:	bf18      	it	ne
 8007910:	f04a 0a02 	orrne.w	sl, sl, #2
 8007914:	1b76      	subs	r6, r6, r5
 8007916:	f7ff fded 	bl	80074f4 <rshift>
 800791a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800791e:	2702      	movs	r7, #2
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	d048      	beq.n	80079b8 <__gethex+0x3f4>
 8007926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d015      	beq.n	800795a <__gethex+0x396>
 800792e:	2b03      	cmp	r3, #3
 8007930:	d017      	beq.n	8007962 <__gethex+0x39e>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d109      	bne.n	800794a <__gethex+0x386>
 8007936:	f01a 0f02 	tst.w	sl, #2
 800793a:	d006      	beq.n	800794a <__gethex+0x386>
 800793c:	f8d9 0000 	ldr.w	r0, [r9]
 8007940:	ea4a 0a00 	orr.w	sl, sl, r0
 8007944:	f01a 0f01 	tst.w	sl, #1
 8007948:	d10e      	bne.n	8007968 <__gethex+0x3a4>
 800794a:	f047 0710 	orr.w	r7, r7, #16
 800794e:	e033      	b.n	80079b8 <__gethex+0x3f4>
 8007950:	f04f 0a01 	mov.w	sl, #1
 8007954:	e7d0      	b.n	80078f8 <__gethex+0x334>
 8007956:	2701      	movs	r7, #1
 8007958:	e7e2      	b.n	8007920 <__gethex+0x35c>
 800795a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800795c:	f1c3 0301 	rsb	r3, r3, #1
 8007960:	9315      	str	r3, [sp, #84]	; 0x54
 8007962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f0      	beq.n	800794a <__gethex+0x386>
 8007968:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800796c:	f104 0314 	add.w	r3, r4, #20
 8007970:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007974:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007978:	f04f 0c00 	mov.w	ip, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007982:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007986:	d01c      	beq.n	80079c2 <__gethex+0x3fe>
 8007988:	3201      	adds	r2, #1
 800798a:	6002      	str	r2, [r0, #0]
 800798c:	2f02      	cmp	r7, #2
 800798e:	f104 0314 	add.w	r3, r4, #20
 8007992:	d13f      	bne.n	8007a14 <__gethex+0x450>
 8007994:	f8d8 2000 	ldr.w	r2, [r8]
 8007998:	3a01      	subs	r2, #1
 800799a:	42b2      	cmp	r2, r6
 800799c:	d10a      	bne.n	80079b4 <__gethex+0x3f0>
 800799e:	1171      	asrs	r1, r6, #5
 80079a0:	2201      	movs	r2, #1
 80079a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079a6:	f006 061f 	and.w	r6, r6, #31
 80079aa:	fa02 f606 	lsl.w	r6, r2, r6
 80079ae:	421e      	tst	r6, r3
 80079b0:	bf18      	it	ne
 80079b2:	4617      	movne	r7, r2
 80079b4:	f047 0720 	orr.w	r7, r7, #32
 80079b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079ba:	601c      	str	r4, [r3, #0]
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	601d      	str	r5, [r3, #0]
 80079c0:	e695      	b.n	80076ee <__gethex+0x12a>
 80079c2:	4299      	cmp	r1, r3
 80079c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80079c8:	d8d8      	bhi.n	800797c <__gethex+0x3b8>
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	459b      	cmp	fp, r3
 80079ce:	db19      	blt.n	8007a04 <__gethex+0x440>
 80079d0:	6861      	ldr	r1, [r4, #4]
 80079d2:	ee18 0a10 	vmov	r0, s16
 80079d6:	3101      	adds	r1, #1
 80079d8:	f000 f91a 	bl	8007c10 <_Balloc>
 80079dc:	4681      	mov	r9, r0
 80079de:	b918      	cbnz	r0, 80079e8 <__gethex+0x424>
 80079e0:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <__gethex+0x488>)
 80079e2:	4602      	mov	r2, r0
 80079e4:	2184      	movs	r1, #132	; 0x84
 80079e6:	e6a8      	b.n	800773a <__gethex+0x176>
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	3202      	adds	r2, #2
 80079ec:	f104 010c 	add.w	r1, r4, #12
 80079f0:	0092      	lsls	r2, r2, #2
 80079f2:	300c      	adds	r0, #12
 80079f4:	f7fd f9a2 	bl	8004d3c <memcpy>
 80079f8:	4621      	mov	r1, r4
 80079fa:	ee18 0a10 	vmov	r0, s16
 80079fe:	f000 f947 	bl	8007c90 <_Bfree>
 8007a02:	464c      	mov	r4, r9
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a0c:	6122      	str	r2, [r4, #16]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	615a      	str	r2, [r3, #20]
 8007a12:	e7bb      	b.n	800798c <__gethex+0x3c8>
 8007a14:	6922      	ldr	r2, [r4, #16]
 8007a16:	455a      	cmp	r2, fp
 8007a18:	dd0b      	ble.n	8007a32 <__gethex+0x46e>
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fd69 	bl	80074f4 <rshift>
 8007a22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a26:	3501      	adds	r5, #1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	f6ff aed0 	blt.w	80077ce <__gethex+0x20a>
 8007a2e:	2701      	movs	r7, #1
 8007a30:	e7c0      	b.n	80079b4 <__gethex+0x3f0>
 8007a32:	f016 061f 	ands.w	r6, r6, #31
 8007a36:	d0fa      	beq.n	8007a2e <__gethex+0x46a>
 8007a38:	4453      	add	r3, sl
 8007a3a:	f1c6 0620 	rsb	r6, r6, #32
 8007a3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a42:	f000 f9d7 	bl	8007df4 <__hi0bits>
 8007a46:	42b0      	cmp	r0, r6
 8007a48:	dbe7      	blt.n	8007a1a <__gethex+0x456>
 8007a4a:	e7f0      	b.n	8007a2e <__gethex+0x46a>
 8007a4c:	08009ab0 	.word	0x08009ab0

08007a50 <L_shift>:
 8007a50:	f1c2 0208 	rsb	r2, r2, #8
 8007a54:	0092      	lsls	r2, r2, #2
 8007a56:	b570      	push	{r4, r5, r6, lr}
 8007a58:	f1c2 0620 	rsb	r6, r2, #32
 8007a5c:	6843      	ldr	r3, [r0, #4]
 8007a5e:	6804      	ldr	r4, [r0, #0]
 8007a60:	fa03 f506 	lsl.w	r5, r3, r6
 8007a64:	432c      	orrs	r4, r5
 8007a66:	40d3      	lsrs	r3, r2
 8007a68:	6004      	str	r4, [r0, #0]
 8007a6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a6e:	4288      	cmp	r0, r1
 8007a70:	d3f4      	bcc.n	8007a5c <L_shift+0xc>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}

08007a74 <__match>:
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	6803      	ldr	r3, [r0, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a7e:	b914      	cbnz	r4, 8007a86 <__match+0x12>
 8007a80:	6003      	str	r3, [r0, #0]
 8007a82:	2001      	movs	r0, #1
 8007a84:	bd30      	pop	{r4, r5, pc}
 8007a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a8e:	2d19      	cmp	r5, #25
 8007a90:	bf98      	it	ls
 8007a92:	3220      	addls	r2, #32
 8007a94:	42a2      	cmp	r2, r4
 8007a96:	d0f0      	beq.n	8007a7a <__match+0x6>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7f3      	b.n	8007a84 <__match+0x10>

08007a9c <__hexnan>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	680b      	ldr	r3, [r1, #0]
 8007aa2:	115e      	asrs	r6, r3, #5
 8007aa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aa8:	f013 031f 	ands.w	r3, r3, #31
 8007aac:	b087      	sub	sp, #28
 8007aae:	bf18      	it	ne
 8007ab0:	3604      	addne	r6, #4
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	1f37      	subs	r7, r6, #4
 8007ab6:	4690      	mov	r8, r2
 8007ab8:	6802      	ldr	r2, [r0, #0]
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	4682      	mov	sl, r0
 8007abe:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ac2:	46b9      	mov	r9, r7
 8007ac4:	463c      	mov	r4, r7
 8007ac6:	9502      	str	r5, [sp, #8]
 8007ac8:	46ab      	mov	fp, r5
 8007aca:	7851      	ldrb	r1, [r2, #1]
 8007acc:	1c53      	adds	r3, r2, #1
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	b341      	cbz	r1, 8007b24 <__hexnan+0x88>
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	9205      	str	r2, [sp, #20]
 8007ad6:	9104      	str	r1, [sp, #16]
 8007ad8:	f7ff fd5e 	bl	8007598 <__hexdig_fun>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d14f      	bne.n	8007b80 <__hexnan+0xe4>
 8007ae0:	9904      	ldr	r1, [sp, #16]
 8007ae2:	9a05      	ldr	r2, [sp, #20]
 8007ae4:	2920      	cmp	r1, #32
 8007ae6:	d818      	bhi.n	8007b1a <__hexnan+0x7e>
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	459b      	cmp	fp, r3
 8007aec:	dd13      	ble.n	8007b16 <__hexnan+0x7a>
 8007aee:	454c      	cmp	r4, r9
 8007af0:	d206      	bcs.n	8007b00 <__hexnan+0x64>
 8007af2:	2d07      	cmp	r5, #7
 8007af4:	dc04      	bgt.n	8007b00 <__hexnan+0x64>
 8007af6:	462a      	mov	r2, r5
 8007af8:	4649      	mov	r1, r9
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff ffa8 	bl	8007a50 <L_shift>
 8007b00:	4544      	cmp	r4, r8
 8007b02:	d950      	bls.n	8007ba6 <__hexnan+0x10a>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f1a4 0904 	sub.w	r9, r4, #4
 8007b0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b0e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b12:	464c      	mov	r4, r9
 8007b14:	461d      	mov	r5, r3
 8007b16:	9a03      	ldr	r2, [sp, #12]
 8007b18:	e7d7      	b.n	8007aca <__hexnan+0x2e>
 8007b1a:	2929      	cmp	r1, #41	; 0x29
 8007b1c:	d156      	bne.n	8007bcc <__hexnan+0x130>
 8007b1e:	3202      	adds	r2, #2
 8007b20:	f8ca 2000 	str.w	r2, [sl]
 8007b24:	f1bb 0f00 	cmp.w	fp, #0
 8007b28:	d050      	beq.n	8007bcc <__hexnan+0x130>
 8007b2a:	454c      	cmp	r4, r9
 8007b2c:	d206      	bcs.n	8007b3c <__hexnan+0xa0>
 8007b2e:	2d07      	cmp	r5, #7
 8007b30:	dc04      	bgt.n	8007b3c <__hexnan+0xa0>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4649      	mov	r1, r9
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff ff8a 	bl	8007a50 <L_shift>
 8007b3c:	4544      	cmp	r4, r8
 8007b3e:	d934      	bls.n	8007baa <__hexnan+0x10e>
 8007b40:	f1a8 0204 	sub.w	r2, r8, #4
 8007b44:	4623      	mov	r3, r4
 8007b46:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b4e:	429f      	cmp	r7, r3
 8007b50:	d2f9      	bcs.n	8007b46 <__hexnan+0xaa>
 8007b52:	1b3b      	subs	r3, r7, r4
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	3304      	adds	r3, #4
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	3e03      	subs	r6, #3
 8007b5e:	42b4      	cmp	r4, r6
 8007b60:	bf88      	it	hi
 8007b62:	2304      	movhi	r3, #4
 8007b64:	4443      	add	r3, r8
 8007b66:	2200      	movs	r2, #0
 8007b68:	f843 2b04 	str.w	r2, [r3], #4
 8007b6c:	429f      	cmp	r7, r3
 8007b6e:	d2fb      	bcs.n	8007b68 <__hexnan+0xcc>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	b91b      	cbnz	r3, 8007b7c <__hexnan+0xe0>
 8007b74:	4547      	cmp	r7, r8
 8007b76:	d127      	bne.n	8007bc8 <__hexnan+0x12c>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	2005      	movs	r0, #5
 8007b7e:	e026      	b.n	8007bce <__hexnan+0x132>
 8007b80:	3501      	adds	r5, #1
 8007b82:	2d08      	cmp	r5, #8
 8007b84:	f10b 0b01 	add.w	fp, fp, #1
 8007b88:	dd06      	ble.n	8007b98 <__hexnan+0xfc>
 8007b8a:	4544      	cmp	r4, r8
 8007b8c:	d9c3      	bls.n	8007b16 <__hexnan+0x7a>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b94:	2501      	movs	r5, #1
 8007b96:	3c04      	subs	r4, #4
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	f000 000f 	and.w	r0, r0, #15
 8007b9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ba2:	6022      	str	r2, [r4, #0]
 8007ba4:	e7b7      	b.n	8007b16 <__hexnan+0x7a>
 8007ba6:	2508      	movs	r5, #8
 8007ba8:	e7b5      	b.n	8007b16 <__hexnan+0x7a>
 8007baa:	9b01      	ldr	r3, [sp, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0df      	beq.n	8007b70 <__hexnan+0xd4>
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb4:	f1c3 0320 	rsb	r3, r3, #32
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007bc0:	401a      	ands	r2, r3
 8007bc2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007bc6:	e7d3      	b.n	8007b70 <__hexnan+0xd4>
 8007bc8:	3f04      	subs	r7, #4
 8007bca:	e7d1      	b.n	8007b70 <__hexnan+0xd4>
 8007bcc:	2004      	movs	r0, #4
 8007bce:	b007      	add	sp, #28
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bd4 <_localeconv_r>:
 8007bd4:	4800      	ldr	r0, [pc, #0]	; (8007bd8 <_localeconv_r+0x4>)
 8007bd6:	4770      	bx	lr
 8007bd8:	200001c0 	.word	0x200001c0

08007bdc <malloc>:
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <malloc+0xc>)
 8007bde:	4601      	mov	r1, r0
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	f000 bd59 	b.w	8008698 <_malloc_r>
 8007be6:	bf00      	nop
 8007be8:	20000068 	.word	0x20000068

08007bec <__ascii_mbtowc>:
 8007bec:	b082      	sub	sp, #8
 8007bee:	b901      	cbnz	r1, 8007bf2 <__ascii_mbtowc+0x6>
 8007bf0:	a901      	add	r1, sp, #4
 8007bf2:	b142      	cbz	r2, 8007c06 <__ascii_mbtowc+0x1a>
 8007bf4:	b14b      	cbz	r3, 8007c0a <__ascii_mbtowc+0x1e>
 8007bf6:	7813      	ldrb	r3, [r2, #0]
 8007bf8:	600b      	str	r3, [r1, #0]
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	1e10      	subs	r0, r2, #0
 8007bfe:	bf18      	it	ne
 8007c00:	2001      	movne	r0, #1
 8007c02:	b002      	add	sp, #8
 8007c04:	4770      	bx	lr
 8007c06:	4610      	mov	r0, r2
 8007c08:	e7fb      	b.n	8007c02 <__ascii_mbtowc+0x16>
 8007c0a:	f06f 0001 	mvn.w	r0, #1
 8007c0e:	e7f8      	b.n	8007c02 <__ascii_mbtowc+0x16>

08007c10 <_Balloc>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Balloc+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ffde 	bl	8007bdc <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6260      	str	r0, [r4, #36]	; 0x24
 8007c24:	b920      	cbnz	r0, 8007c30 <_Balloc+0x20>
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <_Balloc+0x78>)
 8007c28:	4818      	ldr	r0, [pc, #96]	; (8007c8c <_Balloc+0x7c>)
 8007c2a:	2166      	movs	r1, #102	; 0x66
 8007c2c:	f000 ff3e 	bl	8008aac <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c3a:	68f3      	ldr	r3, [r6, #12]
 8007c3c:	b183      	cbz	r3, 8007c60 <_Balloc+0x50>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c46:	b9b8      	cbnz	r0, 8007c78 <_Balloc+0x68>
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c4e:	1d72      	adds	r2, r6, #5
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fc9d 	bl	8008592 <_calloc_r>
 8007c58:	b160      	cbz	r0, 8007c74 <_Balloc+0x64>
 8007c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c5e:	e00e      	b.n	8007c7e <_Balloc+0x6e>
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	2104      	movs	r1, #4
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fc94 	bl	8008592 <_calloc_r>
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	60f0      	str	r0, [r6, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <_Balloc+0x2e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c84:	e7f7      	b.n	8007c76 <_Balloc+0x66>
 8007c86:	bf00      	nop
 8007c88:	08009a3e 	.word	0x08009a3e
 8007c8c:	08009b3c 	.word	0x08009b3c

08007c90 <_Bfree>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b976      	cbnz	r6, 8007cb8 <_Bfree+0x28>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	f7ff ff9e 	bl	8007bdc <malloc>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ca4:	b920      	cbnz	r0, 8007cb0 <_Bfree+0x20>
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_Bfree+0x3c>)
 8007ca8:	4809      	ldr	r0, [pc, #36]	; (8007cd0 <_Bfree+0x40>)
 8007caa:	218a      	movs	r1, #138	; 0x8a
 8007cac:	f000 fefe 	bl	8008aac <__assert_func>
 8007cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb4:	6006      	str	r6, [r0, #0]
 8007cb6:	60c6      	str	r6, [r0, #12]
 8007cb8:	b13c      	cbz	r4, 8007cca <_Bfree+0x3a>
 8007cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cc4:	6021      	str	r1, [r4, #0]
 8007cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	08009a3e 	.word	0x08009a3e
 8007cd0:	08009b3c 	.word	0x08009b3c

08007cd4 <__multadd>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	690d      	ldr	r5, [r1, #16]
 8007cda:	4607      	mov	r7, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461e      	mov	r6, r3
 8007ce0:	f101 0c14 	add.w	ip, r1, #20
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cea:	b299      	uxth	r1, r3
 8007cec:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf0:	0c1e      	lsrs	r6, r3, #16
 8007cf2:	0c0b      	lsrs	r3, r1, #16
 8007cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d00:	4285      	cmp	r5, r0
 8007d02:	f84c 1b04 	str.w	r1, [ip], #4
 8007d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d0a:	dcec      	bgt.n	8007ce6 <__multadd+0x12>
 8007d0c:	b30e      	cbz	r6, 8007d52 <__multadd+0x7e>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc19      	bgt.n	8007d48 <__multadd+0x74>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4638      	mov	r0, r7
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7ff ff79 	bl	8007c10 <_Balloc>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__multadd+0x5a>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <__multadd+0x84>)
 8007d26:	480d      	ldr	r0, [pc, #52]	; (8007d5c <__multadd+0x88>)
 8007d28:	21b5      	movs	r1, #181	; 0xb5
 8007d2a:	f000 febf 	bl	8008aac <__assert_func>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	f104 010c 	add.w	r1, r4, #12
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f7fc ffff 	bl	8004d3c <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffa5 	bl	8007c90 <_Bfree>
 8007d46:	4644      	mov	r4, r8
 8007d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	615e      	str	r6, [r3, #20]
 8007d50:	6125      	str	r5, [r4, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	08009ab0 	.word	0x08009ab0
 8007d5c:	08009b3c 	.word	0x08009b3c

08007d60 <__s2b>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	4615      	mov	r5, r2
 8007d68:	461f      	mov	r7, r3
 8007d6a:	2209      	movs	r2, #9
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	4606      	mov	r6, r0
 8007d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d74:	2100      	movs	r1, #0
 8007d76:	2201      	movs	r2, #1
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	db09      	blt.n	8007d90 <__s2b+0x30>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ff47 	bl	8007c10 <_Balloc>
 8007d82:	b940      	cbnz	r0, 8007d96 <__s2b+0x36>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b19      	ldr	r3, [pc, #100]	; (8007dec <__s2b+0x8c>)
 8007d88:	4819      	ldr	r0, [pc, #100]	; (8007df0 <__s2b+0x90>)
 8007d8a:	21ce      	movs	r1, #206	; 0xce
 8007d8c:	f000 fe8e 	bl	8008aac <__assert_func>
 8007d90:	0052      	lsls	r2, r2, #1
 8007d92:	3101      	adds	r1, #1
 8007d94:	e7f0      	b.n	8007d78 <__s2b+0x18>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	6143      	str	r3, [r0, #20]
 8007d9a:	2d09      	cmp	r5, #9
 8007d9c:	f04f 0301 	mov.w	r3, #1
 8007da0:	6103      	str	r3, [r0, #16]
 8007da2:	dd16      	ble.n	8007dd2 <__s2b+0x72>
 8007da4:	f104 0909 	add.w	r9, r4, #9
 8007da8:	46c8      	mov	r8, r9
 8007daa:	442c      	add	r4, r5
 8007dac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007db0:	4601      	mov	r1, r0
 8007db2:	3b30      	subs	r3, #48	; 0x30
 8007db4:	220a      	movs	r2, #10
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff8c 	bl	8007cd4 <__multadd>
 8007dbc:	45a0      	cmp	r8, r4
 8007dbe:	d1f5      	bne.n	8007dac <__s2b+0x4c>
 8007dc0:	f1a5 0408 	sub.w	r4, r5, #8
 8007dc4:	444c      	add	r4, r9
 8007dc6:	1b2d      	subs	r5, r5, r4
 8007dc8:	1963      	adds	r3, r4, r5
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	db04      	blt.n	8007dd8 <__s2b+0x78>
 8007dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd2:	340a      	adds	r4, #10
 8007dd4:	2509      	movs	r5, #9
 8007dd6:	e7f6      	b.n	8007dc6 <__s2b+0x66>
 8007dd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff76 	bl	8007cd4 <__multadd>
 8007de8:	e7ee      	b.n	8007dc8 <__s2b+0x68>
 8007dea:	bf00      	nop
 8007dec:	08009ab0 	.word	0x08009ab0
 8007df0:	08009b3c 	.word	0x08009b3c

08007df4 <__hi0bits>:
 8007df4:	0c03      	lsrs	r3, r0, #16
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	b9d3      	cbnz	r3, 8007e30 <__hi0bits+0x3c>
 8007dfa:	0400      	lsls	r0, r0, #16
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e02:	bf04      	itt	eq
 8007e04:	0200      	lsleq	r0, r0, #8
 8007e06:	3308      	addeq	r3, #8
 8007e08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e0c:	bf04      	itt	eq
 8007e0e:	0100      	lsleq	r0, r0, #4
 8007e10:	3304      	addeq	r3, #4
 8007e12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e16:	bf04      	itt	eq
 8007e18:	0080      	lsleq	r0, r0, #2
 8007e1a:	3302      	addeq	r3, #2
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	db05      	blt.n	8007e2c <__hi0bits+0x38>
 8007e20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e24:	f103 0301 	add.w	r3, r3, #1
 8007e28:	bf08      	it	eq
 8007e2a:	2320      	moveq	r3, #32
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	4770      	bx	lr
 8007e30:	2300      	movs	r3, #0
 8007e32:	e7e4      	b.n	8007dfe <__hi0bits+0xa>

08007e34 <__lo0bits>:
 8007e34:	6803      	ldr	r3, [r0, #0]
 8007e36:	f013 0207 	ands.w	r2, r3, #7
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	d00b      	beq.n	8007e56 <__lo0bits+0x22>
 8007e3e:	07da      	lsls	r2, r3, #31
 8007e40:	d423      	bmi.n	8007e8a <__lo0bits+0x56>
 8007e42:	0798      	lsls	r0, r3, #30
 8007e44:	bf49      	itett	mi
 8007e46:	085b      	lsrmi	r3, r3, #1
 8007e48:	089b      	lsrpl	r3, r3, #2
 8007e4a:	2001      	movmi	r0, #1
 8007e4c:	600b      	strmi	r3, [r1, #0]
 8007e4e:	bf5c      	itt	pl
 8007e50:	600b      	strpl	r3, [r1, #0]
 8007e52:	2002      	movpl	r0, #2
 8007e54:	4770      	bx	lr
 8007e56:	b298      	uxth	r0, r3
 8007e58:	b9a8      	cbnz	r0, 8007e86 <__lo0bits+0x52>
 8007e5a:	0c1b      	lsrs	r3, r3, #16
 8007e5c:	2010      	movs	r0, #16
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	b90a      	cbnz	r2, 8007e66 <__lo0bits+0x32>
 8007e62:	3008      	adds	r0, #8
 8007e64:	0a1b      	lsrs	r3, r3, #8
 8007e66:	071a      	lsls	r2, r3, #28
 8007e68:	bf04      	itt	eq
 8007e6a:	091b      	lsreq	r3, r3, #4
 8007e6c:	3004      	addeq	r0, #4
 8007e6e:	079a      	lsls	r2, r3, #30
 8007e70:	bf04      	itt	eq
 8007e72:	089b      	lsreq	r3, r3, #2
 8007e74:	3002      	addeq	r0, #2
 8007e76:	07da      	lsls	r2, r3, #31
 8007e78:	d403      	bmi.n	8007e82 <__lo0bits+0x4e>
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	f100 0001 	add.w	r0, r0, #1
 8007e80:	d005      	beq.n	8007e8e <__lo0bits+0x5a>
 8007e82:	600b      	str	r3, [r1, #0]
 8007e84:	4770      	bx	lr
 8007e86:	4610      	mov	r0, r2
 8007e88:	e7e9      	b.n	8007e5e <__lo0bits+0x2a>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	4770      	bx	lr
 8007e8e:	2020      	movs	r0, #32
 8007e90:	4770      	bx	lr
	...

08007e94 <__i2b>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	2101      	movs	r1, #1
 8007e9a:	f7ff feb9 	bl	8007c10 <_Balloc>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	b928      	cbnz	r0, 8007eae <__i2b+0x1a>
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <__i2b+0x24>)
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <__i2b+0x28>)
 8007ea6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007eaa:	f000 fdff 	bl	8008aac <__assert_func>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	6144      	str	r4, [r0, #20]
 8007eb2:	6103      	str	r3, [r0, #16]
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08009ab0 	.word	0x08009ab0
 8007ebc:	08009b3c 	.word	0x08009b3c

08007ec0 <__multiply>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	4691      	mov	r9, r2
 8007ec6:	690a      	ldr	r2, [r1, #16]
 8007ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	bfb8      	it	lt
 8007ed0:	460b      	movlt	r3, r1
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	bfbc      	itt	lt
 8007ed6:	464c      	movlt	r4, r9
 8007ed8:	4699      	movlt	r9, r3
 8007eda:	6927      	ldr	r7, [r4, #16]
 8007edc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	6861      	ldr	r1, [r4, #4]
 8007ee4:	eb07 060a 	add.w	r6, r7, sl
 8007ee8:	42b3      	cmp	r3, r6
 8007eea:	b085      	sub	sp, #20
 8007eec:	bfb8      	it	lt
 8007eee:	3101      	addlt	r1, #1
 8007ef0:	f7ff fe8e 	bl	8007c10 <_Balloc>
 8007ef4:	b930      	cbnz	r0, 8007f04 <__multiply+0x44>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b44      	ldr	r3, [pc, #272]	; (800800c <__multiply+0x14c>)
 8007efa:	4845      	ldr	r0, [pc, #276]	; (8008010 <__multiply+0x150>)
 8007efc:	f240 115d 	movw	r1, #349	; 0x15d
 8007f00:	f000 fdd4 	bl	8008aac <__assert_func>
 8007f04:	f100 0514 	add.w	r5, r0, #20
 8007f08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4543      	cmp	r3, r8
 8007f12:	d321      	bcc.n	8007f58 <__multiply+0x98>
 8007f14:	f104 0314 	add.w	r3, r4, #20
 8007f18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f1c:	f109 0314 	add.w	r3, r9, #20
 8007f20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f24:	9202      	str	r2, [sp, #8]
 8007f26:	1b3a      	subs	r2, r7, r4
 8007f28:	3a15      	subs	r2, #21
 8007f2a:	f022 0203 	bic.w	r2, r2, #3
 8007f2e:	3204      	adds	r2, #4
 8007f30:	f104 0115 	add.w	r1, r4, #21
 8007f34:	428f      	cmp	r7, r1
 8007f36:	bf38      	it	cc
 8007f38:	2204      	movcc	r2, #4
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	9a02      	ldr	r2, [sp, #8]
 8007f3e:	9303      	str	r3, [sp, #12]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d80c      	bhi.n	8007f5e <__multiply+0x9e>
 8007f44:	2e00      	cmp	r6, #0
 8007f46:	dd03      	ble.n	8007f50 <__multiply+0x90>
 8007f48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d05a      	beq.n	8008006 <__multiply+0x146>
 8007f50:	6106      	str	r6, [r0, #16]
 8007f52:	b005      	add	sp, #20
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	f843 2b04 	str.w	r2, [r3], #4
 8007f5c:	e7d8      	b.n	8007f10 <__multiply+0x50>
 8007f5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f62:	f1ba 0f00 	cmp.w	sl, #0
 8007f66:	d024      	beq.n	8007fb2 <__multiply+0xf2>
 8007f68:	f104 0e14 	add.w	lr, r4, #20
 8007f6c:	46a9      	mov	r9, r5
 8007f6e:	f04f 0c00 	mov.w	ip, #0
 8007f72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f76:	f8d9 1000 	ldr.w	r1, [r9]
 8007f7a:	fa1f fb82 	uxth.w	fp, r2
 8007f7e:	b289      	uxth	r1, r1
 8007f80:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f88:	f8d9 2000 	ldr.w	r2, [r9]
 8007f8c:	4461      	add	r1, ip
 8007f8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f92:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f9a:	b289      	uxth	r1, r1
 8007f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fa0:	4577      	cmp	r7, lr
 8007fa2:	f849 1b04 	str.w	r1, [r9], #4
 8007fa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007faa:	d8e2      	bhi.n	8007f72 <__multiply+0xb2>
 8007fac:	9a01      	ldr	r2, [sp, #4]
 8007fae:	f845 c002 	str.w	ip, [r5, r2]
 8007fb2:	9a03      	ldr	r2, [sp, #12]
 8007fb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	f1b9 0f00 	cmp.w	r9, #0
 8007fbe:	d020      	beq.n	8008002 <__multiply+0x142>
 8007fc0:	6829      	ldr	r1, [r5, #0]
 8007fc2:	f104 0c14 	add.w	ip, r4, #20
 8007fc6:	46ae      	mov	lr, r5
 8007fc8:	f04f 0a00 	mov.w	sl, #0
 8007fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8007fd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fd4:	fb09 220b 	mla	r2, r9, fp, r2
 8007fd8:	4492      	add	sl, r2
 8007fda:	b289      	uxth	r1, r1
 8007fdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fe0:	f84e 1b04 	str.w	r1, [lr], #4
 8007fe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fe8:	f8be 1000 	ldrh.w	r1, [lr]
 8007fec:	0c12      	lsrs	r2, r2, #16
 8007fee:	fb09 1102 	mla	r1, r9, r2, r1
 8007ff2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ff6:	4567      	cmp	r7, ip
 8007ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ffc:	d8e6      	bhi.n	8007fcc <__multiply+0x10c>
 8007ffe:	9a01      	ldr	r2, [sp, #4]
 8008000:	50a9      	str	r1, [r5, r2]
 8008002:	3504      	adds	r5, #4
 8008004:	e79a      	b.n	8007f3c <__multiply+0x7c>
 8008006:	3e01      	subs	r6, #1
 8008008:	e79c      	b.n	8007f44 <__multiply+0x84>
 800800a:	bf00      	nop
 800800c:	08009ab0 	.word	0x08009ab0
 8008010:	08009b3c 	.word	0x08009b3c

08008014 <__pow5mult>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4615      	mov	r5, r2
 800801a:	f012 0203 	ands.w	r2, r2, #3
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	d007      	beq.n	8008034 <__pow5mult+0x20>
 8008024:	4c25      	ldr	r4, [pc, #148]	; (80080bc <__pow5mult+0xa8>)
 8008026:	3a01      	subs	r2, #1
 8008028:	2300      	movs	r3, #0
 800802a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800802e:	f7ff fe51 	bl	8007cd4 <__multadd>
 8008032:	4607      	mov	r7, r0
 8008034:	10ad      	asrs	r5, r5, #2
 8008036:	d03d      	beq.n	80080b4 <__pow5mult+0xa0>
 8008038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800803a:	b97c      	cbnz	r4, 800805c <__pow5mult+0x48>
 800803c:	2010      	movs	r0, #16
 800803e:	f7ff fdcd 	bl	8007bdc <malloc>
 8008042:	4602      	mov	r2, r0
 8008044:	6270      	str	r0, [r6, #36]	; 0x24
 8008046:	b928      	cbnz	r0, 8008054 <__pow5mult+0x40>
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <__pow5mult+0xac>)
 800804a:	481e      	ldr	r0, [pc, #120]	; (80080c4 <__pow5mult+0xb0>)
 800804c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008050:	f000 fd2c 	bl	8008aac <__assert_func>
 8008054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008058:	6004      	str	r4, [r0, #0]
 800805a:	60c4      	str	r4, [r0, #12]
 800805c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008064:	b94c      	cbnz	r4, 800807a <__pow5mult+0x66>
 8008066:	f240 2171 	movw	r1, #625	; 0x271
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ff12 	bl	8007e94 <__i2b>
 8008070:	2300      	movs	r3, #0
 8008072:	f8c8 0008 	str.w	r0, [r8, #8]
 8008076:	4604      	mov	r4, r0
 8008078:	6003      	str	r3, [r0, #0]
 800807a:	f04f 0900 	mov.w	r9, #0
 800807e:	07eb      	lsls	r3, r5, #31
 8008080:	d50a      	bpl.n	8008098 <__pow5mult+0x84>
 8008082:	4639      	mov	r1, r7
 8008084:	4622      	mov	r2, r4
 8008086:	4630      	mov	r0, r6
 8008088:	f7ff ff1a 	bl	8007ec0 <__multiply>
 800808c:	4639      	mov	r1, r7
 800808e:	4680      	mov	r8, r0
 8008090:	4630      	mov	r0, r6
 8008092:	f7ff fdfd 	bl	8007c90 <_Bfree>
 8008096:	4647      	mov	r7, r8
 8008098:	106d      	asrs	r5, r5, #1
 800809a:	d00b      	beq.n	80080b4 <__pow5mult+0xa0>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	b938      	cbnz	r0, 80080b0 <__pow5mult+0x9c>
 80080a0:	4622      	mov	r2, r4
 80080a2:	4621      	mov	r1, r4
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff ff0b 	bl	8007ec0 <__multiply>
 80080aa:	6020      	str	r0, [r4, #0]
 80080ac:	f8c0 9000 	str.w	r9, [r0]
 80080b0:	4604      	mov	r4, r0
 80080b2:	e7e4      	b.n	800807e <__pow5mult+0x6a>
 80080b4:	4638      	mov	r0, r7
 80080b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ba:	bf00      	nop
 80080bc:	08009c88 	.word	0x08009c88
 80080c0:	08009a3e 	.word	0x08009a3e
 80080c4:	08009b3c 	.word	0x08009b3c

080080c8 <__lshift>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	6849      	ldr	r1, [r1, #4]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	4607      	mov	r7, r0
 80080da:	4691      	mov	r9, r2
 80080dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080e0:	f108 0601 	add.w	r6, r8, #1
 80080e4:	42b3      	cmp	r3, r6
 80080e6:	db0b      	blt.n	8008100 <__lshift+0x38>
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7ff fd91 	bl	8007c10 <_Balloc>
 80080ee:	4605      	mov	r5, r0
 80080f0:	b948      	cbnz	r0, 8008106 <__lshift+0x3e>
 80080f2:	4602      	mov	r2, r0
 80080f4:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <__lshift+0xd8>)
 80080f6:	482b      	ldr	r0, [pc, #172]	; (80081a4 <__lshift+0xdc>)
 80080f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080fc:	f000 fcd6 	bl	8008aac <__assert_func>
 8008100:	3101      	adds	r1, #1
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	e7ee      	b.n	80080e4 <__lshift+0x1c>
 8008106:	2300      	movs	r3, #0
 8008108:	f100 0114 	add.w	r1, r0, #20
 800810c:	f100 0210 	add.w	r2, r0, #16
 8008110:	4618      	mov	r0, r3
 8008112:	4553      	cmp	r3, sl
 8008114:	db37      	blt.n	8008186 <__lshift+0xbe>
 8008116:	6920      	ldr	r0, [r4, #16]
 8008118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800811c:	f104 0314 	add.w	r3, r4, #20
 8008120:	f019 091f 	ands.w	r9, r9, #31
 8008124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008128:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800812c:	d02f      	beq.n	800818e <__lshift+0xc6>
 800812e:	f1c9 0e20 	rsb	lr, r9, #32
 8008132:	468a      	mov	sl, r1
 8008134:	f04f 0c00 	mov.w	ip, #0
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	fa02 f209 	lsl.w	r2, r2, r9
 800813e:	ea42 020c 	orr.w	r2, r2, ip
 8008142:	f84a 2b04 	str.w	r2, [sl], #4
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	4298      	cmp	r0, r3
 800814c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008150:	d8f2      	bhi.n	8008138 <__lshift+0x70>
 8008152:	1b03      	subs	r3, r0, r4
 8008154:	3b15      	subs	r3, #21
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	3304      	adds	r3, #4
 800815c:	f104 0215 	add.w	r2, r4, #21
 8008160:	4290      	cmp	r0, r2
 8008162:	bf38      	it	cc
 8008164:	2304      	movcc	r3, #4
 8008166:	f841 c003 	str.w	ip, [r1, r3]
 800816a:	f1bc 0f00 	cmp.w	ip, #0
 800816e:	d001      	beq.n	8008174 <__lshift+0xac>
 8008170:	f108 0602 	add.w	r6, r8, #2
 8008174:	3e01      	subs	r6, #1
 8008176:	4638      	mov	r0, r7
 8008178:	612e      	str	r6, [r5, #16]
 800817a:	4621      	mov	r1, r4
 800817c:	f7ff fd88 	bl	8007c90 <_Bfree>
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008186:	f842 0f04 	str.w	r0, [r2, #4]!
 800818a:	3301      	adds	r3, #1
 800818c:	e7c1      	b.n	8008112 <__lshift+0x4a>
 800818e:	3904      	subs	r1, #4
 8008190:	f853 2b04 	ldr.w	r2, [r3], #4
 8008194:	f841 2f04 	str.w	r2, [r1, #4]!
 8008198:	4298      	cmp	r0, r3
 800819a:	d8f9      	bhi.n	8008190 <__lshift+0xc8>
 800819c:	e7ea      	b.n	8008174 <__lshift+0xac>
 800819e:	bf00      	nop
 80081a0:	08009ab0 	.word	0x08009ab0
 80081a4:	08009b3c 	.word	0x08009b3c

080081a8 <__mcmp>:
 80081a8:	b530      	push	{r4, r5, lr}
 80081aa:	6902      	ldr	r2, [r0, #16]
 80081ac:	690c      	ldr	r4, [r1, #16]
 80081ae:	1b12      	subs	r2, r2, r4
 80081b0:	d10e      	bne.n	80081d0 <__mcmp+0x28>
 80081b2:	f100 0314 	add.w	r3, r0, #20
 80081b6:	3114      	adds	r1, #20
 80081b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081c8:	42a5      	cmp	r5, r4
 80081ca:	d003      	beq.n	80081d4 <__mcmp+0x2c>
 80081cc:	d305      	bcc.n	80081da <__mcmp+0x32>
 80081ce:	2201      	movs	r2, #1
 80081d0:	4610      	mov	r0, r2
 80081d2:	bd30      	pop	{r4, r5, pc}
 80081d4:	4283      	cmp	r3, r0
 80081d6:	d3f3      	bcc.n	80081c0 <__mcmp+0x18>
 80081d8:	e7fa      	b.n	80081d0 <__mcmp+0x28>
 80081da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081de:	e7f7      	b.n	80081d0 <__mcmp+0x28>

080081e0 <__mdiff>:
 80081e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	460c      	mov	r4, r1
 80081e6:	4606      	mov	r6, r0
 80081e8:	4611      	mov	r1, r2
 80081ea:	4620      	mov	r0, r4
 80081ec:	4690      	mov	r8, r2
 80081ee:	f7ff ffdb 	bl	80081a8 <__mcmp>
 80081f2:	1e05      	subs	r5, r0, #0
 80081f4:	d110      	bne.n	8008218 <__mdiff+0x38>
 80081f6:	4629      	mov	r1, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7ff fd09 	bl	8007c10 <_Balloc>
 80081fe:	b930      	cbnz	r0, 800820e <__mdiff+0x2e>
 8008200:	4b3a      	ldr	r3, [pc, #232]	; (80082ec <__mdiff+0x10c>)
 8008202:	4602      	mov	r2, r0
 8008204:	f240 2132 	movw	r1, #562	; 0x232
 8008208:	4839      	ldr	r0, [pc, #228]	; (80082f0 <__mdiff+0x110>)
 800820a:	f000 fc4f 	bl	8008aac <__assert_func>
 800820e:	2301      	movs	r3, #1
 8008210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	bfa4      	itt	ge
 800821a:	4643      	movge	r3, r8
 800821c:	46a0      	movge	r8, r4
 800821e:	4630      	mov	r0, r6
 8008220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008224:	bfa6      	itte	ge
 8008226:	461c      	movge	r4, r3
 8008228:	2500      	movge	r5, #0
 800822a:	2501      	movlt	r5, #1
 800822c:	f7ff fcf0 	bl	8007c10 <_Balloc>
 8008230:	b920      	cbnz	r0, 800823c <__mdiff+0x5c>
 8008232:	4b2e      	ldr	r3, [pc, #184]	; (80082ec <__mdiff+0x10c>)
 8008234:	4602      	mov	r2, r0
 8008236:	f44f 7110 	mov.w	r1, #576	; 0x240
 800823a:	e7e5      	b.n	8008208 <__mdiff+0x28>
 800823c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008240:	6926      	ldr	r6, [r4, #16]
 8008242:	60c5      	str	r5, [r0, #12]
 8008244:	f104 0914 	add.w	r9, r4, #20
 8008248:	f108 0514 	add.w	r5, r8, #20
 800824c:	f100 0e14 	add.w	lr, r0, #20
 8008250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008258:	f108 0210 	add.w	r2, r8, #16
 800825c:	46f2      	mov	sl, lr
 800825e:	2100      	movs	r1, #0
 8008260:	f859 3b04 	ldr.w	r3, [r9], #4
 8008264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008268:	fa1f f883 	uxth.w	r8, r3
 800826c:	fa11 f18b 	uxtah	r1, r1, fp
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	eba1 0808 	sub.w	r8, r1, r8
 8008276:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800827a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800827e:	fa1f f888 	uxth.w	r8, r8
 8008282:	1419      	asrs	r1, r3, #16
 8008284:	454e      	cmp	r6, r9
 8008286:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800828a:	f84a 3b04 	str.w	r3, [sl], #4
 800828e:	d8e7      	bhi.n	8008260 <__mdiff+0x80>
 8008290:	1b33      	subs	r3, r6, r4
 8008292:	3b15      	subs	r3, #21
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	3304      	adds	r3, #4
 800829a:	3415      	adds	r4, #21
 800829c:	42a6      	cmp	r6, r4
 800829e:	bf38      	it	cc
 80082a0:	2304      	movcc	r3, #4
 80082a2:	441d      	add	r5, r3
 80082a4:	4473      	add	r3, lr
 80082a6:	469e      	mov	lr, r3
 80082a8:	462e      	mov	r6, r5
 80082aa:	4566      	cmp	r6, ip
 80082ac:	d30e      	bcc.n	80082cc <__mdiff+0xec>
 80082ae:	f10c 0203 	add.w	r2, ip, #3
 80082b2:	1b52      	subs	r2, r2, r5
 80082b4:	f022 0203 	bic.w	r2, r2, #3
 80082b8:	3d03      	subs	r5, #3
 80082ba:	45ac      	cmp	ip, r5
 80082bc:	bf38      	it	cc
 80082be:	2200      	movcc	r2, #0
 80082c0:	441a      	add	r2, r3
 80082c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082c6:	b17b      	cbz	r3, 80082e8 <__mdiff+0x108>
 80082c8:	6107      	str	r7, [r0, #16]
 80082ca:	e7a3      	b.n	8008214 <__mdiff+0x34>
 80082cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80082d0:	fa11 f288 	uxtah	r2, r1, r8
 80082d4:	1414      	asrs	r4, r2, #16
 80082d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082da:	b292      	uxth	r2, r2
 80082dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082e0:	f84e 2b04 	str.w	r2, [lr], #4
 80082e4:	1421      	asrs	r1, r4, #16
 80082e6:	e7e0      	b.n	80082aa <__mdiff+0xca>
 80082e8:	3f01      	subs	r7, #1
 80082ea:	e7ea      	b.n	80082c2 <__mdiff+0xe2>
 80082ec:	08009ab0 	.word	0x08009ab0
 80082f0:	08009b3c 	.word	0x08009b3c

080082f4 <__ulp>:
 80082f4:	b082      	sub	sp, #8
 80082f6:	ed8d 0b00 	vstr	d0, [sp]
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	4912      	ldr	r1, [pc, #72]	; (8008348 <__ulp+0x54>)
 80082fe:	4019      	ands	r1, r3
 8008300:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008304:	2900      	cmp	r1, #0
 8008306:	dd05      	ble.n	8008314 <__ulp+0x20>
 8008308:	2200      	movs	r2, #0
 800830a:	460b      	mov	r3, r1
 800830c:	ec43 2b10 	vmov	d0, r2, r3
 8008310:	b002      	add	sp, #8
 8008312:	4770      	bx	lr
 8008314:	4249      	negs	r1, r1
 8008316:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800831a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	da04      	bge.n	8008332 <__ulp+0x3e>
 8008328:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800832c:	fa41 f300 	asr.w	r3, r1, r0
 8008330:	e7ec      	b.n	800830c <__ulp+0x18>
 8008332:	f1a0 0114 	sub.w	r1, r0, #20
 8008336:	291e      	cmp	r1, #30
 8008338:	bfda      	itte	le
 800833a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800833e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008342:	2101      	movgt	r1, #1
 8008344:	460a      	mov	r2, r1
 8008346:	e7e1      	b.n	800830c <__ulp+0x18>
 8008348:	7ff00000 	.word	0x7ff00000

0800834c <__b2d>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	6905      	ldr	r5, [r0, #16]
 8008350:	f100 0714 	add.w	r7, r0, #20
 8008354:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008358:	1f2e      	subs	r6, r5, #4
 800835a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff fd48 	bl	8007df4 <__hi0bits>
 8008364:	f1c0 0320 	rsb	r3, r0, #32
 8008368:	280a      	cmp	r0, #10
 800836a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80083e8 <__b2d+0x9c>
 800836e:	600b      	str	r3, [r1, #0]
 8008370:	dc14      	bgt.n	800839c <__b2d+0x50>
 8008372:	f1c0 0e0b 	rsb	lr, r0, #11
 8008376:	fa24 f10e 	lsr.w	r1, r4, lr
 800837a:	42b7      	cmp	r7, r6
 800837c:	ea41 030c 	orr.w	r3, r1, ip
 8008380:	bf34      	ite	cc
 8008382:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008386:	2100      	movcs	r1, #0
 8008388:	3015      	adds	r0, #21
 800838a:	fa04 f000 	lsl.w	r0, r4, r0
 800838e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008392:	ea40 0201 	orr.w	r2, r0, r1
 8008396:	ec43 2b10 	vmov	d0, r2, r3
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	42b7      	cmp	r7, r6
 800839e:	bf3a      	itte	cc
 80083a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80083a8:	2100      	movcs	r1, #0
 80083aa:	380b      	subs	r0, #11
 80083ac:	d017      	beq.n	80083de <__b2d+0x92>
 80083ae:	f1c0 0c20 	rsb	ip, r0, #32
 80083b2:	fa04 f500 	lsl.w	r5, r4, r0
 80083b6:	42be      	cmp	r6, r7
 80083b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80083bc:	ea45 0504 	orr.w	r5, r5, r4
 80083c0:	bf8c      	ite	hi
 80083c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083c6:	2400      	movls	r4, #0
 80083c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083cc:	fa01 f000 	lsl.w	r0, r1, r0
 80083d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80083d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083d8:	ea40 0204 	orr.w	r2, r0, r4
 80083dc:	e7db      	b.n	8008396 <__b2d+0x4a>
 80083de:	ea44 030c 	orr.w	r3, r4, ip
 80083e2:	460a      	mov	r2, r1
 80083e4:	e7d7      	b.n	8008396 <__b2d+0x4a>
 80083e6:	bf00      	nop
 80083e8:	3ff00000 	.word	0x3ff00000

080083ec <__d2b>:
 80083ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	4689      	mov	r9, r1
 80083f2:	2101      	movs	r1, #1
 80083f4:	ec57 6b10 	vmov	r6, r7, d0
 80083f8:	4690      	mov	r8, r2
 80083fa:	f7ff fc09 	bl	8007c10 <_Balloc>
 80083fe:	4604      	mov	r4, r0
 8008400:	b930      	cbnz	r0, 8008410 <__d2b+0x24>
 8008402:	4602      	mov	r2, r0
 8008404:	4b25      	ldr	r3, [pc, #148]	; (800849c <__d2b+0xb0>)
 8008406:	4826      	ldr	r0, [pc, #152]	; (80084a0 <__d2b+0xb4>)
 8008408:	f240 310a 	movw	r1, #778	; 0x30a
 800840c:	f000 fb4e 	bl	8008aac <__assert_func>
 8008410:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008414:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008418:	bb35      	cbnz	r5, 8008468 <__d2b+0x7c>
 800841a:	2e00      	cmp	r6, #0
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	d028      	beq.n	8008472 <__d2b+0x86>
 8008420:	4668      	mov	r0, sp
 8008422:	9600      	str	r6, [sp, #0]
 8008424:	f7ff fd06 	bl	8007e34 <__lo0bits>
 8008428:	9900      	ldr	r1, [sp, #0]
 800842a:	b300      	cbz	r0, 800846e <__d2b+0x82>
 800842c:	9a01      	ldr	r2, [sp, #4]
 800842e:	f1c0 0320 	rsb	r3, r0, #32
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	430b      	orrs	r3, r1
 8008438:	40c2      	lsrs	r2, r0
 800843a:	6163      	str	r3, [r4, #20]
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	61a3      	str	r3, [r4, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf14      	ite	ne
 8008446:	2202      	movne	r2, #2
 8008448:	2201      	moveq	r2, #1
 800844a:	6122      	str	r2, [r4, #16]
 800844c:	b1d5      	cbz	r5, 8008484 <__d2b+0x98>
 800844e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008452:	4405      	add	r5, r0
 8008454:	f8c9 5000 	str.w	r5, [r9]
 8008458:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800845c:	f8c8 0000 	str.w	r0, [r8]
 8008460:	4620      	mov	r0, r4
 8008462:	b003      	add	sp, #12
 8008464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800846c:	e7d5      	b.n	800841a <__d2b+0x2e>
 800846e:	6161      	str	r1, [r4, #20]
 8008470:	e7e5      	b.n	800843e <__d2b+0x52>
 8008472:	a801      	add	r0, sp, #4
 8008474:	f7ff fcde 	bl	8007e34 <__lo0bits>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	6163      	str	r3, [r4, #20]
 800847c:	2201      	movs	r2, #1
 800847e:	6122      	str	r2, [r4, #16]
 8008480:	3020      	adds	r0, #32
 8008482:	e7e3      	b.n	800844c <__d2b+0x60>
 8008484:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008488:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800848c:	f8c9 0000 	str.w	r0, [r9]
 8008490:	6918      	ldr	r0, [r3, #16]
 8008492:	f7ff fcaf 	bl	8007df4 <__hi0bits>
 8008496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800849a:	e7df      	b.n	800845c <__d2b+0x70>
 800849c:	08009ab0 	.word	0x08009ab0
 80084a0:	08009b3c 	.word	0x08009b3c

080084a4 <__ratio>:
 80084a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	4688      	mov	r8, r1
 80084aa:	4669      	mov	r1, sp
 80084ac:	4681      	mov	r9, r0
 80084ae:	f7ff ff4d 	bl	800834c <__b2d>
 80084b2:	a901      	add	r1, sp, #4
 80084b4:	4640      	mov	r0, r8
 80084b6:	ec55 4b10 	vmov	r4, r5, d0
 80084ba:	f7ff ff47 	bl	800834c <__b2d>
 80084be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084c6:	eba3 0c02 	sub.w	ip, r3, r2
 80084ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084d4:	ec51 0b10 	vmov	r0, r1, d0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bfd6      	itet	le
 80084dc:	460a      	movle	r2, r1
 80084de:	462a      	movgt	r2, r5
 80084e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084e4:	468b      	mov	fp, r1
 80084e6:	462f      	mov	r7, r5
 80084e8:	bfd4      	ite	le
 80084ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084f2:	4620      	mov	r0, r4
 80084f4:	ee10 2a10 	vmov	r2, s0
 80084f8:	465b      	mov	r3, fp
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 f9be 	bl	800087c <__aeabi_ddiv>
 8008500:	ec41 0b10 	vmov	d0, r0, r1
 8008504:	b003      	add	sp, #12
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800850a <__copybits>:
 800850a:	3901      	subs	r1, #1
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	1149      	asrs	r1, r1, #5
 8008510:	6914      	ldr	r4, [r2, #16]
 8008512:	3101      	adds	r1, #1
 8008514:	f102 0314 	add.w	r3, r2, #20
 8008518:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800851c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008520:	1f05      	subs	r5, r0, #4
 8008522:	42a3      	cmp	r3, r4
 8008524:	d30c      	bcc.n	8008540 <__copybits+0x36>
 8008526:	1aa3      	subs	r3, r4, r2
 8008528:	3b11      	subs	r3, #17
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	3211      	adds	r2, #17
 8008530:	42a2      	cmp	r2, r4
 8008532:	bf88      	it	hi
 8008534:	2300      	movhi	r3, #0
 8008536:	4418      	add	r0, r3
 8008538:	2300      	movs	r3, #0
 800853a:	4288      	cmp	r0, r1
 800853c:	d305      	bcc.n	800854a <__copybits+0x40>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f853 6b04 	ldr.w	r6, [r3], #4
 8008544:	f845 6f04 	str.w	r6, [r5, #4]!
 8008548:	e7eb      	b.n	8008522 <__copybits+0x18>
 800854a:	f840 3b04 	str.w	r3, [r0], #4
 800854e:	e7f4      	b.n	800853a <__copybits+0x30>

08008550 <__any_on>:
 8008550:	f100 0214 	add.w	r2, r0, #20
 8008554:	6900      	ldr	r0, [r0, #16]
 8008556:	114b      	asrs	r3, r1, #5
 8008558:	4298      	cmp	r0, r3
 800855a:	b510      	push	{r4, lr}
 800855c:	db11      	blt.n	8008582 <__any_on+0x32>
 800855e:	dd0a      	ble.n	8008576 <__any_on+0x26>
 8008560:	f011 011f 	ands.w	r1, r1, #31
 8008564:	d007      	beq.n	8008576 <__any_on+0x26>
 8008566:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800856a:	fa24 f001 	lsr.w	r0, r4, r1
 800856e:	fa00 f101 	lsl.w	r1, r0, r1
 8008572:	428c      	cmp	r4, r1
 8008574:	d10b      	bne.n	800858e <__any_on+0x3e>
 8008576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800857a:	4293      	cmp	r3, r2
 800857c:	d803      	bhi.n	8008586 <__any_on+0x36>
 800857e:	2000      	movs	r0, #0
 8008580:	bd10      	pop	{r4, pc}
 8008582:	4603      	mov	r3, r0
 8008584:	e7f7      	b.n	8008576 <__any_on+0x26>
 8008586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800858a:	2900      	cmp	r1, #0
 800858c:	d0f5      	beq.n	800857a <__any_on+0x2a>
 800858e:	2001      	movs	r0, #1
 8008590:	e7f6      	b.n	8008580 <__any_on+0x30>

08008592 <_calloc_r>:
 8008592:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008594:	fba1 2402 	umull	r2, r4, r1, r2
 8008598:	b94c      	cbnz	r4, 80085ae <_calloc_r+0x1c>
 800859a:	4611      	mov	r1, r2
 800859c:	9201      	str	r2, [sp, #4]
 800859e:	f000 f87b 	bl	8008698 <_malloc_r>
 80085a2:	9a01      	ldr	r2, [sp, #4]
 80085a4:	4605      	mov	r5, r0
 80085a6:	b930      	cbnz	r0, 80085b6 <_calloc_r+0x24>
 80085a8:	4628      	mov	r0, r5
 80085aa:	b003      	add	sp, #12
 80085ac:	bd30      	pop	{r4, r5, pc}
 80085ae:	220c      	movs	r2, #12
 80085b0:	6002      	str	r2, [r0, #0]
 80085b2:	2500      	movs	r5, #0
 80085b4:	e7f8      	b.n	80085a8 <_calloc_r+0x16>
 80085b6:	4621      	mov	r1, r4
 80085b8:	f7fc fbce 	bl	8004d58 <memset>
 80085bc:	e7f4      	b.n	80085a8 <_calloc_r+0x16>
	...

080085c0 <_free_r>:
 80085c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c2:	2900      	cmp	r1, #0
 80085c4:	d044      	beq.n	8008650 <_free_r+0x90>
 80085c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f1a1 0404 	sub.w	r4, r1, #4
 80085d2:	bfb8      	it	lt
 80085d4:	18e4      	addlt	r4, r4, r3
 80085d6:	f000 fab3 	bl	8008b40 <__malloc_lock>
 80085da:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <_free_r+0x94>)
 80085dc:	9801      	ldr	r0, [sp, #4]
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	b933      	cbnz	r3, 80085f0 <_free_r+0x30>
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	b003      	add	sp, #12
 80085e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ec:	f000 baae 	b.w	8008b4c <__malloc_unlock>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d908      	bls.n	8008606 <_free_r+0x46>
 80085f4:	6825      	ldr	r5, [r4, #0]
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	428b      	cmp	r3, r1
 80085fa:	bf01      	itttt	eq
 80085fc:	6819      	ldreq	r1, [r3, #0]
 80085fe:	685b      	ldreq	r3, [r3, #4]
 8008600:	1949      	addeq	r1, r1, r5
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	e7ed      	b.n	80085e2 <_free_r+0x22>
 8008606:	461a      	mov	r2, r3
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	b10b      	cbz	r3, 8008610 <_free_r+0x50>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d9fa      	bls.n	8008606 <_free_r+0x46>
 8008610:	6811      	ldr	r1, [r2, #0]
 8008612:	1855      	adds	r5, r2, r1
 8008614:	42a5      	cmp	r5, r4
 8008616:	d10b      	bne.n	8008630 <_free_r+0x70>
 8008618:	6824      	ldr	r4, [r4, #0]
 800861a:	4421      	add	r1, r4
 800861c:	1854      	adds	r4, r2, r1
 800861e:	42a3      	cmp	r3, r4
 8008620:	6011      	str	r1, [r2, #0]
 8008622:	d1e0      	bne.n	80085e6 <_free_r+0x26>
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	6053      	str	r3, [r2, #4]
 800862a:	4421      	add	r1, r4
 800862c:	6011      	str	r1, [r2, #0]
 800862e:	e7da      	b.n	80085e6 <_free_r+0x26>
 8008630:	d902      	bls.n	8008638 <_free_r+0x78>
 8008632:	230c      	movs	r3, #12
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	e7d6      	b.n	80085e6 <_free_r+0x26>
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1961      	adds	r1, r4, r5
 800863c:	428b      	cmp	r3, r1
 800863e:	bf04      	itt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	bf04      	itt	eq
 8008648:	1949      	addeq	r1, r1, r5
 800864a:	6021      	streq	r1, [r4, #0]
 800864c:	6054      	str	r4, [r2, #4]
 800864e:	e7ca      	b.n	80085e6 <_free_r+0x26>
 8008650:	b003      	add	sp, #12
 8008652:	bd30      	pop	{r4, r5, pc}
 8008654:	20000464 	.word	0x20000464

08008658 <sbrk_aligned>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4e0e      	ldr	r6, [pc, #56]	; (8008694 <sbrk_aligned+0x3c>)
 800865c:	460c      	mov	r4, r1
 800865e:	6831      	ldr	r1, [r6, #0]
 8008660:	4605      	mov	r5, r0
 8008662:	b911      	cbnz	r1, 800866a <sbrk_aligned+0x12>
 8008664:	f000 f9f0 	bl	8008a48 <_sbrk_r>
 8008668:	6030      	str	r0, [r6, #0]
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f9eb 	bl	8008a48 <_sbrk_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d00a      	beq.n	800868c <sbrk_aligned+0x34>
 8008676:	1cc4      	adds	r4, r0, #3
 8008678:	f024 0403 	bic.w	r4, r4, #3
 800867c:	42a0      	cmp	r0, r4
 800867e:	d007      	beq.n	8008690 <sbrk_aligned+0x38>
 8008680:	1a21      	subs	r1, r4, r0
 8008682:	4628      	mov	r0, r5
 8008684:	f000 f9e0 	bl	8008a48 <_sbrk_r>
 8008688:	3001      	adds	r0, #1
 800868a:	d101      	bne.n	8008690 <sbrk_aligned+0x38>
 800868c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008690:	4620      	mov	r0, r4
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	20000468 	.word	0x20000468

08008698 <_malloc_r>:
 8008698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869c:	1ccd      	adds	r5, r1, #3
 800869e:	f025 0503 	bic.w	r5, r5, #3
 80086a2:	3508      	adds	r5, #8
 80086a4:	2d0c      	cmp	r5, #12
 80086a6:	bf38      	it	cc
 80086a8:	250c      	movcc	r5, #12
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	4607      	mov	r7, r0
 80086ae:	db01      	blt.n	80086b4 <_malloc_r+0x1c>
 80086b0:	42a9      	cmp	r1, r5
 80086b2:	d905      	bls.n	80086c0 <_malloc_r+0x28>
 80086b4:	230c      	movs	r3, #12
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	2600      	movs	r6, #0
 80086ba:	4630      	mov	r0, r6
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	4e2e      	ldr	r6, [pc, #184]	; (800877c <_malloc_r+0xe4>)
 80086c2:	f000 fa3d 	bl	8008b40 <__malloc_lock>
 80086c6:	6833      	ldr	r3, [r6, #0]
 80086c8:	461c      	mov	r4, r3
 80086ca:	bb34      	cbnz	r4, 800871a <_malloc_r+0x82>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4638      	mov	r0, r7
 80086d0:	f7ff ffc2 	bl	8008658 <sbrk_aligned>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	4604      	mov	r4, r0
 80086d8:	d14d      	bne.n	8008776 <_malloc_r+0xde>
 80086da:	6834      	ldr	r4, [r6, #0]
 80086dc:	4626      	mov	r6, r4
 80086de:	2e00      	cmp	r6, #0
 80086e0:	d140      	bne.n	8008764 <_malloc_r+0xcc>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	4631      	mov	r1, r6
 80086e6:	4638      	mov	r0, r7
 80086e8:	eb04 0803 	add.w	r8, r4, r3
 80086ec:	f000 f9ac 	bl	8008a48 <_sbrk_r>
 80086f0:	4580      	cmp	r8, r0
 80086f2:	d13a      	bne.n	800876a <_malloc_r+0xd2>
 80086f4:	6821      	ldr	r1, [r4, #0]
 80086f6:	3503      	adds	r5, #3
 80086f8:	1a6d      	subs	r5, r5, r1
 80086fa:	f025 0503 	bic.w	r5, r5, #3
 80086fe:	3508      	adds	r5, #8
 8008700:	2d0c      	cmp	r5, #12
 8008702:	bf38      	it	cc
 8008704:	250c      	movcc	r5, #12
 8008706:	4629      	mov	r1, r5
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ffa5 	bl	8008658 <sbrk_aligned>
 800870e:	3001      	adds	r0, #1
 8008710:	d02b      	beq.n	800876a <_malloc_r+0xd2>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	442b      	add	r3, r5
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	e00e      	b.n	8008738 <_malloc_r+0xa0>
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	1b52      	subs	r2, r2, r5
 800871e:	d41e      	bmi.n	800875e <_malloc_r+0xc6>
 8008720:	2a0b      	cmp	r2, #11
 8008722:	d916      	bls.n	8008752 <_malloc_r+0xba>
 8008724:	1961      	adds	r1, r4, r5
 8008726:	42a3      	cmp	r3, r4
 8008728:	6025      	str	r5, [r4, #0]
 800872a:	bf18      	it	ne
 800872c:	6059      	strne	r1, [r3, #4]
 800872e:	6863      	ldr	r3, [r4, #4]
 8008730:	bf08      	it	eq
 8008732:	6031      	streq	r1, [r6, #0]
 8008734:	5162      	str	r2, [r4, r5]
 8008736:	604b      	str	r3, [r1, #4]
 8008738:	4638      	mov	r0, r7
 800873a:	f104 060b 	add.w	r6, r4, #11
 800873e:	f000 fa05 	bl	8008b4c <__malloc_unlock>
 8008742:	f026 0607 	bic.w	r6, r6, #7
 8008746:	1d23      	adds	r3, r4, #4
 8008748:	1af2      	subs	r2, r6, r3
 800874a:	d0b6      	beq.n	80086ba <_malloc_r+0x22>
 800874c:	1b9b      	subs	r3, r3, r6
 800874e:	50a3      	str	r3, [r4, r2]
 8008750:	e7b3      	b.n	80086ba <_malloc_r+0x22>
 8008752:	6862      	ldr	r2, [r4, #4]
 8008754:	42a3      	cmp	r3, r4
 8008756:	bf0c      	ite	eq
 8008758:	6032      	streq	r2, [r6, #0]
 800875a:	605a      	strne	r2, [r3, #4]
 800875c:	e7ec      	b.n	8008738 <_malloc_r+0xa0>
 800875e:	4623      	mov	r3, r4
 8008760:	6864      	ldr	r4, [r4, #4]
 8008762:	e7b2      	b.n	80086ca <_malloc_r+0x32>
 8008764:	4634      	mov	r4, r6
 8008766:	6876      	ldr	r6, [r6, #4]
 8008768:	e7b9      	b.n	80086de <_malloc_r+0x46>
 800876a:	230c      	movs	r3, #12
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4638      	mov	r0, r7
 8008770:	f000 f9ec 	bl	8008b4c <__malloc_unlock>
 8008774:	e7a1      	b.n	80086ba <_malloc_r+0x22>
 8008776:	6025      	str	r5, [r4, #0]
 8008778:	e7de      	b.n	8008738 <_malloc_r+0xa0>
 800877a:	bf00      	nop
 800877c:	20000464 	.word	0x20000464

08008780 <__ssputs_r>:
 8008780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	688e      	ldr	r6, [r1, #8]
 8008786:	429e      	cmp	r6, r3
 8008788:	4682      	mov	sl, r0
 800878a:	460c      	mov	r4, r1
 800878c:	4690      	mov	r8, r2
 800878e:	461f      	mov	r7, r3
 8008790:	d838      	bhi.n	8008804 <__ssputs_r+0x84>
 8008792:	898a      	ldrh	r2, [r1, #12]
 8008794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008798:	d032      	beq.n	8008800 <__ssputs_r+0x80>
 800879a:	6825      	ldr	r5, [r4, #0]
 800879c:	6909      	ldr	r1, [r1, #16]
 800879e:	eba5 0901 	sub.w	r9, r5, r1
 80087a2:	6965      	ldr	r5, [r4, #20]
 80087a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ac:	3301      	adds	r3, #1
 80087ae:	444b      	add	r3, r9
 80087b0:	106d      	asrs	r5, r5, #1
 80087b2:	429d      	cmp	r5, r3
 80087b4:	bf38      	it	cc
 80087b6:	461d      	movcc	r5, r3
 80087b8:	0553      	lsls	r3, r2, #21
 80087ba:	d531      	bpl.n	8008820 <__ssputs_r+0xa0>
 80087bc:	4629      	mov	r1, r5
 80087be:	f7ff ff6b 	bl	8008698 <_malloc_r>
 80087c2:	4606      	mov	r6, r0
 80087c4:	b950      	cbnz	r0, 80087dc <__ssputs_r+0x5c>
 80087c6:	230c      	movs	r3, #12
 80087c8:	f8ca 3000 	str.w	r3, [sl]
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087dc:	6921      	ldr	r1, [r4, #16]
 80087de:	464a      	mov	r2, r9
 80087e0:	f7fc faac 	bl	8004d3c <memcpy>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	6126      	str	r6, [r4, #16]
 80087f2:	6165      	str	r5, [r4, #20]
 80087f4:	444e      	add	r6, r9
 80087f6:	eba5 0509 	sub.w	r5, r5, r9
 80087fa:	6026      	str	r6, [r4, #0]
 80087fc:	60a5      	str	r5, [r4, #8]
 80087fe:	463e      	mov	r6, r7
 8008800:	42be      	cmp	r6, r7
 8008802:	d900      	bls.n	8008806 <__ssputs_r+0x86>
 8008804:	463e      	mov	r6, r7
 8008806:	6820      	ldr	r0, [r4, #0]
 8008808:	4632      	mov	r2, r6
 800880a:	4641      	mov	r1, r8
 800880c:	f000 f97e 	bl	8008b0c <memmove>
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	1b9b      	subs	r3, r3, r6
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	4433      	add	r3, r6
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	2000      	movs	r0, #0
 800881e:	e7db      	b.n	80087d8 <__ssputs_r+0x58>
 8008820:	462a      	mov	r2, r5
 8008822:	f000 f999 	bl	8008b58 <_realloc_r>
 8008826:	4606      	mov	r6, r0
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e1      	bne.n	80087f0 <__ssputs_r+0x70>
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	4650      	mov	r0, sl
 8008830:	f7ff fec6 	bl	80085c0 <_free_r>
 8008834:	e7c7      	b.n	80087c6 <__ssputs_r+0x46>
	...

08008838 <_svfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4698      	mov	r8, r3
 800883e:	898b      	ldrh	r3, [r1, #12]
 8008840:	061b      	lsls	r3, r3, #24
 8008842:	b09d      	sub	sp, #116	; 0x74
 8008844:	4607      	mov	r7, r0
 8008846:	460d      	mov	r5, r1
 8008848:	4614      	mov	r4, r2
 800884a:	d50e      	bpl.n	800886a <_svfiprintf_r+0x32>
 800884c:	690b      	ldr	r3, [r1, #16]
 800884e:	b963      	cbnz	r3, 800886a <_svfiprintf_r+0x32>
 8008850:	2140      	movs	r1, #64	; 0x40
 8008852:	f7ff ff21 	bl	8008698 <_malloc_r>
 8008856:	6028      	str	r0, [r5, #0]
 8008858:	6128      	str	r0, [r5, #16]
 800885a:	b920      	cbnz	r0, 8008866 <_svfiprintf_r+0x2e>
 800885c:	230c      	movs	r3, #12
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008864:	e0d1      	b.n	8008a0a <_svfiprintf_r+0x1d2>
 8008866:	2340      	movs	r3, #64	; 0x40
 8008868:	616b      	str	r3, [r5, #20]
 800886a:	2300      	movs	r3, #0
 800886c:	9309      	str	r3, [sp, #36]	; 0x24
 800886e:	2320      	movs	r3, #32
 8008870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008874:	f8cd 800c 	str.w	r8, [sp, #12]
 8008878:	2330      	movs	r3, #48	; 0x30
 800887a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a24 <_svfiprintf_r+0x1ec>
 800887e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008882:	f04f 0901 	mov.w	r9, #1
 8008886:	4623      	mov	r3, r4
 8008888:	469a      	mov	sl, r3
 800888a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888e:	b10a      	cbz	r2, 8008894 <_svfiprintf_r+0x5c>
 8008890:	2a25      	cmp	r2, #37	; 0x25
 8008892:	d1f9      	bne.n	8008888 <_svfiprintf_r+0x50>
 8008894:	ebba 0b04 	subs.w	fp, sl, r4
 8008898:	d00b      	beq.n	80088b2 <_svfiprintf_r+0x7a>
 800889a:	465b      	mov	r3, fp
 800889c:	4622      	mov	r2, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ff6d 	bl	8008780 <__ssputs_r>
 80088a6:	3001      	adds	r0, #1
 80088a8:	f000 80aa 	beq.w	8008a00 <_svfiprintf_r+0x1c8>
 80088ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ae:	445a      	add	r2, fp
 80088b0:	9209      	str	r2, [sp, #36]	; 0x24
 80088b2:	f89a 3000 	ldrb.w	r3, [sl]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 80a2 	beq.w	8008a00 <_svfiprintf_r+0x1c8>
 80088bc:	2300      	movs	r3, #0
 80088be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c6:	f10a 0a01 	add.w	sl, sl, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d2:	931a      	str	r3, [sp, #104]	; 0x68
 80088d4:	4654      	mov	r4, sl
 80088d6:	2205      	movs	r2, #5
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	4851      	ldr	r0, [pc, #324]	; (8008a24 <_svfiprintf_r+0x1ec>)
 80088de:	f7f7 fc97 	bl	8000210 <memchr>
 80088e2:	9a04      	ldr	r2, [sp, #16]
 80088e4:	b9d8      	cbnz	r0, 800891e <_svfiprintf_r+0xe6>
 80088e6:	06d0      	lsls	r0, r2, #27
 80088e8:	bf44      	itt	mi
 80088ea:	2320      	movmi	r3, #32
 80088ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f0:	0711      	lsls	r1, r2, #28
 80088f2:	bf44      	itt	mi
 80088f4:	232b      	movmi	r3, #43	; 0x2b
 80088f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008900:	d015      	beq.n	800892e <_svfiprintf_r+0xf6>
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	4654      	mov	r4, sl
 8008906:	2000      	movs	r0, #0
 8008908:	f04f 0c0a 	mov.w	ip, #10
 800890c:	4621      	mov	r1, r4
 800890e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008912:	3b30      	subs	r3, #48	; 0x30
 8008914:	2b09      	cmp	r3, #9
 8008916:	d94e      	bls.n	80089b6 <_svfiprintf_r+0x17e>
 8008918:	b1b0      	cbz	r0, 8008948 <_svfiprintf_r+0x110>
 800891a:	9207      	str	r2, [sp, #28]
 800891c:	e014      	b.n	8008948 <_svfiprintf_r+0x110>
 800891e:	eba0 0308 	sub.w	r3, r0, r8
 8008922:	fa09 f303 	lsl.w	r3, r9, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	46a2      	mov	sl, r4
 800892c:	e7d2      	b.n	80088d4 <_svfiprintf_r+0x9c>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d19      	adds	r1, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9103      	str	r1, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfbb      	ittet	lt
 800893a:	425b      	neglt	r3, r3
 800893c:	f042 0202 	orrlt.w	r2, r2, #2
 8008940:	9307      	strge	r3, [sp, #28]
 8008942:	9307      	strlt	r3, [sp, #28]
 8008944:	bfb8      	it	lt
 8008946:	9204      	strlt	r2, [sp, #16]
 8008948:	7823      	ldrb	r3, [r4, #0]
 800894a:	2b2e      	cmp	r3, #46	; 0x2e
 800894c:	d10c      	bne.n	8008968 <_svfiprintf_r+0x130>
 800894e:	7863      	ldrb	r3, [r4, #1]
 8008950:	2b2a      	cmp	r3, #42	; 0x2a
 8008952:	d135      	bne.n	80089c0 <_svfiprintf_r+0x188>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	1d1a      	adds	r2, r3, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	9203      	str	r2, [sp, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb8      	it	lt
 8008960:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008964:	3402      	adds	r4, #2
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a34 <_svfiprintf_r+0x1fc>
 800896c:	7821      	ldrb	r1, [r4, #0]
 800896e:	2203      	movs	r2, #3
 8008970:	4650      	mov	r0, sl
 8008972:	f7f7 fc4d 	bl	8000210 <memchr>
 8008976:	b140      	cbz	r0, 800898a <_svfiprintf_r+0x152>
 8008978:	2340      	movs	r3, #64	; 0x40
 800897a:	eba0 000a 	sub.w	r0, r0, sl
 800897e:	fa03 f000 	lsl.w	r0, r3, r0
 8008982:	9b04      	ldr	r3, [sp, #16]
 8008984:	4303      	orrs	r3, r0
 8008986:	3401      	adds	r4, #1
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898e:	4826      	ldr	r0, [pc, #152]	; (8008a28 <_svfiprintf_r+0x1f0>)
 8008990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008994:	2206      	movs	r2, #6
 8008996:	f7f7 fc3b 	bl	8000210 <memchr>
 800899a:	2800      	cmp	r0, #0
 800899c:	d038      	beq.n	8008a10 <_svfiprintf_r+0x1d8>
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <_svfiprintf_r+0x1f4>)
 80089a0:	bb1b      	cbnz	r3, 80089ea <_svfiprintf_r+0x1b2>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	3307      	adds	r3, #7
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	3308      	adds	r3, #8
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b0:	4433      	add	r3, r6
 80089b2:	9309      	str	r3, [sp, #36]	; 0x24
 80089b4:	e767      	b.n	8008886 <_svfiprintf_r+0x4e>
 80089b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ba:	460c      	mov	r4, r1
 80089bc:	2001      	movs	r0, #1
 80089be:	e7a5      	b.n	800890c <_svfiprintf_r+0xd4>
 80089c0:	2300      	movs	r3, #0
 80089c2:	3401      	adds	r4, #1
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	4619      	mov	r1, r3
 80089c8:	f04f 0c0a 	mov.w	ip, #10
 80089cc:	4620      	mov	r0, r4
 80089ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d2:	3a30      	subs	r2, #48	; 0x30
 80089d4:	2a09      	cmp	r2, #9
 80089d6:	d903      	bls.n	80089e0 <_svfiprintf_r+0x1a8>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0c5      	beq.n	8008968 <_svfiprintf_r+0x130>
 80089dc:	9105      	str	r1, [sp, #20]
 80089de:	e7c3      	b.n	8008968 <_svfiprintf_r+0x130>
 80089e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e4:	4604      	mov	r4, r0
 80089e6:	2301      	movs	r3, #1
 80089e8:	e7f0      	b.n	80089cc <_svfiprintf_r+0x194>
 80089ea:	ab03      	add	r3, sp, #12
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	462a      	mov	r2, r5
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <_svfiprintf_r+0x1f8>)
 80089f2:	a904      	add	r1, sp, #16
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7fc fa57 	bl	8004ea8 <_printf_float>
 80089fa:	1c42      	adds	r2, r0, #1
 80089fc:	4606      	mov	r6, r0
 80089fe:	d1d6      	bne.n	80089ae <_svfiprintf_r+0x176>
 8008a00:	89ab      	ldrh	r3, [r5, #12]
 8008a02:	065b      	lsls	r3, r3, #25
 8008a04:	f53f af2c 	bmi.w	8008860 <_svfiprintf_r+0x28>
 8008a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0a:	b01d      	add	sp, #116	; 0x74
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	462a      	mov	r2, r5
 8008a16:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <_svfiprintf_r+0x1f8>)
 8008a18:	a904      	add	r1, sp, #16
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f7fc fce8 	bl	80053f0 <_printf_i>
 8008a20:	e7eb      	b.n	80089fa <_svfiprintf_r+0x1c2>
 8008a22:	bf00      	nop
 8008a24:	08009c94 	.word	0x08009c94
 8008a28:	08009c9e 	.word	0x08009c9e
 8008a2c:	08004ea9 	.word	0x08004ea9
 8008a30:	08008781 	.word	0x08008781
 8008a34:	08009c9a 	.word	0x08009c9a

08008a38 <nan>:
 8008a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a40 <nan+0x8>
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	00000000 	.word	0x00000000
 8008a44:	7ff80000 	.word	0x7ff80000

08008a48 <_sbrk_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	; (8008a64 <_sbrk_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f9 f9e8 	bl	8001e28 <_sbrk>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_sbrk_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_sbrk_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	2000046c 	.word	0x2000046c

08008a68 <strncmp>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	b17a      	cbz	r2, 8008a8c <strncmp+0x24>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	3901      	subs	r1, #1
 8008a70:	1884      	adds	r4, r0, r2
 8008a72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a7a:	4290      	cmp	r0, r2
 8008a7c:	d101      	bne.n	8008a82 <strncmp+0x1a>
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	d101      	bne.n	8008a86 <strncmp+0x1e>
 8008a82:	1a80      	subs	r0, r0, r2
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1f3      	bne.n	8008a72 <strncmp+0xa>
 8008a8a:	e7fa      	b.n	8008a82 <strncmp+0x1a>
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	e7f9      	b.n	8008a84 <strncmp+0x1c>

08008a90 <__ascii_wctomb>:
 8008a90:	b149      	cbz	r1, 8008aa6 <__ascii_wctomb+0x16>
 8008a92:	2aff      	cmp	r2, #255	; 0xff
 8008a94:	bf85      	ittet	hi
 8008a96:	238a      	movhi	r3, #138	; 0x8a
 8008a98:	6003      	strhi	r3, [r0, #0]
 8008a9a:	700a      	strbls	r2, [r1, #0]
 8008a9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008aa0:	bf98      	it	ls
 8008aa2:	2001      	movls	r0, #1
 8008aa4:	4770      	bx	lr
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4770      	bx	lr
	...

08008aac <__assert_func>:
 8008aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aae:	4614      	mov	r4, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <__assert_func+0x2c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	68d8      	ldr	r0, [r3, #12]
 8008aba:	b14c      	cbz	r4, 8008ad0 <__assert_func+0x24>
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <__assert_func+0x30>)
 8008abe:	9100      	str	r1, [sp, #0]
 8008ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ac4:	4906      	ldr	r1, [pc, #24]	; (8008ae0 <__assert_func+0x34>)
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	f000 f80e 	bl	8008ae8 <fiprintf>
 8008acc:	f000 fa8c 	bl	8008fe8 <abort>
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <__assert_func+0x38>)
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	e7f3      	b.n	8008abe <__assert_func+0x12>
 8008ad6:	bf00      	nop
 8008ad8:	20000068 	.word	0x20000068
 8008adc:	08009ca5 	.word	0x08009ca5
 8008ae0:	08009cb2 	.word	0x08009cb2
 8008ae4:	08009ce0 	.word	0x08009ce0

08008ae8 <fiprintf>:
 8008ae8:	b40e      	push	{r1, r2, r3}
 8008aea:	b503      	push	{r0, r1, lr}
 8008aec:	4601      	mov	r1, r0
 8008aee:	ab03      	add	r3, sp, #12
 8008af0:	4805      	ldr	r0, [pc, #20]	; (8008b08 <fiprintf+0x20>)
 8008af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f000 f885 	bl	8008c08 <_vfiprintf_r>
 8008afe:	b002      	add	sp, #8
 8008b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	20000068 	.word	0x20000068

08008b0c <memmove>:
 8008b0c:	4288      	cmp	r0, r1
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	eb01 0402 	add.w	r4, r1, r2
 8008b14:	d902      	bls.n	8008b1c <memmove+0x10>
 8008b16:	4284      	cmp	r4, r0
 8008b18:	4623      	mov	r3, r4
 8008b1a:	d807      	bhi.n	8008b2c <memmove+0x20>
 8008b1c:	1e43      	subs	r3, r0, #1
 8008b1e:	42a1      	cmp	r1, r4
 8008b20:	d008      	beq.n	8008b34 <memmove+0x28>
 8008b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b2a:	e7f8      	b.n	8008b1e <memmove+0x12>
 8008b2c:	4402      	add	r2, r0
 8008b2e:	4601      	mov	r1, r0
 8008b30:	428a      	cmp	r2, r1
 8008b32:	d100      	bne.n	8008b36 <memmove+0x2a>
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b3e:	e7f7      	b.n	8008b30 <memmove+0x24>

08008b40 <__malloc_lock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__malloc_lock+0x8>)
 8008b42:	f000 bc11 	b.w	8009368 <__retarget_lock_acquire_recursive>
 8008b46:	bf00      	nop
 8008b48:	20000470 	.word	0x20000470

08008b4c <__malloc_unlock>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__malloc_unlock+0x8>)
 8008b4e:	f000 bc0c 	b.w	800936a <__retarget_lock_release_recursive>
 8008b52:	bf00      	nop
 8008b54:	20000470 	.word	0x20000470

08008b58 <_realloc_r>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4614      	mov	r4, r2
 8008b60:	460e      	mov	r6, r1
 8008b62:	b921      	cbnz	r1, 8008b6e <_realloc_r+0x16>
 8008b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	4611      	mov	r1, r2
 8008b6a:	f7ff bd95 	b.w	8008698 <_malloc_r>
 8008b6e:	b92a      	cbnz	r2, 8008b7c <_realloc_r+0x24>
 8008b70:	f7ff fd26 	bl	80085c0 <_free_r>
 8008b74:	4625      	mov	r5, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7c:	f000 fc5c 	bl	8009438 <_malloc_usable_size_r>
 8008b80:	4284      	cmp	r4, r0
 8008b82:	4607      	mov	r7, r0
 8008b84:	d802      	bhi.n	8008b8c <_realloc_r+0x34>
 8008b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b8a:	d812      	bhi.n	8008bb2 <_realloc_r+0x5a>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f7ff fd82 	bl	8008698 <_malloc_r>
 8008b94:	4605      	mov	r5, r0
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0ed      	beq.n	8008b76 <_realloc_r+0x1e>
 8008b9a:	42bc      	cmp	r4, r7
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	bf28      	it	cs
 8008ba2:	463a      	movcs	r2, r7
 8008ba4:	f7fc f8ca 	bl	8004d3c <memcpy>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7ff fd08 	bl	80085c0 <_free_r>
 8008bb0:	e7e1      	b.n	8008b76 <_realloc_r+0x1e>
 8008bb2:	4635      	mov	r5, r6
 8008bb4:	e7df      	b.n	8008b76 <_realloc_r+0x1e>

08008bb6 <__sfputc_r>:
 8008bb6:	6893      	ldr	r3, [r2, #8]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	b410      	push	{r4}
 8008bbe:	6093      	str	r3, [r2, #8]
 8008bc0:	da08      	bge.n	8008bd4 <__sfputc_r+0x1e>
 8008bc2:	6994      	ldr	r4, [r2, #24]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	db01      	blt.n	8008bcc <__sfputc_r+0x16>
 8008bc8:	290a      	cmp	r1, #10
 8008bca:	d103      	bne.n	8008bd4 <__sfputc_r+0x1e>
 8008bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd0:	f000 b94a 	b.w	8008e68 <__swbuf_r>
 8008bd4:	6813      	ldr	r3, [r2, #0]
 8008bd6:	1c58      	adds	r0, r3, #1
 8008bd8:	6010      	str	r0, [r2, #0]
 8008bda:	7019      	strb	r1, [r3, #0]
 8008bdc:	4608      	mov	r0, r1
 8008bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <__sfputs_r>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	4614      	mov	r4, r2
 8008bec:	18d5      	adds	r5, r2, r3
 8008bee:	42ac      	cmp	r4, r5
 8008bf0:	d101      	bne.n	8008bf6 <__sfputs_r+0x12>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e007      	b.n	8008c06 <__sfputs_r+0x22>
 8008bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfa:	463a      	mov	r2, r7
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff ffda 	bl	8008bb6 <__sfputc_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d1f3      	bne.n	8008bee <__sfputs_r+0xa>
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c08 <_vfiprintf_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	b09d      	sub	sp, #116	; 0x74
 8008c10:	4614      	mov	r4, r2
 8008c12:	4698      	mov	r8, r3
 8008c14:	4606      	mov	r6, r0
 8008c16:	b118      	cbz	r0, 8008c20 <_vfiprintf_r+0x18>
 8008c18:	6983      	ldr	r3, [r0, #24]
 8008c1a:	b90b      	cbnz	r3, 8008c20 <_vfiprintf_r+0x18>
 8008c1c:	f000 fb06 	bl	800922c <__sinit>
 8008c20:	4b89      	ldr	r3, [pc, #548]	; (8008e48 <_vfiprintf_r+0x240>)
 8008c22:	429d      	cmp	r5, r3
 8008c24:	d11b      	bne.n	8008c5e <_vfiprintf_r+0x56>
 8008c26:	6875      	ldr	r5, [r6, #4]
 8008c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c2a:	07d9      	lsls	r1, r3, #31
 8008c2c:	d405      	bmi.n	8008c3a <_vfiprintf_r+0x32>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	059a      	lsls	r2, r3, #22
 8008c32:	d402      	bmi.n	8008c3a <_vfiprintf_r+0x32>
 8008c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c36:	f000 fb97 	bl	8009368 <__retarget_lock_acquire_recursive>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	071b      	lsls	r3, r3, #28
 8008c3e:	d501      	bpl.n	8008c44 <_vfiprintf_r+0x3c>
 8008c40:	692b      	ldr	r3, [r5, #16]
 8008c42:	b9eb      	cbnz	r3, 8008c80 <_vfiprintf_r+0x78>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f000 f960 	bl	8008f0c <__swsetup_r>
 8008c4c:	b1c0      	cbz	r0, 8008c80 <_vfiprintf_r+0x78>
 8008c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c50:	07dc      	lsls	r4, r3, #31
 8008c52:	d50e      	bpl.n	8008c72 <_vfiprintf_r+0x6a>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c58:	b01d      	add	sp, #116	; 0x74
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	4b7b      	ldr	r3, [pc, #492]	; (8008e4c <_vfiprintf_r+0x244>)
 8008c60:	429d      	cmp	r5, r3
 8008c62:	d101      	bne.n	8008c68 <_vfiprintf_r+0x60>
 8008c64:	68b5      	ldr	r5, [r6, #8]
 8008c66:	e7df      	b.n	8008c28 <_vfiprintf_r+0x20>
 8008c68:	4b79      	ldr	r3, [pc, #484]	; (8008e50 <_vfiprintf_r+0x248>)
 8008c6a:	429d      	cmp	r5, r3
 8008c6c:	bf08      	it	eq
 8008c6e:	68f5      	ldreq	r5, [r6, #12]
 8008c70:	e7da      	b.n	8008c28 <_vfiprintf_r+0x20>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	0598      	lsls	r0, r3, #22
 8008c76:	d4ed      	bmi.n	8008c54 <_vfiprintf_r+0x4c>
 8008c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c7a:	f000 fb76 	bl	800936a <__retarget_lock_release_recursive>
 8008c7e:	e7e9      	b.n	8008c54 <_vfiprintf_r+0x4c>
 8008c80:	2300      	movs	r3, #0
 8008c82:	9309      	str	r3, [sp, #36]	; 0x24
 8008c84:	2320      	movs	r3, #32
 8008c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8e:	2330      	movs	r3, #48	; 0x30
 8008c90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e54 <_vfiprintf_r+0x24c>
 8008c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c98:	f04f 0901 	mov.w	r9, #1
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	469a      	mov	sl, r3
 8008ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca4:	b10a      	cbz	r2, 8008caa <_vfiprintf_r+0xa2>
 8008ca6:	2a25      	cmp	r2, #37	; 0x25
 8008ca8:	d1f9      	bne.n	8008c9e <_vfiprintf_r+0x96>
 8008caa:	ebba 0b04 	subs.w	fp, sl, r4
 8008cae:	d00b      	beq.n	8008cc8 <_vfiprintf_r+0xc0>
 8008cb0:	465b      	mov	r3, fp
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7ff ff94 	bl	8008be4 <__sfputs_r>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f000 80aa 	beq.w	8008e16 <_vfiprintf_r+0x20e>
 8008cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc4:	445a      	add	r2, fp
 8008cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80a2 	beq.w	8008e16 <_vfiprintf_r+0x20e>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cdc:	f10a 0a01 	add.w	sl, sl, #1
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	9307      	str	r3, [sp, #28]
 8008ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cea:	4654      	mov	r4, sl
 8008cec:	2205      	movs	r2, #5
 8008cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf2:	4858      	ldr	r0, [pc, #352]	; (8008e54 <_vfiprintf_r+0x24c>)
 8008cf4:	f7f7 fa8c 	bl	8000210 <memchr>
 8008cf8:	9a04      	ldr	r2, [sp, #16]
 8008cfa:	b9d8      	cbnz	r0, 8008d34 <_vfiprintf_r+0x12c>
 8008cfc:	06d1      	lsls	r1, r2, #27
 8008cfe:	bf44      	itt	mi
 8008d00:	2320      	movmi	r3, #32
 8008d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d06:	0713      	lsls	r3, r2, #28
 8008d08:	bf44      	itt	mi
 8008d0a:	232b      	movmi	r3, #43	; 0x2b
 8008d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d10:	f89a 3000 	ldrb.w	r3, [sl]
 8008d14:	2b2a      	cmp	r3, #42	; 0x2a
 8008d16:	d015      	beq.n	8008d44 <_vfiprintf_r+0x13c>
 8008d18:	9a07      	ldr	r2, [sp, #28]
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f04f 0c0a 	mov.w	ip, #10
 8008d22:	4621      	mov	r1, r4
 8008d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d28:	3b30      	subs	r3, #48	; 0x30
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d94e      	bls.n	8008dcc <_vfiprintf_r+0x1c4>
 8008d2e:	b1b0      	cbz	r0, 8008d5e <_vfiprintf_r+0x156>
 8008d30:	9207      	str	r2, [sp, #28]
 8008d32:	e014      	b.n	8008d5e <_vfiprintf_r+0x156>
 8008d34:	eba0 0308 	sub.w	r3, r0, r8
 8008d38:	fa09 f303 	lsl.w	r3, r9, r3
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	9304      	str	r3, [sp, #16]
 8008d40:	46a2      	mov	sl, r4
 8008d42:	e7d2      	b.n	8008cea <_vfiprintf_r+0xe2>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	1d19      	adds	r1, r3, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	9103      	str	r1, [sp, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfbb      	ittet	lt
 8008d50:	425b      	neglt	r3, r3
 8008d52:	f042 0202 	orrlt.w	r2, r2, #2
 8008d56:	9307      	strge	r3, [sp, #28]
 8008d58:	9307      	strlt	r3, [sp, #28]
 8008d5a:	bfb8      	it	lt
 8008d5c:	9204      	strlt	r2, [sp, #16]
 8008d5e:	7823      	ldrb	r3, [r4, #0]
 8008d60:	2b2e      	cmp	r3, #46	; 0x2e
 8008d62:	d10c      	bne.n	8008d7e <_vfiprintf_r+0x176>
 8008d64:	7863      	ldrb	r3, [r4, #1]
 8008d66:	2b2a      	cmp	r3, #42	; 0x2a
 8008d68:	d135      	bne.n	8008dd6 <_vfiprintf_r+0x1ce>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	1d1a      	adds	r2, r3, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	9203      	str	r2, [sp, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	bfb8      	it	lt
 8008d76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d7a:	3402      	adds	r4, #2
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e64 <_vfiprintf_r+0x25c>
 8008d82:	7821      	ldrb	r1, [r4, #0]
 8008d84:	2203      	movs	r2, #3
 8008d86:	4650      	mov	r0, sl
 8008d88:	f7f7 fa42 	bl	8000210 <memchr>
 8008d8c:	b140      	cbz	r0, 8008da0 <_vfiprintf_r+0x198>
 8008d8e:	2340      	movs	r3, #64	; 0x40
 8008d90:	eba0 000a 	sub.w	r0, r0, sl
 8008d94:	fa03 f000 	lsl.w	r0, r3, r0
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	4303      	orrs	r3, r0
 8008d9c:	3401      	adds	r4, #1
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da4:	482c      	ldr	r0, [pc, #176]	; (8008e58 <_vfiprintf_r+0x250>)
 8008da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008daa:	2206      	movs	r2, #6
 8008dac:	f7f7 fa30 	bl	8000210 <memchr>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d03f      	beq.n	8008e34 <_vfiprintf_r+0x22c>
 8008db4:	4b29      	ldr	r3, [pc, #164]	; (8008e5c <_vfiprintf_r+0x254>)
 8008db6:	bb1b      	cbnz	r3, 8008e00 <_vfiprintf_r+0x1f8>
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	3307      	adds	r3, #7
 8008dbc:	f023 0307 	bic.w	r3, r3, #7
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc6:	443b      	add	r3, r7
 8008dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dca:	e767      	b.n	8008c9c <_vfiprintf_r+0x94>
 8008dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	e7a5      	b.n	8008d22 <_vfiprintf_r+0x11a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	3401      	adds	r4, #1
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0c0a 	mov.w	ip, #10
 8008de2:	4620      	mov	r0, r4
 8008de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de8:	3a30      	subs	r2, #48	; 0x30
 8008dea:	2a09      	cmp	r2, #9
 8008dec:	d903      	bls.n	8008df6 <_vfiprintf_r+0x1ee>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0c5      	beq.n	8008d7e <_vfiprintf_r+0x176>
 8008df2:	9105      	str	r1, [sp, #20]
 8008df4:	e7c3      	b.n	8008d7e <_vfiprintf_r+0x176>
 8008df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e7f0      	b.n	8008de2 <_vfiprintf_r+0x1da>
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	462a      	mov	r2, r5
 8008e06:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <_vfiprintf_r+0x258>)
 8008e08:	a904      	add	r1, sp, #16
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7fc f84c 	bl	8004ea8 <_printf_float>
 8008e10:	4607      	mov	r7, r0
 8008e12:	1c78      	adds	r0, r7, #1
 8008e14:	d1d6      	bne.n	8008dc4 <_vfiprintf_r+0x1bc>
 8008e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e18:	07d9      	lsls	r1, r3, #31
 8008e1a:	d405      	bmi.n	8008e28 <_vfiprintf_r+0x220>
 8008e1c:	89ab      	ldrh	r3, [r5, #12]
 8008e1e:	059a      	lsls	r2, r3, #22
 8008e20:	d402      	bmi.n	8008e28 <_vfiprintf_r+0x220>
 8008e22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e24:	f000 faa1 	bl	800936a <__retarget_lock_release_recursive>
 8008e28:	89ab      	ldrh	r3, [r5, #12]
 8008e2a:	065b      	lsls	r3, r3, #25
 8008e2c:	f53f af12 	bmi.w	8008c54 <_vfiprintf_r+0x4c>
 8008e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e32:	e711      	b.n	8008c58 <_vfiprintf_r+0x50>
 8008e34:	ab03      	add	r3, sp, #12
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <_vfiprintf_r+0x258>)
 8008e3c:	a904      	add	r1, sp, #16
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7fc fad6 	bl	80053f0 <_printf_i>
 8008e44:	e7e4      	b.n	8008e10 <_vfiprintf_r+0x208>
 8008e46:	bf00      	nop
 8008e48:	08009d04 	.word	0x08009d04
 8008e4c:	08009d24 	.word	0x08009d24
 8008e50:	08009ce4 	.word	0x08009ce4
 8008e54:	08009c94 	.word	0x08009c94
 8008e58:	08009c9e 	.word	0x08009c9e
 8008e5c:	08004ea9 	.word	0x08004ea9
 8008e60:	08008be5 	.word	0x08008be5
 8008e64:	08009c9a 	.word	0x08009c9a

08008e68 <__swbuf_r>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b118      	cbz	r0, 8008e7a <__swbuf_r+0x12>
 8008e72:	6983      	ldr	r3, [r0, #24]
 8008e74:	b90b      	cbnz	r3, 8008e7a <__swbuf_r+0x12>
 8008e76:	f000 f9d9 	bl	800922c <__sinit>
 8008e7a:	4b21      	ldr	r3, [pc, #132]	; (8008f00 <__swbuf_r+0x98>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	d12b      	bne.n	8008ed8 <__swbuf_r+0x70>
 8008e80:	686c      	ldr	r4, [r5, #4]
 8008e82:	69a3      	ldr	r3, [r4, #24]
 8008e84:	60a3      	str	r3, [r4, #8]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	071a      	lsls	r2, r3, #28
 8008e8a:	d52f      	bpl.n	8008eec <__swbuf_r+0x84>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	b36b      	cbz	r3, 8008eec <__swbuf_r+0x84>
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	1ac0      	subs	r0, r0, r3
 8008e96:	6963      	ldr	r3, [r4, #20]
 8008e98:	b2f6      	uxtb	r6, r6
 8008e9a:	4283      	cmp	r3, r0
 8008e9c:	4637      	mov	r7, r6
 8008e9e:	dc04      	bgt.n	8008eaa <__swbuf_r+0x42>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f92e 	bl	8009104 <_fflush_r>
 8008ea8:	bb30      	cbnz	r0, 8008ef8 <__swbuf_r+0x90>
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	60a3      	str	r3, [r4, #8]
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	701e      	strb	r6, [r3, #0]
 8008eb8:	6963      	ldr	r3, [r4, #20]
 8008eba:	3001      	adds	r0, #1
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	d004      	beq.n	8008eca <__swbuf_r+0x62>
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	07db      	lsls	r3, r3, #31
 8008ec4:	d506      	bpl.n	8008ed4 <__swbuf_r+0x6c>
 8008ec6:	2e0a      	cmp	r6, #10
 8008ec8:	d104      	bne.n	8008ed4 <__swbuf_r+0x6c>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 f919 	bl	8009104 <_fflush_r>
 8008ed2:	b988      	cbnz	r0, 8008ef8 <__swbuf_r+0x90>
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <__swbuf_r+0x9c>)
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d101      	bne.n	8008ee2 <__swbuf_r+0x7a>
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	e7cf      	b.n	8008e82 <__swbuf_r+0x1a>
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <__swbuf_r+0xa0>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	bf08      	it	eq
 8008ee8:	68ec      	ldreq	r4, [r5, #12]
 8008eea:	e7ca      	b.n	8008e82 <__swbuf_r+0x1a>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f80c 	bl	8008f0c <__swsetup_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d0cb      	beq.n	8008e90 <__swbuf_r+0x28>
 8008ef8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008efc:	e7ea      	b.n	8008ed4 <__swbuf_r+0x6c>
 8008efe:	bf00      	nop
 8008f00:	08009d04 	.word	0x08009d04
 8008f04:	08009d24 	.word	0x08009d24
 8008f08:	08009ce4 	.word	0x08009ce4

08008f0c <__swsetup_r>:
 8008f0c:	4b32      	ldr	r3, [pc, #200]	; (8008fd8 <__swsetup_r+0xcc>)
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	4606      	mov	r6, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	b125      	cbz	r5, 8008f22 <__swsetup_r+0x16>
 8008f18:	69ab      	ldr	r3, [r5, #24]
 8008f1a:	b913      	cbnz	r3, 8008f22 <__swsetup_r+0x16>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f000 f985 	bl	800922c <__sinit>
 8008f22:	4b2e      	ldr	r3, [pc, #184]	; (8008fdc <__swsetup_r+0xd0>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	d10f      	bne.n	8008f48 <__swsetup_r+0x3c>
 8008f28:	686c      	ldr	r4, [r5, #4]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f30:	0719      	lsls	r1, r3, #28
 8008f32:	d42c      	bmi.n	8008f8e <__swsetup_r+0x82>
 8008f34:	06dd      	lsls	r5, r3, #27
 8008f36:	d411      	bmi.n	8008f5c <__swsetup_r+0x50>
 8008f38:	2309      	movs	r3, #9
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f46:	e03e      	b.n	8008fc6 <__swsetup_r+0xba>
 8008f48:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <__swsetup_r+0xd4>)
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	d101      	bne.n	8008f52 <__swsetup_r+0x46>
 8008f4e:	68ac      	ldr	r4, [r5, #8]
 8008f50:	e7eb      	b.n	8008f2a <__swsetup_r+0x1e>
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <__swsetup_r+0xd8>)
 8008f54:	429c      	cmp	r4, r3
 8008f56:	bf08      	it	eq
 8008f58:	68ec      	ldreq	r4, [r5, #12]
 8008f5a:	e7e6      	b.n	8008f2a <__swsetup_r+0x1e>
 8008f5c:	0758      	lsls	r0, r3, #29
 8008f5e:	d512      	bpl.n	8008f86 <__swsetup_r+0x7a>
 8008f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f62:	b141      	cbz	r1, 8008f76 <__swsetup_r+0x6a>
 8008f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	d002      	beq.n	8008f72 <__swsetup_r+0x66>
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff fb27 	bl	80085c0 <_free_r>
 8008f72:	2300      	movs	r3, #0
 8008f74:	6363      	str	r3, [r4, #52]	; 0x34
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	6063      	str	r3, [r4, #4]
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	f043 0308 	orr.w	r3, r3, #8
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	b94b      	cbnz	r3, 8008fa6 <__swsetup_r+0x9a>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f9c:	d003      	beq.n	8008fa6 <__swsetup_r+0x9a>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 fa09 	bl	80093b8 <__smakebuf_r>
 8008fa6:	89a0      	ldrh	r0, [r4, #12]
 8008fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fac:	f010 0301 	ands.w	r3, r0, #1
 8008fb0:	d00a      	beq.n	8008fc8 <__swsetup_r+0xbc>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	425b      	negs	r3, r3
 8008fba:	61a3      	str	r3, [r4, #24]
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	b943      	cbnz	r3, 8008fd2 <__swsetup_r+0xc6>
 8008fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fc4:	d1ba      	bne.n	8008f3c <__swsetup_r+0x30>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	0781      	lsls	r1, r0, #30
 8008fca:	bf58      	it	pl
 8008fcc:	6963      	ldrpl	r3, [r4, #20]
 8008fce:	60a3      	str	r3, [r4, #8]
 8008fd0:	e7f4      	b.n	8008fbc <__swsetup_r+0xb0>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e7f7      	b.n	8008fc6 <__swsetup_r+0xba>
 8008fd6:	bf00      	nop
 8008fd8:	20000068 	.word	0x20000068
 8008fdc:	08009d04 	.word	0x08009d04
 8008fe0:	08009d24 	.word	0x08009d24
 8008fe4:	08009ce4 	.word	0x08009ce4

08008fe8 <abort>:
 8008fe8:	b508      	push	{r3, lr}
 8008fea:	2006      	movs	r0, #6
 8008fec:	f000 fa54 	bl	8009498 <raise>
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	f7f8 fee9 	bl	8001dc8 <_exit>
	...

08008ff8 <__sflush_r>:
 8008ff8:	898a      	ldrh	r2, [r1, #12]
 8008ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	4605      	mov	r5, r0
 8009000:	0710      	lsls	r0, r2, #28
 8009002:	460c      	mov	r4, r1
 8009004:	d458      	bmi.n	80090b8 <__sflush_r+0xc0>
 8009006:	684b      	ldr	r3, [r1, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	dc05      	bgt.n	8009018 <__sflush_r+0x20>
 800900c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	dc02      	bgt.n	8009018 <__sflush_r+0x20>
 8009012:	2000      	movs	r0, #0
 8009014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800901a:	2e00      	cmp	r6, #0
 800901c:	d0f9      	beq.n	8009012 <__sflush_r+0x1a>
 800901e:	2300      	movs	r3, #0
 8009020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009024:	682f      	ldr	r7, [r5, #0]
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	d032      	beq.n	8009090 <__sflush_r+0x98>
 800902a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	075a      	lsls	r2, r3, #29
 8009030:	d505      	bpl.n	800903e <__sflush_r+0x46>
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	1ac0      	subs	r0, r0, r3
 8009036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009038:	b10b      	cbz	r3, 800903e <__sflush_r+0x46>
 800903a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800903c:	1ac0      	subs	r0, r0, r3
 800903e:	2300      	movs	r3, #0
 8009040:	4602      	mov	r2, r0
 8009042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009044:	6a21      	ldr	r1, [r4, #32]
 8009046:	4628      	mov	r0, r5
 8009048:	47b0      	blx	r6
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	d106      	bne.n	800905e <__sflush_r+0x66>
 8009050:	6829      	ldr	r1, [r5, #0]
 8009052:	291d      	cmp	r1, #29
 8009054:	d82c      	bhi.n	80090b0 <__sflush_r+0xb8>
 8009056:	4a2a      	ldr	r2, [pc, #168]	; (8009100 <__sflush_r+0x108>)
 8009058:	40ca      	lsrs	r2, r1
 800905a:	07d6      	lsls	r6, r2, #31
 800905c:	d528      	bpl.n	80090b0 <__sflush_r+0xb8>
 800905e:	2200      	movs	r2, #0
 8009060:	6062      	str	r2, [r4, #4]
 8009062:	04d9      	lsls	r1, r3, #19
 8009064:	6922      	ldr	r2, [r4, #16]
 8009066:	6022      	str	r2, [r4, #0]
 8009068:	d504      	bpl.n	8009074 <__sflush_r+0x7c>
 800906a:	1c42      	adds	r2, r0, #1
 800906c:	d101      	bne.n	8009072 <__sflush_r+0x7a>
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	b903      	cbnz	r3, 8009074 <__sflush_r+0x7c>
 8009072:	6560      	str	r0, [r4, #84]	; 0x54
 8009074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009076:	602f      	str	r7, [r5, #0]
 8009078:	2900      	cmp	r1, #0
 800907a:	d0ca      	beq.n	8009012 <__sflush_r+0x1a>
 800907c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009080:	4299      	cmp	r1, r3
 8009082:	d002      	beq.n	800908a <__sflush_r+0x92>
 8009084:	4628      	mov	r0, r5
 8009086:	f7ff fa9b 	bl	80085c0 <_free_r>
 800908a:	2000      	movs	r0, #0
 800908c:	6360      	str	r0, [r4, #52]	; 0x34
 800908e:	e7c1      	b.n	8009014 <__sflush_r+0x1c>
 8009090:	6a21      	ldr	r1, [r4, #32]
 8009092:	2301      	movs	r3, #1
 8009094:	4628      	mov	r0, r5
 8009096:	47b0      	blx	r6
 8009098:	1c41      	adds	r1, r0, #1
 800909a:	d1c7      	bne.n	800902c <__sflush_r+0x34>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0c4      	beq.n	800902c <__sflush_r+0x34>
 80090a2:	2b1d      	cmp	r3, #29
 80090a4:	d001      	beq.n	80090aa <__sflush_r+0xb2>
 80090a6:	2b16      	cmp	r3, #22
 80090a8:	d101      	bne.n	80090ae <__sflush_r+0xb6>
 80090aa:	602f      	str	r7, [r5, #0]
 80090ac:	e7b1      	b.n	8009012 <__sflush_r+0x1a>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	e7ad      	b.n	8009014 <__sflush_r+0x1c>
 80090b8:	690f      	ldr	r7, [r1, #16]
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	d0a9      	beq.n	8009012 <__sflush_r+0x1a>
 80090be:	0793      	lsls	r3, r2, #30
 80090c0:	680e      	ldr	r6, [r1, #0]
 80090c2:	bf08      	it	eq
 80090c4:	694b      	ldreq	r3, [r1, #20]
 80090c6:	600f      	str	r7, [r1, #0]
 80090c8:	bf18      	it	ne
 80090ca:	2300      	movne	r3, #0
 80090cc:	eba6 0807 	sub.w	r8, r6, r7
 80090d0:	608b      	str	r3, [r1, #8]
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	dd9c      	ble.n	8009012 <__sflush_r+0x1a>
 80090d8:	6a21      	ldr	r1, [r4, #32]
 80090da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090dc:	4643      	mov	r3, r8
 80090de:	463a      	mov	r2, r7
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b0      	blx	r6
 80090e4:	2800      	cmp	r0, #0
 80090e6:	dc06      	bgt.n	80090f6 <__sflush_r+0xfe>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f4:	e78e      	b.n	8009014 <__sflush_r+0x1c>
 80090f6:	4407      	add	r7, r0
 80090f8:	eba8 0800 	sub.w	r8, r8, r0
 80090fc:	e7e9      	b.n	80090d2 <__sflush_r+0xda>
 80090fe:	bf00      	nop
 8009100:	20400001 	.word	0x20400001

08009104 <_fflush_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	690b      	ldr	r3, [r1, #16]
 8009108:	4605      	mov	r5, r0
 800910a:	460c      	mov	r4, r1
 800910c:	b913      	cbnz	r3, 8009114 <_fflush_r+0x10>
 800910e:	2500      	movs	r5, #0
 8009110:	4628      	mov	r0, r5
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	b118      	cbz	r0, 800911e <_fflush_r+0x1a>
 8009116:	6983      	ldr	r3, [r0, #24]
 8009118:	b90b      	cbnz	r3, 800911e <_fflush_r+0x1a>
 800911a:	f000 f887 	bl	800922c <__sinit>
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <_fflush_r+0x6c>)
 8009120:	429c      	cmp	r4, r3
 8009122:	d11b      	bne.n	800915c <_fflush_r+0x58>
 8009124:	686c      	ldr	r4, [r5, #4]
 8009126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0ef      	beq.n	800910e <_fflush_r+0xa>
 800912e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009130:	07d0      	lsls	r0, r2, #31
 8009132:	d404      	bmi.n	800913e <_fflush_r+0x3a>
 8009134:	0599      	lsls	r1, r3, #22
 8009136:	d402      	bmi.n	800913e <_fflush_r+0x3a>
 8009138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913a:	f000 f915 	bl	8009368 <__retarget_lock_acquire_recursive>
 800913e:	4628      	mov	r0, r5
 8009140:	4621      	mov	r1, r4
 8009142:	f7ff ff59 	bl	8008ff8 <__sflush_r>
 8009146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009148:	07da      	lsls	r2, r3, #31
 800914a:	4605      	mov	r5, r0
 800914c:	d4e0      	bmi.n	8009110 <_fflush_r+0xc>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	059b      	lsls	r3, r3, #22
 8009152:	d4dd      	bmi.n	8009110 <_fflush_r+0xc>
 8009154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009156:	f000 f908 	bl	800936a <__retarget_lock_release_recursive>
 800915a:	e7d9      	b.n	8009110 <_fflush_r+0xc>
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <_fflush_r+0x70>)
 800915e:	429c      	cmp	r4, r3
 8009160:	d101      	bne.n	8009166 <_fflush_r+0x62>
 8009162:	68ac      	ldr	r4, [r5, #8]
 8009164:	e7df      	b.n	8009126 <_fflush_r+0x22>
 8009166:	4b04      	ldr	r3, [pc, #16]	; (8009178 <_fflush_r+0x74>)
 8009168:	429c      	cmp	r4, r3
 800916a:	bf08      	it	eq
 800916c:	68ec      	ldreq	r4, [r5, #12]
 800916e:	e7da      	b.n	8009126 <_fflush_r+0x22>
 8009170:	08009d04 	.word	0x08009d04
 8009174:	08009d24 	.word	0x08009d24
 8009178:	08009ce4 	.word	0x08009ce4

0800917c <std>:
 800917c:	2300      	movs	r3, #0
 800917e:	b510      	push	{r4, lr}
 8009180:	4604      	mov	r4, r0
 8009182:	e9c0 3300 	strd	r3, r3, [r0]
 8009186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800918a:	6083      	str	r3, [r0, #8]
 800918c:	8181      	strh	r1, [r0, #12]
 800918e:	6643      	str	r3, [r0, #100]	; 0x64
 8009190:	81c2      	strh	r2, [r0, #14]
 8009192:	6183      	str	r3, [r0, #24]
 8009194:	4619      	mov	r1, r3
 8009196:	2208      	movs	r2, #8
 8009198:	305c      	adds	r0, #92	; 0x5c
 800919a:	f7fb fddd 	bl	8004d58 <memset>
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std+0x38>)
 80091a0:	6263      	str	r3, [r4, #36]	; 0x24
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <std+0x3c>)
 80091a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <std+0x40>)
 80091a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <std+0x44>)
 80091ac:	6224      	str	r4, [r4, #32]
 80091ae:	6323      	str	r3, [r4, #48]	; 0x30
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	080094d1 	.word	0x080094d1
 80091b8:	080094f3 	.word	0x080094f3
 80091bc:	0800952b 	.word	0x0800952b
 80091c0:	0800954f 	.word	0x0800954f

080091c4 <_cleanup_r>:
 80091c4:	4901      	ldr	r1, [pc, #4]	; (80091cc <_cleanup_r+0x8>)
 80091c6:	f000 b8af 	b.w	8009328 <_fwalk_reent>
 80091ca:	bf00      	nop
 80091cc:	08009105 	.word	0x08009105

080091d0 <__sfmoreglue>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	2268      	movs	r2, #104	; 0x68
 80091d4:	1e4d      	subs	r5, r1, #1
 80091d6:	4355      	muls	r5, r2
 80091d8:	460e      	mov	r6, r1
 80091da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091de:	f7ff fa5b 	bl	8008698 <_malloc_r>
 80091e2:	4604      	mov	r4, r0
 80091e4:	b140      	cbz	r0, 80091f8 <__sfmoreglue+0x28>
 80091e6:	2100      	movs	r1, #0
 80091e8:	e9c0 1600 	strd	r1, r6, [r0]
 80091ec:	300c      	adds	r0, #12
 80091ee:	60a0      	str	r0, [r4, #8]
 80091f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091f4:	f7fb fdb0 	bl	8004d58 <memset>
 80091f8:	4620      	mov	r0, r4
 80091fa:	bd70      	pop	{r4, r5, r6, pc}

080091fc <__sfp_lock_acquire>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sfp_lock_acquire+0x8>)
 80091fe:	f000 b8b3 	b.w	8009368 <__retarget_lock_acquire_recursive>
 8009202:	bf00      	nop
 8009204:	20000471 	.word	0x20000471

08009208 <__sfp_lock_release>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sfp_lock_release+0x8>)
 800920a:	f000 b8ae 	b.w	800936a <__retarget_lock_release_recursive>
 800920e:	bf00      	nop
 8009210:	20000471 	.word	0x20000471

08009214 <__sinit_lock_acquire>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sinit_lock_acquire+0x8>)
 8009216:	f000 b8a7 	b.w	8009368 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	20000472 	.word	0x20000472

08009220 <__sinit_lock_release>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sinit_lock_release+0x8>)
 8009222:	f000 b8a2 	b.w	800936a <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	20000472 	.word	0x20000472

0800922c <__sinit>:
 800922c:	b510      	push	{r4, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	f7ff fff0 	bl	8009214 <__sinit_lock_acquire>
 8009234:	69a3      	ldr	r3, [r4, #24]
 8009236:	b11b      	cbz	r3, 8009240 <__sinit+0x14>
 8009238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923c:	f7ff bff0 	b.w	8009220 <__sinit_lock_release>
 8009240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009244:	6523      	str	r3, [r4, #80]	; 0x50
 8009246:	4b13      	ldr	r3, [pc, #76]	; (8009294 <__sinit+0x68>)
 8009248:	4a13      	ldr	r2, [pc, #76]	; (8009298 <__sinit+0x6c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	62a2      	str	r2, [r4, #40]	; 0x28
 800924e:	42a3      	cmp	r3, r4
 8009250:	bf04      	itt	eq
 8009252:	2301      	moveq	r3, #1
 8009254:	61a3      	streq	r3, [r4, #24]
 8009256:	4620      	mov	r0, r4
 8009258:	f000 f820 	bl	800929c <__sfp>
 800925c:	6060      	str	r0, [r4, #4]
 800925e:	4620      	mov	r0, r4
 8009260:	f000 f81c 	bl	800929c <__sfp>
 8009264:	60a0      	str	r0, [r4, #8]
 8009266:	4620      	mov	r0, r4
 8009268:	f000 f818 	bl	800929c <__sfp>
 800926c:	2200      	movs	r2, #0
 800926e:	60e0      	str	r0, [r4, #12]
 8009270:	2104      	movs	r1, #4
 8009272:	6860      	ldr	r0, [r4, #4]
 8009274:	f7ff ff82 	bl	800917c <std>
 8009278:	68a0      	ldr	r0, [r4, #8]
 800927a:	2201      	movs	r2, #1
 800927c:	2109      	movs	r1, #9
 800927e:	f7ff ff7d 	bl	800917c <std>
 8009282:	68e0      	ldr	r0, [r4, #12]
 8009284:	2202      	movs	r2, #2
 8009286:	2112      	movs	r1, #18
 8009288:	f7ff ff78 	bl	800917c <std>
 800928c:	2301      	movs	r3, #1
 800928e:	61a3      	str	r3, [r4, #24]
 8009290:	e7d2      	b.n	8009238 <__sinit+0xc>
 8009292:	bf00      	nop
 8009294:	080098a0 	.word	0x080098a0
 8009298:	080091c5 	.word	0x080091c5

0800929c <__sfp>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	4607      	mov	r7, r0
 80092a0:	f7ff ffac 	bl	80091fc <__sfp_lock_acquire>
 80092a4:	4b1e      	ldr	r3, [pc, #120]	; (8009320 <__sfp+0x84>)
 80092a6:	681e      	ldr	r6, [r3, #0]
 80092a8:	69b3      	ldr	r3, [r6, #24]
 80092aa:	b913      	cbnz	r3, 80092b2 <__sfp+0x16>
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff ffbd 	bl	800922c <__sinit>
 80092b2:	3648      	adds	r6, #72	; 0x48
 80092b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	d503      	bpl.n	80092c4 <__sfp+0x28>
 80092bc:	6833      	ldr	r3, [r6, #0]
 80092be:	b30b      	cbz	r3, 8009304 <__sfp+0x68>
 80092c0:	6836      	ldr	r6, [r6, #0]
 80092c2:	e7f7      	b.n	80092b4 <__sfp+0x18>
 80092c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092c8:	b9d5      	cbnz	r5, 8009300 <__sfp+0x64>
 80092ca:	4b16      	ldr	r3, [pc, #88]	; (8009324 <__sfp+0x88>)
 80092cc:	60e3      	str	r3, [r4, #12]
 80092ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092d2:	6665      	str	r5, [r4, #100]	; 0x64
 80092d4:	f000 f847 	bl	8009366 <__retarget_lock_init_recursive>
 80092d8:	f7ff ff96 	bl	8009208 <__sfp_lock_release>
 80092dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092e4:	6025      	str	r5, [r4, #0]
 80092e6:	61a5      	str	r5, [r4, #24]
 80092e8:	2208      	movs	r2, #8
 80092ea:	4629      	mov	r1, r5
 80092ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092f0:	f7fb fd32 	bl	8004d58 <memset>
 80092f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092fc:	4620      	mov	r0, r4
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	3468      	adds	r4, #104	; 0x68
 8009302:	e7d9      	b.n	80092b8 <__sfp+0x1c>
 8009304:	2104      	movs	r1, #4
 8009306:	4638      	mov	r0, r7
 8009308:	f7ff ff62 	bl	80091d0 <__sfmoreglue>
 800930c:	4604      	mov	r4, r0
 800930e:	6030      	str	r0, [r6, #0]
 8009310:	2800      	cmp	r0, #0
 8009312:	d1d5      	bne.n	80092c0 <__sfp+0x24>
 8009314:	f7ff ff78 	bl	8009208 <__sfp_lock_release>
 8009318:	230c      	movs	r3, #12
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	e7ee      	b.n	80092fc <__sfp+0x60>
 800931e:	bf00      	nop
 8009320:	080098a0 	.word	0x080098a0
 8009324:	ffff0001 	.word	0xffff0001

08009328 <_fwalk_reent>:
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4606      	mov	r6, r0
 800932e:	4688      	mov	r8, r1
 8009330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009334:	2700      	movs	r7, #0
 8009336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800933a:	f1b9 0901 	subs.w	r9, r9, #1
 800933e:	d505      	bpl.n	800934c <_fwalk_reent+0x24>
 8009340:	6824      	ldr	r4, [r4, #0]
 8009342:	2c00      	cmp	r4, #0
 8009344:	d1f7      	bne.n	8009336 <_fwalk_reent+0xe>
 8009346:	4638      	mov	r0, r7
 8009348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934c:	89ab      	ldrh	r3, [r5, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d907      	bls.n	8009362 <_fwalk_reent+0x3a>
 8009352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009356:	3301      	adds	r3, #1
 8009358:	d003      	beq.n	8009362 <_fwalk_reent+0x3a>
 800935a:	4629      	mov	r1, r5
 800935c:	4630      	mov	r0, r6
 800935e:	47c0      	blx	r8
 8009360:	4307      	orrs	r7, r0
 8009362:	3568      	adds	r5, #104	; 0x68
 8009364:	e7e9      	b.n	800933a <_fwalk_reent+0x12>

08009366 <__retarget_lock_init_recursive>:
 8009366:	4770      	bx	lr

08009368 <__retarget_lock_acquire_recursive>:
 8009368:	4770      	bx	lr

0800936a <__retarget_lock_release_recursive>:
 800936a:	4770      	bx	lr

0800936c <__swhatbuf_r>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	460e      	mov	r6, r1
 8009370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009374:	2900      	cmp	r1, #0
 8009376:	b096      	sub	sp, #88	; 0x58
 8009378:	4614      	mov	r4, r2
 800937a:	461d      	mov	r5, r3
 800937c:	da08      	bge.n	8009390 <__swhatbuf_r+0x24>
 800937e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	602a      	str	r2, [r5, #0]
 8009386:	061a      	lsls	r2, r3, #24
 8009388:	d410      	bmi.n	80093ac <__swhatbuf_r+0x40>
 800938a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938e:	e00e      	b.n	80093ae <__swhatbuf_r+0x42>
 8009390:	466a      	mov	r2, sp
 8009392:	f000 f903 	bl	800959c <_fstat_r>
 8009396:	2800      	cmp	r0, #0
 8009398:	dbf1      	blt.n	800937e <__swhatbuf_r+0x12>
 800939a:	9a01      	ldr	r2, [sp, #4]
 800939c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093a4:	425a      	negs	r2, r3
 80093a6:	415a      	adcs	r2, r3
 80093a8:	602a      	str	r2, [r5, #0]
 80093aa:	e7ee      	b.n	800938a <__swhatbuf_r+0x1e>
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	2000      	movs	r0, #0
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	b016      	add	sp, #88	; 0x58
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080093b8 <__smakebuf_r>:
 80093b8:	898b      	ldrh	r3, [r1, #12]
 80093ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093bc:	079d      	lsls	r5, r3, #30
 80093be:	4606      	mov	r6, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	d507      	bpl.n	80093d4 <__smakebuf_r+0x1c>
 80093c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	2301      	movs	r3, #1
 80093ce:	6163      	str	r3, [r4, #20]
 80093d0:	b002      	add	sp, #8
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	ab01      	add	r3, sp, #4
 80093d6:	466a      	mov	r2, sp
 80093d8:	f7ff ffc8 	bl	800936c <__swhatbuf_r>
 80093dc:	9900      	ldr	r1, [sp, #0]
 80093de:	4605      	mov	r5, r0
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff f959 	bl	8008698 <_malloc_r>
 80093e6:	b948      	cbnz	r0, 80093fc <__smakebuf_r+0x44>
 80093e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ec:	059a      	lsls	r2, r3, #22
 80093ee:	d4ef      	bmi.n	80093d0 <__smakebuf_r+0x18>
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	f043 0302 	orr.w	r3, r3, #2
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	e7e3      	b.n	80093c4 <__smakebuf_r+0xc>
 80093fc:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <__smakebuf_r+0x7c>)
 80093fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	6020      	str	r0, [r4, #0]
 8009404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	6163      	str	r3, [r4, #20]
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	6120      	str	r0, [r4, #16]
 8009412:	b15b      	cbz	r3, 800942c <__smakebuf_r+0x74>
 8009414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009418:	4630      	mov	r0, r6
 800941a:	f000 f8d1 	bl	80095c0 <_isatty_r>
 800941e:	b128      	cbz	r0, 800942c <__smakebuf_r+0x74>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	f043 0301 	orr.w	r3, r3, #1
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	89a0      	ldrh	r0, [r4, #12]
 800942e:	4305      	orrs	r5, r0
 8009430:	81a5      	strh	r5, [r4, #12]
 8009432:	e7cd      	b.n	80093d0 <__smakebuf_r+0x18>
 8009434:	080091c5 	.word	0x080091c5

08009438 <_malloc_usable_size_r>:
 8009438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943c:	1f18      	subs	r0, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfbc      	itt	lt
 8009442:	580b      	ldrlt	r3, [r1, r0]
 8009444:	18c0      	addlt	r0, r0, r3
 8009446:	4770      	bx	lr

08009448 <_raise_r>:
 8009448:	291f      	cmp	r1, #31
 800944a:	b538      	push	{r3, r4, r5, lr}
 800944c:	4604      	mov	r4, r0
 800944e:	460d      	mov	r5, r1
 8009450:	d904      	bls.n	800945c <_raise_r+0x14>
 8009452:	2316      	movs	r3, #22
 8009454:	6003      	str	r3, [r0, #0]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800945e:	b112      	cbz	r2, 8009466 <_raise_r+0x1e>
 8009460:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009464:	b94b      	cbnz	r3, 800947a <_raise_r+0x32>
 8009466:	4620      	mov	r0, r4
 8009468:	f000 f830 	bl	80094cc <_getpid_r>
 800946c:	462a      	mov	r2, r5
 800946e:	4601      	mov	r1, r0
 8009470:	4620      	mov	r0, r4
 8009472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009476:	f000 b817 	b.w	80094a8 <_kill_r>
 800947a:	2b01      	cmp	r3, #1
 800947c:	d00a      	beq.n	8009494 <_raise_r+0x4c>
 800947e:	1c59      	adds	r1, r3, #1
 8009480:	d103      	bne.n	800948a <_raise_r+0x42>
 8009482:	2316      	movs	r3, #22
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	2001      	movs	r0, #1
 8009488:	e7e7      	b.n	800945a <_raise_r+0x12>
 800948a:	2400      	movs	r4, #0
 800948c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009490:	4628      	mov	r0, r5
 8009492:	4798      	blx	r3
 8009494:	2000      	movs	r0, #0
 8009496:	e7e0      	b.n	800945a <_raise_r+0x12>

08009498 <raise>:
 8009498:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <raise+0xc>)
 800949a:	4601      	mov	r1, r0
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	f7ff bfd3 	b.w	8009448 <_raise_r>
 80094a2:	bf00      	nop
 80094a4:	20000068 	.word	0x20000068

080094a8 <_kill_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d07      	ldr	r5, [pc, #28]	; (80094c8 <_kill_r+0x20>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7f8 fc7f 	bl	8001db8 <_kill>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d102      	bne.n	80094c4 <_kill_r+0x1c>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	b103      	cbz	r3, 80094c4 <_kill_r+0x1c>
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	2000046c 	.word	0x2000046c

080094cc <_getpid_r>:
 80094cc:	f7f8 bc72 	b.w	8001db4 <_getpid>

080094d0 <__sread>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	f000 f894 	bl	8009604 <_read_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	bfab      	itete	ge
 80094e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094e2:	89a3      	ldrhlt	r3, [r4, #12]
 80094e4:	181b      	addge	r3, r3, r0
 80094e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094ea:	bfac      	ite	ge
 80094ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ee:	81a3      	strhlt	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__swrite>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	05db      	lsls	r3, r3, #23
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4616      	mov	r6, r2
 8009502:	d505      	bpl.n	8009510 <__swrite+0x1e>
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	2302      	movs	r3, #2
 800950a:	2200      	movs	r2, #0
 800950c:	f000 f868 	bl	80095e0 <_lseek_r>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	f000 b817 	b.w	8009558 <_write_r>

0800952a <__sseek>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 f855 	bl	80095e0 <_lseek_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	bf15      	itete	ne
 800953c:	6560      	strne	r0, [r4, #84]	; 0x54
 800953e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009546:	81a3      	strheq	r3, [r4, #12]
 8009548:	bf18      	it	ne
 800954a:	81a3      	strhne	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__sclose>:
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 b813 	b.w	800957c <_close_r>
	...

08009558 <_write_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_write_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f8 fc44 	bl	8001df4 <_write>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_write_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_write_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	2000046c 	.word	0x2000046c

0800957c <_close_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	; (8009598 <_close_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f8 fc42 	bl	8001e10 <_close>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_close_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_close_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	2000046c 	.word	0x2000046c

0800959c <_fstat_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_fstat_r+0x20>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f7f8 fc34 	bl	8001e16 <_fstat>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_fstat_r+0x1c>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_fstat_r+0x1c>
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	2000046c 	.word	0x2000046c

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fc28 	bl	8001e20 <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	2000046c 	.word	0x2000046c

080095e0 <_lseek_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	; (8009600 <_lseek_r+0x20>)
 80095e4:	4604      	mov	r4, r0
 80095e6:	4608      	mov	r0, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7f8 fc18 	bl	8001e24 <_lseek>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_lseek_r+0x1e>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_lseek_r+0x1e>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	2000046c 	.word	0x2000046c

08009604 <_read_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_read_r+0x20>)
 8009608:	4604      	mov	r4, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	2200      	movs	r2, #0
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f7f8 fbde 	bl	8001dd4 <_read>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_read_r+0x1e>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_read_r+0x1e>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	2000046c 	.word	0x2000046c

08009628 <_init>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr

08009634 <_fini>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr
