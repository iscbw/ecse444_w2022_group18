
lab4_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c77c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800c940  0800c940  0001c940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d004  0800d004  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d00c  0800d00c  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d010  0800d010  0001d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800d014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001130  2000023c  0800d250  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  0800d250  0002136c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002129c  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000461b  00000000  00000000  00041508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00045b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  000476c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d677  00000000  00000000  00049070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021275  00000000  00000000  000766e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a9dc  00000000  00000000  0009795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b2338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083b8  00000000  00000000  001b2388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c924 	.word	0x0800c924

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	0800c924 	.word	0x0800c924

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2120      	movs	r1, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 f849 	bl	8001f84 <SENSOR_IO_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f812 	bl	8001f50 <SENSOR_IO_Write>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f42:	f000 fffb 	bl	8001f3c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 f819 	bl	8001f84 <SENSOR_IO_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2302      	movs	r3, #2
 8000f74:	21b0      	movs	r1, #176	; 0xb0
 8000f76:	f001 f823 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21b6      	movs	r1, #182	; 0xb6
 8000f96:	f001 f813 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	21ba      	movs	r1, #186	; 0xba
 8000fb4:	f001 f804 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2302      	movs	r3, #2
 8000fd0:	21a8      	movs	r1, #168	; 0xa8
 8000fd2:	f000 fff5 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ffa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800100c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001010:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001046:	edd7 7a04 	vldr	s15, [r7, #16]
 800104a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001090 <HTS221_H_ReadHumidity+0x130>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd01      	ble.n	800105c <HTS221_H_ReadHumidity+0xfc>
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HTS221_H_ReadHumidity+0x134>)
 800105a:	e00a      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800105c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <HTS221_H_ReadHumidity+0x110>
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e000      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
 8001070:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001072:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001080:	eef0 7a66 	vmov.f32	s15, s13
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	447a0000 	.word	0x447a0000

08001098 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 ff6a 	bl	8001f84 <SENSOR_IO_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	2120      	movs	r1, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 ff33 	bl	8001f50 <SENSOR_IO_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	2302      	movs	r3, #2
 8001106:	21b2      	movs	r1, #178	; 0xb2
 8001108:	f000 ff5a 	bl	8001fc0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2135      	movs	r1, #53	; 0x35
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff36 	bl	8001f84 <SENSOR_IO_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001126:	b21a      	sxth	r2, r3
 8001128:	7a3b      	ldrb	r3, [r7, #8]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b21b      	sxth	r3, r3
 8001136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800113a:	b21a      	sxth	r2, r3
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001144:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001148:	10db      	asrs	r3, r3, #3
 800114a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800114c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001150:	10db      	asrs	r3, r3, #3
 8001152:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2304      	movs	r3, #4
 800115e:	21bc      	movs	r1, #188	; 0xbc
 8001160:	f000 ff2e 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2302      	movs	r3, #2
 800118a:	21aa      	movs	r1, #170	; 0xaa
 800118c:	f000 ff18 	bl	8001fc0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800119e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	463b      	mov	r3, r7
 8001208:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	2120      	movs	r1, #32
 8001212:	203c      	movs	r0, #60	; 0x3c
 8001214:	f000 fe9c 	bl	8001f50 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	461a      	mov	r2, r3
 800121c:	2121      	movs	r1, #33	; 0x21
 800121e:	203c      	movs	r0, #60	; 0x3c
 8001220:	f000 fe96 	bl	8001f50 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	f000 fe90 	bl	8001f50 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	461a      	mov	r2, r3
 8001234:	2123      	movs	r1, #35	; 0x23
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f000 fe8a 	bl	8001f50 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	2124      	movs	r1, #36	; 0x24
 8001242:	203c      	movs	r0, #60	; 0x3c
 8001244:	f000 fe84 	bl	8001f50 <SENSOR_IO_Write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	203c      	movs	r0, #60	; 0x3c
 800125e:	f000 fe91 	bl	8001f84 <SENSOR_IO_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	461a      	mov	r2, r3
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	203c      	movs	r0, #60	; 0x3c
 800127e:	f000 fe67 	bl	8001f50 <SENSOR_IO_Write>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800128e:	f000 fe55 	bl	8001f3c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001292:	210f      	movs	r1, #15
 8001294:	203c      	movs	r0, #60	; 0x3c
 8001296:	f000 fe75 	bl	8001f84 <SENSOR_IO_Read>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	203c      	movs	r0, #60	; 0x3c
 80012b2:	f000 fe67 	bl	8001f84 <SENSOR_IO_Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0320 	bic.w	r3, r3, #32
 80012c0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	461a      	mov	r2, r3
 80012d4:	2122      	movs	r1, #34	; 0x22
 80012d6:	203c      	movs	r0, #60	; 0x3c
 80012d8:	f000 fe3a 	bl	8001f50 <SENSOR_IO_Write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012fa:	2121      	movs	r1, #33	; 0x21
 80012fc:	203c      	movs	r0, #60	; 0x3c
 80012fe:	f000 fe41 	bl	8001f84 <SENSOR_IO_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	2306      	movs	r3, #6
 800130c:	21a8      	movs	r1, #168	; 0xa8
 800130e:	203c      	movs	r0, #60	; 0x3c
 8001310:	f000 fe56 	bl	8001fc0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e01c      	b.n	8001354 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3301      	adds	r3, #1
 8001320:	3320      	adds	r3, #32
 8001322:	443b      	add	r3, r7
 8001324:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	3320      	adds	r3, #32
 8001334:	443b      	add	r3, r7
 8001336:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b212      	sxth	r2, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	3301      	adds	r3, #1
 8001352:	77fb      	strb	r3, [r7, #31]
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d9df      	bls.n	800131a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001360:	2b60      	cmp	r3, #96	; 0x60
 8001362:	d013      	beq.n	800138c <LIS3MDL_MagReadXYZ+0xa8>
 8001364:	2b60      	cmp	r3, #96	; 0x60
 8001366:	dc14      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d00c      	beq.n	8001386 <LIS3MDL_MagReadXYZ+0xa2>
 800136c:	2b40      	cmp	r3, #64	; 0x40
 800136e:	dc10      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <LIS3MDL_MagReadXYZ+0x96>
 8001374:	2b20      	cmp	r3, #32
 8001376:	d003      	beq.n	8001380 <LIS3MDL_MagReadXYZ+0x9c>
 8001378:	e00b      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <LIS3MDL_MagReadXYZ+0xfc>)
 800137c:	61bb      	str	r3, [r7, #24]
    break;
 800137e:	e008      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LIS3MDL_MagReadXYZ+0x100>)
 8001382:	61bb      	str	r3, [r7, #24]
    break;
 8001384:	e005      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <LIS3MDL_MagReadXYZ+0x104>)
 8001388:	61bb      	str	r3, [r7, #24]
    break;
 800138a:	e002      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <LIS3MDL_MagReadXYZ+0x108>)
 800138e:	61bb      	str	r3, [r7, #24]
    break;    
 8001390:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e01a      	b.n	80013ce <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3320      	adds	r3, #32
 800139e:	443b      	add	r3, r7
 80013a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	b212      	sxth	r2, r2
 80013c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9e1      	bls.n	8001398 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	3e0f5c29 	.word	0x3e0f5c29
 80013e4:	3e947ae1 	.word	0x3e947ae1
 80013e8:	3edc28f6 	.word	0x3edc28f6
 80013ec:	3f147ae1 	.word	0x3f147ae1

080013f0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f879 	bl	80014f4 <LPS22HB_Init>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001418:	f000 fd90 	bl	8001f3c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	210f      	movs	r1, #15
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fdae 	bl	8001f84 <SENSOR_IO_Read>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	74fb      	strb	r3, [r7, #19]
 800144a:	e013      	b.n	8001474 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	3328      	adds	r3, #40	; 0x28
 8001454:	b2db      	uxtb	r3, r3
 8001456:	7cfc      	ldrb	r4, [r7, #19]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f000 fd92 	bl	8001f84 <SENSOR_IO_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	f104 0318 	add.w	r3, r4, #24
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	3301      	adds	r3, #1
 8001472:	74fb      	strb	r3, [r7, #19]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d9e8      	bls.n	800144c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	74fb      	strb	r3, [r7, #19]
 800147e:	e00f      	b.n	80014a0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	3318      	adds	r3, #24
 8001484:	443b      	add	r3, r7
 8001486:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800148a:	461a      	mov	r2, r3
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	3301      	adds	r3, #1
 800149e:	74fb      	strb	r3, [r7, #19]
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d9ec      	bls.n	8001480 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da01      	bge.n	80014cc <LPS22HB_P_ReadPressure+0x94>
 80014c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014cc:	131b      	asrs	r3, r3, #12
 80014ce:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f0 <LPS22HB_P_ReadPressure+0xb8>
 80014de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	211a      	movs	r1, #26
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fd3d 	bl	8001f84 <SENSOR_IO_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	211a      	movs	r1, #26
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fd12 	bl	8001f50 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fd26 	bl	8001f84 <SENSOR_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fcf3 	bl	8001f50 <SENSOR_IO_Write>
}  
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <vApplicationGetIdleTaskMemory+0x30>)
 800158a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000258 	.word	0x20000258
 80015a4:	200002ac 	.word	0x200002ac

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b0b8      	sub	sp, #224	; 0xe0
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f001 f87e 	bl	80026ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f953 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fa2f 	bl	8001a18 <MX_GPIO_Init>
  MX_I2C2_Init();
 80015ba:	f000 f9a1 	bl	8001900 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80015be:	f000 f9df 	bl	8001980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  cur_sensor = 0;
 80015c2:	4b94      	ldr	r3, [pc, #592]	; (8001814 <main+0x26c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  char uart_buffer[100];
    memset(uart_buffer, 0, 100);
 80015c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f008 facb 	bl	8009b6c <memset>

    uint32_t temp_status = BSP_TSENSOR_Init();
 80015d6:	f000 fdb1 	bl	800213c <BSP_TSENSOR_Init>
 80015da:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    if (temp_status == 0) {
 80015de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d110      	bne.n	8001608 <main+0x60>
  	  strcpy(uart_buffer, "The temperature sensor is successfully initialised.\r\n");
 80015e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ea:	4a8b      	ldr	r2, [pc, #556]	; (8001818 <main+0x270>)
 80015ec:	461c      	mov	r4, r3
 80015ee:	4615      	mov	r5, r2
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001600:	6020      	str	r0, [r4, #0]
 8001602:	3404      	adds	r4, #4
 8001604:	8021      	strh	r1, [r4, #0]
 8001606:	e00c      	b.n	8001622 <main+0x7a>
    } else {
  	  strcpy(uart_buffer, "Initialisation for the temperature sensor failed.\r\n");
 8001608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800160c:	4a83      	ldr	r2, [pc, #524]	; (800181c <main+0x274>)
 800160e:	461c      	mov	r4, r3
 8001610:	4615      	mov	r5, r2
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	6023      	str	r3, [r4, #0]
    }
    HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 8001622:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001626:	2314      	movs	r3, #20
 8001628:	2264      	movs	r2, #100	; 0x64
 800162a:	487d      	ldr	r0, [pc, #500]	; (8001820 <main+0x278>)
 800162c:	f004 fa28 	bl	8005a80 <HAL_UART_Transmit>

    uint32_t humid_status = BSP_HSENSOR_Init();
 8001630:	f000 fce4 	bl	8001ffc <BSP_HSENSOR_Init>
 8001634:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    memset(uart_buffer, 0, 100);
 8001638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800163c:	2264      	movs	r2, #100	; 0x64
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f008 fa93 	bl	8009b6c <memset>
    if (humid_status == 0) {
 8001646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d111      	bne.n	8001672 <main+0xca>
  	  strcpy(uart_buffer, "The humidity sensor is successfully initialised.\r\n");
 800164e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001652:	4a74      	ldr	r2, [pc, #464]	; (8001824 <main+0x27c>)
 8001654:	461c      	mov	r4, r3
 8001656:	4615      	mov	r5, r2
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	8022      	strh	r2, [r4, #0]
 800166a:	3402      	adds	r4, #2
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	7023      	strb	r3, [r4, #0]
 8001670:	e00c      	b.n	800168c <main+0xe4>
    } else {
  	  strcpy(uart_buffer, "Initialisation for the humidity sensor failed.\r\n");
 8001672:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001676:	4a6c      	ldr	r2, [pc, #432]	; (8001828 <main+0x280>)
 8001678:	461c      	mov	r4, r3
 800167a:	4615      	mov	r5, r2
 800167c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	7023      	strb	r3, [r4, #0]
    }
    HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 800168c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001690:	2314      	movs	r3, #20
 8001692:	2264      	movs	r2, #100	; 0x64
 8001694:	4862      	ldr	r0, [pc, #392]	; (8001820 <main+0x278>)
 8001696:	f004 f9f3 	bl	8005a80 <HAL_UART_Transmit>

    uint32_t pres_status = BSP_PSENSOR_Init();
 800169a:	f000 fd21 	bl	80020e0 <BSP_PSENSOR_Init>
 800169e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    memset(uart_buffer, 0, 100);
 80016a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016a6:	2264      	movs	r2, #100	; 0x64
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f008 fa5e 	bl	8009b6c <memset>
    if (pres_status == 0) {
 80016b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d111      	bne.n	80016dc <main+0x134>
  	  strcpy(uart_buffer, "The pressure sensor is successfully initialised.\r\n");
 80016b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016bc:	4a5b      	ldr	r2, [pc, #364]	; (800182c <main+0x284>)
 80016be:	461c      	mov	r4, r3
 80016c0:	4615      	mov	r5, r2
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	8022      	strh	r2, [r4, #0]
 80016d4:	3402      	adds	r4, #2
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	7023      	strb	r3, [r4, #0]
 80016da:	e00c      	b.n	80016f6 <main+0x14e>
    } else {
  	  strcpy(uart_buffer, "Initialisation for the pressure sensor failed.\r\n");
 80016dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016e0:	4a53      	ldr	r2, [pc, #332]	; (8001830 <main+0x288>)
 80016e2:	461c      	mov	r4, r3
 80016e4:	4615      	mov	r5, r2
 80016e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	7023      	strb	r3, [r4, #0]
    }
    HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 80016f6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80016fa:	2314      	movs	r3, #20
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	4848      	ldr	r0, [pc, #288]	; (8001820 <main+0x278>)
 8001700:	f004 f9be 	bl	8005a80 <HAL_UART_Transmit>

    MAGNETO_StatusTypeDef mag_status = BSP_MAGNETO_Init();
 8001704:	f000 fca8 	bl	8002058 <BSP_MAGNETO_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    memset(uart_buffer, 0, 100);
 800170e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001712:	2264      	movs	r2, #100	; 0x64
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f008 fa28 	bl	8009b6c <memset>
    if (mag_status == MAGNETO_OK) {
 800171c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <main+0x198>
  	  strcpy(uart_buffer, "The magneto sensor is successfully initialised.\r\n");
 8001724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001728:	4a42      	ldr	r2, [pc, #264]	; (8001834 <main+0x28c>)
 800172a:	461c      	mov	r4, r3
 800172c:	4615      	mov	r5, r2
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	8023      	strh	r3, [r4, #0]
 800173e:	e00c      	b.n	800175a <main+0x1b2>
    } else {
  	  strcpy(uart_buffer, "Initialisation for the magneto sensor failed.\r\n");
 8001740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001744:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <main+0x290>)
 8001746:	461c      	mov	r4, r3
 8001748:	4615      	mov	r5, r2
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
    HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, 100, 20);
 800175a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800175e:	2314      	movs	r3, #20
 8001760:	2264      	movs	r2, #100	; 0x64
 8001762:	482f      	ldr	r0, [pc, #188]	; (8001820 <main+0x278>)
 8001764:	f004 f98c 	bl	8005a80 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of curSensorMutex */
  osMutexDef(curSensorMutex);
 8001768:	2300      	movs	r3, #0
 800176a:	667b      	str	r3, [r7, #100]	; 0x64
 800176c:	2300      	movs	r3, #0
 800176e:	66bb      	str	r3, [r7, #104]	; 0x68
  curSensorMutexHandle = osMutexCreate(osMutex(curSensorMutex));
 8001770:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001774:	4618      	mov	r0, r3
 8001776:	f005 f8ed 	bl	8006954 <osMutexCreate>
 800177a:	4603      	mov	r3, r0
 800177c:	4a2f      	ldr	r2, [pc, #188]	; (800183c <main+0x294>)
 800177e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(sensorQ, 2, sensor_reading);
 8001780:	2302      	movs	r3, #2
 8001782:	657b      	str	r3, [r7, #84]	; 0x54
 8001784:	230c      	movs	r3, #12
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
 8001788:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensorQ = osMailCreate(osMailQ(sensorQ), NULL);
 800178e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f005 fa79 	bl	8006c8c <osMailCreate>
 800179a:	4603      	mov	r3, r0
 800179c:	4a28      	ldr	r2, [pc, #160]	; (8001840 <main+0x298>)
 800179e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskButton */
  osThreadDef(taskButton, StartButtonTask, osPriorityNormal, 0, 128);
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <main+0x29c>)
 80017a2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017a6:	461d      	mov	r5, r3
 80017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskButtonHandle = osThreadCreate(osThread(taskButton), NULL);
 80017b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 ffdd 	bl	800677a <osThreadCreate>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <main+0x2a0>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskSensorRead */
  osThreadDef(taskSensorRead, StartSensorRead, osPriorityAboveNormal, 0, 128);
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <main+0x2a4>)
 80017c8:	f107 041c 	add.w	r4, r7, #28
 80017cc:	461d      	mov	r5, r3
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskSensorReadHandle = osThreadCreate(osThread(taskSensorRead), NULL);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 ffca 	bl	800677a <osThreadCreate>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a19      	ldr	r2, [pc, #100]	; (8001850 <main+0x2a8>)
 80017ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskSerialWrite */
  osThreadDef(taskSerialWrite, StartSerialWrite, osPriorityHigh, 0, 256);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <main+0x2ac>)
 80017ee:	463c      	mov	r4, r7
 80017f0:	461d      	mov	r5, r3
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskSerialWriteHandle = osThreadCreate(osThread(taskSerialWrite), NULL);
 80017fe:	463b      	mov	r3, r7
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f004 ffb9 	bl	800677a <osThreadCreate>
 8001808:	4603      	mov	r3, r0
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <main+0x2b0>)
 800180c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800180e:	f004 ffad 	bl	800676c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0x26a>
 8001814:	20000598 	.word	0x20000598
 8001818:	0800c96c 	.word	0x0800c96c
 800181c:	0800c9a4 	.word	0x0800c9a4
 8001820:	200004f8 	.word	0x200004f8
 8001824:	0800c9d8 	.word	0x0800c9d8
 8001828:	0800ca0c 	.word	0x0800ca0c
 800182c:	0800ca40 	.word	0x0800ca40
 8001830:	0800ca74 	.word	0x0800ca74
 8001834:	0800caa8 	.word	0x0800caa8
 8001838:	0800cadc 	.word	0x0800cadc
 800183c:	20000594 	.word	0x20000594
 8001840:	2000059c 	.word	0x2000059c
 8001844:	0800cb0c 	.word	0x0800cb0c
 8001848:	20000588 	.word	0x20000588
 800184c:	0800cb28 	.word	0x0800cb28
 8001850:	2000058c 	.word	0x2000058c
 8001854:	0800cb44 	.word	0x0800cb44
 8001858:	20000590 	.word	0x20000590

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f008 f97e 	bl	8009b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800187e:	2000      	movs	r0, #0
 8001880:	f002 f916 	bl	8003ab0 <HAL_PWREx_ControlVoltageScaling>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800188a:	f000 fa61 	bl	8001d50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800188e:	2310      	movs	r3, #16
 8001890:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018aa:	233c      	movs	r3, #60	; 0x3c
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 f99a 	bl	8003bf8 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ca:	f000 fa41 	bl	8001d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fdac 	bl	8004444 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f2:	f000 fa2d 	bl	8001d50 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_I2C2_Init+0x74>)
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <MX_I2C2_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_I2C2_Init+0x74>)
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <MX_I2C2_Init+0x7c>)
 800190e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_I2C2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_I2C2_Init+0x74>)
 8001918:	2201      	movs	r2, #1
 800191a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_I2C2_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_I2C2_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C2_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C2_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <MX_I2C2_Init+0x74>)
 800193c:	f001 fa6e 	bl	8002e1c <HAL_I2C_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001946:	f000 fa03 	bl	8001d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <MX_I2C2_Init+0x74>)
 800194e:	f001 fff7 	bl	8003940 <HAL_I2CEx_ConfigAnalogFilter>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001958:	f000 f9fa 	bl	8001d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_I2C2_Init+0x74>)
 8001960:	f002 f839 	bl	80039d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800196a:	f000 f9f1 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004ac 	.word	0x200004ac
 8001978:	40005800 	.word	0x40005800
 800197c:	307075b1 	.word	0x307075b1

08001980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_USART1_UART_Init+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ca:	f004 f809 	bl	80059e0 <HAL_UART_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019d4:	f000 f9bc 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d8:	2100      	movs	r1, #0
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019dc:	f004 fdd2 	bl	8006584 <HAL_UARTEx_SetTxFifoThreshold>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019e6:	f000 f9b3 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4808      	ldr	r0, [pc, #32]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ee:	f004 fe07 	bl	8006600 <HAL_UARTEx_SetRxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019f8:	f000 f9aa 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_USART1_UART_Init+0x90>)
 80019fe:	f004 fd88 	bl	8006512 <HAL_UARTEx_DisableFifoMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f000 f9a2 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200004f8 	.word	0x200004f8
 8001a14:	40013800 	.word	0x40013800

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_GPIO_Init+0x94>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a8e:	f000 ff29 	bl	80028e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	2028      	movs	r0, #40	; 0x28
 8001a98:	f000 fefa 	bl	8002890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a9c:	2028      	movs	r0, #40	; 0x28
 8001a9e:	f000 ff13 	bl	80028c8 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000800 	.word	0x48000800

08001ab4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac4:	d105      	bne.n	8001ad2 <HAL_GPIO_EXTI_Callback+0x1e>
		// set signal if button is pressed
		osSignalSet(taskButtonHandle, BUTTON_PRESS_SIGNAL);
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_GPIO_EXTI_Callback+0x28>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 feb5 	bl	800683c <osSignalSet>
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000588 	.word	0x20000588

08001ae0 <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f004 fe92 	bl	8006812 <osDelay>
	  osEvent event = osSignalWait(BUTTON_PRESS_SIGNAL, osWaitForever);
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af6:	2101      	movs	r1, #1
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fedf 	bl	80068bc <osSignalWait>
	  if (event.status == osEventSignal) {
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d1f1      	bne.n	8001ae8 <StartButtonTask+0x8>
		  // button is pressed, change sensor
		  osStatus m_status = osMutexWait(curSensorMutexHandle, osWaitForever);
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <StartButtonTask+0x60>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 ff39 	bl	8006984 <osMutexWait>
 8001b12:	6178      	str	r0, [r7, #20]
		  if (m_status == osOK){
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10b      	bne.n	8001b32 <StartButtonTask+0x52>
			  cur_sensor++;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <StartButtonTask+0x64>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <StartButtonTask+0x64>)
 8001b22:	6013      	str	r3, [r2, #0]
			  if (cur_sensor >= 4) {
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <StartButtonTask+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	dd02      	ble.n	8001b32 <StartButtonTask+0x52>
				  cur_sensor = 0;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <StartButtonTask+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
			  }

		  }
		  osMutexRelease(curSensorMutexHandle);
 8001b32:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <StartButtonTask+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 ff72 	bl	8006a20 <osMutexRelease>
  {
 8001b3c:	e7d4      	b.n	8001ae8 <StartButtonTask+0x8>
 8001b3e:	bf00      	nop
 8001b40:	20000594 	.word	0x20000594
 8001b44:	20000598 	.word	0x20000598

08001b48 <StartSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorRead */
void StartSensorRead(void const * argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	sensor_reading *reading_ptr;
	osStatus m_status;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8001b50:	2064      	movs	r0, #100	; 0x64
 8001b52:	f004 fe5e 	bl	8006812 <osDelay>

	  reading_ptr = osMailAlloc(sensorQ, osWaitForever);
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <StartSensorRead+0xcc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 f8ec 	bl	8006d3c <osMailAlloc>
 8001b64:	60f8      	str	r0, [r7, #12]
	  ITM_Port32(0) = (uint32_t) reading_ptr;
 8001b66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6013      	str	r3, [r2, #0]
	  if (reading_ptr != NULL) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ed      	beq.n	8001b50 <StartSensorRead+0x8>
		  memset(reading_ptr, 0, sizeof(sensor_reading));
 8001b74:	220c      	movs	r2, #12
 8001b76:	2100      	movs	r1, #0
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f007 fff7 	bl	8009b6c <memset>
		  m_status = osMutexWait(curSensorMutexHandle, 50);
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <StartSensorRead+0xd0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2132      	movs	r1, #50	; 0x32
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 fefd 	bl	8006984 <osMutexWait>
 8001b8a:	60b8      	str	r0, [r7, #8]
		  if (m_status == osOK) {
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d139      	bne.n	8001c06 <StartSensorRead+0xbe>
			  reading_ptr->sensor_type = (int)cur_sensor;
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <StartSensorRead+0xd4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]

			  switch (reading_ptr->sensor_type) {
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d828      	bhi.n	8001bf4 <StartSensorRead+0xac>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <StartSensorRead+0x60>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bc9 	.word	0x08001bc9
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	08001be9 	.word	0x08001be9
			  case 0: {
				  // temp
				  reading_ptr->data.rd0 = BSP_TSENSOR_ReadTemp();
 8001bb8:	f000 fadc 	bl	8002174 <BSP_TSENSOR_ReadTemp>
 8001bbc:	eef0 7a40 	vmov.f32	s15, s0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	edc3 7a01 	vstr	s15, [r3, #4]
			  } break;
 8001bc6:	e018      	b.n	8001bfa <StartSensorRead+0xb2>

			  case 1: {
				  // humidity
				  reading_ptr->data.rd0 = BSP_HSENSOR_ReadHumidity();
 8001bc8:	f000 fa38 	bl	800203c <BSP_HSENSOR_ReadHumidity>
 8001bcc:	eef0 7a40 	vmov.f32	s15, s0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edc3 7a01 	vstr	s15, [r3, #4]
			  } break;
 8001bd6:	e010      	b.n	8001bfa <StartSensorRead+0xb2>

			  case 2: {
				  // pressure
				  reading_ptr->data.rd0 = BSP_PSENSOR_ReadPressure();
 8001bd8:	f000 faa2 	bl	8002120 <BSP_PSENSOR_ReadPressure>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	edc3 7a01 	vstr	s15, [r3, #4]
			  } break;
 8001be6:	e008      	b.n	8001bfa <StartSensorRead+0xb2>

			  case 3: {
				  // magneto
				  BSP_MAGNETO_GetXYZ(reading_ptr->data.rd1);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fa5f 	bl	80020b0 <BSP_MAGNETO_GetXYZ>
			  } break;
 8001bf2:	e002      	b.n	8001bfa <StartSensorRead+0xb2>

			  default: {
				  cur_sensor = 0;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <StartSensorRead+0xd4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
			  }
			  }
			  osMailPut(sensorQ, reading_ptr);
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <StartSensorRead+0xcc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 f8b1 	bl	8006d68 <osMailPut>
		  }
		  osMutexRelease(curSensorMutexHandle);
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <StartSensorRead+0xd0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 ff08 	bl	8006a20 <osMutexRelease>
	  osDelay(100);
 8001c10:	e79e      	b.n	8001b50 <StartSensorRead+0x8>
 8001c12:	bf00      	nop
 8001c14:	2000059c 	.word	0x2000059c
 8001c18:	20000594 	.word	0x20000594
 8001c1c:	20000598 	.word	0x20000598

08001c20 <StartSerialWrite>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialWrite */
void StartSerialWrite(void const * argument)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b098      	sub	sp, #96	; 0x60
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	6078      	str	r0, [r7, #4]
	char str_buffer[64];
  /* Infinite loop */
  for(;;)
  {
	  // osDelay(10);
	  evt = osMailGet(sensorQ, osWaitForever);
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <StartSerialWrite+0xec>)
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 f8d5 	bl	8006de4 <osMailGet>
	  ITM_Port32(6) = 4;
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <StartSerialWrite+0xf0>)
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
	  if (evt.status == osEventMail) {
 8001c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d1f0      	bne.n	8001c28 <StartSerialWrite+0x8>
		  reading_ptr = evt.value.p;
 8001c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
		  ITM_Port32(1) = (uint32_t) reading_ptr;
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <StartSerialWrite+0xf4>)
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	6013      	str	r3, [r2, #0]
		  memset(str_buffer, 0, 64);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 ff87 	bl	8009b6c <memset>
		  switch (reading_ptr->sensor_type) {
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d844      	bhi.n	8001cf0 <StartSerialWrite+0xd0>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <StartSerialWrite+0x4c>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001c97 	.word	0x08001c97
 8001c74:	08001cb1 	.word	0x08001cb1
 8001c78:	08001ccb 	.word	0x08001ccb
		  case 0: {
			  // temp
			  sprintf(str_buffer, "Temperature: %f \r\n", (reading_ptr->data.rd0));
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc79 	bl	8000578 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	f107 0008 	add.w	r0, r7, #8
 8001c8e:	4922      	ldr	r1, [pc, #136]	; (8001d18 <StartSerialWrite+0xf8>)
 8001c90:	f008 fbde 	bl	800a450 <siprintf>
		  } break;
 8001c94:	e02c      	b.n	8001cf0 <StartSerialWrite+0xd0>

		  case 1: {
			  // humidity
			  sprintf(str_buffer, "Humidity: %f \r\n", (reading_ptr->data.rd0));
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc6c 	bl	8000578 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	f107 0008 	add.w	r0, r7, #8
 8001ca8:	491c      	ldr	r1, [pc, #112]	; (8001d1c <StartSerialWrite+0xfc>)
 8001caa:	f008 fbd1 	bl	800a450 <siprintf>
		  } break;
 8001cae:	e01f      	b.n	8001cf0 <StartSerialWrite+0xd0>

		  case 2: {
			  // pressure
			  sprintf(str_buffer, "Pressure: %f \r\n", (reading_ptr->data.rd0));
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc5f 	bl	8000578 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	f107 0008 	add.w	r0, r7, #8
 8001cc2:	4917      	ldr	r1, [pc, #92]	; (8001d20 <StartSerialWrite+0x100>)
 8001cc4:	f008 fbc4 	bl	800a450 <siprintf>
		  } break;
 8001cc8:	e012      	b.n	8001cf0 <StartSerialWrite+0xd0>

		  case 3: {
			  // magneto
			  sprintf(str_buffer, "Magneto: X=%d\tY=%d\tZ=%d \r\n", (int)(reading_ptr->data.rd1[0]), (int)(reading_ptr->data.rd1[1]), (int)(reading_ptr->data.rd1[2]));
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce0:	f107 0008 	add.w	r0, r7, #8
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <StartSerialWrite+0x104>)
 8001cea:	f008 fbb1 	bl	800a450 <siprintf>
		  } break;
 8001cee:	bf00      	nop
		  }
		  HAL_UART_Transmit(&huart1, (uint8_t*) str_buffer, 64, 100);
 8001cf0:	f107 0108 	add.w	r1, r7, #8
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <StartSerialWrite+0x108>)
 8001cfa:	f003 fec1 	bl	8005a80 <HAL_UART_Transmit>
		  osMailFree(sensorQ, reading_ptr);
 8001cfe:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <StartSerialWrite+0xec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d04:	4618      	mov	r0, r3
 8001d06:	f005 f8e1 	bl	8006ecc <osMailFree>
	  evt = osMailGet(sensorQ, osWaitForever);
 8001d0a:	e78d      	b.n	8001c28 <StartSerialWrite+0x8>
 8001d0c:	2000059c 	.word	0x2000059c
 8001d10:	e0000018 	.word	0xe0000018
 8001d14:	e0000004 	.word	0xe0000004
 8001d18:	0800cb60 	.word	0x0800cb60
 8001d1c:	0800cb74 	.word	0x0800cb74
 8001d20:	0800cb84 	.word	0x0800cb84
 8001d24:	0800cb94 	.word	0x0800cb94
 8001d28:	200004f8 	.word	0x200004f8

08001d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d3e:	f000 fccf 	bl	80026e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40014800 	.word	0x40014800

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <Error_Handler+0x8>
	...

08001d5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	481b      	ldr	r0, [pc, #108]	; (8001e08 <I2Cx_MspInit+0xac>)
 8001d9a:	f000 fda3 	bl	80028e4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4818      	ldr	r0, [pc, #96]	; (8001e08 <I2Cx_MspInit+0xac>)
 8001da6:	f000 fd9d 	bl	80028e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <I2Cx_MspInit+0xa8>)
 8001dd4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	2021      	movs	r0, #33	; 0x21
 8001de0:	f000 fd56 	bl	8002890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001de4:	2021      	movs	r0, #33	; 0x21
 8001de6:	f000 fd6f 	bl	80028c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	210f      	movs	r1, #15
 8001dee:	2022      	movs	r0, #34	; 0x22
 8001df0:	f000 fd4e 	bl	8002890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001df4:	2022      	movs	r0, #34	; 0x22
 8001df6:	f000 fd67 	bl	80028c8 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48000400 	.word	0x48000400

08001e0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <I2Cx_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <I2Cx_Init+0x58>)
 8001e1e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff89 	bl	8001d5c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 ffe6 	bl	8002e1c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001e50:	2100      	movs	r1, #0
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f001 fd74 	bl	8003940 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40005800 	.word	0x40005800
 8001e64:	00702681 	.word	0x00702681

08001e68 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	4608      	mov	r0, r1
 8001e72:	4611      	mov	r1, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	72fb      	strb	r3, [r7, #11]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	813b      	strh	r3, [r7, #8]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	88f8      	ldrh	r0, [r7, #6]
 8001e8c:	893a      	ldrh	r2, [r7, #8]
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f001 f98e 	bl	80031c0 <HAL_I2C_Mem_Read>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f832 	bl	8001f1c <I2Cx_Error>
  }
  return status;
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08a      	sub	sp, #40	; 0x28
 8001ec6:	af04      	add	r7, sp, #16
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	4608      	mov	r0, r1
 8001ecc:	4611      	mov	r1, r2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	72fb      	strb	r3, [r7, #11]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	813b      	strh	r3, [r7, #8]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	88f8      	ldrh	r0, [r7, #6]
 8001ee6:	893a      	ldrh	r2, [r7, #8]
 8001ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f001 f84d 	bl	8002f98 <HAL_I2C_Mem_Write>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f805 	bl	8001f1c <I2Cx_Error>
  }
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f001 f806 	bl	8002f3a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff6c 	bl	8001e0c <I2Cx_Init>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <SENSOR_IO_Init+0x10>)
 8001f42:	f7ff ff63 	bl	8001e0c <I2Cx_Init>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200005a0 	.word	0x200005a0

08001f50 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	71bb      	strb	r3, [r7, #6]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	79f9      	ldrb	r1, [r7, #7]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	1d7b      	adds	r3, r7, #5
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2301      	movs	r3, #1
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <SENSOR_IO_Write+0x30>)
 8001f74:	f7ff ffa5 	bl	8001ec2 <I2Cx_WriteMultiple>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200005a0 	.word	0x200005a0

08001f84 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	79f9      	ldrb	r1, [r7, #7]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	f107 030f 	add.w	r3, r7, #15
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <SENSOR_IO_Read+0x38>)
 8001fac:	f7ff ff5c 	bl	8001e68 <I2Cx_ReadMultiple>

  return read_value;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200005a0 	.word	0x200005a0

08001fc0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	603a      	str	r2, [r7, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	71bb      	strb	r3, [r7, #6]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	79f9      	ldrb	r1, [r7, #7]
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <SENSOR_IO_ReadMultiple+0x38>)
 8001fe8:	f7ff ff3e 	bl	8001e68 <I2Cx_ReadMultiple>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b29b      	uxth	r3, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200005a0 	.word	0x200005a0

08001ffc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <BSP_HSENSOR_Init+0x38>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	20be      	movs	r0, #190	; 0xbe
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2bbc      	cmp	r3, #188	; 0xbc
 800200e:	d002      	beq.n	8002016 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e009      	b.n	800202a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <BSP_HSENSOR_Init+0x3c>)
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <BSP_HSENSOR_Init+0x38>)
 800201a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <BSP_HSENSOR_Init+0x3c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	20be      	movs	r0, #190	; 0xbe
 8002024:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	200005ec 	.word	0x200005ec

0800203c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	20be      	movs	r0, #190	; 0xbe
 8002048:	4798      	blx	r3
 800204a:	eef0 7a40 	vmov.f32	s15, s0
}
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200005ec 	.word	0x200005ec

08002058 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <BSP_MAGNETO_Init+0x50>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4798      	blx	r3
 8002068:	4603      	mov	r3, r0
 800206a:	2b3d      	cmp	r3, #61	; 0x3d
 800206c:	d002      	beq.n	8002074 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e013      	b.n	800209c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <BSP_MAGNETO_Init+0x54>)
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <BSP_MAGNETO_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800207a:	2358      	movs	r3, #88	; 0x58
 800207c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800207e:	2300      	movs	r3, #0
 8002080:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002082:	2300      	movs	r3, #0
 8002084:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002086:	2308      	movs	r3, #8
 8002088:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <BSP_MAGNETO_Init+0x54>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	463a      	mov	r2, r7
 8002096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800209a:	4798      	blx	r3
  } 

  return ret;  
 800209c:	79fb      	ldrb	r3, [r7, #7]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000001c 	.word	0x2000001c
 80020ac:	200005f0 	.word	0x200005f0

080020b0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <BSP_MAGNETO_GetXYZ+0x2c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <BSP_MAGNETO_GetXYZ+0x2c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <BSP_MAGNETO_GetXYZ+0x2c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200005f0 	.word	0x200005f0

080020e0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <BSP_PSENSOR_Init+0x38>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	20ba      	movs	r0, #186	; 0xba
 80020ec:	4798      	blx	r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	2bb1      	cmp	r3, #177	; 0xb1
 80020f2:	d002      	beq.n	80020fa <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	e009      	b.n	800210e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <BSP_PSENSOR_Init+0x3c>)
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <BSP_PSENSOR_Init+0x38>)
 80020fe:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <BSP_PSENSOR_Init+0x3c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	20ba      	movs	r0, #186	; 0xba
 8002108:	4798      	blx	r3
    ret = PSENSOR_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000050 	.word	0x20000050
 800211c:	200005f4 	.word	0x200005f4

08002120 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <BSP_PSENSOR_ReadPressure+0x18>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	20ba      	movs	r0, #186	; 0xba
 800212c:	4798      	blx	r3
 800212e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200005f4 	.word	0x200005f4

0800213c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <BSP_TSENSOR_Init+0x30>)
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <BSP_TSENSOR_Init+0x34>)
 800214a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800214c:	f7ff fef6 	bl	8001f3c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <BSP_TSENSOR_Init+0x30>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2100      	movs	r1, #0
 8002158:	20be      	movs	r0, #190	; 0xbe
 800215a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002160:	79fb      	ldrb	r3, [r7, #7]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200005f8 	.word	0x200005f8
 8002170:	2000000c 	.word	0x2000000c

08002174 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <BSP_TSENSOR_ReadTemp+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	20be      	movs	r0, #190	; 0xbe
 8002180:	4798      	blx	r3
 8002182:	eef0 7a40 	vmov.f32	s15, s0
}
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200005f8 	.word	0x200005f8

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_MspInit+0x4c>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_MspInit+0x4c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6613      	str	r3, [r2, #96]	; 0x60
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_MspInit+0x4c>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_MspInit+0x4c>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_MspInit+0x4c>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_MspInit+0x4c>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	f06f 0001 	mvn.w	r0, #1
 80021ce:	f000 fb5f 	bl	8002890 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0ae      	sub	sp, #184	; 0xb8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2294      	movs	r2, #148	; 0x94
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fcb3 	bl	8009b6c <memset>
  if(hi2c->Instance==I2C2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_I2C_MspInit+0xb0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d13b      	bne.n	8002288 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002214:	2300      	movs	r3, #0
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fbf5 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002228:	f7ff fd92 	bl	8001d50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002244:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224c:	2312      	movs	r3, #18
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800225e:	2304      	movs	r3, #4
 8002260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_I2C_MspInit+0xb8>)
 800226c:	f000 fb3a 	bl	80028e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 8002276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_I2C_MspInit+0xb4>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	37b8      	adds	r7, #184	; 0xb8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40005800 	.word	0x40005800
 8002294:	40021000 	.word	0x40021000
 8002298:	48000400 	.word	0x48000400

0800229c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_I2C_MspDeInit+0x3c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10f      	bne.n	80022ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_I2C_MspDeInit+0x40>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_I2C_MspDeInit+0x40>)
 80022b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80022ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <HAL_I2C_MspDeInit+0x44>)
 80022c0:	f000 fca2 	bl	8002c08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80022c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_I2C_MspDeInit+0x44>)
 80022ca:	f000 fc9d 	bl	8002c08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40005800 	.word	0x40005800
 80022dc:	40021000 	.word	0x40021000
 80022e0:	48000400 	.word	0x48000400

080022e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ae      	sub	sp, #184	; 0xb8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2294      	movs	r2, #148	; 0x94
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fc31 	bl	8009b6c <memset>
  if(huart->Instance==USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_UART_MspInit+0xb0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d13a      	bne.n	800238a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002318:	2300      	movs	r3, #0
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fb73 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800232c:	f7ff fd10 	bl	8001d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_UART_MspInit+0xb4>)
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_UART_MspInit+0xb4>)
 8002336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233a:	6613      	str	r3, [r2, #96]	; 0x60
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_UART_MspInit+0xb4>)
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_UART_MspInit+0xb4>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_UART_MspInit+0xb4>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_UART_MspInit+0xb4>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_UART_MspInit+0xb8>)
 8002386:	f000 faad 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	37b8      	adds	r7, #184	; 0xb8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40013800 	.word	0x40013800
 8002398:	40021000 	.word	0x40021000
 800239c:	48000400 	.word	0x48000400

080023a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	201a      	movs	r0, #26
 80023b6:	f000 fa6b 	bl	8002890 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80023ba:	201a      	movs	r0, #26
 80023bc:	f000 fa84 	bl	80028c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_InitTick+0x9c>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_InitTick+0x9c>)
 80023c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ca:	6613      	str	r3, [r2, #96]	; 0x60
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_InitTick+0x9c>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d8:	f107 0210 	add.w	r2, r7, #16
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fa1e 	bl	8004824 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023e8:	f002 fa06 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 80023ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_InitTick+0xa0>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	3b01      	subs	r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_InitTick+0xa4>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_InitTick+0xa8>)
 8002400:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_InitTick+0xa4>)
 8002404:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002408:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800240a:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <HAL_InitTick+0xa4>)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_InitTick+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_InitTick+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <HAL_InitTick+0xa4>)
 800241e:	f003 f80d 	bl	800543c <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <HAL_InitTick+0xa4>)
 800242a:	f003 f869 	bl	8005500 <HAL_TIM_Base_Start_IT>
 800242e:	4603      	mov	r3, r0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	431bde83 	.word	0x431bde83
 8002444:	200005fc 	.word	0x200005fc
 8002448:	40014800 	.word	0x40014800

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>
	...

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ITM_Port32(2) = 0xdeadbeef;
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <HardFault_Handler+0xc>)
 800245a:	4a02      	ldr	r2, [pc, #8]	; (8002464 <HardFault_Handler+0x10>)
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e7fb      	b.n	8002458 <HardFault_Handler+0x4>
 8002460:	e0000008 	.word	0xe0000008
 8002464:	deadbeef 	.word	0xdeadbeef

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800248e:	f003 f8a7 	bl	80055e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200005fc 	.word	0x200005fc

0800249c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a4:	f000 fca2 	bl	8002dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
	return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024c6:	f007 fb19 	bl	8009afc <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
	return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ee:	e7fe      	b.n	80024ee <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
	}

return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
	}
	return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258a:	605a      	str	r2, [r3, #4]
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f007 fa7e 	bl	8009afc <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200a0000 	.word	0x200a0000
 800262c:	00000400 	.word	0x00000400
 8002630:	20000648 	.word	0x20000648
 8002634:	20001370 	.word	0x20001370

08002638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002694 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002660:	f7ff ffea 	bl	8002638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <LoopForever+0x6>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <LoopForever+0xe>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <LoopForever+0x16>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268a:	f007 fa3d 	bl	8009b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800268e:	f7fe ff8b 	bl	80015a8 <main>

08002692 <LoopForever>:

LoopForever:
    b LoopForever
 8002692:	e7fe      	b.n	8002692 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002694:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80026a0:	0800d014 	.word	0x0800d014
  ldr r2, =_sbss
 80026a4:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 80026a8:	2000136c 	.word	0x2000136c

080026ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_IRQHandler>

080026ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f8de 	bl	800287a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026be:	200f      	movs	r0, #15
 80026c0:	f7ff fe6e 	bl	80023a0 <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	e001      	b.n	80026d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d0:	f7ff fd5e 	bl	8002190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000064 	.word	0x20000064
 8002704:	2000064c 	.word	0x2000064c

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000064c 	.word	0x2000064c

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff4c 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028a2:	f7ff ff61 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	6978      	ldr	r0, [r7, #20]
 80028ae:	f7ff ffb1 	bl	8002814 <NVIC_EncodePriority>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff80 	bl	80027c0 <__NVIC_SetPriority>
}
 80028c0:	bf00      	nop
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff54 	bl	8002784 <__NVIC_EnableIRQ>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f2:	e166      	b.n	8002bc2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8158 	beq.w	8002bbc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d005      	beq.n	8002924 <HAL_GPIO_Init+0x40>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d130      	bne.n	8002986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295a:	2201      	movs	r2, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0201 	and.w	r2, r3, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	d017      	beq.n	80029c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d123      	bne.n	8002a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80b2 	beq.w	8002bbc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_GPIO_Init+0x2fc>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	4a60      	ldr	r2, [pc, #384]	; (8002be0 <HAL_GPIO_Init+0x2fc>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6613      	str	r3, [r2, #96]	; 0x60
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_GPIO_Init+0x2fc>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a70:	4a5c      	ldr	r2, [pc, #368]	; (8002be4 <HAL_GPIO_Init+0x300>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a9a:	d02b      	beq.n	8002af4 <HAL_GPIO_Init+0x210>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d025      	beq.n	8002af0 <HAL_GPIO_Init+0x20c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a51      	ldr	r2, [pc, #324]	; (8002bec <HAL_GPIO_Init+0x308>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d01f      	beq.n	8002aec <HAL_GPIO_Init+0x208>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <HAL_GPIO_Init+0x30c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d019      	beq.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_GPIO_Init+0x310>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x200>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a4e      	ldr	r2, [pc, #312]	; (8002bf8 <HAL_GPIO_Init+0x314>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1fc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_GPIO_Init+0x318>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1f8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_GPIO_Init+0x31c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1f4>
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	e00e      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ad8:	2308      	movs	r3, #8
 8002ada:	e00c      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002adc:	2306      	movs	r3, #6
 8002ade:	e00a      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	e008      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x212>
 8002af4:	2300      	movs	r3, #0
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b06:	4937      	ldr	r1, [pc, #220]	; (8002be4 <HAL_GPIO_Init+0x300>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b14:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b38:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b62:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f ae91 	bne.w	80028f4 <HAL_GPIO_Init+0x10>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010000 	.word	0x40010000
 8002be8:	48000400 	.word	0x48000400
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	48000c00 	.word	0x48000c00
 8002bf4:	48001000 	.word	0x48001000
 8002bf8:	48001400 	.word	0x48001400
 8002bfc:	48001800 	.word	0x48001800
 8002c00:	48001c00 	.word	0x48001c00
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c16:	e0c9      	b.n	8002dac <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80bc 	beq.w	8002da6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c2e:	4a66      	ldr	r2, [pc, #408]	; (8002dc8 <HAL_GPIO_DeInit+0x1c0>)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c56:	d02b      	beq.n	8002cb0 <HAL_GPIO_DeInit+0xa8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d025      	beq.n	8002cac <HAL_GPIO_DeInit+0xa4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_GPIO_DeInit+0x1c8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d01f      	beq.n	8002ca8 <HAL_GPIO_DeInit+0xa0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_GPIO_DeInit+0x1cc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d019      	beq.n	8002ca4 <HAL_GPIO_DeInit+0x9c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a59      	ldr	r2, [pc, #356]	; (8002dd8 <HAL_GPIO_DeInit+0x1d0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_GPIO_DeInit+0x1d4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00d      	beq.n	8002c9c <HAL_GPIO_DeInit+0x94>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <HAL_GPIO_DeInit+0x1d8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_DeInit+0x90>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a56      	ldr	r2, [pc, #344]	; (8002de4 <HAL_GPIO_DeInit+0x1dc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_GPIO_DeInit+0x8c>
 8002c90:	2307      	movs	r3, #7
 8002c92:	e00e      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002c94:	2308      	movs	r3, #8
 8002c96:	e00c      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002c98:	2306      	movs	r3, #6
 8002c9a:	e00a      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002c9c:	2305      	movs	r3, #5
 8002c9e:	e008      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e006      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e004      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e002      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_GPIO_DeInit+0xaa>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d132      	bne.n	8002d28 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cc2:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4947      	ldr	r1, [pc, #284]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002cd0:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4943      	ldr	r1, [pc, #268]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002cde:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002cec:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	493c      	ldr	r1, [pc, #240]	; (8002de8 <HAL_GPIO_DeInit+0x1e0>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_GPIO_DeInit+0x1c0>)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	482b      	ldr	r0, [pc, #172]	; (8002dc8 <HAL_GPIO_DeInit+0x1c0>)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	400a      	ands	r2, r1
 8002d22:	3302      	adds	r3, #2
 8002d24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	08d2      	lsrs	r2, r2, #3
 8002d5c:	4019      	ands	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2103      	movs	r1, #3
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	2101      	movs	r1, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2103      	movs	r1, #3
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	401a      	ands	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f af2f 	bne.w	8002c18 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	48000800 	.word	0x48000800
 8002dd4:	48000c00 	.word	0x48000c00
 8002dd8:	48001000 	.word	0x48001000
 8002ddc:	48001400 	.word	0x48001400
 8002de0:	48001800 	.word	0x48001800
 8002de4:	48001c00 	.word	0x48001c00
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fe52 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e081      	b.n	8002f32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff f9cc 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	e006      	b.n	8002ea4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d104      	bne.n	8002eb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e021      	b.n	8002f90 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff f999 	bl	800229c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	f040 80f9 	bne.w	80031b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x34>
 8002fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0ed      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Mem_Write+0x4e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0e6      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fee:	f7ff fb8b 	bl	8002708 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fac3 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0d1      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2221      	movs	r2, #33	; 0x21
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003038:	88f8      	ldrh	r0, [r7, #6]
 800303a:	893a      	ldrh	r2, [r7, #8]
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4603      	mov	r3, r0
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f9d3 	bl	80033f4 <I2C_RequestMemoryWrite>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0a9      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d90e      	bls.n	8003088 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	b2da      	uxtb	r2, r3
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	2300      	movs	r3, #0
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fc2b 	bl	80038dc <I2C_TransferConfig>
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	b2da      	uxtb	r2, r3
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fc1a 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 faad 	bl	800360c <I2C_WaitOnTXISFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e07b      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d034      	beq.n	8003160 <HAL_I2C_Mem_Write+0x1c8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d130      	bne.n	8003160 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa3f 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04d      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d90e      	bls.n	8003140 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22ff      	movs	r2, #255	; 0xff
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	b2da      	uxtb	r2, r3
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fbcf 	bl	80038dc <I2C_TransferConfig>
 800313e:	e00f      	b.n	8003160 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	b2da      	uxtb	r2, r3
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	2300      	movs	r3, #0
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fbbe 	bl	80038dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d19e      	bne.n	80030a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa8c 	bl	800368c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e01a      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2220      	movs	r2, #32
 8003184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_I2C_Mem_Write+0x224>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	fe00e800 	.word	0xfe00e800

080031c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	f040 80fd 	bne.w	80033e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x34>
 80031ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0f1      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_I2C_Mem_Read+0x4e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0ea      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003216:	f7ff fa77 	bl	8002708 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f9af 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d5      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2222      	movs	r2, #34	; 0x22
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003260:	88f8      	ldrh	r0, [r7, #6]
 8003262:	893a      	ldrh	r2, [r7, #8]
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4603      	mov	r3, r0
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f913 	bl	800349c <I2C_RequestMemoryRead>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0ad      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	; 0xff
 8003290:	d90e      	bls.n	80032b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_I2C_Mem_Read+0x22c>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fb17 	bl	80038dc <I2C_TransferConfig>
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_I2C_Mem_Read+0x22c>)
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fb06 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2200      	movs	r2, #0
 80032d8:	2104      	movs	r1, #4
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f956 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07c      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d034      	beq.n	8003390 <HAL_I2C_Mem_Read+0x1d0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d130      	bne.n	8003390 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	2200      	movs	r2, #0
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f927 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04d      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2bff      	cmp	r3, #255	; 0xff
 8003350:	d90e      	bls.n	8003370 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fab7 	bl	80038dc <I2C_TransferConfig>
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 faa6 	bl	80038dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d19a      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f974 	bl	800368c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01a      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2220      	movs	r2, #32
 80033b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_I2C_Mem_Read+0x230>)
 80033c2:	400b      	ands	r3, r1
 80033c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	80002400 	.word	0x80002400
 80033f0:	fe00e800 	.word	0xfe00e800

080033f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	461a      	mov	r2, r3
 8003402:	4603      	mov	r3, r0
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	460b      	mov	r3, r1
 8003408:	813b      	strh	r3, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <I2C_RequestMemoryWrite+0xa4>)
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fa5d 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f8f0 	bl	800360c <I2C_WaitOnTXISFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02c      	b.n	8003490 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
 8003446:	e015      	b.n	8003474 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	b29b      	uxth	r3, r3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	69b9      	ldr	r1, [r7, #24]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8d6 	bl	800360c <I2C_WaitOnTXISFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e012      	b.n	8003490 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800346a:	893b      	ldrh	r3, [r7, #8]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2200      	movs	r2, #0
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f884 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	80002000 	.word	0x80002000

0800349c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	8979      	ldrh	r1, [r7, #10]
 80034bc:	4b20      	ldr	r3, [pc, #128]	; (8003540 <I2C_RequestMemoryRead+0xa4>)
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fa0a 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f89d 	bl	800360c <I2C_WaitOnTXISFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02c      	b.n	8003536 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e2:	893b      	ldrh	r3, [r7, #8]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
 80034ec:	e015      	b.n	800351a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ee:	893b      	ldrh	r3, [r7, #8]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f883 	bl	800360c <I2C_WaitOnTXISFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e012      	b.n	8003536 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003510:	893b      	ldrh	r3, [r7, #8]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2200      	movs	r2, #0
 8003522:	2140      	movs	r1, #64	; 0x40
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f831 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	80002000 	.word	0x80002000

08003544 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d103      	bne.n	8003562 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d007      	beq.n	8003580 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	619a      	str	r2, [r3, #24]
  }
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800359c:	e022      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a4:	d01e      	beq.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7ff f8af 	bl	8002708 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d113      	bne.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e00f      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d0cd      	beq.n	800359e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003618:	e02c      	b.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f870 	bl	8003704 <I2C_IsErrorOccurred>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e02a      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003634:	d01e      	beq.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7ff f867 	bl	8002708 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d113      	bne.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d1cb      	bne.n	800361a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	e028      	b.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f830 	bl	8003704 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e026      	b.n	80036fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7ff f82b 	bl	8002708 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d1cf      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d075      	beq.n	800381c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003738:	e056      	b.n	80037e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003740:	d052      	beq.n	80037e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe ffe1 	bl	8002708 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_IsErrorOccurred+0x54>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d147      	bne.n	80037e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800376a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377a:	d12e      	bne.n	80037da <I2C_IsErrorOccurred+0xd6>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003782:	d02a      	beq.n	80037da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b20      	cmp	r3, #32
 8003788:	d027      	beq.n	80037da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003798:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800379a:	f7fe ffb5 	bl	8002708 <HAL_GetTick>
 800379e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a0:	e01b      	b.n	80037da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037a2:	f7fe ffb1 	bl	8002708 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b19      	cmp	r3, #25
 80037ae:	d914      	bls.n	80037da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d1dc      	bne.n	80037a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d003      	beq.n	80037fe <I2C_IsErrorOccurred+0xfa>
 80037f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d09d      	beq.n	800373a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2220      	movs	r2, #32
 800380c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f043 0308 	orr.w	r3, r3, #8
 8003856:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01c      	beq.n	80038cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff fe56 	bl	8003544 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <I2C_IsErrorOccurred+0x1d4>)
 80038a4:	400b      	ands	r3, r1
 80038a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	fe00e800 	.word	0xfe00e800

080038dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	4613      	mov	r3, r2
 80038ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f4:	7a7b      	ldrb	r3, [r7, #9]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	4313      	orrs	r3, r2
 8003906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800390a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	0d5b      	lsrs	r3, r3, #21
 8003916:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <I2C_TransferConfig+0x60>)
 800391c:	430b      	orrs	r3, r1
 800391e:	43db      	mvns	r3, r3
 8003920:	ea02 0103 	and.w	r1, r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	03ff63ff 	.word	0x03ff63ff

08003940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	d138      	bne.n	80039c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003960:	2302      	movs	r3, #2
 8003962:	e032      	b.n	80039ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d139      	bne.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e033      	b.n	8003a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2224      	movs	r2, #36	; 0x24
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a74:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d102      	bne.n	8003a88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a86:	e00b      	b.n	8003aa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a96:	d102      	bne.n	8003a9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9c:	e000      	b.n	8003aa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40007000 	.word	0x40007000

08003ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d141      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d131      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad2:	4a46      	ldr	r2, [pc, #280]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003adc:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ae4:	4a41      	ldr	r2, [pc, #260]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2232      	movs	r2, #50	; 0x32
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	4a3f      	ldr	r2, [pc, #252]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	0c9b      	lsrs	r3, r3, #18
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b02:	e002      	b.n	8003b0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d102      	bne.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f2      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b1e:	4b33      	ldr	r3, [pc, #204]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d158      	bne.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e057      	b.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b30:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b40:	e04d      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b48:	d141      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d131      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5e:	4a23      	ldr	r2, [pc, #140]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b68:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b70:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2232      	movs	r2, #50	; 0x32
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	0c9b      	lsrs	r3, r3, #18
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8e:	e002      	b.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba2:	d102      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f2      	bne.n	8003b90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d112      	bne.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e011      	b.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bcc:	e007      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bdc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	2000005c 	.word	0x2000005c
 8003bf4:	431bde83 	.word	0x431bde83

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f000 bc16 	b.w	8004438 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0c:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c16:	4b94      	ldr	r3, [pc, #592]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80e4 	beq.w	8003df6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4c>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	f040 808b 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 8087 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_OscConfig+0x64>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e3ed      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCC_OscConfig+0x7e>
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c74:	e005      	b.n	8003c82 <HAL_RCC_OscConfig+0x8a>
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d223      	bcs.n	8003cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fdfc 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e3ce      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c9a:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	496d      	ldr	r1, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4968      	ldr	r1, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	e025      	b.n	8003d1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cce:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cec:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	495b      	ldr	r1, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fdbc 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e38e      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d1a:	f000 fcbf 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fb2e 	bl	80023a0 <HAL_InitTick>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d052      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	e372      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d032      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fccf 	bl	8002708 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fccb 	bl	8002708 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e35b      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4930      	ldr	r1, [pc, #192]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	492b      	ldr	r1, [pc, #172]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e01a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fc9c 	bl	8002708 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fc98 	bl	8002708 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e328      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1dc>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d073      	beq.n	8003eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x21c>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d10e      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d063      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d15f      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e305      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x24c>
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e025      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d114      	bne.n	8003e78 <HAL_RCC_OscConfig+0x280>
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a02      	ldr	r2, [pc, #8]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e013      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800cbb8 	.word	0x0800cbb8
 8003e70:	2000005c 	.word	0x2000005c
 8003e74:	20000060 	.word	0x20000060
 8003e78:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a9c      	ldr	r2, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fc36 	bl	8002708 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fc32 	bl	8002708 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e2c2      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2a8>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fc22 	bl	8002708 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fc1e 	bl	8002708 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e2ae      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d060      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x310>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x328>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e28b      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4973      	ldr	r1, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e040      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fbdd 	bl	8002708 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe fbd9 	bl	8002708 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e269      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	495f      	ldr	r1, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe fbb9 	bl	8002708 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fbb5 	bl	8002708 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e245      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fb94 	bl	8002708 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fb90 	bl	8002708 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e220      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
 8004004:	e01b      	b.n	800403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fe fb77 	bl	8002708 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7fe fb73 	bl	8002708 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e203      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004090:	f7fe fb3a 	bl	8002708 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fe fb36 	bl	8002708 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1c6      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_OscConfig+0x50c>
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	4b9d      	ldr	r3, [pc, #628]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a9c      	ldr	r2, [pc, #624]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a98      	ldr	r2, [pc, #608]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe faec 	bl	8002708 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fe fae8 	bl	8002708 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e176      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b8c      	ldr	r3, [pc, #560]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x53c>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fe fad5 	bl	8002708 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe fad1 	bl	8002708 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e15f      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b80      	ldr	r3, [pc, #512]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b7b      	ldr	r3, [pc, #492]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a7a      	ldr	r2, [pc, #488]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03c      	beq.n	800421e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b2:	4a72      	ldr	r2, [pc, #456]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe faa4 	bl	8002708 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c4:	f7fe faa0 	bl	8002708 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e130      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d6:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <HAL_RCC_OscConfig+0x5cc>
 80041e4:	e01b      	b.n	800421e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ec:	4a63      	ldr	r2, [pc, #396]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fe fa87 	bl	8002708 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fe:	f7fe fa83 	bl	8002708 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e113      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004210:	4b5a      	ldr	r3, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8107 	beq.w	8004436 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 80cf 	bne.w	80043d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004232:	4b52      	ldr	r3, [pc, #328]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d12c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	3b01      	subs	r3, #1
 8004252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d123      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d11b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d113      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d071      	beq.n	8004384 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d068      	beq.n	8004378 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0ba      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2d      	ldr	r2, [pc, #180]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ce:	f7fe fa1b 	bl	8002708 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fe fa17 	bl	8002708 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0a7      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCC_OscConfig+0x788>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004304:	3a01      	subs	r2, #1
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800430e:	0212      	lsls	r2, r2, #8
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	3a01      	subs	r2, #1
 800431a:	0552      	lsls	r2, r2, #21
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004322:	0852      	lsrs	r2, r2, #1
 8004324:	3a01      	subs	r2, #1
 8004326:	0652      	lsls	r2, r2, #25
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432e:	06d2      	lsls	r2, r2, #27
 8004330:	430a      	orrs	r2, r1
 8004332:	4912      	ldr	r1, [pc, #72]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0f      	ldr	r2, [pc, #60]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004350:	f7fe f9da 	bl	8002708 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe f9d6 	bl	8002708 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e066      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004376:	e05e      	b.n	8004436 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e05d      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
 800437c:	40021000 	.word	0x40021000
 8004380:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d152      	bne.n	8004436 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a8:	f7fe f9ae 	bl	8002708 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe f9aa 	bl	8002708 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e03a      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x7b8>
 80043ce:	e032      	b.n	8004436 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d02d      	beq.n	8004432 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 8004400:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fe f97d 	bl	8002708 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe f979 	bl	8002708 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e009      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x848>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x81a>
 8004430:	e001      	b.n	8004436 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e10f      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b89      	ldr	r3, [pc, #548]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d910      	bls.n	800448c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b86      	ldr	r3, [pc, #536]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 020f 	bic.w	r2, r3, #15
 8004472:	4984      	ldr	r1, [pc, #528]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b82      	ldr	r3, [pc, #520]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0f7      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8089 	beq.w	80045ac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d133      	bne.n	800450a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0e4      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044b2:	f000 fa43 	bl	800493c <RCC_GetSysClockFreqFromPLLSource>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4a74      	ldr	r2, [pc, #464]	; (800468c <HAL_RCC_ClockConfig+0x248>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d955      	bls.n	800456a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044be:	4b72      	ldr	r3, [pc, #456]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ca:	4b6f      	ldr	r3, [pc, #444]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d2:	4a6d      	ldr	r2, [pc, #436]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e044      	b.n	800456a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d03e      	beq.n	800456a <HAL_RCC_ClockConfig+0x126>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d13a      	bne.n	800456a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fc:	4a62      	ldr	r2, [pc, #392]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004502:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e02f      	b.n	800456a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004512:	4b5d      	ldr	r3, [pc, #372]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0ac      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452a:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0a0      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453a:	4b53      	ldr	r3, [pc, #332]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e098      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800454a:	f000 f8a7 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800454e:	4603      	mov	r3, r0
 8004550:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_RCC_ClockConfig+0x248>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d909      	bls.n	800456a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455e:	4a4a      	ldr	r2, [pc, #296]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 0203 	bic.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4944      	ldr	r1, [pc, #272]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004578:	4313      	orrs	r3, r2
 800457a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457c:	f7fe f8c4 	bl	8002708 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	e00a      	b.n	800459a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004584:	f7fe f8c0 	bl	8002708 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e070      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 020c 	and.w	r2, r3, #12
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1eb      	bne.n	8004584 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4930      	ldr	r1, [pc, #192]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
 80045ca:	e008      	b.n	80045de <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d105      	bne.n	80045de <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045dc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045de:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d210      	bcs.n	800460e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 020f 	bic.w	r2, r3, #15
 80045f4:	4923      	ldr	r1, [pc, #140]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fc:	4b21      	ldr	r3, [pc, #132]	; (8004684 <HAL_RCC_ClockConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e036      	b.n	800467c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4918      	ldr	r1, [pc, #96]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004638:	4b13      	ldr	r3, [pc, #76]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4910      	ldr	r1, [pc, #64]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800464c:	f000 f826 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_RCC_ClockConfig+0x244>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	490c      	ldr	r1, [pc, #48]	; (8004690 <HAL_RCC_ClockConfig+0x24c>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_RCC_ClockConfig+0x250>)
 800466a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x254>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd fe95 	bl	80023a0 <HAL_InitTick>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]

  return status;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40022000 	.word	0x40022000
 8004688:	40021000 	.word	0x40021000
 800468c:	04c4b400 	.word	0x04c4b400
 8004690:	0800cbb8 	.word	0x0800cbb8
 8004694:	2000005c 	.word	0x2000005c
 8004698:	20000060 	.word	0x20000060

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b4:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0x34>
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d121      	bne.n	800470e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d11e      	bne.n	800470e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046dc:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e005      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046ec:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046f8:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d102      	bne.n	800471a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e004      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d101      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004720:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d134      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d003      	beq.n	8004742 <HAL_RCC_GetSysClockFreq+0xa6>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d003      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0xac>
 8004740:	e005      	b.n	800474e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004742:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004744:	617b      	str	r3, [r7, #20]
      break;
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800474a:	617b      	str	r3, [r7, #20]
      break;
 800474c:	e002      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	617b      	str	r3, [r7, #20]
      break;
 8004752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	3301      	adds	r3, #1
 8004760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	fb03 f202 	mul.w	r2, r3, r2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	0e5b      	lsrs	r3, r3, #25
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	3301      	adds	r3, #1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004794:	69bb      	ldr	r3, [r7, #24]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800cbd0 	.word	0x0800cbd0
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	007a1200 	.word	0x007a1200

080047b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	2000005c 	.word	0x2000005c

080047cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d0:	f7ff fff0 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	0800cbc8 	.word	0x0800cbc8

080047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047fc:	f7ff ffda 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0adb      	lsrs	r3, r3, #11
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000
 8004820:	0800cbc8 	.word	0x0800cbc8

08004824 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	220f      	movs	r2, #15
 8004832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	08db      	lsrs	r3, r3, #3
 800485e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCC_GetClockConfig+0x60>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	40022000 	.word	0x40022000

08004888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a0:	f7ff f8e6 	bl	8003a70 <HAL_PWREx_GetVoltageRange>
 80048a4:	6178      	str	r0, [r7, #20]
 80048a6:	e014      	b.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6593      	str	r3, [r2, #88]	; 0x58
 80048b4:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c0:	f7ff f8d6 	bl	8003a70 <HAL_PWREx_GetVoltageRange>
 80048c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d10b      	bne.n	80048f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b80      	cmp	r3, #128	; 0x80
 80048de:	d913      	bls.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2ba0      	cmp	r3, #160	; 0xa0
 80048e4:	d902      	bls.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048e6:	2302      	movs	r3, #2
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e00d      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048ec:	2301      	movs	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e00a      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b7f      	cmp	r3, #127	; 0x7f
 80048f6:	d902      	bls.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048f8:	2302      	movs	r3, #2
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e004      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d101      	bne.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004904:	2301      	movs	r3, #1
 8004906:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 020f 	bic.w	r2, r3, #15
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000
 8004938:	40022000 	.word	0x40022000

0800493c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d118      	bne.n	8004984 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d107      	bne.n	800496e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e005      	b.n	800497a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004982:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d003      	beq.n	800499c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d003      	beq.n	80049a2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800499a:	e005      	b.n	80049a8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800499e:	613b      	str	r3, [r7, #16]
    break;
 80049a0:	e005      	b.n	80049ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049a4:	613b      	str	r3, [r7, #16]
    break;
 80049a6:	e002      	b.n	80049ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	613b      	str	r3, [r7, #16]
    break;
 80049ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	3301      	adds	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	fb03 f202 	mul.w	r2, r3, r2
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	0e5b      	lsrs	r3, r3, #25
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	3301      	adds	r3, #1
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049ee:	683b      	ldr	r3, [r7, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800cbd0 	.word	0x0800cbd0
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	007a1200 	.word	0x007a1200

08004a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a14:	2300      	movs	r3, #0
 8004a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a18:	2300      	movs	r3, #0
 8004a1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d040      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d02a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a30:	2b80      	cmp	r3, #128	; 0x80
 8004a32:	d825      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a34:	2b60      	cmp	r3, #96	; 0x60
 8004a36:	d026      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a38:	2b60      	cmp	r3, #96	; 0x60
 8004a3a:	d821      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d006      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d81d      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a4c:	e018      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a4e:	4b89      	ldr	r3, [pc, #548]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a88      	ldr	r2, [pc, #544]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a5a:	e015      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb02 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a6c:	e00c      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3320      	adds	r3, #32
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fbed 	bl	8005254 <RCCEx_PLLSAI2_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a7e:	e003      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	74fb      	strb	r3, [r7, #19]
      break;
 8004a84:	e000      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a8e:	4b79      	ldr	r3, [pc, #484]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a94:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	4975      	ldr	r1, [pc, #468]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aa4:	e001      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d047      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d030      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d82a      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d02a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d824      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad6:	d008      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d81e      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ae8:	e018      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aea:	4b62      	ldr	r3, [pc, #392]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4a61      	ldr	r2, [pc, #388]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004af6:	e015      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fab4 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3320      	adds	r3, #32
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fb9f 	bl	8005254 <RCCEx_PLLSAI2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	74fb      	strb	r3, [r7, #19]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b2a:	4b52      	ldr	r3, [pc, #328]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	494e      	ldr	r1, [pc, #312]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b40:	e001      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 809f 	beq.w	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6593      	str	r3, [r2, #88]	; 0x58
 8004b7a:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b86:	2301      	movs	r3, #1
 8004b88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b96:	f7fd fdb7 	bl	8002708 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b9c:	e009      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd fdb3 	bl	8002708 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d902      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	74fb      	strb	r3, [r7, #19]
        break;
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ef      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d15b      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01f      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d019      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fd72 	bl	8002708 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c26:	e00b      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fd fd6e 	bl	8002708 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d902      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c3e:	e006      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ec      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	4903      	ldr	r1, [pc, #12]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	74bb      	strb	r3, [r7, #18]
 8004c72:	e005      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c80:	7c7b      	ldrb	r3, [r7, #17]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d105      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c86:	4ba0      	ldr	r3, [pc, #640]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	4a9f      	ldr	r2, [pc, #636]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c9e:	4b9a      	ldr	r3, [pc, #616]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f023 0203 	bic.w	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	4996      	ldr	r1, [pc, #600]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc0:	4b91      	ldr	r3, [pc, #580]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f023 020c 	bic.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	498e      	ldr	r1, [pc, #568]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ce2:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	4985      	ldr	r1, [pc, #532]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d04:	4b80      	ldr	r3, [pc, #512]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d12:	497d      	ldr	r1, [pc, #500]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d26:	4b78      	ldr	r3, [pc, #480]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d34:	4974      	ldr	r1, [pc, #464]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d48:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	496c      	ldr	r1, [pc, #432]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b67      	ldr	r3, [pc, #412]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d78:	4963      	ldr	r1, [pc, #396]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9a:	495b      	ldr	r1, [pc, #364]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dae:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	4952      	ldr	r1, [pc, #328]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	494a      	ldr	r1, [pc, #296]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df2:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	4941      	ldr	r1, [pc, #260]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e14:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	4939      	ldr	r1, [pc, #228]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d028      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e36:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	4930      	ldr	r1, [pc, #192]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e54:	d106      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e56:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e60:	60d3      	str	r3, [r2, #12]
 8004e62:	e011      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f8f9 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d04d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea4:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eaa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004eae:	e012      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ebc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ece:	490e      	ldr	r1, [pc, #56]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eea:	60d3      	str	r3, [r2, #12]
 8004eec:	e020      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4a02      	ldr	r2, [pc, #8]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	60d3      	str	r3, [r2, #12]
 8004f04:	e014      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f8a5 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d028      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f3c:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	4947      	ldr	r1, [pc, #284]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5c:	4b42      	ldr	r3, [pc, #264]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a41      	ldr	r2, [pc, #260]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f66:	60d3      	str	r3, [r2, #12]
 8004f68:	e011      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f72:	d10c      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	2101      	movs	r1, #1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f876 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01e      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	492f      	ldr	r1, [pc, #188]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f851 	bl	800506c <RCCEx_PLLSAI1_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fea:	f023 0204 	bic.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff4:	491c      	ldr	r1, [pc, #112]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500e:	f023 0218 	bic.w	r2, r3, #24
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	4913      	ldr	r1, [pc, #76]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	490a      	ldr	r1, [pc, #40]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800505c:	7cbb      	ldrb	r3, [r7, #18]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000

0800506c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800507a:	4b72      	ldr	r3, [pc, #456]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00e      	beq.n	80050a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005086:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0203 	and.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d103      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
       ||
 800509a:	2b00      	cmp	r3, #0
 800509c:	d142      	bne.n	8005124 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
 80050a2:	e03f      	b.n	8005124 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d018      	beq.n	80050de <RCCEx_PLLSAI1_Config+0x72>
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d825      	bhi.n	80050fc <RCCEx_PLLSAI1_Config+0x90>
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d002      	beq.n	80050ba <RCCEx_PLLSAI1_Config+0x4e>
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d009      	beq.n	80050cc <RCCEx_PLLSAI1_Config+0x60>
 80050b8:	e020      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11d      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ca:	e01a      	b.n	8005102 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050cc:	4b5d      	ldr	r3, [pc, #372]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050dc:	e013      	b.n	8005106 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050de:	4b59      	ldr	r3, [pc, #356]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10f      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ea:	4b56      	ldr	r3, [pc, #344]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050fa:	e006      	b.n	800510a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005100:	e004      	b.n	800510c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005102:	bf00      	nop
 8005104:	e002      	b.n	800510c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005106:	bf00      	nop
 8005108:	e000      	b.n	800510c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800510a:	bf00      	nop
    }

    if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005112:	4b4c      	ldr	r3, [pc, #304]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4949      	ldr	r1, [pc, #292]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005120:	4313      	orrs	r3, r2
 8005122:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 8086 	bne.w	8005238 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800512c:	4b45      	ldr	r3, [pc, #276]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a44      	ldr	r2, [pc, #272]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fd fae6 	bl	8002708 <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005140:	f7fd fae2 	bl	8002708 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
        break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005154:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d168      	bne.n	8005238 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d113      	bne.n	8005194 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	4b35      	ldr	r3, [pc, #212]	; (8005248 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005172:	4013      	ands	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6892      	ldr	r2, [r2, #8]
 8005178:	0211      	lsls	r1, r2, #8
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68d2      	ldr	r2, [r2, #12]
 800517e:	06d2      	lsls	r2, r2, #27
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6852      	ldr	r2, [r2, #4]
 8005186:	3a01      	subs	r2, #1
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	430a      	orrs	r2, r1
 800518c:	492d      	ldr	r1, [pc, #180]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	610b      	str	r3, [r1, #16]
 8005192:	e02d      	b.n	80051f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d115      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519a:	4b2a      	ldr	r3, [pc, #168]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	0211      	lsls	r1, r2, #8
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6912      	ldr	r2, [r2, #16]
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0552      	lsls	r2, r2, #21
 80051b2:	4311      	orrs	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6852      	ldr	r2, [r2, #4]
 80051b8:	3a01      	subs	r2, #1
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	430a      	orrs	r2, r1
 80051be:	4921      	ldr	r1, [pc, #132]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
 80051c4:	e014      	b.n	80051f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6892      	ldr	r2, [r2, #8]
 80051d2:	0211      	lsls	r1, r2, #8
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6952      	ldr	r2, [r2, #20]
 80051d8:	0852      	lsrs	r2, r2, #1
 80051da:	3a01      	subs	r2, #1
 80051dc:	0652      	lsls	r2, r2, #25
 80051de:	4311      	orrs	r1, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6852      	ldr	r2, [r2, #4]
 80051e4:	3a01      	subs	r2, #1
 80051e6:	0112      	lsls	r2, r2, #4
 80051e8:	430a      	orrs	r2, r1
 80051ea:	4916      	ldr	r1, [pc, #88]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051f0:	4b14      	ldr	r3, [pc, #80]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a13      	ldr	r2, [pc, #76]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fc:	f7fd fa84 	bl	8002708 <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005202:	e009      	b.n	8005218 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005204:	f7fd fa80 	bl	8002708 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d902      	bls.n	8005218 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	73fb      	strb	r3, [r7, #15]
          break;
 8005216:	e005      	b.n	8005224 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ef      	beq.n	8005204 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4904      	ldr	r1, [pc, #16]	; (8005244 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000
 8005248:	07ff800f 	.word	0x07ff800f
 800524c:	ff9f800f 	.word	0xff9f800f
 8005250:	f9ff800f 	.word	0xf9ff800f

08005254 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005262:	4b72      	ldr	r3, [pc, #456]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00e      	beq.n	800528c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800526e:	4b6f      	ldr	r3, [pc, #444]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0203 	and.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d103      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
       ||
 8005282:	2b00      	cmp	r3, #0
 8005284:	d142      	bne.n	800530c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e03f      	b.n	800530c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d018      	beq.n	80052c6 <RCCEx_PLLSAI2_Config+0x72>
 8005294:	2b03      	cmp	r3, #3
 8005296:	d825      	bhi.n	80052e4 <RCCEx_PLLSAI2_Config+0x90>
 8005298:	2b01      	cmp	r3, #1
 800529a:	d002      	beq.n	80052a2 <RCCEx_PLLSAI2_Config+0x4e>
 800529c:	2b02      	cmp	r3, #2
 800529e:	d009      	beq.n	80052b4 <RCCEx_PLLSAI2_Config+0x60>
 80052a0:	e020      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052a2:	4b62      	ldr	r3, [pc, #392]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11d      	bne.n	80052ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b2:	e01a      	b.n	80052ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052b4:	4b5d      	ldr	r3, [pc, #372]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d116      	bne.n	80052ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c4:	e013      	b.n	80052ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052c6:	4b59      	ldr	r3, [pc, #356]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052d2:	4b56      	ldr	r3, [pc, #344]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052e2:	e006      	b.n	80052f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
      break;
 80052e8:	e004      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052ea:	bf00      	nop
 80052ec:	e002      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052fa:	4b4c      	ldr	r3, [pc, #304]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f023 0203 	bic.w	r2, r3, #3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4949      	ldr	r1, [pc, #292]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 8086 	bne.w	8005420 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005314:	4b45      	ldr	r3, [pc, #276]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a44      	ldr	r2, [pc, #272]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fd f9f2 	bl	8002708 <HAL_GetTick>
 8005324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005326:	e009      	b.n	800533c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005328:	f7fd f9ee 	bl	8002708 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d902      	bls.n	800533c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	73fb      	strb	r3, [r7, #15]
        break;
 800533a:	e005      	b.n	8005348 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800533c:	4b3b      	ldr	r3, [pc, #236]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1ef      	bne.n	8005328 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d168      	bne.n	8005420 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d113      	bne.n	800537c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005354:	4b35      	ldr	r3, [pc, #212]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	4b35      	ldr	r3, [pc, #212]	; (8005430 <RCCEx_PLLSAI2_Config+0x1dc>)
 800535a:	4013      	ands	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6892      	ldr	r2, [r2, #8]
 8005360:	0211      	lsls	r1, r2, #8
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68d2      	ldr	r2, [r2, #12]
 8005366:	06d2      	lsls	r2, r2, #27
 8005368:	4311      	orrs	r1, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6852      	ldr	r2, [r2, #4]
 800536e:	3a01      	subs	r2, #1
 8005370:	0112      	lsls	r2, r2, #4
 8005372:	430a      	orrs	r2, r1
 8005374:	492d      	ldr	r1, [pc, #180]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	614b      	str	r3, [r1, #20]
 800537a:	e02d      	b.n	80053d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d115      	bne.n	80053ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005382:	4b2a      	ldr	r3, [pc, #168]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6892      	ldr	r2, [r2, #8]
 800538e:	0211      	lsls	r1, r2, #8
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6912      	ldr	r2, [r2, #16]
 8005394:	0852      	lsrs	r2, r2, #1
 8005396:	3a01      	subs	r2, #1
 8005398:	0552      	lsls	r2, r2, #21
 800539a:	4311      	orrs	r1, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6852      	ldr	r2, [r2, #4]
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0112      	lsls	r2, r2, #4
 80053a4:	430a      	orrs	r2, r1
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	614b      	str	r3, [r1, #20]
 80053ac:	e014      	b.n	80053d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053ae:	4b1f      	ldr	r3, [pc, #124]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6892      	ldr	r2, [r2, #8]
 80053ba:	0211      	lsls	r1, r2, #8
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6952      	ldr	r2, [r2, #20]
 80053c0:	0852      	lsrs	r2, r2, #1
 80053c2:	3a01      	subs	r2, #1
 80053c4:	0652      	lsls	r2, r2, #25
 80053c6:	4311      	orrs	r1, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6852      	ldr	r2, [r2, #4]
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	430a      	orrs	r2, r1
 80053d2:	4916      	ldr	r1, [pc, #88]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053d8:	4b14      	ldr	r3, [pc, #80]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd f990 	bl	8002708 <HAL_GetTick>
 80053e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053ea:	e009      	b.n	8005400 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053ec:	f7fd f98c 	bl	8002708 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d902      	bls.n	8005400 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	73fb      	strb	r3, [r7, #15]
          break;
 80053fe:	e005      	b.n	800540c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ef      	beq.n	80053ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	4904      	ldr	r1, [pc, #16]	; (800542c <RCCEx_PLLSAI2_Config+0x1d8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
 8005430:	07ff800f 	.word	0x07ff800f
 8005434:	ff9f800f 	.word	0xff9f800f
 8005438:	f9ff800f 	.word	0xf9ff800f

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e049      	b.n	80054e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f841 	bl	80054ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 f9f8 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e04f      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d018      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0x76>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d115      	bne.n	80055a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_TIM_Base_Start_IT+0xdc>)
 800557e:	4013      	ands	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b06      	cmp	r3, #6
 8005586:	d015      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558e:	d011      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a0:	e008      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e000      	b.n	80055b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40013400 	.word	0x40013400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	00010007 	.word	0x00010007

080055e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0202 	mvn.w	r2, #2
 800560c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f905 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8f7 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f908 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0204 	mvn.w	r2, #4
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8db 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f8cd 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f8de 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0208 	mvn.w	r2, #8
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8b1 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8a3 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8b4 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d122      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d11b      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0210 	mvn.w	r2, #16
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2208      	movs	r2, #8
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f887 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f879 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f88a 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0201 	mvn.w	r2, #1
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fc fae4 	bl	8001d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f914 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d10e      	bne.n	80057be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f907 	bl	80059cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d10e      	bne.n	80057ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f838 	bl	800585a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d10e      	bne.n	8005816 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d107      	bne.n	8005816 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0220 	mvn.w	r2, #32
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8c7 	bl	80059a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a40      	ldr	r2, [pc, #256]	; (8005984 <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3d      	ldr	r2, [pc, #244]	; (8005988 <TIM_Base_SetConfig+0x118>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3c      	ldr	r2, [pc, #240]	; (800598c <TIM_Base_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3b      	ldr	r2, [pc, #236]	; (8005990 <TIM_Base_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3a      	ldr	r2, [pc, #232]	; (8005994 <TIM_Base_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <TIM_Base_SetConfig+0x114>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d01b      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <TIM_Base_SetConfig+0x118>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d017      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <TIM_Base_SetConfig+0x11c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <TIM_Base_SetConfig+0x120>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a29      	ldr	r2, [pc, #164]	; (8005994 <TIM_Base_SetConfig+0x124>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a28      	ldr	r2, [pc, #160]	; (8005998 <TIM_Base_SetConfig+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <TIM_Base_SetConfig+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <TIM_Base_SetConfig+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00f      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a11      	ldr	r2, [pc, #68]	; (8005998 <TIM_Base_SetConfig+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <TIM_Base_SetConfig+0x12c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <TIM_Base_SetConfig+0x130>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d103      	bne.n	8005970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	615a      	str	r2, [r3, #20]
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800

080059a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e042      	b.n	8005a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc fc6d 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2224      	movs	r2, #36	; 0x24
 8005a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8c4 	bl	8005bb0 <UART_SetConfig>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e022      	b.n	8005a78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fbb4 	bl	80061a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc3b 	bl	80062ec <UART_CheckIdleState>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	f040 8084 	bne.w	8005ba4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_UART_Transmit+0x28>
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e07c      	b.n	8005ba6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Transmit+0x3a>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e075      	b.n	8005ba6 <HAL_UART_Transmit+0x126>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad2:	f7fc fe19 	bl	8002708 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d108      	bne.n	8005b04 <HAL_UART_Transmit+0x84>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	e003      	b.n	8005b0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b14:	e02d      	b.n	8005b72 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fc2e 	bl	8006382 <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e03a      	b.n	8005ba6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b42:	b292      	uxth	r2, r2
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e008      	b.n	8005b60 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	b292      	uxth	r2, r2
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1cb      	bne.n	8005b16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2140      	movs	r1, #64	; 0x40
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fbfa 	bl	8006382 <UART_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b08c      	sub	sp, #48	; 0x30
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4baa      	ldr	r3, [pc, #680]	; (8005e88 <UART_SetConfig+0x2d8>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a9f      	ldr	r2, [pc, #636]	; (8005e8c <UART_SetConfig+0x2dc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	f023 010f 	bic.w	r1, r3, #15
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a90      	ldr	r2, [pc, #576]	; (8005e90 <UART_SetConfig+0x2e0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d125      	bne.n	8005ca0 <UART_SetConfig+0xf0>
 8005c54:	4b8f      	ldr	r3, [pc, #572]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d81a      	bhi.n	8005c98 <UART_SetConfig+0xe8>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0xb8>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005c89 	.word	0x08005c89
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c91 	.word	0x08005c91
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	e116      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005c80:	2302      	movs	r3, #2
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c86:	e112      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e10e      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005c90:	2308      	movs	r3, #8
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c96:	e10a      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9e:	e106      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7c      	ldr	r2, [pc, #496]	; (8005e98 <UART_SetConfig+0x2e8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d138      	bne.n	8005d1c <UART_SetConfig+0x16c>
 8005caa:	4b7a      	ldr	r3, [pc, #488]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d82d      	bhi.n	8005d14 <UART_SetConfig+0x164>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0x110>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005d15 	.word	0x08005d15
 8005ccc:	08005d15 	.word	0x08005d15
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d15 	.word	0x08005d15
 8005cd8:	08005d15 	.word	0x08005d15
 8005cdc:	08005d15 	.word	0x08005d15
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	08005d15 	.word	0x08005d15
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d0d 	.word	0x08005d0d
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e0d8      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e0d4      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e0d0      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e0cc      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e0c8      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5e      	ldr	r2, [pc, #376]	; (8005e9c <UART_SetConfig+0x2ec>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d125      	bne.n	8005d72 <UART_SetConfig+0x1c2>
 8005d26:	4b5b      	ldr	r3, [pc, #364]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	d016      	beq.n	8005d62 <UART_SetConfig+0x1b2>
 8005d34:	2b30      	cmp	r3, #48	; 0x30
 8005d36:	d818      	bhi.n	8005d6a <UART_SetConfig+0x1ba>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d00a      	beq.n	8005d52 <UART_SetConfig+0x1a2>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d814      	bhi.n	8005d6a <UART_SetConfig+0x1ba>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <UART_SetConfig+0x19a>
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d008      	beq.n	8005d5a <UART_SetConfig+0x1aa>
 8005d48:	e00f      	b.n	8005d6a <UART_SetConfig+0x1ba>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d50:	e0ad      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d52:	2302      	movs	r3, #2
 8005d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d58:	e0a9      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d60:	e0a5      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d62:	2308      	movs	r3, #8
 8005d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d68:	e0a1      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d70:	e09d      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <UART_SetConfig+0x2f0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d125      	bne.n	8005dc8 <UART_SetConfig+0x218>
 8005d7c:	4b45      	ldr	r3, [pc, #276]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d86:	2bc0      	cmp	r3, #192	; 0xc0
 8005d88:	d016      	beq.n	8005db8 <UART_SetConfig+0x208>
 8005d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d8c:	d818      	bhi.n	8005dc0 <UART_SetConfig+0x210>
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d00a      	beq.n	8005da8 <UART_SetConfig+0x1f8>
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d814      	bhi.n	8005dc0 <UART_SetConfig+0x210>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <UART_SetConfig+0x1f0>
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d008      	beq.n	8005db0 <UART_SetConfig+0x200>
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e082      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005da8:	2302      	movs	r3, #2
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e07e      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db6:	e07a      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	e076      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e072      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a35      	ldr	r2, [pc, #212]	; (8005ea4 <UART_SetConfig+0x2f4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d12a      	bne.n	8005e28 <UART_SetConfig+0x278>
 8005dd2:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de0:	d01a      	beq.n	8005e18 <UART_SetConfig+0x268>
 8005de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de6:	d81b      	bhi.n	8005e20 <UART_SetConfig+0x270>
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	d00c      	beq.n	8005e08 <UART_SetConfig+0x258>
 8005dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df2:	d815      	bhi.n	8005e20 <UART_SetConfig+0x270>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <UART_SetConfig+0x250>
 8005df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfc:	d008      	beq.n	8005e10 <UART_SetConfig+0x260>
 8005dfe:	e00f      	b.n	8005e20 <UART_SetConfig+0x270>
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e06:	e052      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e04e      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e04a      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e046      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e042      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <UART_SetConfig+0x2dc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d13a      	bne.n	8005ea8 <UART_SetConfig+0x2f8>
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <UART_SetConfig+0x2e4>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e40:	d01a      	beq.n	8005e78 <UART_SetConfig+0x2c8>
 8005e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e46:	d81b      	bhi.n	8005e80 <UART_SetConfig+0x2d0>
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d00c      	beq.n	8005e68 <UART_SetConfig+0x2b8>
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e52:	d815      	bhi.n	8005e80 <UART_SetConfig+0x2d0>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <UART_SetConfig+0x2b0>
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d008      	beq.n	8005e70 <UART_SetConfig+0x2c0>
 8005e5e:	e00f      	b.n	8005e80 <UART_SetConfig+0x2d0>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e66:	e022      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6e:	e01e      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e76:	e01a      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7e:	e016      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e012      	b.n	8005eae <UART_SetConfig+0x2fe>
 8005e88:	cfff69f3 	.word	0xcfff69f3
 8005e8c:	40008000 	.word	0x40008000
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40004400 	.word	0x40004400
 8005e9c:	40004800 	.word	0x40004800
 8005ea0:	40004c00 	.word	0x40004c00
 8005ea4:	40005000 	.word	0x40005000
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4aae      	ldr	r2, [pc, #696]	; (800616c <UART_SetConfig+0x5bc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	f040 8097 	bne.w	8005fe8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d823      	bhi.n	8005f0a <UART_SetConfig+0x35a>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x318>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005f0b 	.word	0x08005f0b
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005f0b 	.word	0x08005f0b
 8005ed8:	08005efb 	.word	0x08005efb
 8005edc:	08005f0b 	.word	0x08005f0b
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005f03 	.word	0x08005f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eec:	f7fe fc6e 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005ef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ef2:	e010      	b.n	8005f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef4:	4b9e      	ldr	r3, [pc, #632]	; (8006170 <UART_SetConfig+0x5c0>)
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ef8:	e00d      	b.n	8005f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fe fbcf 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8005efe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f00:	e009      	b.n	8005f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f08:	e005      	b.n	8005f16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8130 	beq.w	800617e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	4a94      	ldr	r2, [pc, #592]	; (8006174 <UART_SetConfig+0x5c4>)
 8005f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d305      	bcc.n	8005f4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d903      	bls.n	8005f56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f54:	e113      	b.n	800617e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2200      	movs	r2, #0
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	60fa      	str	r2, [r7, #12]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	4a84      	ldr	r2, [pc, #528]	; (8006174 <UART_SetConfig+0x5c4>)
 8005f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f78:	f7fa fe2e 	bl	8000bd8 <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	020b      	lsls	r3, r1, #8
 8005f8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f92:	0202      	lsls	r2, r0, #8
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	6849      	ldr	r1, [r1, #4]
 8005f98:	0849      	lsrs	r1, r1, #1
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	eb12 0804 	adds.w	r8, r2, r4
 8005fa4:	eb43 0905 	adc.w	r9, r3, r5
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	469a      	mov	sl, r3
 8005fb0:	4693      	mov	fp, r2
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f7fa fe0d 	bl	8000bd8 <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fcc:	d308      	bcc.n	8005fe0 <UART_SetConfig+0x430>
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd4:	d204      	bcs.n	8005fe0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	e0ce      	b.n	800617e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fe6:	e0ca      	b.n	800617e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff0:	d166      	bne.n	80060c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d827      	bhi.n	800604a <UART_SetConfig+0x49a>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0x450>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	0800604b 	.word	0x0800604b
 8006010:	0800603b 	.word	0x0800603b
 8006014:	0800604b 	.word	0x0800604b
 8006018:	0800604b 	.word	0x0800604b
 800601c:	0800604b 	.word	0x0800604b
 8006020:	08006043 	.word	0x08006043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fe fbd2 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8006028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800602a:	e014      	b.n	8006056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fe fbe4 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006032:	e010      	b.n	8006056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <UART_SetConfig+0x5c0>)
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006038:	e00d      	b.n	8006056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fe fb2f 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800603e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006040:	e009      	b.n	8006056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006048:	e005      	b.n	8006056 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8090 	beq.w	800617e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	4a44      	ldr	r2, [pc, #272]	; (8006174 <UART_SetConfig+0x5c4>)
 8006064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006068:	461a      	mov	r2, r3
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006070:	005a      	lsls	r2, r3, #1
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	441a      	add	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d916      	bls.n	80060b8 <UART_SetConfig+0x508>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d212      	bcs.n	80060b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f023 030f 	bic.w	r3, r3, #15
 800609a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	8bfb      	ldrh	r3, [r7, #30]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	8bfa      	ldrh	r2, [r7, #30]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e062      	b.n	800617e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060be:	e05e      	b.n	800617e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x56a>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x520>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fe fb6a 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80060f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060fa:	e014      	b.n	8006126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe fb7c 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006102:	e010      	b.n	8006126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <UART_SetConfig+0x5c0>)
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006108:	e00d      	b.n	8006126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fe fac7 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006118:	e005      	b.n	8006126 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006124:	bf00      	nop
    }

    if (pclk != 0U)
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d028      	beq.n	800617e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	4a10      	ldr	r2, [pc, #64]	; (8006174 <UART_SetConfig+0x5c4>)
 8006132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006136:	461a      	mov	r2, r3
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	fbb3 f2f2 	udiv	r2, r3, r2
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	441a      	add	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	d910      	bls.n	8006178 <UART_SetConfig+0x5c8>
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615c:	d20c      	bcs.n	8006178 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	b29a      	uxth	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60da      	str	r2, [r3, #12]
 8006168:	e009      	b.n	800617e <UART_SetConfig+0x5ce>
 800616a:	bf00      	nop
 800616c:	40008000 	.word	0x40008000
 8006170:	00f42400 	.word	0x00f42400
 8006174:	0800cc00 	.word	0x0800cc00
      }
      else
      {
        ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2201      	movs	r2, #1
 8006182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2201      	movs	r2, #1
 800618a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2200      	movs	r2, #0
 8006192:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2200      	movs	r2, #0
 8006198:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800619a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3730      	adds	r7, #48	; 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01a      	beq.n	80062be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a6:	d10a      	bne.n	80062be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062fc:	f7fc fa04 	bl	8002708 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b08      	cmp	r3, #8
 800630e:	d10e      	bne.n	800632e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f82f 	bl	8006382 <UART_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e025      	b.n	800637a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b04      	cmp	r3, #4
 800633a:	d10e      	bne.n	800635a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800633c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f819 	bl	8006382 <UART_WaitOnFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e00f      	b.n	800637a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b09c      	sub	sp, #112	; 0x70
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006392:	e0a9      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639a:	f000 80a5 	beq.w	80064e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fc f9b3 	bl	8002708 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80063ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d140      	bne.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063c8:	667b      	str	r3, [r7, #100]	; 0x64
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e6      	bne.n	80063b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	663b      	str	r3, [r7, #96]	; 0x60
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006406:	64ba      	str	r2, [r7, #72]	; 0x48
 8006408:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800640c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e069      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d051      	beq.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006452:	d149      	bne.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800645c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	613b      	str	r3, [r7, #16]
   return(result);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064b0:	623a      	str	r2, [r7, #32]
 80064b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	69f9      	ldr	r1, [r7, #28]
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e010      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	429a      	cmp	r2, r3
 8006504:	f43f af46 	beq.w	8006394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3770      	adds	r7, #112	; 0x70
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_UARTEx_DisableFifoMode+0x16>
 8006524:	2302      	movs	r3, #2
 8006526:	e027      	b.n	8006578 <HAL_UARTEx_DisableFifoMode+0x66>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2224      	movs	r2, #36	; 0x24
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006556:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006598:	2302      	movs	r3, #2
 800659a:	e02d      	b.n	80065f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f84f 	bl	800667c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006614:	2302      	movs	r3, #2
 8006616:	e02d      	b.n	8006674 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f811 	bl	800667c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006688:	2b00      	cmp	r3, #0
 800668a:	d108      	bne.n	800669e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800669c:	e031      	b.n	8006702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800669e:	2308      	movs	r3, #8
 80066a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066a2:	2308      	movs	r3, #8
 80066a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	0e5b      	lsrs	r3, r3, #25
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	0f5b      	lsrs	r3, r3, #29
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	7b3a      	ldrb	r2, [r7, #12]
 80066ca:	4911      	ldr	r1, [pc, #68]	; (8006710 <UARTEx_SetNbDataToProcess+0x94>)
 80066cc:	5c8a      	ldrb	r2, [r1, r2]
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066d2:	7b3a      	ldrb	r2, [r7, #12]
 80066d4:	490f      	ldr	r1, [pc, #60]	; (8006714 <UARTEx_SetNbDataToProcess+0x98>)
 80066d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066dc:	b29a      	uxth	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	7b7a      	ldrb	r2, [r7, #13]
 80066e8:	4909      	ldr	r1, [pc, #36]	; (8006710 <UARTEx_SetNbDataToProcess+0x94>)
 80066ea:	5c8a      	ldrb	r2, [r1, r2]
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066f0:	7b7a      	ldrb	r2, [r7, #13]
 80066f2:	4908      	ldr	r1, [pc, #32]	; (8006714 <UARTEx_SetNbDataToProcess+0x98>)
 80066f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	0800cc18 	.word	0x0800cc18
 8006714:	0800cc20 	.word	0x0800cc20

08006718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800672a:	2b84      	cmp	r3, #132	; 0x84
 800672c:	d005      	beq.n	800673a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800672e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	3303      	adds	r3, #3
 8006738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	607b      	str	r3, [r7, #4]
  return(result);
 8006754:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006770:	f001 fd7e 	bl	8008270 <vTaskStartScheduler>
  
  return osOK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	bd80      	pop	{r7, pc}

0800677a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800677a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677c:	b089      	sub	sp, #36	; 0x24
 800677e:	af04      	add	r7, sp, #16
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <osThreadCreate+0x54>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685c      	ldr	r4, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681d      	ldr	r5, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691e      	ldr	r6, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff ffb6 	bl	8006718 <makeFreeRtosPriority>
 80067ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	9100      	str	r1, [sp, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4632      	mov	r2, r6
 80067c0:	4629      	mov	r1, r5
 80067c2:	4620      	mov	r0, r4
 80067c4:	f001 fb8c 	bl	8007ee0 <xTaskCreateStatic>
 80067c8:	4603      	mov	r3, r0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e01c      	b.n	8006808 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685c      	ldr	r4, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067da:	b29e      	uxth	r6, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff ff98 	bl	8006718 <makeFreeRtosPriority>
 80067e8:	4602      	mov	r2, r0
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	9200      	str	r2, [sp, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	4632      	mov	r2, r6
 80067f6:	4629      	mov	r1, r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f001 fbce 	bl	8007f9a <xTaskCreate>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006812 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <osDelay+0x16>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	e000      	b.n	800682a <osDelay+0x18>
 8006828:	2301      	movs	r3, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fcec 	bl	8008208 <vTaskDelay>
  
  return osOK;
 8006830:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af02      	add	r7, sp, #8
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800684e:	f7ff ff7b 	bl	8006748 <inHandlerMode>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01c      	beq.n	8006892 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	2201      	movs	r2, #1
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 fbcb 	bl	8009004 <xTaskGenericNotifyFromISR>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d002      	beq.n	800687a <osSignalSet+0x3e>
      return 0x80000000;
 8006874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006878:	e019      	b.n	80068ae <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d015      	beq.n	80068ac <osSignalSet+0x70>
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <osSignalSet+0x7c>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	e00c      	b.n	80068ac <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	2201      	movs	r2, #1
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f002 fafc 	bl	8008e98 <xTaskGenericNotify>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d002      	beq.n	80068ac <osSignalSet+0x70>
    return 0x80000000;
 80068a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068aa:	e000      	b.n	80068ae <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80068ac:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b089      	sub	sp, #36	; 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d6:	d103      	bne.n	80068e0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e009      	b.n	80068f4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d006      	beq.n	80068f4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <osSignalWait+0x38>
      ticks = 1;
 80068f0:	2301      	movs	r3, #1
 80068f2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80068f4:	f7ff ff28 	bl	8006748 <inHandlerMode>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80068fe:	2382      	movs	r3, #130	; 0x82
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e01b      	b.n	800693c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	f107 0310 	add.w	r3, r7, #16
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2000      	movs	r0, #0
 8006910:	f002 fa68 	bl	8008de4 <xTaskNotifyWait>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d008      	beq.n	800692c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <osSignalWait+0x6a>
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	e00a      	b.n	800693c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	e007      	b.n	800693c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da02      	bge.n	8006938 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8006932:	2386      	movs	r3, #134	; 0x86
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e001      	b.n	800693c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8006938:	2308      	movs	r3, #8
 800693a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	461c      	mov	r4, r3
 8006940:	f107 0310 	add.w	r3, r7, #16
 8006944:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	3724      	adds	r7, #36	; 0x24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}

08006954 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4619      	mov	r1, r3
 800696a:	2001      	movs	r0, #1
 800696c:	f000 fce3 	bl	8007336 <xQueueCreateMutexStatic>
 8006970:	4603      	mov	r3, r0
 8006972:	e003      	b.n	800697c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006974:	2001      	movs	r0, #1
 8006976:	f000 fcc6 	bl	8007306 <xQueueCreateMutex>
 800697a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <osMutexWait+0x18>
    return osErrorParameter;
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	e03a      	b.n	8006a12 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a6:	d103      	bne.n	80069b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e009      	b.n	80069c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d006      	beq.n	80069c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <osMutexWait+0x40>
      ticks = 1;
 80069c0:	2301      	movs	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80069c4:	f7ff fec0 	bl	8006748 <inHandlerMode>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d017      	beq.n	80069fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	461a      	mov	r2, r3
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f8da 	bl	8007b90 <xQueueReceiveFromISR>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d001      	beq.n	80069e6 <osMutexWait+0x62>
      return osErrorOS;
 80069e2:	23ff      	movs	r3, #255	; 0xff
 80069e4:	e015      	b.n	8006a12 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d011      	beq.n	8006a10 <osMutexWait+0x8c>
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <osMutexWait+0x98>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	e008      	b.n	8006a10 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 ffb9 	bl	8007978 <xQueueSemaphoreTake>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d001      	beq.n	8006a10 <osMutexWait+0x8c>
    return osErrorOS;
 8006a0c:	23ff      	movs	r3, #255	; 0xff
 8006a0e:	e000      	b.n	8006a12 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006a30:	f7ff fe8a 	bl	8006748 <inHandlerMode>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fe2c 	bl	800769e <xQueueGiveFromISR>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <osMutexRelease+0x30>
      return osErrorOS;
 8006a4c:	23ff      	movs	r3, #255	; 0xff
 8006a4e:	e017      	b.n	8006a80 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d013      	beq.n	8006a7e <osMutexRelease+0x5e>
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <osMutexRelease+0x68>)
 8006a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	e00a      	b.n	8006a7e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fc7c 	bl	800736c <xQueueGenericSend>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d001      	beq.n	8006a7e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006a7a:	23ff      	movs	r3, #255	; 0xff
 8006a7c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	3303      	adds	r3, #3
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006aa0:	2014      	movs	r0, #20
 8006aa2:	f002 fe41 	bl	8009728 <pvPortMalloc>
 8006aa6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d046      	beq.n	8006b3c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f002 fe2e 	bl	8009728 <pvPortMalloc>
 8006acc:	4602      	mov	r2, r0
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02b      	beq.n	8006b32 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f002 fe1f 	bl	8009728 <pvPortMalloc>
 8006aea:	4602      	mov	r2, r0
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d011      	beq.n	8006b1c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	e008      	b.n	8006b10 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3f1      	bcc.n	8006afe <osPoolCreate+0x72>
 8006b1a:	e00f      	b.n	8006b3c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f002 fecd 	bl	80098c0 <vPortFree>
        vPortFree(thePool);
 8006b26:	6978      	ldr	r0, [r7, #20]
 8006b28:	f002 feca 	bl	80098c0 <vPortFree>
        thePool = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e004      	b.n	8006b3c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f002 fec4 	bl	80098c0 <vPortFree>
      thePool = NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b08a      	sub	sp, #40	; 0x28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8006b56:	f7ff fdf7 	bl	8006748 <inHandlerMode>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b60:	f3ef 8211 	mrs	r2, BASEPRI
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	617a      	str	r2, [r7, #20]
 8006b76:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b78:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	e001      	b.n	8006b82 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8006b7e:	f002 fcb1 	bl	80094e4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	e029      	b.n	8006bdc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6892      	ldr	r2, [r2, #8]
 8006b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b98:	fb01 f202 	mul.w	r2, r1, r2
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d113      	bne.n	8006bd6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	440b      	add	r3, r1
 8006bcc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	611a      	str	r2, [r3, #16]
      break;
 8006bd4:	e007      	b.n	8006be6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3d0      	bcc.n	8006b88 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8006be6:	f7ff fdaf 	bl	8006748 <inHandlerMode>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bfa:	e001      	b.n	8006c00 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8006bfc:	f002 fca2 	bl	8009544 <vPortExitCritical>
  }
  
  return p;
 8006c00:	6a3b      	ldr	r3, [r7, #32]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <osPoolFree+0x14>
    return osErrorParameter;
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	e030      	b.n	8006c80 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <osPoolFree+0x1e>
    return osErrorParameter;
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	e02b      	b.n	8006c80 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d201      	bcs.n	8006c36 <osPoolFree+0x2c>
    return osErrorParameter;
 8006c32:	2380      	movs	r3, #128	; 0x80
 8006c34:	e024      	b.n	8006c80 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c4a:	fb01 f202 	mul.w	r2, r1, r2
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <osPoolFree+0x4e>
    return osErrorParameter;
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	e013      	b.n	8006c80 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d301      	bcc.n	8006c72 <osPoolFree+0x68>
    return osErrorParameter;
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	e006      	b.n	8006c80 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689c      	ldr	r4, [r3, #8]
 8006caa:	200c      	movs	r0, #12
 8006cac:	f002 fd3c 	bl	8009728 <pvPortMalloc>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <osMailCreate+0x36>
    return NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e038      	b.n	8006d34 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	681c      	ldr	r4, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2104      	movs	r1, #4
 8006cda:	f000 faa1 	bl	8007220 <xQueueGenericCreate>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f002 fde3 	bl	80098c0 <vPortFree>
    return NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e01a      	b.n	8006d34 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	681c      	ldr	r4, [r3, #0]
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff febf 	bl	8006a8c <osPoolCreate>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d107      	bne.n	8006d2e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f002 fdcb 	bl	80098c0 <vPortFree>
    return NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e002      	b.n	8006d34 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}

08006d3c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <osMailAlloc+0x14>
    return NULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e006      	b.n	8006d5e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fef6 	bl	8006b46 <osPoolAlloc>
 8006d5a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <osMailPut+0x14>
    return osErrorParameter;
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	e02c      	b.n	8006dd6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8006d80:	f7ff fce2 	bl	8006748 <inHandlerMode>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6858      	ldr	r0, [r3, #4]
 8006d8e:	f107 020c 	add.w	r2, r7, #12
 8006d92:	4639      	mov	r1, r7
 8006d94:	2300      	movs	r3, #0
 8006d96:	f000 fbe7 	bl	8007568 <xQueueGenericSendFromISR>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d001      	beq.n	8006da4 <osMailPut+0x3c>
      return osErrorOS;
 8006da0:	23ff      	movs	r3, #255	; 0xff
 8006da2:	e018      	b.n	8006dd6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d014      	beq.n	8006dd4 <osMailPut+0x6c>
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <osMailPut+0x78>)
 8006dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	e00b      	b.n	8006dd4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6858      	ldr	r0, [r3, #4]
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f000 fad1 	bl	800736c <xQueueGenericSend>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d001      	beq.n	8006dd4 <osMailPut+0x6c>
      return osErrorOS;
 8006dd0:	23ff      	movs	r3, #255	; 0xff
 8006dd2:	e000      	b.n	8006dd6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b08b      	sub	sp, #44	; 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	617b      	str	r3, [r7, #20]
    return event;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	461c      	mov	r4, r3
 8006e02:	f107 0314 	add.w	r3, r7, #20
 8006e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e0e:	e056      	b.n	8006ebe <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1e:	d103      	bne.n	8006e28 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	e009      	b.n	8006e3c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <osMailGet+0x58>
      ticks = 1;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006e3c:	f7ff fc84 	bl	8006748 <inHandlerMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01d      	beq.n	8006e82 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6858      	ldr	r0, [r3, #4]
 8006e4a:	f107 0220 	add.w	r2, r7, #32
 8006e4e:	f107 0314 	add.w	r3, r7, #20
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	f000 fe9b 	bl	8007b90 <xQueueReceiveFromISR>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d102      	bne.n	8006e66 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8006e60:	2320      	movs	r3, #32
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e001      	b.n	8006e6a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01e      	beq.n	8006eae <osMailGet+0xca>
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <osMailGet+0xe4>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	e015      	b.n	8006eae <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6858      	ldr	r0, [r3, #4]
 8006e86:	f107 0314 	add.w	r3, r7, #20
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	4619      	mov	r1, r3
 8006e90:	f000 fc92 	bl	80077b8 <xQueueReceive>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d102      	bne.n	8006ea0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8006e9a:	2320      	movs	r3, #32
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e006      	b.n	8006eae <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <osMailGet+0xc6>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e000      	b.n	8006eac <osMailGet+0xc8>
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	461c      	mov	r4, r3
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	372c      	adds	r7, #44	; 0x2c
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <osMailFree+0x14>
    return osErrorParameter;
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	e006      	b.n	8006eee <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fe8f 	bl	8006c0a <osPoolFree>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f103 0208 	add.w	r2, r3, #8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f103 0208 	add.w	r2, r3, #8
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f103 0208 	add.w	r2, r3, #8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	601a      	str	r2, [r3, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fae:	d103      	bne.n	8006fb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e00c      	b.n	8006fd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e002      	b.n	8006fc6 <vListInsert+0x2e>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d2f6      	bcs.n	8006fc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6892      	ldr	r2, [r2, #8]
 8007020:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6852      	ldr	r2, [r2, #4]
 800702a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d103      	bne.n	800703e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1e5a      	subs	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericReset+0x2a>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	60bb      	str	r3, [r7, #8]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800708a:	f002 fa2b 	bl	80094e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	3b01      	subs	r3, #1
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	22ff      	movs	r2, #255	; 0xff
 80070ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d114      	bne.n	800710a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01a      	beq.n	800711e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3310      	adds	r3, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 fb01 	bl	80086f4 <xTaskRemoveFromEventList>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d012      	beq.n	800711e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <xQueueGenericReset+0xcc>)
 80070fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	e009      	b.n	800711e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3310      	adds	r3, #16
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fef1 	bl	8006ef6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff feec 	bl	8006ef6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800711e:	f002 fa11 	bl	8009544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007122:	2301      	movs	r3, #1
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <xQueueGenericCreateStatic+0x52>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <xQueueGenericCreateStatic+0x56>
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <xQueueGenericCreateStatic+0x58>
 8007186:	2300      	movs	r3, #0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	623b      	str	r3, [r7, #32]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <xQueueGenericCreateStatic+0x7e>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <xQueueGenericCreateStatic+0x82>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <xQueueGenericCreateStatic+0x84>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	61fb      	str	r3, [r7, #28]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071ce:	2348      	movs	r3, #72	; 0x48
 80071d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b48      	cmp	r3, #72	; 0x48
 80071d6:	d00a      	beq.n	80071ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	61bb      	str	r3, [r7, #24]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007202:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f83f 	bl	8007294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	; 0x28
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	613b      	str	r3, [r7, #16]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	fb02 f303 	mul.w	r3, r2, r3
 8007252:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3348      	adds	r3, #72	; 0x48
 8007258:	4618      	mov	r0, r3
 800725a:	f002 fa65 	bl	8009728 <pvPortMalloc>
 800725e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d011      	beq.n	800728a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	3348      	adds	r3, #72	; 0x48
 800726e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007278:	79fa      	ldrb	r2, [r7, #7]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f805 	bl	8007294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800728a:	69bb      	ldr	r3, [r7, #24]
	}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e002      	b.n	80072b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072c2:	2101      	movs	r1, #1
 80072c4:	69b8      	ldr	r0, [r7, #24]
 80072c6:	f7ff fecb 	bl	8007060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00e      	beq.n	80072fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f837 	bl	800736c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007306:	b580      	push	{r7, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af00      	add	r7, sp, #0
 800730c:	4603      	mov	r3, r0
 800730e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	461a      	mov	r2, r3
 800731c:	6939      	ldr	r1, [r7, #16]
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f7ff ff7e 	bl	8007220 <xQueueGenericCreate>
 8007324:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7ff ffd3 	bl	80072d2 <prvInitialiseMutex>

		return xNewQueue;
 800732c:	68fb      	ldr	r3, [r7, #12]
	}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007336:	b580      	push	{r7, lr}
 8007338:	b088      	sub	sp, #32
 800733a:	af02      	add	r7, sp, #8
 800733c:	4603      	mov	r3, r0
 800733e:	6039      	str	r1, [r7, #0]
 8007340:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007342:	2301      	movs	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	6939      	ldr	r1, [r7, #16]
 8007354:	6978      	ldr	r0, [r7, #20]
 8007356:	f7ff feeb 	bl	8007130 <xQueueGenericCreateStatic>
 800735a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff ffb8 	bl	80072d2 <prvInitialiseMutex>

		return xNewQueue;
 8007362:	68fb      	ldr	r3, [r7, #12]
	}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08e      	sub	sp, #56	; 0x38
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericSend+0x32>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d103      	bne.n	80073ac <xQueueGenericSend+0x40>
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <xQueueGenericSend+0x44>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <xQueueGenericSend+0x46>
 80073b0:	2300      	movs	r3, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <xQueueGenericSend+0x60>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x6e>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0x72>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0x74>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <xQueueGenericSend+0x8e>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	623b      	str	r3, [r7, #32]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073fa:	f001 fb37 	bl	8008a6c <xTaskGetSchedulerState>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <xQueueGenericSend+0x9e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <xQueueGenericSend+0xa2>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <xQueueGenericSend+0xa4>
 800740e:	2300      	movs	r3, #0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueGenericSend+0xbe>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	61fb      	str	r3, [r7, #28]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800742a:	f002 f85b 	bl	80094e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007436:	429a      	cmp	r2, r3
 8007438:	d302      	bcc.n	8007440 <xQueueGenericSend+0xd4>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d129      	bne.n	8007494 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007446:	f000 fc3b 	bl	8007cc0 <prvCopyDataToQueue>
 800744a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d010      	beq.n	8007476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	3324      	adds	r3, #36	; 0x24
 8007458:	4618      	mov	r0, r3
 800745a:	f001 f94b 	bl	80086f4 <xTaskRemoveFromEventList>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d013      	beq.n	800748c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007464:	4b3f      	ldr	r3, [pc, #252]	; (8007564 <xQueueGenericSend+0x1f8>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	e00a      	b.n	800748c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800747c:	4b39      	ldr	r3, [pc, #228]	; (8007564 <xQueueGenericSend+0x1f8>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800748c:	f002 f85a 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 8007490:	2301      	movs	r3, #1
 8007492:	e063      	b.n	800755c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800749a:	f002 f853 	bl	8009544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	e05c      	b.n	800755c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 f983 	bl	80087b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b6:	f002 f845 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ba:	f000 ff39 	bl	8008330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074be:	f002 f811 	bl	80094e4 <vPortEnterCritical>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ce:	d103      	bne.n	80074d8 <xQueueGenericSend+0x16c>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074de:	b25b      	sxtb	r3, r3
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e4:	d103      	bne.n	80074ee <xQueueGenericSend+0x182>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ee:	f002 f829 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f2:	1d3a      	adds	r2, r7, #4
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f972 	bl	80087e4 <xTaskCheckForTimeOut>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d124      	bne.n	8007550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007508:	f000 fcd2 	bl	8007eb0 <prvIsQueueFull>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d018      	beq.n	8007544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	3310      	adds	r3, #16
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f001 f8c6 	bl	80086ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007522:	f000 fc5d 	bl	8007de0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007526:	f000 ff11 	bl	800834c <xTaskResumeAll>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f af7c 	bne.w	800742a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <xQueueGenericSend+0x1f8>)
 8007534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	e772      	b.n	800742a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007546:	f000 fc4b 	bl	8007de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800754a:	f000 feff 	bl	800834c <xTaskResumeAll>
 800754e:	e76c      	b.n	800742a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007552:	f000 fc45 	bl	8007de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007556:	f000 fef9 	bl	800834c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800755a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800755c:	4618      	mov	r0, r3
 800755e:	3738      	adds	r7, #56	; 0x38
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b090      	sub	sp, #64	; 0x40
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <xQueueGenericSendFromISR+0x3c>
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueGenericSendFromISR+0x40>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueGenericSendFromISR+0x42>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d103      	bne.n	80075d2 <xQueueGenericSendFromISR+0x6a>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <xQueueGenericSendFromISR+0x6e>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <xQueueGenericSendFromISR+0x70>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	623b      	str	r3, [r7, #32]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075f2:	f002 f859 	bl	80096a8 <vPortValidateInterruptPriority>
	__asm volatile
 80075f6:	f3ef 8211 	mrs	r2, BASEPRI
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	61fa      	str	r2, [r7, #28]
 800760c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800760e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	429a      	cmp	r2, r3
 800761c:	d302      	bcc.n	8007624 <xQueueGenericSendFromISR+0xbc>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d12f      	bne.n	8007684 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800763a:	f000 fb41 	bl	8007cc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800763e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007646:	d112      	bne.n	800766e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d016      	beq.n	800767e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f84d 	bl	80086f4 <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e007      	b.n	800767e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800766e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007672:	3301      	adds	r3, #1
 8007674:	b2db      	uxtb	r3, r3
 8007676:	b25a      	sxtb	r2, r3
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800767e:	2301      	movs	r3, #1
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007682:	e001      	b.n	8007688 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007684:	2300      	movs	r3, #0
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f383 8811 	msr	BASEPRI, r3
}
 8007692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007696:	4618      	mov	r0, r3
 8007698:	3740      	adds	r7, #64	; 0x40
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b08e      	sub	sp, #56	; 0x38
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	623b      	str	r3, [r7, #32]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <xQueueGiveFromISR+0x58>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <xQueueGiveFromISR+0x5c>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueGiveFromISR+0x5e>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007716:	f001 ffc7 	bl	80096a8 <vPortValidateInterruptPriority>
	__asm volatile
 800771a:	f3ef 8211 	mrs	r2, BASEPRI
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617a      	str	r2, [r7, #20]
 8007730:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007732:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007742:	429a      	cmp	r2, r3
 8007744:	d22b      	bcs.n	800779e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007760:	d112      	bne.n	8007788 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	3324      	adds	r3, #36	; 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f000 ffc0 	bl	80086f4 <xTaskRemoveFromEventList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00e      	beq.n	8007798 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	e007      	b.n	8007798 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778c:	3301      	adds	r3, #1
 800778e:	b2db      	uxtb	r3, r3
 8007790:	b25a      	sxtb	r2, r3
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007798:	2301      	movs	r3, #1
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
 800779c:	e001      	b.n	80077a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f383 8811 	msr	BASEPRI, r3
}
 80077ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3738      	adds	r7, #56	; 0x38
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08c      	sub	sp, #48	; 0x30
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <xQueueReceive+0x30>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	623b      	str	r3, [r7, #32]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <xQueueReceive+0x3e>
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <xQueueReceive+0x42>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <xQueueReceive+0x44>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueReceive+0x5e>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61fb      	str	r3, [r7, #28]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007816:	f001 f929 	bl	8008a6c <xTaskGetSchedulerState>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <xQueueReceive+0x6e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueReceive+0x72>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueReceive+0x74>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueReceive+0x8e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61bb      	str	r3, [r7, #24]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007846:	f001 fe4d 	bl	80094e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01f      	beq.n	8007896 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785a:	f000 fa9b 	bl	8007d94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	1e5a      	subs	r2, r3, #1
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00f      	beq.n	800788e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	3310      	adds	r3, #16
 8007872:	4618      	mov	r0, r3
 8007874:	f000 ff3e 	bl	80086f4 <xTaskRemoveFromEventList>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800787e:	4b3d      	ldr	r3, [pc, #244]	; (8007974 <xQueueReceive+0x1bc>)
 8007880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800788e:	f001 fe59 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 8007892:	2301      	movs	r3, #1
 8007894:	e069      	b.n	800796a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800789c:	f001 fe52 	bl	8009544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e062      	b.n	800796a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff82 	bl	80087b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078b8:	f001 fe44 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078bc:	f000 fd38 	bl	8008330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078c0:	f001 fe10 	bl	80094e4 <vPortEnterCritical>
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d0:	d103      	bne.n	80078da <xQueueReceive+0x122>
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e6:	d103      	bne.n	80078f0 <xQueueReceive+0x138>
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f0:	f001 fe28 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078f4:	1d3a      	adds	r2, r7, #4
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 ff71 	bl	80087e4 <xTaskCheckForTimeOut>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d123      	bne.n	8007950 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790a:	f000 fabb 	bl	8007e84 <prvIsQueueEmpty>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	3324      	adds	r3, #36	; 0x24
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fec5 	bl	80086ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007924:	f000 fa5c 	bl	8007de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007928:	f000 fd10 	bl	800834c <xTaskResumeAll>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d189      	bne.n	8007846 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <xQueueReceive+0x1bc>)
 8007934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	e780      	b.n	8007846 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007946:	f000 fa4b 	bl	8007de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800794a:	f000 fcff 	bl	800834c <xTaskResumeAll>
 800794e:	e77a      	b.n	8007846 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007952:	f000 fa45 	bl	8007de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007956:	f000 fcf9 	bl	800834c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	f000 fa92 	bl	8007e84 <prvIsQueueEmpty>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f43f af6f 	beq.w	8007846 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800796a:	4618      	mov	r0, r3
 800796c:	3730      	adds	r7, #48	; 0x30
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	; 0x38
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	61fb      	str	r3, [r7, #28]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c8:	f001 f850 	bl	8008a6c <xTaskGetSchedulerState>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <xQueueSemaphoreTake+0x60>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <xQueueSemaphoreTake+0x64>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <xQueueSemaphoreTake+0x66>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	61bb      	str	r3, [r7, #24]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f8:	f001 fd74 	bl	80094e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d024      	beq.n	8007a52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a18:	f001 f9d0 	bl	8008dbc <pvTaskIncrementMutexHeldCount>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00f      	beq.n	8007a4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fe60 	bl	80086f4 <xTaskRemoveFromEventList>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a3a:	4b54      	ldr	r3, [pc, #336]	; (8007b8c <xQueueSemaphoreTake+0x214>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a4a:	f001 fd7b 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e097      	b.n	8007b82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d111      	bne.n	8007a7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	617b      	str	r3, [r7, #20]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a74:	f001 fd66 	bl	8009544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e082      	b.n	8007b82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a82:	f107 030c 	add.w	r3, r7, #12
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fe96 	bl	80087b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a90:	f001 fd58 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a94:	f000 fc4c 	bl	8008330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a98:	f001 fd24 	bl	80094e4 <vPortEnterCritical>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa8:	d103      	bne.n	8007ab2 <xQueueSemaphoreTake+0x13a>
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abe:	d103      	bne.n	8007ac8 <xQueueSemaphoreTake+0x150>
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac8:	f001 fd3c 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007acc:	463a      	mov	r2, r7
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fe85 	bl	80087e4 <xTaskCheckForTimeOut>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d132      	bne.n	8007b46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ae2:	f000 f9cf 	bl	8007e84 <prvIsQueueEmpty>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d026      	beq.n	8007b3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007af4:	f001 fcf6 	bl	80094e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 ffd3 	bl	8008aa8 <xTaskPriorityInherit>
 8007b02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b04:	f001 fd1e 	bl	8009544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fdcb 	bl	80086ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b18:	f000 f962 	bl	8007de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b1c:	f000 fc16 	bl	800834c <xTaskResumeAll>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f47f af68 	bne.w	80079f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b28:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <xQueueSemaphoreTake+0x214>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	e75e      	b.n	80079f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b3c:	f000 f950 	bl	8007de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b40:	f000 fc04 	bl	800834c <xTaskResumeAll>
 8007b44:	e758      	b.n	80079f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b48:	f000 f94a 	bl	8007de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b4c:	f000 fbfe 	bl	800834c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b52:	f000 f997 	bl	8007e84 <prvIsQueueEmpty>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f43f af4d 	beq.w	80079f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00d      	beq.n	8007b80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b64:	f001 fcbe 	bl	80094e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b6a:	f000 f891 	bl	8007c90 <prvGetDisinheritPriorityAfterTimeout>
 8007b6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f892 	bl	8008ca0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b7c:	f001 fce2 	bl	8009544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3738      	adds	r7, #56	; 0x38
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	623b      	str	r3, [r7, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <xQueueReceiveFromISR+0x3a>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <xQueueReceiveFromISR+0x3e>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueReceiveFromISR+0x40>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	61fb      	str	r3, [r7, #28]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bea:	f001 fd5d 	bl	80096a8 <vPortValidateInterruptPriority>
	__asm volatile
 8007bee:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61ba      	str	r2, [r7, #24]
 8007c04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d02f      	beq.n	8007c76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c24:	f000 f8b6 	bl	8007d94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	1e5a      	subs	r2, r3, #1
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c38:	d112      	bne.n	8007c60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d016      	beq.n	8007c70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	3310      	adds	r3, #16
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fd54 	bl	80086f4 <xTaskRemoveFromEventList>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00e      	beq.n	8007c70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e007      	b.n	8007c70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c64:	3301      	adds	r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	b25a      	sxtb	r2, r3
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c70:	2301      	movs	r3, #1
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	e001      	b.n	8007c7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f383 8811 	msr	BASEPRI, r3
}
 8007c84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3738      	adds	r7, #56	; 0x38
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1c3 0307 	rsb	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e001      	b.n	8007cb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10d      	bne.n	8007cfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d14d      	bne.n	8007d82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 ff52 	bl	8008b94 <xTaskPriorityDisinherit>
 8007cf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	e043      	b.n	8007d82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d119      	bne.n	8007d34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6858      	ldr	r0, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	f001 ff20 	bl	8009b50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	441a      	add	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d32b      	bcc.n	8007d82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	e026      	b.n	8007d82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68d8      	ldr	r0, [r3, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	f001 ff06 	bl	8009b50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	441a      	add	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d207      	bcs.n	8007d70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	425b      	negs	r3, r3
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d105      	bne.n	8007d82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d8a:	697b      	ldr	r3, [r7, #20]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d018      	beq.n	8007dd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	441a      	add	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d303      	bcc.n	8007dc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68d9      	ldr	r1, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6838      	ldr	r0, [r7, #0]
 8007dd4:	f001 febc 	bl	8009b50 <memcpy>
	}
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007de8:	f001 fb7c 	bl	80094e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df4:	e011      	b.n	8007e1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d012      	beq.n	8007e24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3324      	adds	r3, #36	; 0x24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fc76 	bl	80086f4 <xTaskRemoveFromEventList>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e0e:	f000 fd4b 	bl	80088a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dce9      	bgt.n	8007df6 <prvUnlockQueue+0x16>
 8007e22:	e000      	b.n	8007e26 <prvUnlockQueue+0x46>
					break;
 8007e24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	22ff      	movs	r2, #255	; 0xff
 8007e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e2e:	f001 fb89 	bl	8009544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e32:	f001 fb57 	bl	80094e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3e:	e011      	b.n	8007e64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d012      	beq.n	8007e6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3310      	adds	r3, #16
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fc51 	bl	80086f4 <xTaskRemoveFromEventList>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e58:	f000 fd26 	bl	80088a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dce9      	bgt.n	8007e40 <prvUnlockQueue+0x60>
 8007e6c:	e000      	b.n	8007e70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	22ff      	movs	r2, #255	; 0xff
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e78:	f001 fb64 	bl	8009544 <vPortExitCritical>
}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e8c:	f001 fb2a 	bl	80094e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e001      	b.n	8007ea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea2:	f001 fb4f 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eb8:	f001 fb14 	bl	80094e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d102      	bne.n	8007ece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e001      	b.n	8007ed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed2:	f001 fb37 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	; 0x38
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61fb      	str	r3, [r7, #28]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f26:	2354      	movs	r3, #84	; 0x54
 8007f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b54      	cmp	r3, #84	; 0x54
 8007f2e:	d00a      	beq.n	8007f46 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	61bb      	str	r3, [r7, #24]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01e      	beq.n	8007f8c <xTaskCreateStatic+0xac>
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01b      	beq.n	8007f8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f66:	2300      	movs	r3, #0
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	9302      	str	r3, [sp, #8]
 8007f6e:	f107 0314 	add.w	r3, r7, #20
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f850 	bl	8008024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f86:	f000 f8d5 	bl	8008134 <prvAddNewTaskToReadyList>
 8007f8a:	e001      	b.n	8007f90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f90:	697b      	ldr	r3, [r7, #20]
	}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3728      	adds	r7, #40	; 0x28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b08c      	sub	sp, #48	; 0x30
 8007f9e:	af04      	add	r7, sp, #16
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fbba 	bl	8009728 <pvPortMalloc>
 8007fb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00e      	beq.n	8007fda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fbc:	2054      	movs	r0, #84	; 0x54
 8007fbe:	f001 fbb3 	bl	8009728 <pvPortMalloc>
 8007fc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
 8007fd0:	e005      	b.n	8007fde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fd2:	6978      	ldr	r0, [r7, #20]
 8007fd4:	f001 fc74 	bl	80098c0 <vPortFree>
 8007fd8:	e001      	b.n	8007fde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d017      	beq.n	8008014 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	9302      	str	r3, [sp, #8]
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f80e 	bl	8008024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008008:	69f8      	ldr	r0, [r7, #28]
 800800a:	f000 f893 	bl	8008134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800800e:	2301      	movs	r3, #1
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	e002      	b.n	800801a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008018:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800801a:	69bb      	ldr	r3, [r7, #24]
	}
 800801c:	4618      	mov	r0, r3
 800801e:	3720      	adds	r7, #32
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800803c:	3b01      	subs	r3, #1
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	617b      	str	r3, [r7, #20]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01f      	beq.n	80080b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	e012      	b.n	800809e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	7819      	ldrb	r1, [r3, #0]
 8008080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4413      	add	r3, r2
 8008086:	3334      	adds	r3, #52	; 0x34
 8008088:	460a      	mov	r2, r1
 800808a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d006      	beq.n	80080a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d9e9      	bls.n	8008078 <prvInitialiseNewTask+0x54>
 80080a4:	e000      	b.n	80080a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80080a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080b0:	e003      	b.n	80080ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b06      	cmp	r3, #6
 80080be:	d901      	bls.n	80080c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080c0:	2306      	movs	r3, #6
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe ff2b 	bl	8006f36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	3318      	adds	r3, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe ff26 	bl	8006f36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	f1c3 0207 	rsb	r2, r3, #7
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	2200      	movs	r2, #0
 8008104:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f001 f8b6 	bl	8009284 <pxPortInitialiseStack>
 8008118:	4602      	mov	r2, r0
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800813c:	f001 f9d2 	bl	80094e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008140:	4b2a      	ldr	r3, [pc, #168]	; (80081ec <prvAddNewTaskToReadyList+0xb8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	4a29      	ldr	r2, [pc, #164]	; (80081ec <prvAddNewTaskToReadyList+0xb8>)
 8008148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <prvAddNewTaskToReadyList+0xbc>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008152:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <prvAddNewTaskToReadyList+0xbc>)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008158:	4b24      	ldr	r3, [pc, #144]	; (80081ec <prvAddNewTaskToReadyList+0xb8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d110      	bne.n	8008182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008160:	f000 fbc6 	bl	80088f0 <prvInitialiseTaskLists>
 8008164:	e00d      	b.n	8008182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008166:	4b23      	ldr	r3, [pc, #140]	; (80081f4 <prvAddNewTaskToReadyList+0xc0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800816e:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <prvAddNewTaskToReadyList+0xbc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	429a      	cmp	r2, r3
 800817a:	d802      	bhi.n	8008182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <prvAddNewTaskToReadyList+0xbc>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008182:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <prvAddNewTaskToReadyList+0xc4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <prvAddNewTaskToReadyList+0xc4>)
 800818a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2201      	movs	r2, #1
 8008192:	409a      	lsls	r2, r3
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	4a18      	ldr	r2, [pc, #96]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <prvAddNewTaskToReadyList+0xcc>)
 80081ac:	441a      	add	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fe fecb 	bl	8006f50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081ba:	f001 f9c3 	bl	8009544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <prvAddNewTaskToReadyList+0xc0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <prvAddNewTaskToReadyList+0xbc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d207      	bcs.n	80081e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <prvAddNewTaskToReadyList+0xd0>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20000750 	.word	0x20000750
 80081f0:	20000650 	.word	0x20000650
 80081f4:	2000075c 	.word	0x2000075c
 80081f8:	2000076c 	.word	0x2000076c
 80081fc:	20000758 	.word	0x20000758
 8008200:	20000654 	.word	0x20000654
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d017      	beq.n	800824a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <vTaskDelay+0x60>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <vTaskDelay+0x30>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	60bb      	str	r3, [r7, #8]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008238:	f000 f87a 	bl	8008330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 ffba 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008244:	f000 f882 	bl	800834c <xTaskResumeAll>
 8008248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <vTaskDelay+0x64>)
 8008252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000778 	.word	0x20000778
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800827e:	463a      	mov	r2, r7
 8008280:	1d39      	adds	r1, r7, #4
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4618      	mov	r0, r3
 8008288:	f7f9 f974 	bl	8001574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	9202      	str	r2, [sp, #8]
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	2300      	movs	r3, #0
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	460a      	mov	r2, r1
 800829e:	491e      	ldr	r1, [pc, #120]	; (8008318 <vTaskStartScheduler+0xa8>)
 80082a0:	481e      	ldr	r0, [pc, #120]	; (800831c <vTaskStartScheduler+0xac>)
 80082a2:	f7ff fe1d 	bl	8007ee0 <xTaskCreateStatic>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4a1d      	ldr	r2, [pc, #116]	; (8008320 <vTaskStartScheduler+0xb0>)
 80082aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082ac:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <vTaskStartScheduler+0xb0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	e001      	b.n	80082be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d116      	bne.n	80082f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	613b      	str	r3, [r7, #16]
}
 80082d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <vTaskStartScheduler+0xb4>)
 80082da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <vTaskStartScheduler+0xb8>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082e6:	4b11      	ldr	r3, [pc, #68]	; (800832c <vTaskStartScheduler+0xbc>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ec:	f001 f858 	bl	80093a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082f0:	e00e      	b.n	8008310 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f8:	d10a      	bne.n	8008310 <vTaskStartScheduler+0xa0>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	60fb      	str	r3, [r7, #12]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <vTaskStartScheduler+0x9e>
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	0800cbb0 	.word	0x0800cbb0
 800831c:	080088c1 	.word	0x080088c1
 8008320:	20000774 	.word	0x20000774
 8008324:	20000770 	.word	0x20000770
 8008328:	2000075c 	.word	0x2000075c
 800832c:	20000754 	.word	0x20000754

08008330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008334:	4b04      	ldr	r3, [pc, #16]	; (8008348 <vTaskSuspendAll+0x18>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a03      	ldr	r2, [pc, #12]	; (8008348 <vTaskSuspendAll+0x18>)
 800833c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20000778 	.word	0x20000778

0800834c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800835a:	4b41      	ldr	r3, [pc, #260]	; (8008460 <xTaskResumeAll+0x114>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <xTaskResumeAll+0x2c>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	603b      	str	r3, [r7, #0]
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008378:	f001 f8b4 	bl	80094e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800837c:	4b38      	ldr	r3, [pc, #224]	; (8008460 <xTaskResumeAll+0x114>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3b01      	subs	r3, #1
 8008382:	4a37      	ldr	r2, [pc, #220]	; (8008460 <xTaskResumeAll+0x114>)
 8008384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008386:	4b36      	ldr	r3, [pc, #216]	; (8008460 <xTaskResumeAll+0x114>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d161      	bne.n	8008452 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800838e:	4b35      	ldr	r3, [pc, #212]	; (8008464 <xTaskResumeAll+0x118>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d05d      	beq.n	8008452 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008396:	e02e      	b.n	80083f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008398:	4b33      	ldr	r3, [pc, #204]	; (8008468 <xTaskResumeAll+0x11c>)
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3318      	adds	r3, #24
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fe30 	bl	800700a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fe2b 	bl	800700a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	2201      	movs	r2, #1
 80083ba:	409a      	lsls	r2, r3
 80083bc:	4b2b      	ldr	r3, [pc, #172]	; (800846c <xTaskResumeAll+0x120>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	4a2a      	ldr	r2, [pc, #168]	; (800846c <xTaskResumeAll+0x120>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4a27      	ldr	r2, [pc, #156]	; (8008470 <xTaskResumeAll+0x124>)
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7fe fdb7 	bl	8006f50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4b23      	ldr	r3, [pc, #140]	; (8008474 <xTaskResumeAll+0x128>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d302      	bcc.n	80083f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <xTaskResumeAll+0x12c>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083f6:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <xTaskResumeAll+0x11c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1cc      	bne.n	8008398 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008404:	f000 fb12 	bl	8008a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008408:	4b1c      	ldr	r3, [pc, #112]	; (800847c <xTaskResumeAll+0x130>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d010      	beq.n	8008436 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008414:	f000 f836 	bl	8008484 <xTaskIncrementTick>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <xTaskResumeAll+0x12c>)
 8008420:	2201      	movs	r2, #1
 8008422:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3b01      	subs	r3, #1
 8008428:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1f1      	bne.n	8008414 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008430:	4b12      	ldr	r3, [pc, #72]	; (800847c <xTaskResumeAll+0x130>)
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008436:	4b10      	ldr	r3, [pc, #64]	; (8008478 <xTaskResumeAll+0x12c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800843e:	2301      	movs	r3, #1
 8008440:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <xTaskResumeAll+0x134>)
 8008444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008452:	f001 f877 	bl	8009544 <vPortExitCritical>

	return xAlreadyYielded;
 8008456:	68bb      	ldr	r3, [r7, #8]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000778 	.word	0x20000778
 8008464:	20000750 	.word	0x20000750
 8008468:	20000710 	.word	0x20000710
 800846c:	20000758 	.word	0x20000758
 8008470:	20000654 	.word	0x20000654
 8008474:	20000650 	.word	0x20000650
 8008478:	20000764 	.word	0x20000764
 800847c:	20000760 	.word	0x20000760
 8008480:	e000ed04 	.word	0xe000ed04

08008484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800848e:	4b4e      	ldr	r3, [pc, #312]	; (80085c8 <xTaskIncrementTick+0x144>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 808e 	bne.w	80085b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008498:	4b4c      	ldr	r3, [pc, #304]	; (80085cc <xTaskIncrementTick+0x148>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3301      	adds	r3, #1
 800849e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084a0:	4a4a      	ldr	r2, [pc, #296]	; (80085cc <xTaskIncrementTick+0x148>)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d120      	bne.n	80084ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084ac:	4b48      	ldr	r3, [pc, #288]	; (80085d0 <xTaskIncrementTick+0x14c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <xTaskIncrementTick+0x48>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	603b      	str	r3, [r7, #0]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <xTaskIncrementTick+0x46>
 80084cc:	4b40      	ldr	r3, [pc, #256]	; (80085d0 <xTaskIncrementTick+0x14c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	4b40      	ldr	r3, [pc, #256]	; (80085d4 <xTaskIncrementTick+0x150>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a3e      	ldr	r2, [pc, #248]	; (80085d0 <xTaskIncrementTick+0x14c>)
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4a3e      	ldr	r2, [pc, #248]	; (80085d4 <xTaskIncrementTick+0x150>)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	4b3d      	ldr	r3, [pc, #244]	; (80085d8 <xTaskIncrementTick+0x154>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a3c      	ldr	r2, [pc, #240]	; (80085d8 <xTaskIncrementTick+0x154>)
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	f000 fa9f 	bl	8008a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084ee:	4b3b      	ldr	r3, [pc, #236]	; (80085dc <xTaskIncrementTick+0x158>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d348      	bcc.n	800858a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f8:	4b35      	ldr	r3, [pc, #212]	; (80085d0 <xTaskIncrementTick+0x14c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008502:	4b36      	ldr	r3, [pc, #216]	; (80085dc <xTaskIncrementTick+0x158>)
 8008504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008508:	601a      	str	r2, [r3, #0]
					break;
 800850a:	e03e      	b.n	800858a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <xTaskIncrementTick+0x14c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d203      	bcs.n	800852c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008524:	4a2d      	ldr	r2, [pc, #180]	; (80085dc <xTaskIncrementTick+0x158>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800852a:	e02e      	b.n	800858a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3304      	adds	r3, #4
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe fd6a 	bl	800700a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3318      	adds	r3, #24
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fd61 	bl	800700a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	2201      	movs	r2, #1
 800854e:	409a      	lsls	r2, r3
 8008550:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <xTaskIncrementTick+0x15c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4313      	orrs	r3, r2
 8008556:	4a22      	ldr	r2, [pc, #136]	; (80085e0 <xTaskIncrementTick+0x15c>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <xTaskIncrementTick+0x160>)
 8008568:	441a      	add	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7fe fced 	bl	8006f50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857a:	4b1b      	ldr	r3, [pc, #108]	; (80085e8 <xTaskIncrementTick+0x164>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	429a      	cmp	r2, r3
 8008582:	d3b9      	bcc.n	80084f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008588:	e7b6      	b.n	80084f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800858a:	4b17      	ldr	r3, [pc, #92]	; (80085e8 <xTaskIncrementTick+0x164>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4914      	ldr	r1, [pc, #80]	; (80085e4 <xTaskIncrementTick+0x160>)
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d901      	bls.n	80085a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <xTaskIncrementTick+0x168>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e004      	b.n	80085be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085b4:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <xTaskIncrementTick+0x16c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <xTaskIncrementTick+0x16c>)
 80085bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085be:	697b      	ldr	r3, [r7, #20]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000778 	.word	0x20000778
 80085cc:	20000754 	.word	0x20000754
 80085d0:	20000708 	.word	0x20000708
 80085d4:	2000070c 	.word	0x2000070c
 80085d8:	20000768 	.word	0x20000768
 80085dc:	20000770 	.word	0x20000770
 80085e0:	20000758 	.word	0x20000758
 80085e4:	20000654 	.word	0x20000654
 80085e8:	20000650 	.word	0x20000650
 80085ec:	20000764 	.word	0x20000764
 80085f0:	20000760 	.word	0x20000760

080085f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085fa:	4b27      	ldr	r3, [pc, #156]	; (8008698 <vTaskSwitchContext+0xa4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008602:	4b26      	ldr	r3, [pc, #152]	; (800869c <vTaskSwitchContext+0xa8>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008608:	e03f      	b.n	800868a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <vTaskSwitchContext+0xa8>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008610:	4b23      	ldr	r3, [pc, #140]	; (80086a0 <vTaskSwitchContext+0xac>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	fab3 f383 	clz	r3, r3
 800861c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	f1c3 031f 	rsb	r3, r3, #31
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	491f      	ldr	r1, [pc, #124]	; (80086a4 <vTaskSwitchContext+0xb0>)
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <vTaskSwitchContext+0x5c>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	607b      	str	r3, [r7, #4]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <vTaskSwitchContext+0x5a>
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a12      	ldr	r2, [pc, #72]	; (80086a4 <vTaskSwitchContext+0xb0>)
 800865c:	4413      	add	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3308      	adds	r3, #8
 8008672:	429a      	cmp	r2, r3
 8008674:	d104      	bne.n	8008680 <vTaskSwitchContext+0x8c>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <vTaskSwitchContext+0xb4>)
 8008688:	6013      	str	r3, [r2, #0]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20000778 	.word	0x20000778
 800869c:	20000764 	.word	0x20000764
 80086a0:	20000758 	.word	0x20000758
 80086a4:	20000654 	.word	0x20000654
 80086a8:	20000650 	.word	0x20000650

080086ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <vTaskPlaceOnEventList+0x44>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3318      	adds	r3, #24
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fe fc5c 	bl	8006f98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086e0:	2101      	movs	r1, #1
 80086e2:	6838      	ldr	r0, [r7, #0]
 80086e4:	f000 fd68 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000650 	.word	0x20000650

080086f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	60fb      	str	r3, [r7, #12]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3318      	adds	r3, #24
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fc70 	bl	800700a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <xTaskRemoveFromEventList+0xac>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d11c      	bne.n	800876c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fc67 	bl	800700a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	2201      	movs	r2, #1
 8008742:	409a      	lsls	r2, r3
 8008744:	4b17      	ldr	r3, [pc, #92]	; (80087a4 <xTaskRemoveFromEventList+0xb0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4313      	orrs	r3, r2
 800874a:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <xTaskRemoveFromEventList+0xb0>)
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <xTaskRemoveFromEventList+0xb4>)
 800875c:	441a      	add	r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3304      	adds	r3, #4
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f7fe fbf3 	bl	8006f50 <vListInsertEnd>
 800876a:	e005      	b.n	8008778 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	3318      	adds	r3, #24
 8008770:	4619      	mov	r1, r3
 8008772:	480e      	ldr	r0, [pc, #56]	; (80087ac <xTaskRemoveFromEventList+0xb8>)
 8008774:	f7fe fbec 	bl	8006f50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <xTaskRemoveFromEventList+0xbc>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	429a      	cmp	r2, r3
 8008784:	d905      	bls.n	8008792 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008786:	2301      	movs	r3, #1
 8008788:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800878a:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <xTaskRemoveFromEventList+0xc0>)
 800878c:	2201      	movs	r2, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e001      	b.n	8008796 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008796:	697b      	ldr	r3, [r7, #20]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000778 	.word	0x20000778
 80087a4:	20000758 	.word	0x20000758
 80087a8:	20000654 	.word	0x20000654
 80087ac:	20000710 	.word	0x20000710
 80087b0:	20000650 	.word	0x20000650
 80087b4:	20000764 	.word	0x20000764

080087b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <vTaskInternalSetTimeOutState+0x24>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <vTaskInternalSetTimeOutState+0x28>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	605a      	str	r2, [r3, #4]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	20000768 	.word	0x20000768
 80087e0:	20000754 	.word	0x20000754

080087e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	613b      	str	r3, [r7, #16]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	60fb      	str	r3, [r7, #12]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008826:	f000 fe5d 	bl	80094e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800882a:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <xTaskCheckForTimeOut+0xbc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d102      	bne.n	800884a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	e023      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <xTaskCheckForTimeOut+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d007      	beq.n	8008866 <xTaskCheckForTimeOut+0x82>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	429a      	cmp	r2, r3
 800885e:	d302      	bcc.n	8008866 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e015      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d20b      	bcs.n	8008888 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	1ad2      	subs	r2, r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff9b 	bl	80087b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
 8008886:	e004      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008892:	f000 fe57 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8008896:	69fb      	ldr	r3, [r7, #28]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000754 	.word	0x20000754
 80088a4:	20000768 	.word	0x20000768

080088a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <vTaskMissedYield+0x14>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bf00      	nop
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	20000764 	.word	0x20000764

080088c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088c8:	f000 f852 	bl	8008970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvIdleTask+0x28>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d9f9      	bls.n	80088c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <prvIdleTask+0x2c>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088e4:	e7f0      	b.n	80088c8 <prvIdleTask+0x8>
 80088e6:	bf00      	nop
 80088e8:	20000654 	.word	0x20000654
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	e00c      	b.n	8008916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4a12      	ldr	r2, [pc, #72]	; (8008950 <prvInitialiseTaskLists+0x60>)
 8008908:	4413      	add	r3, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe faf3 	bl	8006ef6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b06      	cmp	r3, #6
 800891a:	d9ef      	bls.n	80088fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800891c:	480d      	ldr	r0, [pc, #52]	; (8008954 <prvInitialiseTaskLists+0x64>)
 800891e:	f7fe faea 	bl	8006ef6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008922:	480d      	ldr	r0, [pc, #52]	; (8008958 <prvInitialiseTaskLists+0x68>)
 8008924:	f7fe fae7 	bl	8006ef6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008928:	480c      	ldr	r0, [pc, #48]	; (800895c <prvInitialiseTaskLists+0x6c>)
 800892a:	f7fe fae4 	bl	8006ef6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800892e:	480c      	ldr	r0, [pc, #48]	; (8008960 <prvInitialiseTaskLists+0x70>)
 8008930:	f7fe fae1 	bl	8006ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008934:	480b      	ldr	r0, [pc, #44]	; (8008964 <prvInitialiseTaskLists+0x74>)
 8008936:	f7fe fade 	bl	8006ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <prvInitialiseTaskLists+0x78>)
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <prvInitialiseTaskLists+0x64>)
 800893e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008940:	4b0a      	ldr	r3, [pc, #40]	; (800896c <prvInitialiseTaskLists+0x7c>)
 8008942:	4a05      	ldr	r2, [pc, #20]	; (8008958 <prvInitialiseTaskLists+0x68>)
 8008944:	601a      	str	r2, [r3, #0]
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000654 	.word	0x20000654
 8008954:	200006e0 	.word	0x200006e0
 8008958:	200006f4 	.word	0x200006f4
 800895c:	20000710 	.word	0x20000710
 8008960:	20000724 	.word	0x20000724
 8008964:	2000073c 	.word	0x2000073c
 8008968:	20000708 	.word	0x20000708
 800896c:	2000070c 	.word	0x2000070c

08008970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008976:	e019      	b.n	80089ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008978:	f000 fdb4 	bl	80094e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <prvCheckTasksWaitingTermination+0x50>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3304      	adds	r3, #4
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fb3e 	bl	800700a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800898e:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <prvCheckTasksWaitingTermination+0x54>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3b01      	subs	r3, #1
 8008994:	4a0b      	ldr	r2, [pc, #44]	; (80089c4 <prvCheckTasksWaitingTermination+0x54>)
 8008996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008998:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 80089a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089a2:	f000 fdcf 	bl	8009544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f810 	bl	80089cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ac:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e1      	bne.n	8008978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000724 	.word	0x20000724
 80089c4:	20000750 	.word	0x20000750
 80089c8:	20000738 	.word	0x20000738

080089cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d108      	bne.n	80089f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 ff6c 	bl	80098c0 <vPortFree>
				vPortFree( pxTCB );
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 ff69 	bl	80098c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089ee:	e018      	b.n	8008a22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d103      	bne.n	8008a02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 ff60 	bl	80098c0 <vPortFree>
	}
 8008a00:	e00f      	b.n	8008a22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d00a      	beq.n	8008a22 <prvDeleteTCB+0x56>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	60fb      	str	r3, [r7, #12]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <prvDeleteTCB+0x54>
	}
 8008a22:	bf00      	nop
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a32:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <prvResetNextTaskUnblockTime+0x38>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <prvResetNextTaskUnblockTime+0x3c>)
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a44:	e008      	b.n	8008a58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a46:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <prvResetNextTaskUnblockTime+0x38>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <prvResetNextTaskUnblockTime+0x3c>)
 8008a56:	6013      	str	r3, [r2, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000708 	.word	0x20000708
 8008a68:	20000770 	.word	0x20000770

08008a6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <xTaskGetSchedulerState+0x34>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	e008      	b.n	8008a92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <xTaskGetSchedulerState+0x38>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	e001      	b.n	8008a92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a92:	687b      	ldr	r3, [r7, #4]
	}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	2000075c 	.word	0x2000075c
 8008aa4:	20000778 	.word	0x20000778

08008aa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d05e      	beq.n	8008b7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	4b31      	ldr	r3, [pc, #196]	; (8008b88 <xTaskPriorityInherit+0xe0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d24e      	bcs.n	8008b6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	db06      	blt.n	8008ae2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad4:	4b2c      	ldr	r3, [pc, #176]	; (8008b88 <xTaskPriorityInherit+0xe0>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f1c3 0207 	rsb	r2, r3, #7
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6959      	ldr	r1, [r3, #20]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <xTaskPriorityInherit+0xe4>)
 8008af4:	4413      	add	r3, r2
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d12f      	bne.n	8008b5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fa83 	bl	800700a <uxListRemove>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	2201      	movs	r2, #1
 8008b10:	fa02 f303 	lsl.w	r3, r2, r3
 8008b14:	43da      	mvns	r2, r3
 8008b16:	4b1e      	ldr	r3, [pc, #120]	; (8008b90 <xTaskPriorityInherit+0xe8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	4a1c      	ldr	r2, [pc, #112]	; (8008b90 <xTaskPriorityInherit+0xe8>)
 8008b1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b20:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <xTaskPriorityInherit+0xe0>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	2201      	movs	r2, #1
 8008b30:	409a      	lsls	r2, r3
 8008b32:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <xTaskPriorityInherit+0xe8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	4a15      	ldr	r2, [pc, #84]	; (8008b90 <xTaskPriorityInherit+0xe8>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <xTaskPriorityInherit+0xe4>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe f9fc 	bl	8006f50 <vListInsertEnd>
 8008b58:	e004      	b.n	8008b64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <xTaskPriorityInherit+0xe0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b64:	2301      	movs	r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e008      	b.n	8008b7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <xTaskPriorityInherit+0xe0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d201      	bcs.n	8008b7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000650 	.word	0x20000650
 8008b8c:	20000654 	.word	0x20000654
 8008b90:	20000758 	.word	0x20000758

08008b94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d06e      	beq.n	8008c88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008baa:	4b3a      	ldr	r3, [pc, #232]	; (8008c94 <xTaskPriorityDisinherit+0x100>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d00a      	beq.n	8008bca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60bb      	str	r3, [r7, #8]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d044      	beq.n	8008c88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d140      	bne.n	8008c88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe f9fd 	bl	800700a <uxListRemove>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d115      	bne.n	8008c42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1a:	491f      	ldr	r1, [pc, #124]	; (8008c98 <xTaskPriorityDisinherit+0x104>)
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <xTaskPriorityDisinherit+0xae>
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	2201      	movs	r2, #1
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	43da      	mvns	r2, r3
 8008c38:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <xTaskPriorityDisinherit+0x108>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	4a17      	ldr	r2, [pc, #92]	; (8008c9c <xTaskPriorityDisinherit+0x108>)
 8008c40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	f1c3 0207 	rsb	r2, r3, #7
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	409a      	lsls	r2, r3
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <xTaskPriorityDisinherit+0x108>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <xTaskPriorityDisinherit+0x108>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4a08      	ldr	r2, [pc, #32]	; (8008c98 <xTaskPriorityDisinherit+0x104>)
 8008c76:	441a      	add	r2, r3
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fe f966 	bl	8006f50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c88:	697b      	ldr	r3, [r7, #20]
	}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000650 	.word	0x20000650
 8008c98:	20000654 	.word	0x20000654
 8008c9c:	20000758 	.word	0x20000758

08008ca0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d077      	beq.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d902      	bls.n	8008ce6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e002      	b.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d058      	beq.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d153      	bne.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d00:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d10a      	bne.n	8008d20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	60bb      	str	r3, [r7, #8]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	db04      	blt.n	8008d3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f1c3 0207 	rsb	r2, r3, #7
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	6959      	ldr	r1, [r3, #20]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4a19      	ldr	r2, [pc, #100]	; (8008db4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d4e:	4413      	add	r3, r2
 8008d50:	4299      	cmp	r1, r3
 8008d52:	d129      	bne.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe f956 	bl	800700a <uxListRemove>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	2201      	movs	r2, #1
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	43da      	mvns	r2, r3
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4013      	ands	r3, r2
 8008d76:	4a10      	ldr	r2, [pc, #64]	; (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	2201      	movs	r2, #1
 8008d80:	409a      	lsls	r2, r3
 8008d82:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	4a0b      	ldr	r2, [pc, #44]	; (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a06      	ldr	r2, [pc, #24]	; (8008db4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d9a:	441a      	add	r2, r3
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fe f8d4 	bl	8006f50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008da8:	bf00      	nop
 8008daa:	3720      	adds	r7, #32
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000650 	.word	0x20000650
 8008db4:	20000654 	.word	0x20000654
 8008db8:	20000758 	.word	0x20000758

08008dbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dce:	3201      	adds	r2, #1
 8008dd0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008dd2:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
	}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	20000650 	.word	0x20000650

08008de4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008df2:	f000 fb77 	bl	80094e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d01a      	beq.n	8008e3a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008e04:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	43d2      	mvns	r2, r2
 8008e0e:	400a      	ands	r2, r1
 8008e10:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008e12:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e22:	2101      	movs	r1, #1
 8008e24:	6838      	ldr	r0, [r7, #0]
 8008e26:	f000 f9c7 	bl	80091b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <xTaskNotifyWait+0xb0>)
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008e3a:	f000 fb83 	bl	8009544 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008e3e:	f000 fb51 	bl	80094e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008e48:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d002      	beq.n	8008e66 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e008      	b.n	8008e78 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	43d2      	mvns	r2, r2
 8008e70:	400a      	ands	r2, r1
 8008e72:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <xTaskNotifyWait+0xac>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8008e82:	f000 fb5f 	bl	8009544 <vPortExitCritical>

		return xReturn;
 8008e86:	697b      	ldr	r3, [r7, #20]
	}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000650 	.word	0x20000650
 8008e94:	e000ed04 	.word	0xe000ed04

08008e98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <xTaskGenericNotify+0x30>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	61bb      	str	r3, [r7, #24]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008ecc:	f000 fb0a 	bl	80094e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ee4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d828      	bhi.n	8008f46 <xTaskGenericNotify+0xae>
 8008ef4:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <xTaskGenericNotify+0x64>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f67 	.word	0x08008f67
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f1f 	.word	0x08008f1f
 8008f08:	08008f2b 	.word	0x08008f2b
 8008f0c:	08008f33 	.word	0x08008f33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008f1c:	e026      	b.n	8008f6c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008f28:	e020      	b.n	8008f6c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008f30:	e01c      	b.n	8008f6c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008f32:	7ffb      	ldrb	r3, [r7, #31]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d003      	beq.n	8008f40 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008f3e:	e015      	b.n	8008f6c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008f44:	e012      	b.n	8008f6c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f4e:	d00c      	beq.n	8008f6a <xTaskGenericNotify+0xd2>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	617b      	str	r3, [r7, #20]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xTaskGenericNotify+0xcc>
					break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <xTaskGenericNotify+0xd4>

					break;
 8008f6a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008f6c:	7ffb      	ldrb	r3, [r7, #31]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d139      	bne.n	8008fe6 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe f847 	bl	800700a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	2201      	movs	r2, #1
 8008f82:	409a      	lsls	r2, r3
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <xTaskGenericNotify+0x15c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	4a1a      	ldr	r2, [pc, #104]	; (8008ff4 <xTaskGenericNotify+0x15c>)
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <xTaskGenericNotify+0x160>)
 8008f9c:	441a      	add	r2, r3
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7fd ffd3 	bl	8006f50 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <xTaskGenericNotify+0x130>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	613b      	str	r3, [r7, #16]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <xTaskGenericNotify+0x164>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d907      	bls.n	8008fe6 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <xTaskGenericNotify+0x168>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008fe6:	f000 faad 	bl	8009544 <vPortExitCritical>

		return xReturn;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3728      	adds	r7, #40	; 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000758 	.word	0x20000758
 8008ff8:	20000654 	.word	0x20000654
 8008ffc:	20000650 	.word	0x20000650
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08e      	sub	sp, #56	; 0x38
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009034:	f000 fb38 	bl	80096a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800903c:	f3ef 8211 	mrs	r2, BASEPRI
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	623a      	str	r2, [r7, #32]
 8009052:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009054:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800906c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	2202      	movs	r2, #2
 8009074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b04      	cmp	r3, #4
 800907c:	d828      	bhi.n	80090d0 <xTaskGenericNotifyFromISR+0xcc>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <xTaskGenericNotifyFromISR+0x80>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090f1 	.word	0x080090f1
 8009088:	08009099 	.word	0x08009099
 800908c:	080090a7 	.word	0x080090a7
 8009090:	080090b3 	.word	0x080090b3
 8009094:	080090bb 	.word	0x080090bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	431a      	orrs	r2, r3
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80090a4:	e027      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80090b0:	e021      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80090b8:	e01d      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80090ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d003      	beq.n	80090ca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80090c8:	e015      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80090ce:	e012      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090d8:	d00c      	beq.n	80090f4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	61bb      	str	r3, [r7, #24]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <xTaskGenericNotifyFromISR+0xea>
					break;
 80090f0:	bf00      	nop
 80090f2:	e000      	b.n	80090f6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80090f4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80090f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d145      	bne.n	800918a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	617b      	str	r3, [r7, #20]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911c:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <xTaskGenericNotifyFromISR+0x19c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11c      	bne.n	800915e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	3304      	adds	r3, #4
 8009128:	4618      	mov	r0, r3
 800912a:	f7fd ff6e 	bl	800700a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	2201      	movs	r2, #1
 8009134:	409a      	lsls	r2, r3
 8009136:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <xTaskGenericNotifyFromISR+0x1a0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4313      	orrs	r3, r2
 800913c:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <xTaskGenericNotifyFromISR+0x1a0>)
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4a16      	ldr	r2, [pc, #88]	; (80091a8 <xTaskGenericNotifyFromISR+0x1a4>)
 800914e:	441a      	add	r2, r3
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fd fefa 	bl	8006f50 <vListInsertEnd>
 800915c:	e005      	b.n	800916a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	3318      	adds	r3, #24
 8009162:	4619      	mov	r1, r3
 8009164:	4811      	ldr	r0, [pc, #68]	; (80091ac <xTaskGenericNotifyFromISR+0x1a8>)
 8009166:	f7fd fef3 	bl	8006f50 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <xTaskGenericNotifyFromISR+0x1ac>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	429a      	cmp	r2, r3
 8009176:	d908      	bls.n	800918a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800917e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009180:	2201      	movs	r2, #1
 8009182:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <xTaskGenericNotifyFromISR+0x1b0>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f383 8811 	msr	BASEPRI, r3
}
 8009194:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009198:	4618      	mov	r0, r3
 800919a:	3738      	adds	r7, #56	; 0x38
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000778 	.word	0x20000778
 80091a4:	20000758 	.word	0x20000758
 80091a8:	20000654 	.word	0x20000654
 80091ac:	20000710 	.word	0x20000710
 80091b0:	20000650 	.word	0x20000650
 80091b4:	20000764 	.word	0x20000764

080091b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091c2:	4b29      	ldr	r3, [pc, #164]	; (8009268 <prvAddCurrentTaskToDelayedList+0xb0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	4b28      	ldr	r3, [pc, #160]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fd ff1b 	bl	800700a <uxListRemove>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091da:	4b24      	ldr	r3, [pc, #144]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	2201      	movs	r2, #1
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	43da      	mvns	r2, r3
 80091e8:	4b21      	ldr	r3, [pc, #132]	; (8009270 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4013      	ands	r3, r2
 80091ee:	4a20      	ldr	r2, [pc, #128]	; (8009270 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f8:	d10a      	bne.n	8009210 <prvAddCurrentTaskToDelayedList+0x58>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009200:	4b1a      	ldr	r3, [pc, #104]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	481a      	ldr	r0, [pc, #104]	; (8009274 <prvAddCurrentTaskToDelayedList+0xbc>)
 800920a:	f7fd fea1 	bl	8006f50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800920e:	e026      	b.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009218:	4b14      	ldr	r3, [pc, #80]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d209      	bcs.n	800923c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <prvAddCurrentTaskToDelayedList+0xc0>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f7fd feaf 	bl	8006f98 <vListInsert>
}
 800923a:	e010      	b.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <prvAddCurrentTaskToDelayedList+0xc4>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f7fd fea5 	bl	8006f98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800924e:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	429a      	cmp	r2, r3
 8009256:	d202      	bcs.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009258:	4a09      	ldr	r2, [pc, #36]	; (8009280 <prvAddCurrentTaskToDelayedList+0xc8>)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6013      	str	r3, [r2, #0]
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000754 	.word	0x20000754
 800926c:	20000650 	.word	0x20000650
 8009270:	20000758 	.word	0x20000758
 8009274:	2000073c 	.word	0x2000073c
 8009278:	2000070c 	.word	0x2000070c
 800927c:	20000708 	.word	0x20000708
 8009280:	20000770 	.word	0x20000770

08009284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3b04      	subs	r3, #4
 8009294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800929c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0201 	bic.w	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b04      	subs	r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <pxPortInitialiseStack+0x64>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b14      	subs	r3, #20
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b04      	subs	r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f06f 0202 	mvn.w	r2, #2
 80092d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3b20      	subs	r3, #32
 80092d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092da:	68fb      	ldr	r3, [r7, #12]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	080092ed 	.word	0x080092ed

080092ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092f6:	4b12      	ldr	r3, [pc, #72]	; (8009340 <prvTaskExitError+0x54>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092fe:	d00a      	beq.n	8009316 <prvTaskExitError+0x2a>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60fb      	str	r3, [r7, #12]
}
 8009312:	bf00      	nop
 8009314:	e7fe      	b.n	8009314 <prvTaskExitError+0x28>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	60bb      	str	r3, [r7, #8]
}
 8009328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800932a:	bf00      	nop
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0fc      	beq.n	800932c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000068 	.word	0x20000068
	...

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	4770      	bx	lr
 800936c:	f3af 8000 	nop.w

08009370 <pxCurrentTCBConst2>:
 8009370:	20000650 	.word	0x20000650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <prvPortStartFirstTask+0x24>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8814 	msr	CONTROL, r0
 800938a:	b662      	cpsie	i
 800938c:	b661      	cpsie	f
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	df00      	svc	0
 8009398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800939a:	bf00      	nop
 800939c:	e000ed08 	.word	0xe000ed08

080093a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093a6:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <xPortStartScheduler+0x120>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a46      	ldr	r2, [pc, #280]	; (80094c4 <xPortStartScheduler+0x124>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d10a      	bne.n	80093c6 <xPortStartScheduler+0x26>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093c6:	4b3e      	ldr	r3, [pc, #248]	; (80094c0 <xPortStartScheduler+0x120>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a3f      	ldr	r2, [pc, #252]	; (80094c8 <xPortStartScheduler+0x128>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10a      	bne.n	80093e6 <xPortStartScheduler+0x46>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093e6:	4b39      	ldr	r3, [pc, #228]	; (80094cc <xPortStartScheduler+0x12c>)
 80093e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009408:	b2da      	uxtb	r2, r3
 800940a:	4b31      	ldr	r3, [pc, #196]	; (80094d0 <xPortStartScheduler+0x130>)
 800940c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <xPortStartScheduler+0x134>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009414:	e009      	b.n	800942a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009416:	4b2f      	ldr	r3, [pc, #188]	; (80094d4 <xPortStartScheduler+0x134>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	4a2d      	ldr	r2, [pc, #180]	; (80094d4 <xPortStartScheduler+0x134>)
 800941e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	b2db      	uxtb	r3, r3
 8009428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b80      	cmp	r3, #128	; 0x80
 8009434:	d0ef      	beq.n	8009416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009436:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <xPortStartScheduler+0x134>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1c3 0307 	rsb	r3, r3, #7
 800943e:	2b04      	cmp	r3, #4
 8009440:	d00a      	beq.n	8009458 <xPortStartScheduler+0xb8>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60bb      	str	r3, [r7, #8]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <xPortStartScheduler+0x134>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <xPortStartScheduler+0x134>)
 8009460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009462:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <xPortStartScheduler+0x134>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800946a:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <xPortStartScheduler+0x134>)
 800946c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <xPortStartScheduler+0x138>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <xPortStartScheduler+0x138>)
 800947c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009482:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <xPortStartScheduler+0x138>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a14      	ldr	r2, [pc, #80]	; (80094d8 <xPortStartScheduler+0x138>)
 8009488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800948c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800948e:	f000 f8dd 	bl	800964c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <xPortStartScheduler+0x13c>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009498:	f000 f8fc 	bl	8009694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800949c:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <xPortStartScheduler+0x140>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <xPortStartScheduler+0x140>)
 80094a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094a8:	f7ff ff66 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094ac:	f7ff f8a2 	bl	80085f4 <vTaskSwitchContext>
	prvTaskExitError();
 80094b0:	f7ff ff1c 	bl	80092ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	e000ed00 	.word	0xe000ed00
 80094c4:	410fc271 	.word	0x410fc271
 80094c8:	410fc270 	.word	0x410fc270
 80094cc:	e000e400 	.word	0xe000e400
 80094d0:	2000077c 	.word	0x2000077c
 80094d4:	20000780 	.word	0x20000780
 80094d8:	e000ed20 	.word	0xe000ed20
 80094dc:	20000068 	.word	0x20000068
 80094e0:	e000ef34 	.word	0xe000ef34

080094e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
}
 80094fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094fe:	4b0f      	ldr	r3, [pc, #60]	; (800953c <vPortEnterCritical+0x58>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3301      	adds	r3, #1
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <vPortEnterCritical+0x58>)
 8009506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <vPortEnterCritical+0x58>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10f      	bne.n	8009530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <vPortEnterCritical+0x5c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <vPortEnterCritical+0x4c>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	603b      	str	r3, [r7, #0]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <vPortEnterCritical+0x4a>
	}
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20000068 	.word	0x20000068
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800954a:	4b12      	ldr	r3, [pc, #72]	; (8009594 <vPortExitCritical+0x50>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <vPortExitCritical+0x24>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	607b      	str	r3, [r7, #4]
}
 8009564:	bf00      	nop
 8009566:	e7fe      	b.n	8009566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <vPortExitCritical+0x50>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a09      	ldr	r2, [pc, #36]	; (8009594 <vPortExitCritical+0x50>)
 8009570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <vPortExitCritical+0x50>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <vPortExitCritical+0x42>
 800957a:	2300      	movs	r3, #0
 800957c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f383 8811 	msr	BASEPRI, r3
}
 8009584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000068 	.word	0x20000068
	...

080095a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095a0:	f3ef 8009 	mrs	r0, PSP
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <pxCurrentTCBConst>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	f01e 0f10 	tst.w	lr, #16
 80095b0:	bf08      	it	eq
 80095b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	6010      	str	r0, [r2, #0]
 80095bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095c4:	f380 8811 	msr	BASEPRI, r0
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f7ff f810 	bl	80085f4 <vTaskSwitchContext>
 80095d4:	f04f 0000 	mov.w	r0, #0
 80095d8:	f380 8811 	msr	BASEPRI, r0
 80095dc:	bc09      	pop	{r0, r3}
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	6808      	ldr	r0, [r1, #0]
 80095e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e6:	f01e 0f10 	tst.w	lr, #16
 80095ea:	bf08      	it	eq
 80095ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095f0:	f380 8809 	msr	PSP, r0
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst>:
 8009600:	20000650 	.word	0x20000650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009622:	f7fe ff2f 	bl	8008484 <xTaskIncrementTick>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <SysTick_Handler+0x40>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f383 8811 	msr	BASEPRI, r3
}
 800963e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <vPortSetupTimerInterrupt+0x38>)
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <vPortSetupTimerInterrupt+0x3c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a0a      	ldr	r2, [pc, #40]	; (800968c <vPortSetupTimerInterrupt+0x40>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	099b      	lsrs	r3, r3, #6
 8009668:	4a09      	ldr	r2, [pc, #36]	; (8009690 <vPortSetupTimerInterrupt+0x44>)
 800966a:	3b01      	subs	r3, #1
 800966c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800966e:	4b04      	ldr	r3, [pc, #16]	; (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009670:	2207      	movs	r2, #7
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	e000e010 	.word	0xe000e010
 8009684:	e000e018 	.word	0xe000e018
 8009688:	2000005c 	.word	0x2000005c
 800968c:	10624dd3 	.word	0x10624dd3
 8009690:	e000e014 	.word	0xe000e014

08009694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096a4 <vPortEnableVFP+0x10>
 8009698:	6801      	ldr	r1, [r0, #0]
 800969a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800969e:	6001      	str	r1, [r0, #0]
 80096a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096a2:	bf00      	nop
 80096a4:	e000ed88 	.word	0xe000ed88

080096a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	d914      	bls.n	80096e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096ba:	4a17      	ldr	r2, [pc, #92]	; (8009718 <vPortValidateInterruptPriority+0x70>)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096c4:	4b15      	ldr	r3, [pc, #84]	; (800971c <vPortValidateInterruptPriority+0x74>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	7afa      	ldrb	r2, [r7, #11]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d20a      	bcs.n	80096e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	607b      	str	r3, [r7, #4]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <vPortValidateInterruptPriority+0x78>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <vPortValidateInterruptPriority+0x7c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d90a      	bls.n	800970a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	603b      	str	r3, [r7, #0]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <vPortValidateInterruptPriority+0x60>
	}
 800970a:	bf00      	nop
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	e000e3f0 	.word	0xe000e3f0
 800971c:	2000077c 	.word	0x2000077c
 8009720:	e000ed0c 	.word	0xe000ed0c
 8009724:	20000780 	.word	0x20000780

08009728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009734:	f7fe fdfc 	bl	8008330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009738:	4b5b      	ldr	r3, [pc, #364]	; (80098a8 <pvPortMalloc+0x180>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009740:	f000 f920 	bl	8009984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009744:	4b59      	ldr	r3, [pc, #356]	; (80098ac <pvPortMalloc+0x184>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	f040 8093 	bne.w	8009878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01d      	beq.n	8009794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009758:	2208      	movs	r2, #8
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d014      	beq.n	8009794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f023 0307 	bic.w	r3, r3, #7
 8009770:	3308      	adds	r3, #8
 8009772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <pvPortMalloc+0x6c>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	617b      	str	r3, [r7, #20]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06e      	beq.n	8009878 <pvPortMalloc+0x150>
 800979a:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <pvPortMalloc+0x188>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d869      	bhi.n	8009878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097a4:	4b43      	ldr	r3, [pc, #268]	; (80098b4 <pvPortMalloc+0x18c>)
 80097a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097a8:	4b42      	ldr	r3, [pc, #264]	; (80098b4 <pvPortMalloc+0x18c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ae:	e004      	b.n	80097ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d903      	bls.n	80097cc <pvPortMalloc+0xa4>
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1f1      	bne.n	80097b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097cc:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <pvPortMalloc+0x180>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d050      	beq.n	8009878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2208      	movs	r2, #8
 80097dc:	4413      	add	r3, r2
 80097de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	2308      	movs	r3, #8
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d91f      	bls.n	8009838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <pvPortMalloc+0xf8>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	613b      	str	r3, [r7, #16]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009832:	69b8      	ldr	r0, [r7, #24]
 8009834:	f000 f908 	bl	8009a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009838:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <pvPortMalloc+0x188>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	4a1b      	ldr	r2, [pc, #108]	; (80098b0 <pvPortMalloc+0x188>)
 8009844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <pvPortMalloc+0x188>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <pvPortMalloc+0x190>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d203      	bcs.n	800985a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <pvPortMalloc+0x188>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <pvPortMalloc+0x190>)
 8009858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <pvPortMalloc+0x184>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	431a      	orrs	r2, r3
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <pvPortMalloc+0x194>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	4a11      	ldr	r2, [pc, #68]	; (80098bc <pvPortMalloc+0x194>)
 8009876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009878:	f7fe fd68 	bl	800834c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <pvPortMalloc+0x174>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60fb      	str	r3, [r7, #12]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <pvPortMalloc+0x172>
	return pvReturn;
 800989c:	69fb      	ldr	r3, [r7, #28]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20001344 	.word	0x20001344
 80098ac:	20001358 	.word	0x20001358
 80098b0:	20001348 	.word	0x20001348
 80098b4:	2000133c 	.word	0x2000133c
 80098b8:	2000134c 	.word	0x2000134c
 80098bc:	20001350 	.word	0x20001350

080098c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d04d      	beq.n	800996e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098d2:	2308      	movs	r3, #8
 80098d4:	425b      	negs	r3, r3
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <vPortFree+0xb8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <vPortFree+0x44>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60fb      	str	r3, [r7, #12]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00a      	beq.n	8009922 <vPortFree+0x62>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60bb      	str	r3, [r7, #8]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	4b14      	ldr	r3, [pc, #80]	; (8009978 <vPortFree+0xb8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4013      	ands	r3, r2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01e      	beq.n	800996e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11a      	bne.n	800996e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <vPortFree+0xb8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	43db      	mvns	r3, r3
 8009942:	401a      	ands	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009948:	f7fe fcf2 	bl	8008330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <vPortFree+0xbc>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4413      	add	r3, r2
 8009956:	4a09      	ldr	r2, [pc, #36]	; (800997c <vPortFree+0xbc>)
 8009958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 f874 	bl	8009a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <vPortFree+0xc0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	4a06      	ldr	r2, [pc, #24]	; (8009980 <vPortFree+0xc0>)
 8009968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800996a:	f7fe fcef 	bl	800834c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800996e:	bf00      	nop
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20001358 	.word	0x20001358
 800997c:	20001348 	.word	0x20001348
 8009980:	20001354 	.word	0x20001354

08009984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800998a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800998e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009990:	4b27      	ldr	r3, [pc, #156]	; (8009a30 <prvHeapInit+0xac>)
 8009992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00c      	beq.n	80099b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3307      	adds	r3, #7
 80099a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0307 	bic.w	r3, r3, #7
 80099aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	4a1f      	ldr	r2, [pc, #124]	; (8009a30 <prvHeapInit+0xac>)
 80099b4:	4413      	add	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099bc:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <prvHeapInit+0xb0>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099c2:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <prvHeapInit+0xb0>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	4413      	add	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099d0:	2208      	movs	r2, #8
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0307 	bic.w	r3, r3, #7
 80099de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <prvHeapInit+0xb4>)
 80099e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <prvHeapInit+0xb4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2200      	movs	r2, #0
 80099ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <prvHeapInit+0xb4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a04:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <prvHeapInit+0xb4>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <prvHeapInit+0xb8>)
 8009a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <prvHeapInit+0xbc>)
 8009a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <prvHeapInit+0xc0>)
 8009a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a22:	601a      	str	r2, [r3, #0]
}
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20000784 	.word	0x20000784
 8009a34:	2000133c 	.word	0x2000133c
 8009a38:	20001344 	.word	0x20001344
 8009a3c:	2000134c 	.word	0x2000134c
 8009a40:	20001348 	.word	0x20001348
 8009a44:	20001358 	.word	0x20001358

08009a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a50:	4b28      	ldr	r3, [pc, #160]	; (8009af4 <prvInsertBlockIntoFreeList+0xac>)
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e002      	b.n	8009a5c <prvInsertBlockIntoFreeList+0x14>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d8f7      	bhi.n	8009a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d108      	bne.n	8009a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	441a      	add	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	441a      	add	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d118      	bne.n	8009ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d00d      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	e008      	b.n	8009ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	e003      	b.n	8009ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d002      	beq.n	8009ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ae6:	bf00      	nop
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	2000133c 	.word	0x2000133c
 8009af8:	20001344 	.word	0x20001344

08009afc <__errno>:
 8009afc:	4b01      	ldr	r3, [pc, #4]	; (8009b04 <__errno+0x8>)
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	2000006c 	.word	0x2000006c

08009b08 <__libc_init_array>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	4d0d      	ldr	r5, [pc, #52]	; (8009b40 <__libc_init_array+0x38>)
 8009b0c:	4c0d      	ldr	r4, [pc, #52]	; (8009b44 <__libc_init_array+0x3c>)
 8009b0e:	1b64      	subs	r4, r4, r5
 8009b10:	10a4      	asrs	r4, r4, #2
 8009b12:	2600      	movs	r6, #0
 8009b14:	42a6      	cmp	r6, r4
 8009b16:	d109      	bne.n	8009b2c <__libc_init_array+0x24>
 8009b18:	4d0b      	ldr	r5, [pc, #44]	; (8009b48 <__libc_init_array+0x40>)
 8009b1a:	4c0c      	ldr	r4, [pc, #48]	; (8009b4c <__libc_init_array+0x44>)
 8009b1c:	f002 ff02 	bl	800c924 <_init>
 8009b20:	1b64      	subs	r4, r4, r5
 8009b22:	10a4      	asrs	r4, r4, #2
 8009b24:	2600      	movs	r6, #0
 8009b26:	42a6      	cmp	r6, r4
 8009b28:	d105      	bne.n	8009b36 <__libc_init_array+0x2e>
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b30:	4798      	blx	r3
 8009b32:	3601      	adds	r6, #1
 8009b34:	e7ee      	b.n	8009b14 <__libc_init_array+0xc>
 8009b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3a:	4798      	blx	r3
 8009b3c:	3601      	adds	r6, #1
 8009b3e:	e7f2      	b.n	8009b26 <__libc_init_array+0x1e>
 8009b40:	0800d00c 	.word	0x0800d00c
 8009b44:	0800d00c 	.word	0x0800d00c
 8009b48:	0800d00c 	.word	0x0800d00c
 8009b4c:	0800d010 	.word	0x0800d010

08009b50 <memcpy>:
 8009b50:	440a      	add	r2, r1
 8009b52:	4291      	cmp	r1, r2
 8009b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b58:	d100      	bne.n	8009b5c <memcpy+0xc>
 8009b5a:	4770      	bx	lr
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b66:	4291      	cmp	r1, r2
 8009b68:	d1f9      	bne.n	8009b5e <memcpy+0xe>
 8009b6a:	bd10      	pop	{r4, pc}

08009b6c <memset>:
 8009b6c:	4402      	add	r2, r0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d100      	bne.n	8009b76 <memset+0xa>
 8009b74:	4770      	bx	lr
 8009b76:	f803 1b01 	strb.w	r1, [r3], #1
 8009b7a:	e7f9      	b.n	8009b70 <memset+0x4>

08009b7c <__cvt>:
 8009b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	ec55 4b10 	vmov	r4, r5, d0
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	460e      	mov	r6, r1
 8009b88:	4619      	mov	r1, r3
 8009b8a:	462b      	mov	r3, r5
 8009b8c:	bfbb      	ittet	lt
 8009b8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b92:	461d      	movlt	r5, r3
 8009b94:	2300      	movge	r3, #0
 8009b96:	232d      	movlt	r3, #45	; 0x2d
 8009b98:	700b      	strb	r3, [r1, #0]
 8009b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ba0:	4691      	mov	r9, r2
 8009ba2:	f023 0820 	bic.w	r8, r3, #32
 8009ba6:	bfbc      	itt	lt
 8009ba8:	4622      	movlt	r2, r4
 8009baa:	4614      	movlt	r4, r2
 8009bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bb0:	d005      	beq.n	8009bbe <__cvt+0x42>
 8009bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bb6:	d100      	bne.n	8009bba <__cvt+0x3e>
 8009bb8:	3601      	adds	r6, #1
 8009bba:	2102      	movs	r1, #2
 8009bbc:	e000      	b.n	8009bc0 <__cvt+0x44>
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	ab03      	add	r3, sp, #12
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	ab02      	add	r3, sp, #8
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	ec45 4b10 	vmov	d0, r4, r5
 8009bcc:	4653      	mov	r3, sl
 8009bce:	4632      	mov	r2, r6
 8009bd0:	f000 fcea 	bl	800a5a8 <_dtoa_r>
 8009bd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bd8:	4607      	mov	r7, r0
 8009bda:	d102      	bne.n	8009be2 <__cvt+0x66>
 8009bdc:	f019 0f01 	tst.w	r9, #1
 8009be0:	d022      	beq.n	8009c28 <__cvt+0xac>
 8009be2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be6:	eb07 0906 	add.w	r9, r7, r6
 8009bea:	d110      	bne.n	8009c0e <__cvt+0x92>
 8009bec:	783b      	ldrb	r3, [r7, #0]
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	d10a      	bne.n	8009c08 <__cvt+0x8c>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 ff7d 	bl	8000af8 <__aeabi_dcmpeq>
 8009bfe:	b918      	cbnz	r0, 8009c08 <__cvt+0x8c>
 8009c00:	f1c6 0601 	rsb	r6, r6, #1
 8009c04:	f8ca 6000 	str.w	r6, [sl]
 8009c08:	f8da 3000 	ldr.w	r3, [sl]
 8009c0c:	4499      	add	r9, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2300      	movs	r3, #0
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 ff6f 	bl	8000af8 <__aeabi_dcmpeq>
 8009c1a:	b108      	cbz	r0, 8009c20 <__cvt+0xa4>
 8009c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c20:	2230      	movs	r2, #48	; 0x30
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	454b      	cmp	r3, r9
 8009c26:	d307      	bcc.n	8009c38 <__cvt+0xbc>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c2c:	1bdb      	subs	r3, r3, r7
 8009c2e:	4638      	mov	r0, r7
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	b004      	add	sp, #16
 8009c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c38:	1c59      	adds	r1, r3, #1
 8009c3a:	9103      	str	r1, [sp, #12]
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e7f0      	b.n	8009c22 <__cvt+0xa6>

08009c40 <__exponent>:
 8009c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c42:	4603      	mov	r3, r0
 8009c44:	2900      	cmp	r1, #0
 8009c46:	bfb8      	it	lt
 8009c48:	4249      	neglt	r1, r1
 8009c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c4e:	bfb4      	ite	lt
 8009c50:	222d      	movlt	r2, #45	; 0x2d
 8009c52:	222b      	movge	r2, #43	; 0x2b
 8009c54:	2909      	cmp	r1, #9
 8009c56:	7042      	strb	r2, [r0, #1]
 8009c58:	dd2a      	ble.n	8009cb0 <__exponent+0x70>
 8009c5a:	f10d 0407 	add.w	r4, sp, #7
 8009c5e:	46a4      	mov	ip, r4
 8009c60:	270a      	movs	r7, #10
 8009c62:	46a6      	mov	lr, r4
 8009c64:	460a      	mov	r2, r1
 8009c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c6e:	3530      	adds	r5, #48	; 0x30
 8009c70:	2a63      	cmp	r2, #99	; 0x63
 8009c72:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	dcf1      	bgt.n	8009c62 <__exponent+0x22>
 8009c7e:	3130      	adds	r1, #48	; 0x30
 8009c80:	f1ae 0502 	sub.w	r5, lr, #2
 8009c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c88:	1c44      	adds	r4, r0, #1
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4561      	cmp	r1, ip
 8009c8e:	d30a      	bcc.n	8009ca6 <__exponent+0x66>
 8009c90:	f10d 0209 	add.w	r2, sp, #9
 8009c94:	eba2 020e 	sub.w	r2, r2, lr
 8009c98:	4565      	cmp	r5, ip
 8009c9a:	bf88      	it	hi
 8009c9c:	2200      	movhi	r2, #0
 8009c9e:	4413      	add	r3, r2
 8009ca0:	1a18      	subs	r0, r3, r0
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cae:	e7ed      	b.n	8009c8c <__exponent+0x4c>
 8009cb0:	2330      	movs	r3, #48	; 0x30
 8009cb2:	3130      	adds	r1, #48	; 0x30
 8009cb4:	7083      	strb	r3, [r0, #2]
 8009cb6:	70c1      	strb	r1, [r0, #3]
 8009cb8:	1d03      	adds	r3, r0, #4
 8009cba:	e7f1      	b.n	8009ca0 <__exponent+0x60>

08009cbc <_printf_float>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	ed2d 8b02 	vpush	{d8}
 8009cc4:	b08d      	sub	sp, #52	; 0x34
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ccc:	4616      	mov	r6, r2
 8009cce:	461f      	mov	r7, r3
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	f001 fa57 	bl	800b184 <_localeconv_r>
 8009cd6:	f8d0 a000 	ldr.w	sl, [r0]
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f7f6 fa90 	bl	8000200 <strlen>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	f103 0208 	add.w	r2, r3, #8
 8009cfa:	f8c8 2000 	str.w	r2, [r8]
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d14:	ee08 0a10 	vmov	s16, r0
 8009d18:	4b9f      	ldr	r3, [pc, #636]	; (8009f98 <_printf_float+0x2dc>)
 8009d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d22:	f7f6 ff1b 	bl	8000b5c <__aeabi_dcmpun>
 8009d26:	bb88      	cbnz	r0, 8009d8c <_printf_float+0xd0>
 8009d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d2c:	4b9a      	ldr	r3, [pc, #616]	; (8009f98 <_printf_float+0x2dc>)
 8009d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d32:	f7f6 fef5 	bl	8000b20 <__aeabi_dcmple>
 8009d36:	bb48      	cbnz	r0, 8009d8c <_printf_float+0xd0>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4649      	mov	r1, r9
 8009d40:	f7f6 fee4 	bl	8000b0c <__aeabi_dcmplt>
 8009d44:	b110      	cbz	r0, 8009d4c <_printf_float+0x90>
 8009d46:	232d      	movs	r3, #45	; 0x2d
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	4b93      	ldr	r3, [pc, #588]	; (8009f9c <_printf_float+0x2e0>)
 8009d4e:	4894      	ldr	r0, [pc, #592]	; (8009fa0 <_printf_float+0x2e4>)
 8009d50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d54:	bf94      	ite	ls
 8009d56:	4698      	movls	r8, r3
 8009d58:	4680      	movhi	r8, r0
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	9b05      	ldr	r3, [sp, #20]
 8009d60:	f023 0204 	bic.w	r2, r3, #4
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	f04f 0900 	mov.w	r9, #0
 8009d6a:	9700      	str	r7, [sp, #0]
 8009d6c:	4633      	mov	r3, r6
 8009d6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f9d8 	bl	800a128 <_printf_common>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f040 8090 	bne.w	8009e9e <_printf_float+0x1e2>
 8009d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d82:	b00d      	add	sp, #52	; 0x34
 8009d84:	ecbd 8b02 	vpop	{d8}
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	464b      	mov	r3, r9
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fee2 	bl	8000b5c <__aeabi_dcmpun>
 8009d98:	b140      	cbz	r0, 8009dac <_printf_float+0xf0>
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bfbc      	itt	lt
 8009da0:	232d      	movlt	r3, #45	; 0x2d
 8009da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009da6:	487f      	ldr	r0, [pc, #508]	; (8009fa4 <_printf_float+0x2e8>)
 8009da8:	4b7f      	ldr	r3, [pc, #508]	; (8009fa8 <_printf_float+0x2ec>)
 8009daa:	e7d1      	b.n	8009d50 <_printf_float+0x94>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009db2:	9206      	str	r2, [sp, #24]
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	d13f      	bne.n	8009e38 <_printf_float+0x17c>
 8009db8:	2306      	movs	r3, #6
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	9b05      	ldr	r3, [sp, #20]
 8009dbe:	6861      	ldr	r1, [r4, #4]
 8009dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8009dca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dce:	ab09      	add	r3, sp, #36	; 0x24
 8009dd0:	ec49 8b10 	vmov	d0, r8, r9
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	6022      	str	r2, [r4, #0]
 8009dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f7ff fecd 	bl	8009b7c <__cvt>
 8009de2:	9b06      	ldr	r3, [sp, #24]
 8009de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de6:	2b47      	cmp	r3, #71	; 0x47
 8009de8:	4680      	mov	r8, r0
 8009dea:	d108      	bne.n	8009dfe <_printf_float+0x142>
 8009dec:	1cc8      	adds	r0, r1, #3
 8009dee:	db02      	blt.n	8009df6 <_printf_float+0x13a>
 8009df0:	6863      	ldr	r3, [r4, #4]
 8009df2:	4299      	cmp	r1, r3
 8009df4:	dd41      	ble.n	8009e7a <_printf_float+0x1be>
 8009df6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dfa:	fa5f fb8b 	uxtb.w	fp, fp
 8009dfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e02:	d820      	bhi.n	8009e46 <_printf_float+0x18a>
 8009e04:	3901      	subs	r1, #1
 8009e06:	465a      	mov	r2, fp
 8009e08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e0c:	9109      	str	r1, [sp, #36]	; 0x24
 8009e0e:	f7ff ff17 	bl	8009c40 <__exponent>
 8009e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e14:	1813      	adds	r3, r2, r0
 8009e16:	2a01      	cmp	r2, #1
 8009e18:	4681      	mov	r9, r0
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	dc02      	bgt.n	8009e24 <_printf_float+0x168>
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	07d2      	lsls	r2, r2, #31
 8009e22:	d501      	bpl.n	8009e28 <_printf_float+0x16c>
 8009e24:	3301      	adds	r3, #1
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d09c      	beq.n	8009d6a <_printf_float+0xae>
 8009e30:	232d      	movs	r3, #45	; 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e36:	e798      	b.n	8009d6a <_printf_float+0xae>
 8009e38:	9a06      	ldr	r2, [sp, #24]
 8009e3a:	2a47      	cmp	r2, #71	; 0x47
 8009e3c:	d1be      	bne.n	8009dbc <_printf_float+0x100>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1bc      	bne.n	8009dbc <_printf_float+0x100>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7b9      	b.n	8009dba <_printf_float+0xfe>
 8009e46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e4a:	d118      	bne.n	8009e7e <_printf_float+0x1c2>
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	6863      	ldr	r3, [r4, #4]
 8009e50:	dd0b      	ble.n	8009e6a <_printf_float+0x1ae>
 8009e52:	6121      	str	r1, [r4, #16]
 8009e54:	b913      	cbnz	r3, 8009e5c <_printf_float+0x1a0>
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	07d0      	lsls	r0, r2, #31
 8009e5a:	d502      	bpl.n	8009e62 <_printf_float+0x1a6>
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	440b      	add	r3, r1
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e64:	f04f 0900 	mov.w	r9, #0
 8009e68:	e7de      	b.n	8009e28 <_printf_float+0x16c>
 8009e6a:	b913      	cbnz	r3, 8009e72 <_printf_float+0x1b6>
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	07d2      	lsls	r2, r2, #31
 8009e70:	d501      	bpl.n	8009e76 <_printf_float+0x1ba>
 8009e72:	3302      	adds	r3, #2
 8009e74:	e7f4      	b.n	8009e60 <_printf_float+0x1a4>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e7f2      	b.n	8009e60 <_printf_float+0x1a4>
 8009e7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	4299      	cmp	r1, r3
 8009e82:	db05      	blt.n	8009e90 <_printf_float+0x1d4>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	6121      	str	r1, [r4, #16]
 8009e88:	07d8      	lsls	r0, r3, #31
 8009e8a:	d5ea      	bpl.n	8009e62 <_printf_float+0x1a6>
 8009e8c:	1c4b      	adds	r3, r1, #1
 8009e8e:	e7e7      	b.n	8009e60 <_printf_float+0x1a4>
 8009e90:	2900      	cmp	r1, #0
 8009e92:	bfd4      	ite	le
 8009e94:	f1c1 0202 	rsble	r2, r1, #2
 8009e98:	2201      	movgt	r2, #1
 8009e9a:	4413      	add	r3, r2
 8009e9c:	e7e0      	b.n	8009e60 <_printf_float+0x1a4>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	055a      	lsls	r2, r3, #21
 8009ea2:	d407      	bmi.n	8009eb4 <_printf_float+0x1f8>
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d12c      	bne.n	8009f0c <_printf_float+0x250>
 8009eb2:	e764      	b.n	8009d7e <_printf_float+0xc2>
 8009eb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eb8:	f240 80e0 	bls.w	800a07c <_printf_float+0x3c0>
 8009ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f7f6 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d034      	beq.n	8009f36 <_printf_float+0x27a>
 8009ecc:	4a37      	ldr	r2, [pc, #220]	; (8009fac <_printf_float+0x2f0>)
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f af51 	beq.w	8009d7e <_printf_float+0xc2>
 8009edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	db02      	blt.n	8009eea <_printf_float+0x22e>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	07d8      	lsls	r0, r3, #31
 8009ee8:	d510      	bpl.n	8009f0c <_printf_float+0x250>
 8009eea:	ee18 3a10 	vmov	r3, s16
 8009eee:	4652      	mov	r2, sl
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af41 	beq.w	8009d7e <_printf_float+0xc2>
 8009efc:	f04f 0800 	mov.w	r8, #0
 8009f00:	f104 091a 	add.w	r9, r4, #26
 8009f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f06:	3b01      	subs	r3, #1
 8009f08:	4543      	cmp	r3, r8
 8009f0a:	dc09      	bgt.n	8009f20 <_printf_float+0x264>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	079b      	lsls	r3, r3, #30
 8009f10:	f100 8105 	bmi.w	800a11e <_printf_float+0x462>
 8009f14:	68e0      	ldr	r0, [r4, #12]
 8009f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f18:	4298      	cmp	r0, r3
 8009f1a:	bfb8      	it	lt
 8009f1c:	4618      	movlt	r0, r3
 8009f1e:	e730      	b.n	8009d82 <_printf_float+0xc6>
 8009f20:	2301      	movs	r3, #1
 8009f22:	464a      	mov	r2, r9
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af27 	beq.w	8009d7e <_printf_float+0xc2>
 8009f30:	f108 0801 	add.w	r8, r8, #1
 8009f34:	e7e6      	b.n	8009f04 <_printf_float+0x248>
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dc39      	bgt.n	8009fb0 <_printf_float+0x2f4>
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	; (8009fac <_printf_float+0x2f0>)
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af19 	beq.w	8009d7e <_printf_float+0xc2>
 8009f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d102      	bne.n	8009f5a <_printf_float+0x29e>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d5d8      	bpl.n	8009f0c <_printf_float+0x250>
 8009f5a:	ee18 3a10 	vmov	r3, s16
 8009f5e:	4652      	mov	r2, sl
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af09 	beq.w	8009d7e <_printf_float+0xc2>
 8009f6c:	f04f 0900 	mov.w	r9, #0
 8009f70:	f104 0a1a 	add.w	sl, r4, #26
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	425b      	negs	r3, r3
 8009f78:	454b      	cmp	r3, r9
 8009f7a:	dc01      	bgt.n	8009f80 <_printf_float+0x2c4>
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	e792      	b.n	8009ea6 <_printf_float+0x1ea>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4652      	mov	r2, sl
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f aef7 	beq.w	8009d7e <_printf_float+0xc2>
 8009f90:	f109 0901 	add.w	r9, r9, #1
 8009f94:	e7ee      	b.n	8009f74 <_printf_float+0x2b8>
 8009f96:	bf00      	nop
 8009f98:	7fefffff 	.word	0x7fefffff
 8009f9c:	0800cc2c 	.word	0x0800cc2c
 8009fa0:	0800cc30 	.word	0x0800cc30
 8009fa4:	0800cc38 	.word	0x0800cc38
 8009fa8:	0800cc34 	.word	0x0800cc34
 8009fac:	0800cc3c 	.word	0x0800cc3c
 8009fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	bfa8      	it	ge
 8009fb8:	461a      	movge	r2, r3
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	4691      	mov	r9, r2
 8009fbe:	dc37      	bgt.n	800a030 <_printf_float+0x374>
 8009fc0:	f04f 0b00 	mov.w	fp, #0
 8009fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fc8:	f104 021a 	add.w	r2, r4, #26
 8009fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	eba3 0309 	sub.w	r3, r3, r9
 8009fd4:	455b      	cmp	r3, fp
 8009fd6:	dc33      	bgt.n	800a040 <_printf_float+0x384>
 8009fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	db3b      	blt.n	800a058 <_printf_float+0x39c>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07da      	lsls	r2, r3, #31
 8009fe4:	d438      	bmi.n	800a058 <_printf_float+0x39c>
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	9a05      	ldr	r2, [sp, #20]
 8009fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fec:	1a9a      	subs	r2, r3, r2
 8009fee:	eba3 0901 	sub.w	r9, r3, r1
 8009ff2:	4591      	cmp	r9, r2
 8009ff4:	bfa8      	it	ge
 8009ff6:	4691      	movge	r9, r2
 8009ff8:	f1b9 0f00 	cmp.w	r9, #0
 8009ffc:	dc35      	bgt.n	800a06a <_printf_float+0x3ae>
 8009ffe:	f04f 0800 	mov.w	r8, #0
 800a002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a006:	f104 0a1a 	add.w	sl, r4, #26
 800a00a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	eba3 0309 	sub.w	r3, r3, r9
 800a014:	4543      	cmp	r3, r8
 800a016:	f77f af79 	ble.w	8009f0c <_printf_float+0x250>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4652      	mov	r2, sl
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f aeaa 	beq.w	8009d7e <_printf_float+0xc2>
 800a02a:	f108 0801 	add.w	r8, r8, #1
 800a02e:	e7ec      	b.n	800a00a <_printf_float+0x34e>
 800a030:	4613      	mov	r3, r2
 800a032:	4631      	mov	r1, r6
 800a034:	4642      	mov	r2, r8
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c0      	bne.n	8009fc0 <_printf_float+0x304>
 800a03e:	e69e      	b.n	8009d7e <_printf_float+0xc2>
 800a040:	2301      	movs	r3, #1
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	9205      	str	r2, [sp, #20]
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f ae97 	beq.w	8009d7e <_printf_float+0xc2>
 800a050:	9a05      	ldr	r2, [sp, #20]
 800a052:	f10b 0b01 	add.w	fp, fp, #1
 800a056:	e7b9      	b.n	8009fcc <_printf_float+0x310>
 800a058:	ee18 3a10 	vmov	r3, s16
 800a05c:	4652      	mov	r2, sl
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	d1be      	bne.n	8009fe6 <_printf_float+0x32a>
 800a068:	e689      	b.n	8009d7e <_printf_float+0xc2>
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	464b      	mov	r3, r9
 800a06e:	4442      	add	r2, r8
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	d1c1      	bne.n	8009ffe <_printf_float+0x342>
 800a07a:	e680      	b.n	8009d7e <_printf_float+0xc2>
 800a07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a07e:	2a01      	cmp	r2, #1
 800a080:	dc01      	bgt.n	800a086 <_printf_float+0x3ca>
 800a082:	07db      	lsls	r3, r3, #31
 800a084:	d538      	bpl.n	800a0f8 <_printf_float+0x43c>
 800a086:	2301      	movs	r3, #1
 800a088:	4642      	mov	r2, r8
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	f43f ae74 	beq.w	8009d7e <_printf_float+0xc2>
 800a096:	ee18 3a10 	vmov	r3, s16
 800a09a:	4652      	mov	r2, sl
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f43f ae6b 	beq.w	8009d7e <_printf_float+0xc2>
 800a0a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f7f6 fd22 	bl	8000af8 <__aeabi_dcmpeq>
 800a0b4:	b9d8      	cbnz	r0, 800a0ee <_printf_float+0x432>
 800a0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b8:	f108 0201 	add.w	r2, r8, #1
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d10e      	bne.n	800a0e6 <_printf_float+0x42a>
 800a0c8:	e659      	b.n	8009d7e <_printf_float+0xc2>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae52 	beq.w	8009d7e <_printf_float+0xc2>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4543      	cmp	r3, r8
 800a0e4:	dcf1      	bgt.n	800a0ca <_printf_float+0x40e>
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0ec:	e6dc      	b.n	8009ea8 <_printf_float+0x1ec>
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	f104 0a1a 	add.w	sl, r4, #26
 800a0f6:	e7f2      	b.n	800a0de <_printf_float+0x422>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	e7df      	b.n	800a0be <_printf_float+0x402>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae38 	beq.w	8009d7e <_printf_float+0xc2>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	68e3      	ldr	r3, [r4, #12]
 800a114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a116:	1a5b      	subs	r3, r3, r1
 800a118:	4543      	cmp	r3, r8
 800a11a:	dcf0      	bgt.n	800a0fe <_printf_float+0x442>
 800a11c:	e6fa      	b.n	8009f14 <_printf_float+0x258>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 0919 	add.w	r9, r4, #25
 800a126:	e7f4      	b.n	800a112 <_printf_float+0x456>

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4699      	mov	r9, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a174:	1e13      	subs	r3, r2, #0
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a184:	4649      	mov	r1, r9
 800a186:	4638      	mov	r0, r7
 800a188:	47c0      	blx	r8
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	68e5      	ldr	r5, [r4, #12]
 800a192:	6832      	ldr	r2, [r6, #0]
 800a194:	f003 0306 	and.w	r3, r3, #6
 800a198:	2b04      	cmp	r3, #4
 800a19a:	bf08      	it	eq
 800a19c:	1aad      	subeq	r5, r5, r2
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c0      	blx	r8
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a20c:	2f78      	cmp	r7, #120	; 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	; 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d8 	beq.w	800a3d6 <_printf_i+0x1d2>
 800a226:	2f58      	cmp	r7, #88	; 0x58
 800a228:	f000 80a3 	beq.w	800a372 <_printf_i+0x16e>
 800a22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	; (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3bd 	.word	0x0800a3bd
 800a274:	0800a2e1 	.word	0x0800a2e1
 800a278:	0800a39f 	.word	0x0800a39f
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3df 	.word	0x0800a3df
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a3a7 	.word	0x0800a3a7
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e0a3      	b.n	800a3f8 <_printf_i+0x1f4>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	6829      	ldr	r1, [r5, #0]
 800a2b4:	0606      	lsls	r6, r0, #24
 800a2b6:	f101 0304 	add.w	r3, r1, #4
 800a2ba:	d50a      	bpl.n	800a2d2 <_printf_i+0xce>
 800a2bc:	680e      	ldr	r6, [r1, #0]
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	2e00      	cmp	r6, #0
 800a2c2:	da03      	bge.n	800a2cc <_printf_i+0xc8>
 800a2c4:	232d      	movs	r3, #45	; 0x2d
 800a2c6:	4276      	negs	r6, r6
 800a2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2cc:	485e      	ldr	r0, [pc, #376]	; (800a448 <_printf_i+0x244>)
 800a2ce:	230a      	movs	r3, #10
 800a2d0:	e019      	b.n	800a306 <_printf_i+0x102>
 800a2d2:	680e      	ldr	r6, [r1, #0]
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2da:	bf18      	it	ne
 800a2dc:	b236      	sxthne	r6, r6
 800a2de:	e7ef      	b.n	800a2c0 <_printf_i+0xbc>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	6029      	str	r1, [r5, #0]
 800a2e8:	0601      	lsls	r1, r0, #24
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0xec>
 800a2ec:	681e      	ldr	r6, [r3, #0]
 800a2ee:	e002      	b.n	800a2f6 <_printf_i+0xf2>
 800a2f0:	0646      	lsls	r6, r0, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0xe8>
 800a2f4:	881e      	ldrh	r6, [r3, #0]
 800a2f6:	4854      	ldr	r0, [pc, #336]	; (800a448 <_printf_i+0x244>)
 800a2f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2308      	moveq	r3, #8
 800a2fe:	230a      	movne	r3, #10
 800a300:	2100      	movs	r1, #0
 800a302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a306:	6865      	ldr	r5, [r4, #4]
 800a308:	60a5      	str	r5, [r4, #8]
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	bfa2      	ittt	ge
 800a30e:	6821      	ldrge	r1, [r4, #0]
 800a310:	f021 0104 	bicge.w	r1, r1, #4
 800a314:	6021      	strge	r1, [r4, #0]
 800a316:	b90e      	cbnz	r6, 800a31c <_printf_i+0x118>
 800a318:	2d00      	cmp	r5, #0
 800a31a:	d04d      	beq.n	800a3b8 <_printf_i+0x1b4>
 800a31c:	4615      	mov	r5, r2
 800a31e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a322:	fb03 6711 	mls	r7, r3, r1, r6
 800a326:	5dc7      	ldrb	r7, [r0, r7]
 800a328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a32c:	4637      	mov	r7, r6
 800a32e:	42bb      	cmp	r3, r7
 800a330:	460e      	mov	r6, r1
 800a332:	d9f4      	bls.n	800a31e <_printf_i+0x11a>
 800a334:	2b08      	cmp	r3, #8
 800a336:	d10b      	bne.n	800a350 <_printf_i+0x14c>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	07de      	lsls	r6, r3, #31
 800a33c:	d508      	bpl.n	800a350 <_printf_i+0x14c>
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	6861      	ldr	r1, [r4, #4]
 800a342:	4299      	cmp	r1, r3
 800a344:	bfde      	ittt	le
 800a346:	2330      	movle	r3, #48	; 0x30
 800a348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a34c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a350:	1b52      	subs	r2, r2, r5
 800a352:	6122      	str	r2, [r4, #16]
 800a354:	f8cd a000 	str.w	sl, [sp]
 800a358:	464b      	mov	r3, r9
 800a35a:	aa03      	add	r2, sp, #12
 800a35c:	4621      	mov	r1, r4
 800a35e:	4640      	mov	r0, r8
 800a360:	f7ff fee2 	bl	800a128 <_printf_common>
 800a364:	3001      	adds	r0, #1
 800a366:	d14c      	bne.n	800a402 <_printf_i+0x1fe>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a36c:	b004      	add	sp, #16
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	4835      	ldr	r0, [pc, #212]	; (800a448 <_printf_i+0x244>)
 800a374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a378:	6829      	ldr	r1, [r5, #0]
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a380:	6029      	str	r1, [r5, #0]
 800a382:	061d      	lsls	r5, r3, #24
 800a384:	d514      	bpl.n	800a3b0 <_printf_i+0x1ac>
 800a386:	07df      	lsls	r7, r3, #31
 800a388:	bf44      	itt	mi
 800a38a:	f043 0320 	orrmi.w	r3, r3, #32
 800a38e:	6023      	strmi	r3, [r4, #0]
 800a390:	b91e      	cbnz	r6, 800a39a <_printf_i+0x196>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f023 0320 	bic.w	r3, r3, #32
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	2310      	movs	r3, #16
 800a39c:	e7b0      	b.n	800a300 <_printf_i+0xfc>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f043 0320 	orr.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	2378      	movs	r3, #120	; 0x78
 800a3a8:	4828      	ldr	r0, [pc, #160]	; (800a44c <_printf_i+0x248>)
 800a3aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ae:	e7e3      	b.n	800a378 <_printf_i+0x174>
 800a3b0:	0659      	lsls	r1, r3, #25
 800a3b2:	bf48      	it	mi
 800a3b4:	b2b6      	uxthmi	r6, r6
 800a3b6:	e7e6      	b.n	800a386 <_printf_i+0x182>
 800a3b8:	4615      	mov	r5, r2
 800a3ba:	e7bb      	b.n	800a334 <_printf_i+0x130>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	6826      	ldr	r6, [r4, #0]
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	1d18      	adds	r0, r3, #4
 800a3c4:	6028      	str	r0, [r5, #0]
 800a3c6:	0635      	lsls	r5, r6, #24
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	d501      	bpl.n	800a3d0 <_printf_i+0x1cc>
 800a3cc:	6019      	str	r1, [r3, #0]
 800a3ce:	e002      	b.n	800a3d6 <_printf_i+0x1d2>
 800a3d0:	0670      	lsls	r0, r6, #25
 800a3d2:	d5fb      	bpl.n	800a3cc <_printf_i+0x1c8>
 800a3d4:	8019      	strh	r1, [r3, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	4615      	mov	r5, r2
 800a3dc:	e7ba      	b.n	800a354 <_printf_i+0x150>
 800a3de:	682b      	ldr	r3, [r5, #0]
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	602a      	str	r2, [r5, #0]
 800a3e4:	681d      	ldr	r5, [r3, #0]
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f7f5 ff10 	bl	8000210 <memchr>
 800a3f0:	b108      	cbz	r0, 800a3f6 <_printf_i+0x1f2>
 800a3f2:	1b40      	subs	r0, r0, r5
 800a3f4:	6060      	str	r0, [r4, #4]
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a400:	e7a8      	b.n	800a354 <_printf_i+0x150>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	462a      	mov	r2, r5
 800a406:	4649      	mov	r1, r9
 800a408:	4640      	mov	r0, r8
 800a40a:	47d0      	blx	sl
 800a40c:	3001      	adds	r0, #1
 800a40e:	d0ab      	beq.n	800a368 <_printf_i+0x164>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	079b      	lsls	r3, r3, #30
 800a414:	d413      	bmi.n	800a43e <_printf_i+0x23a>
 800a416:	68e0      	ldr	r0, [r4, #12]
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	4298      	cmp	r0, r3
 800a41c:	bfb8      	it	lt
 800a41e:	4618      	movlt	r0, r3
 800a420:	e7a4      	b.n	800a36c <_printf_i+0x168>
 800a422:	2301      	movs	r3, #1
 800a424:	4632      	mov	r2, r6
 800a426:	4649      	mov	r1, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	47d0      	blx	sl
 800a42c:	3001      	adds	r0, #1
 800a42e:	d09b      	beq.n	800a368 <_printf_i+0x164>
 800a430:	3501      	adds	r5, #1
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	9903      	ldr	r1, [sp, #12]
 800a436:	1a5b      	subs	r3, r3, r1
 800a438:	42ab      	cmp	r3, r5
 800a43a:	dcf2      	bgt.n	800a422 <_printf_i+0x21e>
 800a43c:	e7eb      	b.n	800a416 <_printf_i+0x212>
 800a43e:	2500      	movs	r5, #0
 800a440:	f104 0619 	add.w	r6, r4, #25
 800a444:	e7f5      	b.n	800a432 <_printf_i+0x22e>
 800a446:	bf00      	nop
 800a448:	0800cc3e 	.word	0x0800cc3e
 800a44c:	0800cc4f 	.word	0x0800cc4f

0800a450 <siprintf>:
 800a450:	b40e      	push	{r1, r2, r3}
 800a452:	b500      	push	{lr}
 800a454:	b09c      	sub	sp, #112	; 0x70
 800a456:	ab1d      	add	r3, sp, #116	; 0x74
 800a458:	9002      	str	r0, [sp, #8]
 800a45a:	9006      	str	r0, [sp, #24]
 800a45c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a460:	4809      	ldr	r0, [pc, #36]	; (800a488 <siprintf+0x38>)
 800a462:	9107      	str	r1, [sp, #28]
 800a464:	9104      	str	r1, [sp, #16]
 800a466:	4909      	ldr	r1, [pc, #36]	; (800a48c <siprintf+0x3c>)
 800a468:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	6800      	ldr	r0, [r0, #0]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	a902      	add	r1, sp, #8
 800a474:	f001 fb68 	bl	800bb48 <_svfiprintf_r>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	b01c      	add	sp, #112	; 0x70
 800a480:	f85d eb04 	ldr.w	lr, [sp], #4
 800a484:	b003      	add	sp, #12
 800a486:	4770      	bx	lr
 800a488:	2000006c 	.word	0x2000006c
 800a48c:	ffff0208 	.word	0xffff0208

0800a490 <quorem>:
 800a490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	6903      	ldr	r3, [r0, #16]
 800a496:	690c      	ldr	r4, [r1, #16]
 800a498:	42a3      	cmp	r3, r4
 800a49a:	4607      	mov	r7, r0
 800a49c:	f2c0 8081 	blt.w	800a5a2 <quorem+0x112>
 800a4a0:	3c01      	subs	r4, #1
 800a4a2:	f101 0814 	add.w	r8, r1, #20
 800a4a6:	f100 0514 	add.w	r5, r0, #20
 800a4aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4c8:	d331      	bcc.n	800a52e <quorem+0x9e>
 800a4ca:	f04f 0e00 	mov.w	lr, #0
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	46ac      	mov	ip, r5
 800a4d2:	46f2      	mov	sl, lr
 800a4d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4d8:	b293      	uxth	r3, r2
 800a4da:	fb06 e303 	mla	r3, r6, r3, lr
 800a4de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e8:	f8dc a000 	ldr.w	sl, [ip]
 800a4ec:	0c12      	lsrs	r2, r2, #16
 800a4ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a4f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	9b00      	ldr	r3, [sp, #0]
 800a4fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4fe:	b292      	uxth	r2, r2
 800a500:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a508:	f8bd 3000 	ldrh.w	r3, [sp]
 800a50c:	4581      	cmp	r9, r0
 800a50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a512:	f84c 3b04 	str.w	r3, [ip], #4
 800a516:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a51a:	d2db      	bcs.n	800a4d4 <quorem+0x44>
 800a51c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a520:	b92b      	cbnz	r3, 800a52e <quorem+0x9e>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	3b04      	subs	r3, #4
 800a526:	429d      	cmp	r5, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	d32e      	bcc.n	800a58a <quorem+0xfa>
 800a52c:	613c      	str	r4, [r7, #16]
 800a52e:	4638      	mov	r0, r7
 800a530:	f001 f8b6 	bl	800b6a0 <__mcmp>
 800a534:	2800      	cmp	r0, #0
 800a536:	db24      	blt.n	800a582 <quorem+0xf2>
 800a538:	3601      	adds	r6, #1
 800a53a:	4628      	mov	r0, r5
 800a53c:	f04f 0c00 	mov.w	ip, #0
 800a540:	f858 2b04 	ldr.w	r2, [r8], #4
 800a544:	f8d0 e000 	ldr.w	lr, [r0]
 800a548:	b293      	uxth	r3, r2
 800a54a:	ebac 0303 	sub.w	r3, ip, r3
 800a54e:	0c12      	lsrs	r2, r2, #16
 800a550:	fa13 f38e 	uxtah	r3, r3, lr
 800a554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a562:	45c1      	cmp	r9, r8
 800a564:	f840 3b04 	str.w	r3, [r0], #4
 800a568:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a56c:	d2e8      	bcs.n	800a540 <quorem+0xb0>
 800a56e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a576:	b922      	cbnz	r2, 800a582 <quorem+0xf2>
 800a578:	3b04      	subs	r3, #4
 800a57a:	429d      	cmp	r5, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	d30a      	bcc.n	800a596 <quorem+0x106>
 800a580:	613c      	str	r4, [r7, #16]
 800a582:	4630      	mov	r0, r6
 800a584:	b003      	add	sp, #12
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	6812      	ldr	r2, [r2, #0]
 800a58c:	3b04      	subs	r3, #4
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d1cc      	bne.n	800a52c <quorem+0x9c>
 800a592:	3c01      	subs	r4, #1
 800a594:	e7c7      	b.n	800a526 <quorem+0x96>
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	3b04      	subs	r3, #4
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d1f0      	bne.n	800a580 <quorem+0xf0>
 800a59e:	3c01      	subs	r4, #1
 800a5a0:	e7eb      	b.n	800a57a <quorem+0xea>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e7ee      	b.n	800a584 <quorem+0xf4>
	...

0800a5a8 <_dtoa_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ed2d 8b04 	vpush	{d8-d9}
 800a5b0:	ec57 6b10 	vmov	r6, r7, d0
 800a5b4:	b093      	sub	sp, #76	; 0x4c
 800a5b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5bc:	9106      	str	r1, [sp, #24]
 800a5be:	ee10 aa10 	vmov	sl, s0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c8:	46bb      	mov	fp, r7
 800a5ca:	b975      	cbnz	r5, 800a5ea <_dtoa_r+0x42>
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	f000 fddd 	bl	800b18c <malloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5d6:	b920      	cbnz	r0, 800a5e2 <_dtoa_r+0x3a>
 800a5d8:	4ba7      	ldr	r3, [pc, #668]	; (800a878 <_dtoa_r+0x2d0>)
 800a5da:	21ea      	movs	r1, #234	; 0xea
 800a5dc:	48a7      	ldr	r0, [pc, #668]	; (800a87c <_dtoa_r+0x2d4>)
 800a5de:	f001 fbc3 	bl	800bd68 <__assert_func>
 800a5e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5e6:	6005      	str	r5, [r0, #0]
 800a5e8:	60c5      	str	r5, [r0, #12]
 800a5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	b151      	cbz	r1, 800a606 <_dtoa_r+0x5e>
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	604a      	str	r2, [r1, #4]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4093      	lsls	r3, r2
 800a5f8:	608b      	str	r3, [r1, #8]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fe0e 	bl	800b21c <_Bfree>
 800a600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	1e3b      	subs	r3, r7, #0
 800a608:	bfaa      	itet	ge
 800a60a:	2300      	movge	r3, #0
 800a60c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a610:	f8c8 3000 	strge.w	r3, [r8]
 800a614:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <_dtoa_r+0x2d8>)
 800a616:	bfbc      	itt	lt
 800a618:	2201      	movlt	r2, #1
 800a61a:	f8c8 2000 	strlt.w	r2, [r8]
 800a61e:	ea33 030b 	bics.w	r3, r3, fp
 800a622:	d11b      	bne.n	800a65c <_dtoa_r+0xb4>
 800a624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a626:	f242 730f 	movw	r3, #9999	; 0x270f
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a630:	4333      	orrs	r3, r6
 800a632:	f000 8592 	beq.w	800b15a <_dtoa_r+0xbb2>
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	b963      	cbnz	r3, 800a654 <_dtoa_r+0xac>
 800a63a:	4b92      	ldr	r3, [pc, #584]	; (800a884 <_dtoa_r+0x2dc>)
 800a63c:	e022      	b.n	800a684 <_dtoa_r+0xdc>
 800a63e:	4b92      	ldr	r3, [pc, #584]	; (800a888 <_dtoa_r+0x2e0>)
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	3308      	adds	r3, #8
 800a644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	9801      	ldr	r0, [sp, #4]
 800a64a:	b013      	add	sp, #76	; 0x4c
 800a64c:	ecbd 8b04 	vpop	{d8-d9}
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	4b8b      	ldr	r3, [pc, #556]	; (800a884 <_dtoa_r+0x2dc>)
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	3303      	adds	r3, #3
 800a65a:	e7f3      	b.n	800a644 <_dtoa_r+0x9c>
 800a65c:	2200      	movs	r2, #0
 800a65e:	2300      	movs	r3, #0
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f6 fa48 	bl	8000af8 <__aeabi_dcmpeq>
 800a668:	ec4b ab19 	vmov	d9, sl, fp
 800a66c:	4680      	mov	r8, r0
 800a66e:	b158      	cbz	r0, 800a688 <_dtoa_r+0xe0>
 800a670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a672:	2301      	movs	r3, #1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 856b 	beq.w	800b154 <_dtoa_r+0xbac>
 800a67e:	4883      	ldr	r0, [pc, #524]	; (800a88c <_dtoa_r+0x2e4>)
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	1e43      	subs	r3, r0, #1
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e7df      	b.n	800a648 <_dtoa_r+0xa0>
 800a688:	ec4b ab10 	vmov	d0, sl, fp
 800a68c:	aa10      	add	r2, sp, #64	; 0x40
 800a68e:	a911      	add	r1, sp, #68	; 0x44
 800a690:	4620      	mov	r0, r4
 800a692:	f001 f8ab 	bl	800b7ec <__d2b>
 800a696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a69a:	ee08 0a10 	vmov	s16, r0
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	f000 8084 	beq.w	800a7ac <_dtoa_r+0x204>
 800a6a4:	ee19 3a90 	vmov	r3, s19
 800a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6b0:	4656      	mov	r6, sl
 800a6b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6be:	4b74      	ldr	r3, [pc, #464]	; (800a890 <_dtoa_r+0x2e8>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fdf7 	bl	80002b8 <__aeabi_dsub>
 800a6ca:	a365      	add	r3, pc, #404	; (adr r3, 800a860 <_dtoa_r+0x2b8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ffaa 	bl	8000628 <__aeabi_dmul>
 800a6d4:	a364      	add	r3, pc, #400	; (adr r3, 800a868 <_dtoa_r+0x2c0>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fdef 	bl	80002bc <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	f7f5 ff36 	bl	8000554 <__aeabi_i2d>
 800a6e8:	a361      	add	r3, pc, #388	; (adr r3, 800a870 <_dtoa_r+0x2c8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ff9b 	bl	8000628 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f5 fddf 	bl	80002bc <__adddf3>
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa41 	bl	8000b88 <__aeabi_d2iz>
 800a706:	2200      	movs	r2, #0
 800a708:	9000      	str	r0, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 f9fc 	bl	8000b0c <__aeabi_dcmplt>
 800a714:	b150      	cbz	r0, 800a72c <_dtoa_r+0x184>
 800a716:	9800      	ldr	r0, [sp, #0]
 800a718:	f7f5 ff1c 	bl	8000554 <__aeabi_i2d>
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	f7f6 f9ea 	bl	8000af8 <__aeabi_dcmpeq>
 800a724:	b910      	cbnz	r0, 800a72c <_dtoa_r+0x184>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b16      	cmp	r3, #22
 800a730:	d85a      	bhi.n	800a7e8 <_dtoa_r+0x240>
 800a732:	9a00      	ldr	r2, [sp, #0]
 800a734:	4b57      	ldr	r3, [pc, #348]	; (800a894 <_dtoa_r+0x2ec>)
 800a736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	ec51 0b19 	vmov	r0, r1, d9
 800a742:	f7f6 f9e3 	bl	8000b0c <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	d050      	beq.n	800a7ec <_dtoa_r+0x244>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	930b      	str	r3, [sp, #44]	; 0x2c
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	1b5d      	subs	r5, r3, r5
 800a758:	1e6b      	subs	r3, r5, #1
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	bf45      	ittet	mi
 800a75e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a762:	9304      	strmi	r3, [sp, #16]
 800a764:	2300      	movpl	r3, #0
 800a766:	2300      	movmi	r3, #0
 800a768:	bf4c      	ite	mi
 800a76a:	9305      	strmi	r3, [sp, #20]
 800a76c:	9304      	strpl	r3, [sp, #16]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db3d      	blt.n	800a7f0 <_dtoa_r+0x248>
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	9a00      	ldr	r2, [sp, #0]
 800a778:	920a      	str	r2, [sp, #40]	; 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	2300      	movs	r3, #0
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b09      	cmp	r3, #9
 800a786:	f200 8089 	bhi.w	800a89c <_dtoa_r+0x2f4>
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	bfc4      	itt	gt
 800a78e:	3b04      	subgt	r3, #4
 800a790:	9306      	strgt	r3, [sp, #24]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	f1a3 0302 	sub.w	r3, r3, #2
 800a798:	bfcc      	ite	gt
 800a79a:	2500      	movgt	r5, #0
 800a79c:	2501      	movle	r5, #1
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f200 8087 	bhi.w	800a8b2 <_dtoa_r+0x30a>
 800a7a4:	e8df f003 	tbb	[pc, r3]
 800a7a8:	59383a2d 	.word	0x59383a2d
 800a7ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7b0:	441d      	add	r5, r3
 800a7b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	bfc1      	itttt	gt
 800a7ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7ca:	bfda      	itte	le
 800a7cc:	f1c3 0320 	rsble	r3, r3, #32
 800a7d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7d4:	4318      	orrgt	r0, r3
 800a7d6:	f7f5 fead 	bl	8000534 <__aeabi_ui2d>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7e2:	3d01      	subs	r5, #1
 800a7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7e6:	e76a      	b.n	800a6be <_dtoa_r+0x116>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7b2      	b.n	800a752 <_dtoa_r+0x1aa>
 800a7ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ee:	e7b1      	b.n	800a754 <_dtoa_r+0x1ac>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	9a00      	ldr	r2, [sp, #0]
 800a7f4:	1a9b      	subs	r3, r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	4253      	negs	r3, r2
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a800:	e7bf      	b.n	800a782 <_dtoa_r+0x1da>
 800a802:	2300      	movs	r3, #0
 800a804:	9308      	str	r3, [sp, #32]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc55      	bgt.n	800a8b8 <_dtoa_r+0x310>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a812:	461a      	mov	r2, r3
 800a814:	9209      	str	r2, [sp, #36]	; 0x24
 800a816:	e00c      	b.n	800a832 <_dtoa_r+0x28a>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f3      	b.n	800a804 <_dtoa_r+0x25c>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	4413      	add	r3, r2
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	3301      	adds	r3, #1
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	bfb8      	it	lt
 800a830:	2301      	movlt	r3, #1
 800a832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a834:	2200      	movs	r2, #0
 800a836:	6042      	str	r2, [r0, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	f102 0614 	add.w	r6, r2, #20
 800a83e:	429e      	cmp	r6, r3
 800a840:	6841      	ldr	r1, [r0, #4]
 800a842:	d93d      	bls.n	800a8c0 <_dtoa_r+0x318>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fca9 	bl	800b19c <_Balloc>
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d13b      	bne.n	800a8c8 <_dtoa_r+0x320>
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <_dtoa_r+0x2f0>)
 800a852:	4602      	mov	r2, r0
 800a854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a858:	e6c0      	b.n	800a5dc <_dtoa_r+0x34>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e7df      	b.n	800a81e <_dtoa_r+0x276>
 800a85e:	bf00      	nop
 800a860:	636f4361 	.word	0x636f4361
 800a864:	3fd287a7 	.word	0x3fd287a7
 800a868:	8b60c8b3 	.word	0x8b60c8b3
 800a86c:	3fc68a28 	.word	0x3fc68a28
 800a870:	509f79fb 	.word	0x509f79fb
 800a874:	3fd34413 	.word	0x3fd34413
 800a878:	0800cc6d 	.word	0x0800cc6d
 800a87c:	0800cc84 	.word	0x0800cc84
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	0800cc69 	.word	0x0800cc69
 800a888:	0800cc60 	.word	0x0800cc60
 800a88c:	0800cc3d 	.word	0x0800cc3d
 800a890:	3ff80000 	.word	0x3ff80000
 800a894:	0800cd78 	.word	0x0800cd78
 800a898:	0800ccdf 	.word	0x0800ccdf
 800a89c:	2501      	movs	r5, #1
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	9508      	str	r5, [sp, #32]
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	e7b0      	b.n	800a814 <_dtoa_r+0x26c>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9308      	str	r3, [sp, #32]
 800a8b6:	e7f5      	b.n	800a8a4 <_dtoa_r+0x2fc>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8be:	e7b8      	b.n	800a832 <_dtoa_r+0x28a>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	6041      	str	r1, [r0, #4]
 800a8c4:	0052      	lsls	r2, r2, #1
 800a8c6:	e7b8      	b.n	800a83a <_dtoa_r+0x292>
 800a8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ca:	9a01      	ldr	r2, [sp, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	f200 809d 	bhi.w	800aa10 <_dtoa_r+0x468>
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	f000 809a 	beq.w	800aa10 <_dtoa_r+0x468>
 800a8dc:	9b00      	ldr	r3, [sp, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd32      	ble.n	800a948 <_dtoa_r+0x3a0>
 800a8e2:	4ab7      	ldr	r2, [pc, #732]	; (800abc0 <_dtoa_r+0x618>)
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8f0:	9b00      	ldr	r3, [sp, #0]
 800a8f2:	05d8      	lsls	r0, r3, #23
 800a8f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8f8:	d516      	bpl.n	800a928 <_dtoa_r+0x380>
 800a8fa:	4bb2      	ldr	r3, [pc, #712]	; (800abc4 <_dtoa_r+0x61c>)
 800a8fc:	ec51 0b19 	vmov	r0, r1, d9
 800a900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a904:	f7f5 ffba 	bl	800087c <__aeabi_ddiv>
 800a908:	f007 070f 	and.w	r7, r7, #15
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	2503      	movs	r5, #3
 800a912:	4eac      	ldr	r6, [pc, #688]	; (800abc4 <_dtoa_r+0x61c>)
 800a914:	b957      	cbnz	r7, 800a92c <_dtoa_r+0x384>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	4650      	mov	r0, sl
 800a91c:	4659      	mov	r1, fp
 800a91e:	f7f5 ffad 	bl	800087c <__aeabi_ddiv>
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	e028      	b.n	800a97a <_dtoa_r+0x3d2>
 800a928:	2502      	movs	r5, #2
 800a92a:	e7f2      	b.n	800a912 <_dtoa_r+0x36a>
 800a92c:	07f9      	lsls	r1, r7, #31
 800a92e:	d508      	bpl.n	800a942 <_dtoa_r+0x39a>
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a938:	f7f5 fe76 	bl	8000628 <__aeabi_dmul>
 800a93c:	3501      	adds	r5, #1
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	107f      	asrs	r7, r7, #1
 800a944:	3608      	adds	r6, #8
 800a946:	e7e5      	b.n	800a914 <_dtoa_r+0x36c>
 800a948:	f000 809b 	beq.w	800aa82 <_dtoa_r+0x4da>
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	4f9d      	ldr	r7, [pc, #628]	; (800abc4 <_dtoa_r+0x61c>)
 800a950:	425e      	negs	r6, r3
 800a952:	4b9b      	ldr	r3, [pc, #620]	; (800abc0 <_dtoa_r+0x618>)
 800a954:	f006 020f 	and.w	r2, r6, #15
 800a958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b19 	vmov	r0, r1, d9
 800a964:	f7f5 fe60 	bl	8000628 <__aeabi_dmul>
 800a968:	1136      	asrs	r6, r6, #4
 800a96a:	4682      	mov	sl, r0
 800a96c:	468b      	mov	fp, r1
 800a96e:	2300      	movs	r3, #0
 800a970:	2502      	movs	r5, #2
 800a972:	2e00      	cmp	r6, #0
 800a974:	d17a      	bne.n	800aa6c <_dtoa_r+0x4c4>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1d3      	bne.n	800a922 <_dtoa_r+0x37a>
 800a97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8082 	beq.w	800aa86 <_dtoa_r+0x4de>
 800a982:	4b91      	ldr	r3, [pc, #580]	; (800abc8 <_dtoa_r+0x620>)
 800a984:	2200      	movs	r2, #0
 800a986:	4650      	mov	r0, sl
 800a988:	4659      	mov	r1, fp
 800a98a:	f7f6 f8bf 	bl	8000b0c <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d079      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d076      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd36      	ble.n	800aa0c <_dtoa_r+0x464>
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	1e5f      	subs	r7, r3, #1
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4b88      	ldr	r3, [pc, #544]	; (800abcc <_dtoa_r+0x624>)
 800a9aa:	f7f5 fe3d 	bl	8000628 <__aeabi_dmul>
 800a9ae:	9e02      	ldr	r6, [sp, #8]
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f5 fdcc 	bl	8000554 <__aeabi_i2d>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	f7f5 fe32 	bl	8000628 <__aeabi_dmul>
 800a9c4:	4b82      	ldr	r3, [pc, #520]	; (800abd0 <_dtoa_r+0x628>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f7f5 fc78 	bl	80002bc <__adddf3>
 800a9cc:	46d0      	mov	r8, sl
 800a9ce:	46d9      	mov	r9, fp
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d158      	bne.n	800aa8c <_dtoa_r+0x4e4>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	; (800abd4 <_dtoa_r+0x62c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc69 	bl	80002b8 <__aeabi_dsub>
 800a9e6:	4652      	mov	r2, sl
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	f7f6 f8ab 	bl	8000b48 <__aeabi_dcmpgt>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f040 8295 	bne.w	800af22 <_dtoa_r+0x97a>
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f6 f883 	bl	8000b0c <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8289 	bne.w	800af1e <_dtoa_r+0x976>
 800aa0c:	ec5b ab19 	vmov	sl, fp, d9
 800aa10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f2c0 8148 	blt.w	800aca8 <_dtoa_r+0x700>
 800aa18:	9a00      	ldr	r2, [sp, #0]
 800aa1a:	2a0e      	cmp	r2, #14
 800aa1c:	f300 8144 	bgt.w	800aca8 <_dtoa_r+0x700>
 800aa20:	4b67      	ldr	r3, [pc, #412]	; (800abc0 <_dtoa_r+0x618>)
 800aa22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f280 80d5 	bge.w	800abdc <_dtoa_r+0x634>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f300 80d1 	bgt.w	800abdc <_dtoa_r+0x634>
 800aa3a:	f040 826f 	bne.w	800af1c <_dtoa_r+0x974>
 800aa3e:	4b65      	ldr	r3, [pc, #404]	; (800abd4 <_dtoa_r+0x62c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fdef 	bl	8000628 <__aeabi_dmul>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	f7f6 f871 	bl	8000b34 <__aeabi_dcmpge>
 800aa52:	9e03      	ldr	r6, [sp, #12]
 800aa54:	4637      	mov	r7, r6
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8245 	bne.w	800aee6 <_dtoa_r+0x93e>
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	f805 3b01 	strb.w	r3, [r5], #1
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	e240      	b.n	800aeee <_dtoa_r+0x946>
 800aa6c:	07f2      	lsls	r2, r6, #31
 800aa6e:	d505      	bpl.n	800aa7c <_dtoa_r+0x4d4>
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f7f5 fdd8 	bl	8000628 <__aeabi_dmul>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	1076      	asrs	r6, r6, #1
 800aa7e:	3708      	adds	r7, #8
 800aa80:	e777      	b.n	800a972 <_dtoa_r+0x3ca>
 800aa82:	2502      	movs	r5, #2
 800aa84:	e779      	b.n	800a97a <_dtoa_r+0x3d2>
 800aa86:	9f00      	ldr	r7, [sp, #0]
 800aa88:	9e03      	ldr	r6, [sp, #12]
 800aa8a:	e794      	b.n	800a9b6 <_dtoa_r+0x40e>
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <_dtoa_r+0x618>)
 800aa90:	4431      	add	r1, r6
 800aa92:	910d      	str	r1, [sp, #52]	; 0x34
 800aa94:	9908      	ldr	r1, [sp, #32]
 800aa96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d043      	beq.n	800ab2a <_dtoa_r+0x582>
 800aaa2:	494d      	ldr	r1, [pc, #308]	; (800abd8 <_dtoa_r+0x630>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fee9 	bl	800087c <__aeabi_ddiv>
 800aaaa:	4652      	mov	r2, sl
 800aaac:	465b      	mov	r3, fp
 800aaae:	f7f5 fc03 	bl	80002b8 <__aeabi_dsub>
 800aab2:	9d01      	ldr	r5, [sp, #4]
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	4649      	mov	r1, r9
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7f6 f864 	bl	8000b88 <__aeabi_d2iz>
 800aac0:	4606      	mov	r6, r0
 800aac2:	f7f5 fd47 	bl	8000554 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fbf3 	bl	80002b8 <__aeabi_dsub>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	f805 6b01 	strb.w	r6, [r5], #1
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	f7f6 f814 	bl	8000b0c <__aeabi_dcmplt>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d163      	bne.n	800abb0 <_dtoa_r+0x608>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4936      	ldr	r1, [pc, #216]	; (800abc8 <_dtoa_r+0x620>)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f5 fbe2 	bl	80002b8 <__aeabi_dsub>
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	f7f6 f808 	bl	8000b0c <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 80b5 	bne.w	800ac6c <_dtoa_r+0x6c4>
 800ab02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d081      	beq.n	800aa0c <_dtoa_r+0x464>
 800ab08:	4b30      	ldr	r3, [pc, #192]	; (800abcc <_dtoa_r+0x624>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fd8a 	bl	8000628 <__aeabi_dmul>
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <_dtoa_r+0x624>)
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd82 	bl	8000628 <__aeabi_dmul>
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	e7c6      	b.n	800aab8 <_dtoa_r+0x510>
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f7f5 fd7b 	bl	8000628 <__aeabi_dmul>
 800ab32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab34:	9d01      	ldr	r5, [sp, #4]
 800ab36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7f6 f822 	bl	8000b88 <__aeabi_d2iz>
 800ab44:	4606      	mov	r6, r0
 800ab46:	f7f5 fd05 	bl	8000554 <__aeabi_i2d>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fbb0 	bl	80002b8 <__aeabi_dsub>
 800ab58:	f805 6b01 	strb.w	r6, [r5], #1
 800ab5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	4680      	mov	r8, r0
 800ab62:	4689      	mov	r9, r1
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	d124      	bne.n	800abb4 <_dtoa_r+0x60c>
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <_dtoa_r+0x630>)
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	4659      	mov	r1, fp
 800ab70:	f7f5 fba4 	bl	80002bc <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 ffe4 	bl	8000b48 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d173      	bne.n	800ac6c <_dtoa_r+0x6c4>
 800ab84:	4652      	mov	r2, sl
 800ab86:	465b      	mov	r3, fp
 800ab88:	4913      	ldr	r1, [pc, #76]	; (800abd8 <_dtoa_r+0x630>)
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fb94 	bl	80002b8 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4640      	mov	r0, r8
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 ffb8 	bl	8000b0c <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af35 	beq.w	800aa0c <_dtoa_r+0x464>
 800aba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba4:	1e6b      	subs	r3, r5, #1
 800aba6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abac:	2b30      	cmp	r3, #48	; 0x30
 800abae:	d0f8      	beq.n	800aba2 <_dtoa_r+0x5fa>
 800abb0:	9700      	str	r7, [sp, #0]
 800abb2:	e049      	b.n	800ac48 <_dtoa_r+0x6a0>
 800abb4:	4b05      	ldr	r3, [pc, #20]	; (800abcc <_dtoa_r+0x624>)
 800abb6:	f7f5 fd37 	bl	8000628 <__aeabi_dmul>
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	e7bd      	b.n	800ab3c <_dtoa_r+0x594>
 800abc0:	0800cd78 	.word	0x0800cd78
 800abc4:	0800cd50 	.word	0x0800cd50
 800abc8:	3ff00000 	.word	0x3ff00000
 800abcc:	40240000 	.word	0x40240000
 800abd0:	401c0000 	.word	0x401c0000
 800abd4:	40140000 	.word	0x40140000
 800abd8:	3fe00000 	.word	0x3fe00000
 800abdc:	9d01      	ldr	r5, [sp, #4]
 800abde:	4656      	mov	r6, sl
 800abe0:	465f      	mov	r7, fp
 800abe2:	4642      	mov	r2, r8
 800abe4:	464b      	mov	r3, r9
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fe47 	bl	800087c <__aeabi_ddiv>
 800abee:	f7f5 ffcb 	bl	8000b88 <__aeabi_d2iz>
 800abf2:	4682      	mov	sl, r0
 800abf4:	f7f5 fcae 	bl	8000554 <__aeabi_i2d>
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	f7f5 fd14 	bl	8000628 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac0c:	f7f5 fb54 	bl	80002b8 <__aeabi_dsub>
 800ac10:	f805 6b01 	strb.w	r6, [r5], #1
 800ac14:	9e01      	ldr	r6, [sp, #4]
 800ac16:	9f03      	ldr	r7, [sp, #12]
 800ac18:	1bae      	subs	r6, r5, r6
 800ac1a:	42b7      	cmp	r7, r6
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	d135      	bne.n	800ac8e <_dtoa_r+0x6e6>
 800ac22:	f7f5 fb4b 	bl	80002bc <__adddf3>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	f7f5 ff8b 	bl	8000b48 <__aeabi_dcmpgt>
 800ac32:	b9d0      	cbnz	r0, 800ac6a <_dtoa_r+0x6c2>
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff5c 	bl	8000af8 <__aeabi_dcmpeq>
 800ac40:	b110      	cbz	r0, 800ac48 <_dtoa_r+0x6a0>
 800ac42:	f01a 0f01 	tst.w	sl, #1
 800ac46:	d110      	bne.n	800ac6a <_dtoa_r+0x6c2>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	ee18 1a10 	vmov	r1, s16
 800ac4e:	f000 fae5 	bl	800b21c <_Bfree>
 800ac52:	2300      	movs	r3, #0
 800ac54:	9800      	ldr	r0, [sp, #0]
 800ac56:	702b      	strb	r3, [r5, #0]
 800ac58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	6018      	str	r0, [r3, #0]
 800ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f acf1 	beq.w	800a648 <_dtoa_r+0xa0>
 800ac66:	601d      	str	r5, [r3, #0]
 800ac68:	e4ee      	b.n	800a648 <_dtoa_r+0xa0>
 800ac6a:	9f00      	ldr	r7, [sp, #0]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	461d      	mov	r5, r3
 800ac70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac74:	2a39      	cmp	r2, #57	; 0x39
 800ac76:	d106      	bne.n	800ac86 <_dtoa_r+0x6de>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d1f7      	bne.n	800ac6e <_dtoa_r+0x6c6>
 800ac7e:	9901      	ldr	r1, [sp, #4]
 800ac80:	2230      	movs	r2, #48	; 0x30
 800ac82:	3701      	adds	r7, #1
 800ac84:	700a      	strb	r2, [r1, #0]
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	3201      	adds	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e790      	b.n	800abb0 <_dtoa_r+0x608>
 800ac8e:	4ba6      	ldr	r3, [pc, #664]	; (800af28 <_dtoa_r+0x980>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fcc9 	bl	8000628 <__aeabi_dmul>
 800ac96:	2200      	movs	r2, #0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f7f5 ff2b 	bl	8000af8 <__aeabi_dcmpeq>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d09d      	beq.n	800abe2 <_dtoa_r+0x63a>
 800aca6:	e7cf      	b.n	800ac48 <_dtoa_r+0x6a0>
 800aca8:	9a08      	ldr	r2, [sp, #32]
 800acaa:	2a00      	cmp	r2, #0
 800acac:	f000 80d7 	beq.w	800ae5e <_dtoa_r+0x8b6>
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	2a01      	cmp	r2, #1
 800acb4:	f300 80ba 	bgt.w	800ae2c <_dtoa_r+0x884>
 800acb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80b2 	beq.w	800ae24 <_dtoa_r+0x87c>
 800acc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc4:	9e07      	ldr	r6, [sp, #28]
 800acc6:	9d04      	ldr	r5, [sp, #16]
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	441a      	add	r2, r3
 800accc:	9204      	str	r2, [sp, #16]
 800acce:	9a05      	ldr	r2, [sp, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	441a      	add	r2, r3
 800acd4:	4620      	mov	r0, r4
 800acd6:	9205      	str	r2, [sp, #20]
 800acd8:	f000 fb58 	bl	800b38c <__i2b>
 800acdc:	4607      	mov	r7, r0
 800acde:	2d00      	cmp	r5, #0
 800ace0:	dd0c      	ble.n	800acfc <_dtoa_r+0x754>
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x754>
 800ace8:	42ab      	cmp	r3, r5
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	bfa8      	it	ge
 800acee:	462b      	movge	r3, r5
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9204      	str	r2, [sp, #16]
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	1aed      	subs	r5, r5, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	9b07      	ldr	r3, [sp, #28]
 800acfe:	b31b      	cbz	r3, 800ad48 <_dtoa_r+0x7a0>
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80af 	beq.w	800ae66 <_dtoa_r+0x8be>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd13      	ble.n	800ad34 <_dtoa_r+0x78c>
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fbfb 	bl	800b50c <__pow5mult>
 800ad16:	ee18 2a10 	vmov	r2, s16
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fb4a 	bl	800b3b8 <__multiply>
 800ad24:	ee18 1a10 	vmov	r1, s16
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fa76 	bl	800b21c <_Bfree>
 800ad30:	ee08 8a10 	vmov	s16, r8
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	1b9a      	subs	r2, r3, r6
 800ad38:	d006      	beq.n	800ad48 <_dtoa_r+0x7a0>
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fbe4 	bl	800b50c <__pow5mult>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fb1e 	bl	800b38c <__i2b>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	4606      	mov	r6, r0
 800ad56:	f340 8088 	ble.w	800ae6a <_dtoa_r+0x8c2>
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 fbd4 	bl	800b50c <__pow5mult>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f340 8081 	ble.w	800ae70 <_dtoa_r+0x8c8>
 800ad6e:	f04f 0800 	mov.w	r8, #0
 800ad72:	6933      	ldr	r3, [r6, #16]
 800ad74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad78:	6918      	ldr	r0, [r3, #16]
 800ad7a:	f000 fab7 	bl	800b2ec <__hi0bits>
 800ad7e:	f1c0 0020 	rsb	r0, r0, #32
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4418      	add	r0, r3
 800ad86:	f010 001f 	ands.w	r0, r0, #31
 800ad8a:	f000 8092 	beq.w	800aeb2 <_dtoa_r+0x90a>
 800ad8e:	f1c0 0320 	rsb	r3, r0, #32
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	f340 808a 	ble.w	800aeac <_dtoa_r+0x904>
 800ad98:	f1c0 001c 	rsb	r0, r0, #28
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	4403      	add	r3, r0
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	4403      	add	r3, r0
 800ada6:	4405      	add	r5, r0
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd07      	ble.n	800adc0 <_dtoa_r+0x818>
 800adb0:	ee18 1a10 	vmov	r1, s16
 800adb4:	461a      	mov	r2, r3
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 fc02 	bl	800b5c0 <__lshift>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x82a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fbf8 	bl	800b5c0 <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d06e      	beq.n	800aeb6 <_dtoa_r+0x90e>
 800add8:	ee18 0a10 	vmov	r0, s16
 800addc:	4631      	mov	r1, r6
 800adde:	f000 fc5f 	bl	800b6a0 <__mcmp>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	da67      	bge.n	800aeb6 <_dtoa_r+0x90e>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	220a      	movs	r2, #10
 800adf2:	2300      	movs	r3, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fa33 	bl	800b260 <__multadd>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	ee08 0a10 	vmov	s16, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81b1 	beq.w	800b168 <_dtoa_r+0xbc0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	4639      	mov	r1, r7
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fa27 	bl	800b260 <__multadd>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4607      	mov	r7, r0
 800ae18:	f300 808e 	bgt.w	800af38 <_dtoa_r+0x990>
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc51      	bgt.n	800aec6 <_dtoa_r+0x91e>
 800ae22:	e089      	b.n	800af38 <_dtoa_r+0x990>
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae2a:	e74b      	b.n	800acc4 <_dtoa_r+0x71c>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1e5e      	subs	r6, r3, #1
 800ae30:	9b07      	ldr	r3, [sp, #28]
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	bfbf      	itttt	lt
 800ae36:	9b07      	ldrlt	r3, [sp, #28]
 800ae38:	9607      	strlt	r6, [sp, #28]
 800ae3a:	1af2      	sublt	r2, r6, r3
 800ae3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae3e:	bfb6      	itet	lt
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	1b9e      	subge	r6, r3, r6
 800ae44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	bfb8      	it	lt
 800ae4a:	2600      	movlt	r6, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb7      	itett	lt
 800ae50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae58:	1a9d      	sublt	r5, r3, r2
 800ae5a:	2300      	movlt	r3, #0
 800ae5c:	e734      	b.n	800acc8 <_dtoa_r+0x720>
 800ae5e:	9e07      	ldr	r6, [sp, #28]
 800ae60:	9d04      	ldr	r5, [sp, #16]
 800ae62:	9f08      	ldr	r7, [sp, #32]
 800ae64:	e73b      	b.n	800acde <_dtoa_r+0x736>
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	e767      	b.n	800ad3a <_dtoa_r+0x792>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	dc18      	bgt.n	800aea2 <_dtoa_r+0x8fa>
 800ae70:	f1ba 0f00 	cmp.w	sl, #0
 800ae74:	d115      	bne.n	800aea2 <_dtoa_r+0x8fa>
 800ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7a:	b993      	cbnz	r3, 800aea2 <_dtoa_r+0x8fa>
 800ae7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae80:	0d1b      	lsrs	r3, r3, #20
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	b183      	cbz	r3, 800aea8 <_dtoa_r+0x900>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f04f 0801 	mov.w	r8, #1
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af6a 	bne.w	800ad72 <_dtoa_r+0x7ca>
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e76f      	b.n	800ad82 <_dtoa_r+0x7da>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	e7f6      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aea8:	4698      	mov	r8, r3
 800aeaa:	e7f4      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aeac:	f43f af7d 	beq.w	800adaa <_dtoa_r+0x802>
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	301c      	adds	r0, #28
 800aeb4:	e772      	b.n	800ad9c <_dtoa_r+0x7f4>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc37      	bgt.n	800af2c <_dtoa_r+0x984>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	dd34      	ble.n	800af2c <_dtoa_r+0x984>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	b96b      	cbnz	r3, 800aee6 <_dtoa_r+0x93e>
 800aeca:	4631      	mov	r1, r6
 800aecc:	2205      	movs	r2, #5
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f9c6 	bl	800b260 <__multadd>
 800aed4:	4601      	mov	r1, r0
 800aed6:	4606      	mov	r6, r0
 800aed8:	ee18 0a10 	vmov	r0, s16
 800aedc:	f000 fbe0 	bl	800b6a0 <__mcmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	f73f adbb 	bgt.w	800aa5c <_dtoa_r+0x4b4>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	9d01      	ldr	r5, [sp, #4]
 800aeea:	43db      	mvns	r3, r3
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	4631      	mov	r1, r6
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f991 	bl	800b21c <_Bfree>
 800aefa:	2f00      	cmp	r7, #0
 800aefc:	f43f aea4 	beq.w	800ac48 <_dtoa_r+0x6a0>
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d005      	beq.n	800af12 <_dtoa_r+0x96a>
 800af06:	45b8      	cmp	r8, r7
 800af08:	d003      	beq.n	800af12 <_dtoa_r+0x96a>
 800af0a:	4641      	mov	r1, r8
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 f985 	bl	800b21c <_Bfree>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f000 f981 	bl	800b21c <_Bfree>
 800af1a:	e695      	b.n	800ac48 <_dtoa_r+0x6a0>
 800af1c:	2600      	movs	r6, #0
 800af1e:	4637      	mov	r7, r6
 800af20:	e7e1      	b.n	800aee6 <_dtoa_r+0x93e>
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4637      	mov	r7, r6
 800af26:	e599      	b.n	800aa5c <_dtoa_r+0x4b4>
 800af28:	40240000 	.word	0x40240000
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80ca 	beq.w	800b0c8 <_dtoa_r+0xb20>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	2d00      	cmp	r5, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x9a0>
 800af3c:	4639      	mov	r1, r7
 800af3e:	462a      	mov	r2, r5
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fb3d 	bl	800b5c0 <__lshift>
 800af46:	4607      	mov	r7, r0
 800af48:	f1b8 0f00 	cmp.w	r8, #0
 800af4c:	d05b      	beq.n	800b006 <_dtoa_r+0xa5e>
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4620      	mov	r0, r4
 800af52:	f000 f923 	bl	800b19c <_Balloc>
 800af56:	4605      	mov	r5, r0
 800af58:	b928      	cbnz	r0, 800af66 <_dtoa_r+0x9be>
 800af5a:	4b87      	ldr	r3, [pc, #540]	; (800b178 <_dtoa_r+0xbd0>)
 800af5c:	4602      	mov	r2, r0
 800af5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af62:	f7ff bb3b 	b.w	800a5dc <_dtoa_r+0x34>
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	f107 010c 	add.w	r1, r7, #12
 800af70:	300c      	adds	r0, #12
 800af72:	f7fe fded 	bl	8009b50 <memcpy>
 800af76:	2201      	movs	r2, #1
 800af78:	4629      	mov	r1, r5
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fb20 	bl	800b5c0 <__lshift>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	f103 0901 	add.w	r9, r3, #1
 800af86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af8a:	4413      	add	r3, r2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f00a 0301 	and.w	r3, sl, #1
 800af92:	46b8      	mov	r8, r7
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4631      	mov	r1, r6
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f7ff fa77 	bl	800a490 <quorem>
 800afa2:	4641      	mov	r1, r8
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 fb77 	bl	800b6a0 <__mcmp>
 800afb2:	463a      	mov	r2, r7
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fb8d 	bl	800b6d8 <__mdiff>
 800afbe:	68c2      	ldr	r2, [r0, #12]
 800afc0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800afc4:	4605      	mov	r5, r0
 800afc6:	bb02      	cbnz	r2, 800b00a <_dtoa_r+0xa62>
 800afc8:	4601      	mov	r1, r0
 800afca:	ee18 0a10 	vmov	r0, s16
 800afce:	f000 fb67 	bl	800b6a0 <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	9207      	str	r2, [sp, #28]
 800afda:	f000 f91f 	bl	800b21c <_Bfree>
 800afde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afe2:	ea43 0102 	orr.w	r1, r3, r2
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	430b      	orrs	r3, r1
 800afea:	464d      	mov	r5, r9
 800afec:	d10f      	bne.n	800b00e <_dtoa_r+0xa66>
 800afee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff2:	d02a      	beq.n	800b04a <_dtoa_r+0xaa2>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0xa58>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b000:	f88b a000 	strb.w	sl, [fp]
 800b004:	e775      	b.n	800aef2 <_dtoa_r+0x94a>
 800b006:	4638      	mov	r0, r7
 800b008:	e7ba      	b.n	800af80 <_dtoa_r+0x9d8>
 800b00a:	2201      	movs	r2, #1
 800b00c:	e7e2      	b.n	800afd4 <_dtoa_r+0xa2c>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db04      	blt.n	800b01e <_dtoa_r+0xa76>
 800b014:	9906      	ldr	r1, [sp, #24]
 800b016:	430b      	orrs	r3, r1
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d122      	bne.n	800b064 <_dtoa_r+0xabc>
 800b01e:	2a00      	cmp	r2, #0
 800b020:	ddee      	ble.n	800b000 <_dtoa_r+0xa58>
 800b022:	ee18 1a10 	vmov	r1, s16
 800b026:	2201      	movs	r2, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fac9 	bl	800b5c0 <__lshift>
 800b02e:	4631      	mov	r1, r6
 800b030:	ee08 0a10 	vmov	s16, r0
 800b034:	f000 fb34 	bl	800b6a0 <__mcmp>
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc03      	bgt.n	800b044 <_dtoa_r+0xa9c>
 800b03c:	d1e0      	bne.n	800b000 <_dtoa_r+0xa58>
 800b03e:	f01a 0f01 	tst.w	sl, #1
 800b042:	d0dd      	beq.n	800b000 <_dtoa_r+0xa58>
 800b044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b048:	d1d7      	bne.n	800affa <_dtoa_r+0xa52>
 800b04a:	2339      	movs	r3, #57	; 0x39
 800b04c:	f88b 3000 	strb.w	r3, [fp]
 800b050:	462b      	mov	r3, r5
 800b052:	461d      	mov	r5, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b05a:	2a39      	cmp	r2, #57	; 0x39
 800b05c:	d071      	beq.n	800b142 <_dtoa_r+0xb9a>
 800b05e:	3201      	adds	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e746      	b.n	800aef2 <_dtoa_r+0x94a>
 800b064:	2a00      	cmp	r2, #0
 800b066:	dd07      	ble.n	800b078 <_dtoa_r+0xad0>
 800b068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06c:	d0ed      	beq.n	800b04a <_dtoa_r+0xaa2>
 800b06e:	f10a 0301 	add.w	r3, sl, #1
 800b072:	f88b 3000 	strb.w	r3, [fp]
 800b076:	e73c      	b.n	800aef2 <_dtoa_r+0x94a>
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b07e:	4599      	cmp	r9, r3
 800b080:	d047      	beq.n	800b112 <_dtoa_r+0xb6a>
 800b082:	ee18 1a10 	vmov	r1, s16
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 f8e8 	bl	800b260 <__multadd>
 800b090:	45b8      	cmp	r8, r7
 800b092:	ee08 0a10 	vmov	s16, r0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	f04f 020a 	mov.w	r2, #10
 800b09e:	4641      	mov	r1, r8
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	d106      	bne.n	800b0b2 <_dtoa_r+0xb0a>
 800b0a4:	f000 f8dc 	bl	800b260 <__multadd>
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f109 0901 	add.w	r9, r9, #1
 800b0b0:	e772      	b.n	800af98 <_dtoa_r+0x9f0>
 800b0b2:	f000 f8d5 	bl	800b260 <__multadd>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 f8ce 	bl	800b260 <__multadd>
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	e7f1      	b.n	800b0ac <_dtoa_r+0xb04>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	9d01      	ldr	r5, [sp, #4]
 800b0ce:	ee18 0a10 	vmov	r0, s16
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	f7ff f9dc 	bl	800a490 <quorem>
 800b0d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	f805 ab01 	strb.w	sl, [r5], #1
 800b0e2:	1aea      	subs	r2, r5, r3
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	dd09      	ble.n	800b0fe <_dtoa_r+0xb56>
 800b0ea:	ee18 1a10 	vmov	r1, s16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f8b4 	bl	800b260 <__multadd>
 800b0f8:	ee08 0a10 	vmov	s16, r0
 800b0fc:	e7e7      	b.n	800b0ce <_dtoa_r+0xb26>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfc8      	it	gt
 800b104:	461d      	movgt	r5, r3
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	bfd8      	it	le
 800b10a:	2501      	movle	r5, #1
 800b10c:	441d      	add	r5, r3
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	2201      	movs	r2, #1
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fa51 	bl	800b5c0 <__lshift>
 800b11e:	4631      	mov	r1, r6
 800b120:	ee08 0a10 	vmov	s16, r0
 800b124:	f000 fabc 	bl	800b6a0 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc91      	bgt.n	800b050 <_dtoa_r+0xaa8>
 800b12c:	d102      	bne.n	800b134 <_dtoa_r+0xb8c>
 800b12e:	f01a 0f01 	tst.w	sl, #1
 800b132:	d18d      	bne.n	800b050 <_dtoa_r+0xaa8>
 800b134:	462b      	mov	r3, r5
 800b136:	461d      	mov	r5, r3
 800b138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13c:	2a30      	cmp	r2, #48	; 0x30
 800b13e:	d0fa      	beq.n	800b136 <_dtoa_r+0xb8e>
 800b140:	e6d7      	b.n	800aef2 <_dtoa_r+0x94a>
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d184      	bne.n	800b052 <_dtoa_r+0xaaa>
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	7013      	strb	r3, [r2, #0]
 800b152:	e6ce      	b.n	800aef2 <_dtoa_r+0x94a>
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <_dtoa_r+0xbd4>)
 800b156:	f7ff ba95 	b.w	800a684 <_dtoa_r+0xdc>
 800b15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f47f aa6e 	bne.w	800a63e <_dtoa_r+0x96>
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_dtoa_r+0xbd8>)
 800b164:	f7ff ba8e 	b.w	800a684 <_dtoa_r+0xdc>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dcae      	bgt.n	800b0cc <_dtoa_r+0xb24>
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	2b02      	cmp	r3, #2
 800b172:	f73f aea8 	bgt.w	800aec6 <_dtoa_r+0x91e>
 800b176:	e7a9      	b.n	800b0cc <_dtoa_r+0xb24>
 800b178:	0800ccdf 	.word	0x0800ccdf
 800b17c:	0800cc3c 	.word	0x0800cc3c
 800b180:	0800cc60 	.word	0x0800cc60

0800b184 <_localeconv_r>:
 800b184:	4800      	ldr	r0, [pc, #0]	; (800b188 <_localeconv_r+0x4>)
 800b186:	4770      	bx	lr
 800b188:	200001c0 	.word	0x200001c0

0800b18c <malloc>:
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <malloc+0xc>)
 800b18e:	4601      	mov	r1, r0
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	f000 bc09 	b.w	800b9a8 <_malloc_r>
 800b196:	bf00      	nop
 800b198:	2000006c 	.word	0x2000006c

0800b19c <_Balloc>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	b976      	cbnz	r6, 800b1c4 <_Balloc+0x28>
 800b1a6:	2010      	movs	r0, #16
 800b1a8:	f7ff fff0 	bl	800b18c <malloc>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b1b0:	b920      	cbnz	r0, 800b1bc <_Balloc+0x20>
 800b1b2:	4b18      	ldr	r3, [pc, #96]	; (800b214 <_Balloc+0x78>)
 800b1b4:	4818      	ldr	r0, [pc, #96]	; (800b218 <_Balloc+0x7c>)
 800b1b6:	2166      	movs	r1, #102	; 0x66
 800b1b8:	f000 fdd6 	bl	800bd68 <__assert_func>
 800b1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c0:	6006      	str	r6, [r0, #0]
 800b1c2:	60c6      	str	r6, [r0, #12]
 800b1c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1c6:	68f3      	ldr	r3, [r6, #12]
 800b1c8:	b183      	cbz	r3, 800b1ec <_Balloc+0x50>
 800b1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1d2:	b9b8      	cbnz	r0, 800b204 <_Balloc+0x68>
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1da:	1d72      	adds	r2, r6, #5
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fb60 	bl	800b8a4 <_calloc_r>
 800b1e4:	b160      	cbz	r0, 800b200 <_Balloc+0x64>
 800b1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ea:	e00e      	b.n	800b20a <_Balloc+0x6e>
 800b1ec:	2221      	movs	r2, #33	; 0x21
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fb57 	bl	800b8a4 <_calloc_r>
 800b1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f8:	60f0      	str	r0, [r6, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e4      	bne.n	800b1ca <_Balloc+0x2e>
 800b200:	2000      	movs	r0, #0
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	6802      	ldr	r2, [r0, #0]
 800b206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b20a:	2300      	movs	r3, #0
 800b20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b210:	e7f7      	b.n	800b202 <_Balloc+0x66>
 800b212:	bf00      	nop
 800b214:	0800cc6d 	.word	0x0800cc6d
 800b218:	0800ccf0 	.word	0x0800ccf0

0800b21c <_Bfree>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b976      	cbnz	r6, 800b244 <_Bfree+0x28>
 800b226:	2010      	movs	r0, #16
 800b228:	f7ff ffb0 	bl	800b18c <malloc>
 800b22c:	4602      	mov	r2, r0
 800b22e:	6268      	str	r0, [r5, #36]	; 0x24
 800b230:	b920      	cbnz	r0, 800b23c <_Bfree+0x20>
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <_Bfree+0x3c>)
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <_Bfree+0x40>)
 800b236:	218a      	movs	r1, #138	; 0x8a
 800b238:	f000 fd96 	bl	800bd68 <__assert_func>
 800b23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b240:	6006      	str	r6, [r0, #0]
 800b242:	60c6      	str	r6, [r0, #12]
 800b244:	b13c      	cbz	r4, 800b256 <_Bfree+0x3a>
 800b246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b250:	6021      	str	r1, [r4, #0]
 800b252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	0800cc6d 	.word	0x0800cc6d
 800b25c:	0800ccf0 	.word	0x0800ccf0

0800b260 <__multadd>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	690d      	ldr	r5, [r1, #16]
 800b266:	4607      	mov	r7, r0
 800b268:	460c      	mov	r4, r1
 800b26a:	461e      	mov	r6, r3
 800b26c:	f101 0c14 	add.w	ip, r1, #20
 800b270:	2000      	movs	r0, #0
 800b272:	f8dc 3000 	ldr.w	r3, [ip]
 800b276:	b299      	uxth	r1, r3
 800b278:	fb02 6101 	mla	r1, r2, r1, r6
 800b27c:	0c1e      	lsrs	r6, r3, #16
 800b27e:	0c0b      	lsrs	r3, r1, #16
 800b280:	fb02 3306 	mla	r3, r2, r6, r3
 800b284:	b289      	uxth	r1, r1
 800b286:	3001      	adds	r0, #1
 800b288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b28c:	4285      	cmp	r5, r0
 800b28e:	f84c 1b04 	str.w	r1, [ip], #4
 800b292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b296:	dcec      	bgt.n	800b272 <__multadd+0x12>
 800b298:	b30e      	cbz	r6, 800b2de <__multadd+0x7e>
 800b29a:	68a3      	ldr	r3, [r4, #8]
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dc19      	bgt.n	800b2d4 <__multadd+0x74>
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	f7ff ff79 	bl	800b19c <_Balloc>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	b928      	cbnz	r0, 800b2ba <__multadd+0x5a>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b0c      	ldr	r3, [pc, #48]	; (800b2e4 <__multadd+0x84>)
 800b2b2:	480d      	ldr	r0, [pc, #52]	; (800b2e8 <__multadd+0x88>)
 800b2b4:	21b5      	movs	r1, #181	; 0xb5
 800b2b6:	f000 fd57 	bl	800bd68 <__assert_func>
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	3202      	adds	r2, #2
 800b2be:	f104 010c 	add.w	r1, r4, #12
 800b2c2:	0092      	lsls	r2, r2, #2
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	f7fe fc43 	bl	8009b50 <memcpy>
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f7ff ffa5 	bl	800b21c <_Bfree>
 800b2d2:	4644      	mov	r4, r8
 800b2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d8:	3501      	adds	r5, #1
 800b2da:	615e      	str	r6, [r3, #20]
 800b2dc:	6125      	str	r5, [r4, #16]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	0800ccdf 	.word	0x0800ccdf
 800b2e8:	0800ccf0 	.word	0x0800ccf0

0800b2ec <__hi0bits>:
 800b2ec:	0c03      	lsrs	r3, r0, #16
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	b9d3      	cbnz	r3, 800b328 <__hi0bits+0x3c>
 800b2f2:	0400      	lsls	r0, r0, #16
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2fa:	bf04      	itt	eq
 800b2fc:	0200      	lsleq	r0, r0, #8
 800b2fe:	3308      	addeq	r3, #8
 800b300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b304:	bf04      	itt	eq
 800b306:	0100      	lsleq	r0, r0, #4
 800b308:	3304      	addeq	r3, #4
 800b30a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b30e:	bf04      	itt	eq
 800b310:	0080      	lsleq	r0, r0, #2
 800b312:	3302      	addeq	r3, #2
 800b314:	2800      	cmp	r0, #0
 800b316:	db05      	blt.n	800b324 <__hi0bits+0x38>
 800b318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b31c:	f103 0301 	add.w	r3, r3, #1
 800b320:	bf08      	it	eq
 800b322:	2320      	moveq	r3, #32
 800b324:	4618      	mov	r0, r3
 800b326:	4770      	bx	lr
 800b328:	2300      	movs	r3, #0
 800b32a:	e7e4      	b.n	800b2f6 <__hi0bits+0xa>

0800b32c <__lo0bits>:
 800b32c:	6803      	ldr	r3, [r0, #0]
 800b32e:	f013 0207 	ands.w	r2, r3, #7
 800b332:	4601      	mov	r1, r0
 800b334:	d00b      	beq.n	800b34e <__lo0bits+0x22>
 800b336:	07da      	lsls	r2, r3, #31
 800b338:	d423      	bmi.n	800b382 <__lo0bits+0x56>
 800b33a:	0798      	lsls	r0, r3, #30
 800b33c:	bf49      	itett	mi
 800b33e:	085b      	lsrmi	r3, r3, #1
 800b340:	089b      	lsrpl	r3, r3, #2
 800b342:	2001      	movmi	r0, #1
 800b344:	600b      	strmi	r3, [r1, #0]
 800b346:	bf5c      	itt	pl
 800b348:	600b      	strpl	r3, [r1, #0]
 800b34a:	2002      	movpl	r0, #2
 800b34c:	4770      	bx	lr
 800b34e:	b298      	uxth	r0, r3
 800b350:	b9a8      	cbnz	r0, 800b37e <__lo0bits+0x52>
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	2010      	movs	r0, #16
 800b356:	b2da      	uxtb	r2, r3
 800b358:	b90a      	cbnz	r2, 800b35e <__lo0bits+0x32>
 800b35a:	3008      	adds	r0, #8
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	071a      	lsls	r2, r3, #28
 800b360:	bf04      	itt	eq
 800b362:	091b      	lsreq	r3, r3, #4
 800b364:	3004      	addeq	r0, #4
 800b366:	079a      	lsls	r2, r3, #30
 800b368:	bf04      	itt	eq
 800b36a:	089b      	lsreq	r3, r3, #2
 800b36c:	3002      	addeq	r0, #2
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d403      	bmi.n	800b37a <__lo0bits+0x4e>
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	f100 0001 	add.w	r0, r0, #1
 800b378:	d005      	beq.n	800b386 <__lo0bits+0x5a>
 800b37a:	600b      	str	r3, [r1, #0]
 800b37c:	4770      	bx	lr
 800b37e:	4610      	mov	r0, r2
 800b380:	e7e9      	b.n	800b356 <__lo0bits+0x2a>
 800b382:	2000      	movs	r0, #0
 800b384:	4770      	bx	lr
 800b386:	2020      	movs	r0, #32
 800b388:	4770      	bx	lr
	...

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff ff03 	bl	800b19c <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__i2b+0x1a>
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <__i2b+0x24>)
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <__i2b+0x28>)
 800b39e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3a2:	f000 fce1 	bl	800bd68 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6144      	str	r4, [r0, #20]
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800ccdf 	.word	0x0800ccdf
 800b3b4:	0800ccf0 	.word	0x0800ccf0

0800b3b8 <__multiply>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4691      	mov	r9, r2
 800b3be:	690a      	ldr	r2, [r1, #16]
 800b3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	bfb8      	it	lt
 800b3c8:	460b      	movlt	r3, r1
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	bfbc      	itt	lt
 800b3ce:	464c      	movlt	r4, r9
 800b3d0:	4699      	movlt	r9, r3
 800b3d2:	6927      	ldr	r7, [r4, #16]
 800b3d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	eb07 060a 	add.w	r6, r7, sl
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	bfb8      	it	lt
 800b3e6:	3101      	addlt	r1, #1
 800b3e8:	f7ff fed8 	bl	800b19c <_Balloc>
 800b3ec:	b930      	cbnz	r0, 800b3fc <__multiply+0x44>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b44      	ldr	r3, [pc, #272]	; (800b504 <__multiply+0x14c>)
 800b3f2:	4845      	ldr	r0, [pc, #276]	; (800b508 <__multiply+0x150>)
 800b3f4:	f240 115d 	movw	r1, #349	; 0x15d
 800b3f8:	f000 fcb6 	bl	800bd68 <__assert_func>
 800b3fc:	f100 0514 	add.w	r5, r0, #20
 800b400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b404:	462b      	mov	r3, r5
 800b406:	2200      	movs	r2, #0
 800b408:	4543      	cmp	r3, r8
 800b40a:	d321      	bcc.n	800b450 <__multiply+0x98>
 800b40c:	f104 0314 	add.w	r3, r4, #20
 800b410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b414:	f109 0314 	add.w	r3, r9, #20
 800b418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	1b3a      	subs	r2, r7, r4
 800b420:	3a15      	subs	r2, #21
 800b422:	f022 0203 	bic.w	r2, r2, #3
 800b426:	3204      	adds	r2, #4
 800b428:	f104 0115 	add.w	r1, r4, #21
 800b42c:	428f      	cmp	r7, r1
 800b42e:	bf38      	it	cc
 800b430:	2204      	movcc	r2, #4
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	9a02      	ldr	r2, [sp, #8]
 800b436:	9303      	str	r3, [sp, #12]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d80c      	bhi.n	800b456 <__multiply+0x9e>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd03      	ble.n	800b448 <__multiply+0x90>
 800b440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05a      	beq.n	800b4fe <__multiply+0x146>
 800b448:	6106      	str	r6, [r0, #16]
 800b44a:	b005      	add	sp, #20
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	f843 2b04 	str.w	r2, [r3], #4
 800b454:	e7d8      	b.n	800b408 <__multiply+0x50>
 800b456:	f8b3 a000 	ldrh.w	sl, [r3]
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d024      	beq.n	800b4aa <__multiply+0xf2>
 800b460:	f104 0e14 	add.w	lr, r4, #20
 800b464:	46a9      	mov	r9, r5
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b46e:	f8d9 1000 	ldr.w	r1, [r9]
 800b472:	fa1f fb82 	uxth.w	fp, r2
 800b476:	b289      	uxth	r1, r1
 800b478:	fb0a 110b 	mla	r1, sl, fp, r1
 800b47c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b480:	f8d9 2000 	ldr.w	r2, [r9]
 800b484:	4461      	add	r1, ip
 800b486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b48a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b492:	b289      	uxth	r1, r1
 800b494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b498:	4577      	cmp	r7, lr
 800b49a:	f849 1b04 	str.w	r1, [r9], #4
 800b49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4a2:	d8e2      	bhi.n	800b46a <__multiply+0xb2>
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	f845 c002 	str.w	ip, [r5, r2]
 800b4aa:	9a03      	ldr	r2, [sp, #12]
 800b4ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d020      	beq.n	800b4fa <__multiply+0x142>
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	f104 0c14 	add.w	ip, r4, #20
 800b4be:	46ae      	mov	lr, r5
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4cc:	fb09 220b 	mla	r2, r9, fp, r2
 800b4d0:	4492      	add	sl, r2
 800b4d2:	b289      	uxth	r1, r1
 800b4d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4d8:	f84e 1b04 	str.w	r1, [lr], #4
 800b4dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4e4:	0c12      	lsrs	r2, r2, #16
 800b4e6:	fb09 1102 	mla	r1, r9, r2, r1
 800b4ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4ee:	4567      	cmp	r7, ip
 800b4f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4f4:	d8e6      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f6:	9a01      	ldr	r2, [sp, #4]
 800b4f8:	50a9      	str	r1, [r5, r2]
 800b4fa:	3504      	adds	r5, #4
 800b4fc:	e79a      	b.n	800b434 <__multiply+0x7c>
 800b4fe:	3e01      	subs	r6, #1
 800b500:	e79c      	b.n	800b43c <__multiply+0x84>
 800b502:	bf00      	nop
 800b504:	0800ccdf 	.word	0x0800ccdf
 800b508:	0800ccf0 	.word	0x0800ccf0

0800b50c <__pow5mult>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4615      	mov	r5, r2
 800b512:	f012 0203 	ands.w	r2, r2, #3
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	d007      	beq.n	800b52c <__pow5mult+0x20>
 800b51c:	4c25      	ldr	r4, [pc, #148]	; (800b5b4 <__pow5mult+0xa8>)
 800b51e:	3a01      	subs	r2, #1
 800b520:	2300      	movs	r3, #0
 800b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b526:	f7ff fe9b 	bl	800b260 <__multadd>
 800b52a:	4607      	mov	r7, r0
 800b52c:	10ad      	asrs	r5, r5, #2
 800b52e:	d03d      	beq.n	800b5ac <__pow5mult+0xa0>
 800b530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b532:	b97c      	cbnz	r4, 800b554 <__pow5mult+0x48>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff fe29 	bl	800b18c <malloc>
 800b53a:	4602      	mov	r2, r0
 800b53c:	6270      	str	r0, [r6, #36]	; 0x24
 800b53e:	b928      	cbnz	r0, 800b54c <__pow5mult+0x40>
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <__pow5mult+0xac>)
 800b542:	481e      	ldr	r0, [pc, #120]	; (800b5bc <__pow5mult+0xb0>)
 800b544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b548:	f000 fc0e 	bl	800bd68 <__assert_func>
 800b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	60c4      	str	r4, [r0, #12]
 800b554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b55c:	b94c      	cbnz	r4, 800b572 <__pow5mult+0x66>
 800b55e:	f240 2171 	movw	r1, #625	; 0x271
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ff12 	bl	800b38c <__i2b>
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56e:	4604      	mov	r4, r0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	07eb      	lsls	r3, r5, #31
 800b578:	d50a      	bpl.n	800b590 <__pow5mult+0x84>
 800b57a:	4639      	mov	r1, r7
 800b57c:	4622      	mov	r2, r4
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ff1a 	bl	800b3b8 <__multiply>
 800b584:	4639      	mov	r1, r7
 800b586:	4680      	mov	r8, r0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff fe47 	bl	800b21c <_Bfree>
 800b58e:	4647      	mov	r7, r8
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	d00b      	beq.n	800b5ac <__pow5mult+0xa0>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	b938      	cbnz	r0, 800b5a8 <__pow5mult+0x9c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff ff0b 	bl	800b3b8 <__multiply>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f8c0 9000 	str.w	r9, [r0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7e4      	b.n	800b576 <__pow5mult+0x6a>
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800ce40 	.word	0x0800ce40
 800b5b8:	0800cc6d 	.word	0x0800cc6d
 800b5bc:	0800ccf0 	.word	0x0800ccf0

0800b5c0 <__lshift>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	6849      	ldr	r1, [r1, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d8:	f108 0601 	add.w	r6, r8, #1
 800b5dc:	42b3      	cmp	r3, r6
 800b5de:	db0b      	blt.n	800b5f8 <__lshift+0x38>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fddb 	bl	800b19c <_Balloc>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b948      	cbnz	r0, 800b5fe <__lshift+0x3e>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <__lshift+0xd8>)
 800b5ee:	482b      	ldr	r0, [pc, #172]	; (800b69c <__lshift+0xdc>)
 800b5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5f4:	f000 fbb8 	bl	800bd68 <__assert_func>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	e7ee      	b.n	800b5dc <__lshift+0x1c>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f100 0114 	add.w	r1, r0, #20
 800b604:	f100 0210 	add.w	r2, r0, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	4553      	cmp	r3, sl
 800b60c:	db37      	blt.n	800b67e <__lshift+0xbe>
 800b60e:	6920      	ldr	r0, [r4, #16]
 800b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	f019 091f 	ands.w	r9, r9, #31
 800b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b624:	d02f      	beq.n	800b686 <__lshift+0xc6>
 800b626:	f1c9 0e20 	rsb	lr, r9, #32
 800b62a:	468a      	mov	sl, r1
 800b62c:	f04f 0c00 	mov.w	ip, #0
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	fa02 f209 	lsl.w	r2, r2, r9
 800b636:	ea42 020c 	orr.w	r2, r2, ip
 800b63a:	f84a 2b04 	str.w	r2, [sl], #4
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	4298      	cmp	r0, r3
 800b644:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b648:	d8f2      	bhi.n	800b630 <__lshift+0x70>
 800b64a:	1b03      	subs	r3, r0, r4
 800b64c:	3b15      	subs	r3, #21
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	3304      	adds	r3, #4
 800b654:	f104 0215 	add.w	r2, r4, #21
 800b658:	4290      	cmp	r0, r2
 800b65a:	bf38      	it	cc
 800b65c:	2304      	movcc	r3, #4
 800b65e:	f841 c003 	str.w	ip, [r1, r3]
 800b662:	f1bc 0f00 	cmp.w	ip, #0
 800b666:	d001      	beq.n	800b66c <__lshift+0xac>
 800b668:	f108 0602 	add.w	r6, r8, #2
 800b66c:	3e01      	subs	r6, #1
 800b66e:	4638      	mov	r0, r7
 800b670:	612e      	str	r6, [r5, #16]
 800b672:	4621      	mov	r1, r4
 800b674:	f7ff fdd2 	bl	800b21c <_Bfree>
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b682:	3301      	adds	r3, #1
 800b684:	e7c1      	b.n	800b60a <__lshift+0x4a>
 800b686:	3904      	subs	r1, #4
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b690:	4298      	cmp	r0, r3
 800b692:	d8f9      	bhi.n	800b688 <__lshift+0xc8>
 800b694:	e7ea      	b.n	800b66c <__lshift+0xac>
 800b696:	bf00      	nop
 800b698:	0800ccdf 	.word	0x0800ccdf
 800b69c:	0800ccf0 	.word	0x0800ccf0

0800b6a0 <__mcmp>:
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	6902      	ldr	r2, [r0, #16]
 800b6a4:	690c      	ldr	r4, [r1, #16]
 800b6a6:	1b12      	subs	r2, r2, r4
 800b6a8:	d10e      	bne.n	800b6c8 <__mcmp+0x28>
 800b6aa:	f100 0314 	add.w	r3, r0, #20
 800b6ae:	3114      	adds	r1, #20
 800b6b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	d003      	beq.n	800b6cc <__mcmp+0x2c>
 800b6c4:	d305      	bcc.n	800b6d2 <__mcmp+0x32>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	bd30      	pop	{r4, r5, pc}
 800b6cc:	4283      	cmp	r3, r0
 800b6ce:	d3f3      	bcc.n	800b6b8 <__mcmp+0x18>
 800b6d0:	e7fa      	b.n	800b6c8 <__mcmp+0x28>
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d6:	e7f7      	b.n	800b6c8 <__mcmp+0x28>

0800b6d8 <__mdiff>:
 800b6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	460c      	mov	r4, r1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4690      	mov	r8, r2
 800b6e6:	f7ff ffdb 	bl	800b6a0 <__mcmp>
 800b6ea:	1e05      	subs	r5, r0, #0
 800b6ec:	d110      	bne.n	800b710 <__mdiff+0x38>
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff fd53 	bl	800b19c <_Balloc>
 800b6f6:	b930      	cbnz	r0, 800b706 <__mdiff+0x2e>
 800b6f8:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <__mdiff+0x10c>)
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	f240 2132 	movw	r1, #562	; 0x232
 800b700:	4839      	ldr	r0, [pc, #228]	; (800b7e8 <__mdiff+0x110>)
 800b702:	f000 fb31 	bl	800bd68 <__assert_func>
 800b706:	2301      	movs	r3, #1
 800b708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b70c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	bfa4      	itt	ge
 800b712:	4643      	movge	r3, r8
 800b714:	46a0      	movge	r8, r4
 800b716:	4630      	mov	r0, r6
 800b718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b71c:	bfa6      	itte	ge
 800b71e:	461c      	movge	r4, r3
 800b720:	2500      	movge	r5, #0
 800b722:	2501      	movlt	r5, #1
 800b724:	f7ff fd3a 	bl	800b19c <_Balloc>
 800b728:	b920      	cbnz	r0, 800b734 <__mdiff+0x5c>
 800b72a:	4b2e      	ldr	r3, [pc, #184]	; (800b7e4 <__mdiff+0x10c>)
 800b72c:	4602      	mov	r2, r0
 800b72e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b732:	e7e5      	b.n	800b700 <__mdiff+0x28>
 800b734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b738:	6926      	ldr	r6, [r4, #16]
 800b73a:	60c5      	str	r5, [r0, #12]
 800b73c:	f104 0914 	add.w	r9, r4, #20
 800b740:	f108 0514 	add.w	r5, r8, #20
 800b744:	f100 0e14 	add.w	lr, r0, #20
 800b748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b750:	f108 0210 	add.w	r2, r8, #16
 800b754:	46f2      	mov	sl, lr
 800b756:	2100      	movs	r1, #0
 800b758:	f859 3b04 	ldr.w	r3, [r9], #4
 800b75c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b760:	fa1f f883 	uxth.w	r8, r3
 800b764:	fa11 f18b 	uxtah	r1, r1, fp
 800b768:	0c1b      	lsrs	r3, r3, #16
 800b76a:	eba1 0808 	sub.w	r8, r1, r8
 800b76e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b776:	fa1f f888 	uxth.w	r8, r8
 800b77a:	1419      	asrs	r1, r3, #16
 800b77c:	454e      	cmp	r6, r9
 800b77e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b782:	f84a 3b04 	str.w	r3, [sl], #4
 800b786:	d8e7      	bhi.n	800b758 <__mdiff+0x80>
 800b788:	1b33      	subs	r3, r6, r4
 800b78a:	3b15      	subs	r3, #21
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	3304      	adds	r3, #4
 800b792:	3415      	adds	r4, #21
 800b794:	42a6      	cmp	r6, r4
 800b796:	bf38      	it	cc
 800b798:	2304      	movcc	r3, #4
 800b79a:	441d      	add	r5, r3
 800b79c:	4473      	add	r3, lr
 800b79e:	469e      	mov	lr, r3
 800b7a0:	462e      	mov	r6, r5
 800b7a2:	4566      	cmp	r6, ip
 800b7a4:	d30e      	bcc.n	800b7c4 <__mdiff+0xec>
 800b7a6:	f10c 0203 	add.w	r2, ip, #3
 800b7aa:	1b52      	subs	r2, r2, r5
 800b7ac:	f022 0203 	bic.w	r2, r2, #3
 800b7b0:	3d03      	subs	r5, #3
 800b7b2:	45ac      	cmp	ip, r5
 800b7b4:	bf38      	it	cc
 800b7b6:	2200      	movcc	r2, #0
 800b7b8:	441a      	add	r2, r3
 800b7ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7be:	b17b      	cbz	r3, 800b7e0 <__mdiff+0x108>
 800b7c0:	6107      	str	r7, [r0, #16]
 800b7c2:	e7a3      	b.n	800b70c <__mdiff+0x34>
 800b7c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7c8:	fa11 f288 	uxtah	r2, r1, r8
 800b7cc:	1414      	asrs	r4, r2, #16
 800b7ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7d2:	b292      	uxth	r2, r2
 800b7d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b7dc:	1421      	asrs	r1, r4, #16
 800b7de:	e7e0      	b.n	800b7a2 <__mdiff+0xca>
 800b7e0:	3f01      	subs	r7, #1
 800b7e2:	e7ea      	b.n	800b7ba <__mdiff+0xe2>
 800b7e4:	0800ccdf 	.word	0x0800ccdf
 800b7e8:	0800ccf0 	.word	0x0800ccf0

0800b7ec <__d2b>:
 800b7ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7f0:	4689      	mov	r9, r1
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	ec57 6b10 	vmov	r6, r7, d0
 800b7f8:	4690      	mov	r8, r2
 800b7fa:	f7ff fccf 	bl	800b19c <_Balloc>
 800b7fe:	4604      	mov	r4, r0
 800b800:	b930      	cbnz	r0, 800b810 <__d2b+0x24>
 800b802:	4602      	mov	r2, r0
 800b804:	4b25      	ldr	r3, [pc, #148]	; (800b89c <__d2b+0xb0>)
 800b806:	4826      	ldr	r0, [pc, #152]	; (800b8a0 <__d2b+0xb4>)
 800b808:	f240 310a 	movw	r1, #778	; 0x30a
 800b80c:	f000 faac 	bl	800bd68 <__assert_func>
 800b810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b818:	bb35      	cbnz	r5, 800b868 <__d2b+0x7c>
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	d028      	beq.n	800b872 <__d2b+0x86>
 800b820:	4668      	mov	r0, sp
 800b822:	9600      	str	r6, [sp, #0]
 800b824:	f7ff fd82 	bl	800b32c <__lo0bits>
 800b828:	9900      	ldr	r1, [sp, #0]
 800b82a:	b300      	cbz	r0, 800b86e <__d2b+0x82>
 800b82c:	9a01      	ldr	r2, [sp, #4]
 800b82e:	f1c0 0320 	rsb	r3, r0, #32
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	430b      	orrs	r3, r1
 800b838:	40c2      	lsrs	r2, r0
 800b83a:	6163      	str	r3, [r4, #20]
 800b83c:	9201      	str	r2, [sp, #4]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	61a3      	str	r3, [r4, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	bf14      	ite	ne
 800b846:	2202      	movne	r2, #2
 800b848:	2201      	moveq	r2, #1
 800b84a:	6122      	str	r2, [r4, #16]
 800b84c:	b1d5      	cbz	r5, 800b884 <__d2b+0x98>
 800b84e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b852:	4405      	add	r5, r0
 800b854:	f8c9 5000 	str.w	r5, [r9]
 800b858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b85c:	f8c8 0000 	str.w	r0, [r8]
 800b860:	4620      	mov	r0, r4
 800b862:	b003      	add	sp, #12
 800b864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b86c:	e7d5      	b.n	800b81a <__d2b+0x2e>
 800b86e:	6161      	str	r1, [r4, #20]
 800b870:	e7e5      	b.n	800b83e <__d2b+0x52>
 800b872:	a801      	add	r0, sp, #4
 800b874:	f7ff fd5a 	bl	800b32c <__lo0bits>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	6163      	str	r3, [r4, #20]
 800b87c:	2201      	movs	r2, #1
 800b87e:	6122      	str	r2, [r4, #16]
 800b880:	3020      	adds	r0, #32
 800b882:	e7e3      	b.n	800b84c <__d2b+0x60>
 800b884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b88c:	f8c9 0000 	str.w	r0, [r9]
 800b890:	6918      	ldr	r0, [r3, #16]
 800b892:	f7ff fd2b 	bl	800b2ec <__hi0bits>
 800b896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b89a:	e7df      	b.n	800b85c <__d2b+0x70>
 800b89c:	0800ccdf 	.word	0x0800ccdf
 800b8a0:	0800ccf0 	.word	0x0800ccf0

0800b8a4 <_calloc_r>:
 800b8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a6:	fba1 2402 	umull	r2, r4, r1, r2
 800b8aa:	b94c      	cbnz	r4, 800b8c0 <_calloc_r+0x1c>
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	9201      	str	r2, [sp, #4]
 800b8b0:	f000 f87a 	bl	800b9a8 <_malloc_r>
 800b8b4:	9a01      	ldr	r2, [sp, #4]
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b930      	cbnz	r0, 800b8c8 <_calloc_r+0x24>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	b003      	add	sp, #12
 800b8be:	bd30      	pop	{r4, r5, pc}
 800b8c0:	220c      	movs	r2, #12
 800b8c2:	6002      	str	r2, [r0, #0]
 800b8c4:	2500      	movs	r5, #0
 800b8c6:	e7f8      	b.n	800b8ba <_calloc_r+0x16>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	f7fe f94f 	bl	8009b6c <memset>
 800b8ce:	e7f4      	b.n	800b8ba <_calloc_r+0x16>

0800b8d0 <_free_r>:
 800b8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	d044      	beq.n	800b960 <_free_r+0x90>
 800b8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8da:	9001      	str	r0, [sp, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f1a1 0404 	sub.w	r4, r1, #4
 800b8e2:	bfb8      	it	lt
 800b8e4:	18e4      	addlt	r4, r4, r3
 800b8e6:	f000 fa9b 	bl	800be20 <__malloc_lock>
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <_free_r+0x94>)
 800b8ec:	9801      	ldr	r0, [sp, #4]
 800b8ee:	6813      	ldr	r3, [r2, #0]
 800b8f0:	b933      	cbnz	r3, 800b900 <_free_r+0x30>
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6014      	str	r4, [r2, #0]
 800b8f6:	b003      	add	sp, #12
 800b8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8fc:	f000 ba96 	b.w	800be2c <__malloc_unlock>
 800b900:	42a3      	cmp	r3, r4
 800b902:	d908      	bls.n	800b916 <_free_r+0x46>
 800b904:	6825      	ldr	r5, [r4, #0]
 800b906:	1961      	adds	r1, r4, r5
 800b908:	428b      	cmp	r3, r1
 800b90a:	bf01      	itttt	eq
 800b90c:	6819      	ldreq	r1, [r3, #0]
 800b90e:	685b      	ldreq	r3, [r3, #4]
 800b910:	1949      	addeq	r1, r1, r5
 800b912:	6021      	streq	r1, [r4, #0]
 800b914:	e7ed      	b.n	800b8f2 <_free_r+0x22>
 800b916:	461a      	mov	r2, r3
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	b10b      	cbz	r3, 800b920 <_free_r+0x50>
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	d9fa      	bls.n	800b916 <_free_r+0x46>
 800b920:	6811      	ldr	r1, [r2, #0]
 800b922:	1855      	adds	r5, r2, r1
 800b924:	42a5      	cmp	r5, r4
 800b926:	d10b      	bne.n	800b940 <_free_r+0x70>
 800b928:	6824      	ldr	r4, [r4, #0]
 800b92a:	4421      	add	r1, r4
 800b92c:	1854      	adds	r4, r2, r1
 800b92e:	42a3      	cmp	r3, r4
 800b930:	6011      	str	r1, [r2, #0]
 800b932:	d1e0      	bne.n	800b8f6 <_free_r+0x26>
 800b934:	681c      	ldr	r4, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	6053      	str	r3, [r2, #4]
 800b93a:	4421      	add	r1, r4
 800b93c:	6011      	str	r1, [r2, #0]
 800b93e:	e7da      	b.n	800b8f6 <_free_r+0x26>
 800b940:	d902      	bls.n	800b948 <_free_r+0x78>
 800b942:	230c      	movs	r3, #12
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	e7d6      	b.n	800b8f6 <_free_r+0x26>
 800b948:	6825      	ldr	r5, [r4, #0]
 800b94a:	1961      	adds	r1, r4, r5
 800b94c:	428b      	cmp	r3, r1
 800b94e:	bf04      	itt	eq
 800b950:	6819      	ldreq	r1, [r3, #0]
 800b952:	685b      	ldreq	r3, [r3, #4]
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	bf04      	itt	eq
 800b958:	1949      	addeq	r1, r1, r5
 800b95a:	6021      	streq	r1, [r4, #0]
 800b95c:	6054      	str	r4, [r2, #4]
 800b95e:	e7ca      	b.n	800b8f6 <_free_r+0x26>
 800b960:	b003      	add	sp, #12
 800b962:	bd30      	pop	{r4, r5, pc}
 800b964:	2000135c 	.word	0x2000135c

0800b968 <sbrk_aligned>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4e0e      	ldr	r6, [pc, #56]	; (800b9a4 <sbrk_aligned+0x3c>)
 800b96c:	460c      	mov	r4, r1
 800b96e:	6831      	ldr	r1, [r6, #0]
 800b970:	4605      	mov	r5, r0
 800b972:	b911      	cbnz	r1, 800b97a <sbrk_aligned+0x12>
 800b974:	f000 f9e8 	bl	800bd48 <_sbrk_r>
 800b978:	6030      	str	r0, [r6, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 f9e3 	bl	800bd48 <_sbrk_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d00a      	beq.n	800b99c <sbrk_aligned+0x34>
 800b986:	1cc4      	adds	r4, r0, #3
 800b988:	f024 0403 	bic.w	r4, r4, #3
 800b98c:	42a0      	cmp	r0, r4
 800b98e:	d007      	beq.n	800b9a0 <sbrk_aligned+0x38>
 800b990:	1a21      	subs	r1, r4, r0
 800b992:	4628      	mov	r0, r5
 800b994:	f000 f9d8 	bl	800bd48 <_sbrk_r>
 800b998:	3001      	adds	r0, #1
 800b99a:	d101      	bne.n	800b9a0 <sbrk_aligned+0x38>
 800b99c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	20001360 	.word	0x20001360

0800b9a8 <_malloc_r>:
 800b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	1ccd      	adds	r5, r1, #3
 800b9ae:	f025 0503 	bic.w	r5, r5, #3
 800b9b2:	3508      	adds	r5, #8
 800b9b4:	2d0c      	cmp	r5, #12
 800b9b6:	bf38      	it	cc
 800b9b8:	250c      	movcc	r5, #12
 800b9ba:	2d00      	cmp	r5, #0
 800b9bc:	4607      	mov	r7, r0
 800b9be:	db01      	blt.n	800b9c4 <_malloc_r+0x1c>
 800b9c0:	42a9      	cmp	r1, r5
 800b9c2:	d905      	bls.n	800b9d0 <_malloc_r+0x28>
 800b9c4:	230c      	movs	r3, #12
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	2600      	movs	r6, #0
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	4e2e      	ldr	r6, [pc, #184]	; (800ba8c <_malloc_r+0xe4>)
 800b9d2:	f000 fa25 	bl	800be20 <__malloc_lock>
 800b9d6:	6833      	ldr	r3, [r6, #0]
 800b9d8:	461c      	mov	r4, r3
 800b9da:	bb34      	cbnz	r4, 800ba2a <_malloc_r+0x82>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f7ff ffc2 	bl	800b968 <sbrk_aligned>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	d14d      	bne.n	800ba86 <_malloc_r+0xde>
 800b9ea:	6834      	ldr	r4, [r6, #0]
 800b9ec:	4626      	mov	r6, r4
 800b9ee:	2e00      	cmp	r6, #0
 800b9f0:	d140      	bne.n	800ba74 <_malloc_r+0xcc>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	eb04 0803 	add.w	r8, r4, r3
 800b9fc:	f000 f9a4 	bl	800bd48 <_sbrk_r>
 800ba00:	4580      	cmp	r8, r0
 800ba02:	d13a      	bne.n	800ba7a <_malloc_r+0xd2>
 800ba04:	6821      	ldr	r1, [r4, #0]
 800ba06:	3503      	adds	r5, #3
 800ba08:	1a6d      	subs	r5, r5, r1
 800ba0a:	f025 0503 	bic.w	r5, r5, #3
 800ba0e:	3508      	adds	r5, #8
 800ba10:	2d0c      	cmp	r5, #12
 800ba12:	bf38      	it	cc
 800ba14:	250c      	movcc	r5, #12
 800ba16:	4629      	mov	r1, r5
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f7ff ffa5 	bl	800b968 <sbrk_aligned>
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d02b      	beq.n	800ba7a <_malloc_r+0xd2>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	442b      	add	r3, r5
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	e00e      	b.n	800ba48 <_malloc_r+0xa0>
 800ba2a:	6822      	ldr	r2, [r4, #0]
 800ba2c:	1b52      	subs	r2, r2, r5
 800ba2e:	d41e      	bmi.n	800ba6e <_malloc_r+0xc6>
 800ba30:	2a0b      	cmp	r2, #11
 800ba32:	d916      	bls.n	800ba62 <_malloc_r+0xba>
 800ba34:	1961      	adds	r1, r4, r5
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	6025      	str	r5, [r4, #0]
 800ba3a:	bf18      	it	ne
 800ba3c:	6059      	strne	r1, [r3, #4]
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	bf08      	it	eq
 800ba42:	6031      	streq	r1, [r6, #0]
 800ba44:	5162      	str	r2, [r4, r5]
 800ba46:	604b      	str	r3, [r1, #4]
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f104 060b 	add.w	r6, r4, #11
 800ba4e:	f000 f9ed 	bl	800be2c <__malloc_unlock>
 800ba52:	f026 0607 	bic.w	r6, r6, #7
 800ba56:	1d23      	adds	r3, r4, #4
 800ba58:	1af2      	subs	r2, r6, r3
 800ba5a:	d0b6      	beq.n	800b9ca <_malloc_r+0x22>
 800ba5c:	1b9b      	subs	r3, r3, r6
 800ba5e:	50a3      	str	r3, [r4, r2]
 800ba60:	e7b3      	b.n	800b9ca <_malloc_r+0x22>
 800ba62:	6862      	ldr	r2, [r4, #4]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	bf0c      	ite	eq
 800ba68:	6032      	streq	r2, [r6, #0]
 800ba6a:	605a      	strne	r2, [r3, #4]
 800ba6c:	e7ec      	b.n	800ba48 <_malloc_r+0xa0>
 800ba6e:	4623      	mov	r3, r4
 800ba70:	6864      	ldr	r4, [r4, #4]
 800ba72:	e7b2      	b.n	800b9da <_malloc_r+0x32>
 800ba74:	4634      	mov	r4, r6
 800ba76:	6876      	ldr	r6, [r6, #4]
 800ba78:	e7b9      	b.n	800b9ee <_malloc_r+0x46>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	603b      	str	r3, [r7, #0]
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f000 f9d4 	bl	800be2c <__malloc_unlock>
 800ba84:	e7a1      	b.n	800b9ca <_malloc_r+0x22>
 800ba86:	6025      	str	r5, [r4, #0]
 800ba88:	e7de      	b.n	800ba48 <_malloc_r+0xa0>
 800ba8a:	bf00      	nop
 800ba8c:	2000135c 	.word	0x2000135c

0800ba90 <__ssputs_r>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	688e      	ldr	r6, [r1, #8]
 800ba96:	429e      	cmp	r6, r3
 800ba98:	4682      	mov	sl, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4690      	mov	r8, r2
 800ba9e:	461f      	mov	r7, r3
 800baa0:	d838      	bhi.n	800bb14 <__ssputs_r+0x84>
 800baa2:	898a      	ldrh	r2, [r1, #12]
 800baa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baa8:	d032      	beq.n	800bb10 <__ssputs_r+0x80>
 800baaa:	6825      	ldr	r5, [r4, #0]
 800baac:	6909      	ldr	r1, [r1, #16]
 800baae:	eba5 0901 	sub.w	r9, r5, r1
 800bab2:	6965      	ldr	r5, [r4, #20]
 800bab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800babc:	3301      	adds	r3, #1
 800babe:	444b      	add	r3, r9
 800bac0:	106d      	asrs	r5, r5, #1
 800bac2:	429d      	cmp	r5, r3
 800bac4:	bf38      	it	cc
 800bac6:	461d      	movcc	r5, r3
 800bac8:	0553      	lsls	r3, r2, #21
 800baca:	d531      	bpl.n	800bb30 <__ssputs_r+0xa0>
 800bacc:	4629      	mov	r1, r5
 800bace:	f7ff ff6b 	bl	800b9a8 <_malloc_r>
 800bad2:	4606      	mov	r6, r0
 800bad4:	b950      	cbnz	r0, 800baec <__ssputs_r+0x5c>
 800bad6:	230c      	movs	r3, #12
 800bad8:	f8ca 3000 	str.w	r3, [sl]
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baec:	6921      	ldr	r1, [r4, #16]
 800baee:	464a      	mov	r2, r9
 800baf0:	f7fe f82e 	bl	8009b50 <memcpy>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	6126      	str	r6, [r4, #16]
 800bb02:	6165      	str	r5, [r4, #20]
 800bb04:	444e      	add	r6, r9
 800bb06:	eba5 0509 	sub.w	r5, r5, r9
 800bb0a:	6026      	str	r6, [r4, #0]
 800bb0c:	60a5      	str	r5, [r4, #8]
 800bb0e:	463e      	mov	r6, r7
 800bb10:	42be      	cmp	r6, r7
 800bb12:	d900      	bls.n	800bb16 <__ssputs_r+0x86>
 800bb14:	463e      	mov	r6, r7
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	4632      	mov	r2, r6
 800bb1a:	4641      	mov	r1, r8
 800bb1c:	f000 f966 	bl	800bdec <memmove>
 800bb20:	68a3      	ldr	r3, [r4, #8]
 800bb22:	1b9b      	subs	r3, r3, r6
 800bb24:	60a3      	str	r3, [r4, #8]
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	4433      	add	r3, r6
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e7db      	b.n	800bae8 <__ssputs_r+0x58>
 800bb30:	462a      	mov	r2, r5
 800bb32:	f000 f981 	bl	800be38 <_realloc_r>
 800bb36:	4606      	mov	r6, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d1e1      	bne.n	800bb00 <__ssputs_r+0x70>
 800bb3c:	6921      	ldr	r1, [r4, #16]
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7ff fec6 	bl	800b8d0 <_free_r>
 800bb44:	e7c7      	b.n	800bad6 <__ssputs_r+0x46>
	...

0800bb48 <_svfiprintf_r>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	4698      	mov	r8, r3
 800bb4e:	898b      	ldrh	r3, [r1, #12]
 800bb50:	061b      	lsls	r3, r3, #24
 800bb52:	b09d      	sub	sp, #116	; 0x74
 800bb54:	4607      	mov	r7, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	d50e      	bpl.n	800bb7a <_svfiprintf_r+0x32>
 800bb5c:	690b      	ldr	r3, [r1, #16]
 800bb5e:	b963      	cbnz	r3, 800bb7a <_svfiprintf_r+0x32>
 800bb60:	2140      	movs	r1, #64	; 0x40
 800bb62:	f7ff ff21 	bl	800b9a8 <_malloc_r>
 800bb66:	6028      	str	r0, [r5, #0]
 800bb68:	6128      	str	r0, [r5, #16]
 800bb6a:	b920      	cbnz	r0, 800bb76 <_svfiprintf_r+0x2e>
 800bb6c:	230c      	movs	r3, #12
 800bb6e:	603b      	str	r3, [r7, #0]
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb74:	e0d1      	b.n	800bd1a <_svfiprintf_r+0x1d2>
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	616b      	str	r3, [r5, #20]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7e:	2320      	movs	r3, #32
 800bb80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb84:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb88:	2330      	movs	r3, #48	; 0x30
 800bb8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd34 <_svfiprintf_r+0x1ec>
 800bb8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb92:	f04f 0901 	mov.w	r9, #1
 800bb96:	4623      	mov	r3, r4
 800bb98:	469a      	mov	sl, r3
 800bb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb9e:	b10a      	cbz	r2, 800bba4 <_svfiprintf_r+0x5c>
 800bba0:	2a25      	cmp	r2, #37	; 0x25
 800bba2:	d1f9      	bne.n	800bb98 <_svfiprintf_r+0x50>
 800bba4:	ebba 0b04 	subs.w	fp, sl, r4
 800bba8:	d00b      	beq.n	800bbc2 <_svfiprintf_r+0x7a>
 800bbaa:	465b      	mov	r3, fp
 800bbac:	4622      	mov	r2, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f7ff ff6d 	bl	800ba90 <__ssputs_r>
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	f000 80aa 	beq.w	800bd10 <_svfiprintf_r+0x1c8>
 800bbbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbbe:	445a      	add	r2, fp
 800bbc0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 80a2 	beq.w	800bd10 <_svfiprintf_r+0x1c8>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbd6:	f10a 0a01 	add.w	sl, sl, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	9307      	str	r3, [sp, #28]
 800bbde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe4:	4654      	mov	r4, sl
 800bbe6:	2205      	movs	r2, #5
 800bbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbec:	4851      	ldr	r0, [pc, #324]	; (800bd34 <_svfiprintf_r+0x1ec>)
 800bbee:	f7f4 fb0f 	bl	8000210 <memchr>
 800bbf2:	9a04      	ldr	r2, [sp, #16]
 800bbf4:	b9d8      	cbnz	r0, 800bc2e <_svfiprintf_r+0xe6>
 800bbf6:	06d0      	lsls	r0, r2, #27
 800bbf8:	bf44      	itt	mi
 800bbfa:	2320      	movmi	r3, #32
 800bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc00:	0711      	lsls	r1, r2, #28
 800bc02:	bf44      	itt	mi
 800bc04:	232b      	movmi	r3, #43	; 0x2b
 800bc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc10:	d015      	beq.n	800bc3e <_svfiprintf_r+0xf6>
 800bc12:	9a07      	ldr	r2, [sp, #28]
 800bc14:	4654      	mov	r4, sl
 800bc16:	2000      	movs	r0, #0
 800bc18:	f04f 0c0a 	mov.w	ip, #10
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc22:	3b30      	subs	r3, #48	; 0x30
 800bc24:	2b09      	cmp	r3, #9
 800bc26:	d94e      	bls.n	800bcc6 <_svfiprintf_r+0x17e>
 800bc28:	b1b0      	cbz	r0, 800bc58 <_svfiprintf_r+0x110>
 800bc2a:	9207      	str	r2, [sp, #28]
 800bc2c:	e014      	b.n	800bc58 <_svfiprintf_r+0x110>
 800bc2e:	eba0 0308 	sub.w	r3, r0, r8
 800bc32:	fa09 f303 	lsl.w	r3, r9, r3
 800bc36:	4313      	orrs	r3, r2
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	46a2      	mov	sl, r4
 800bc3c:	e7d2      	b.n	800bbe4 <_svfiprintf_r+0x9c>
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	9103      	str	r1, [sp, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bfbb      	ittet	lt
 800bc4a:	425b      	neglt	r3, r3
 800bc4c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc50:	9307      	strge	r3, [sp, #28]
 800bc52:	9307      	strlt	r3, [sp, #28]
 800bc54:	bfb8      	it	lt
 800bc56:	9204      	strlt	r2, [sp, #16]
 800bc58:	7823      	ldrb	r3, [r4, #0]
 800bc5a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc5c:	d10c      	bne.n	800bc78 <_svfiprintf_r+0x130>
 800bc5e:	7863      	ldrb	r3, [r4, #1]
 800bc60:	2b2a      	cmp	r3, #42	; 0x2a
 800bc62:	d135      	bne.n	800bcd0 <_svfiprintf_r+0x188>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	1d1a      	adds	r2, r3, #4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	9203      	str	r2, [sp, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bfb8      	it	lt
 800bc70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc74:	3402      	adds	r4, #2
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd44 <_svfiprintf_r+0x1fc>
 800bc7c:	7821      	ldrb	r1, [r4, #0]
 800bc7e:	2203      	movs	r2, #3
 800bc80:	4650      	mov	r0, sl
 800bc82:	f7f4 fac5 	bl	8000210 <memchr>
 800bc86:	b140      	cbz	r0, 800bc9a <_svfiprintf_r+0x152>
 800bc88:	2340      	movs	r3, #64	; 0x40
 800bc8a:	eba0 000a 	sub.w	r0, r0, sl
 800bc8e:	fa03 f000 	lsl.w	r0, r3, r0
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	4303      	orrs	r3, r0
 800bc96:	3401      	adds	r4, #1
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9e:	4826      	ldr	r0, [pc, #152]	; (800bd38 <_svfiprintf_r+0x1f0>)
 800bca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca4:	2206      	movs	r2, #6
 800bca6:	f7f4 fab3 	bl	8000210 <memchr>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d038      	beq.n	800bd20 <_svfiprintf_r+0x1d8>
 800bcae:	4b23      	ldr	r3, [pc, #140]	; (800bd3c <_svfiprintf_r+0x1f4>)
 800bcb0:	bb1b      	cbnz	r3, 800bcfa <_svfiprintf_r+0x1b2>
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	3307      	adds	r3, #7
 800bcb6:	f023 0307 	bic.w	r3, r3, #7
 800bcba:	3308      	adds	r3, #8
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc0:	4433      	add	r3, r6
 800bcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc4:	e767      	b.n	800bb96 <_svfiprintf_r+0x4e>
 800bcc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcca:	460c      	mov	r4, r1
 800bccc:	2001      	movs	r0, #1
 800bcce:	e7a5      	b.n	800bc1c <_svfiprintf_r+0xd4>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	f04f 0c0a 	mov.w	ip, #10
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce2:	3a30      	subs	r2, #48	; 0x30
 800bce4:	2a09      	cmp	r2, #9
 800bce6:	d903      	bls.n	800bcf0 <_svfiprintf_r+0x1a8>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0c5      	beq.n	800bc78 <_svfiprintf_r+0x130>
 800bcec:	9105      	str	r1, [sp, #20]
 800bcee:	e7c3      	b.n	800bc78 <_svfiprintf_r+0x130>
 800bcf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e7f0      	b.n	800bcdc <_svfiprintf_r+0x194>
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <_svfiprintf_r+0x1f8>)
 800bd02:	a904      	add	r1, sp, #16
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7fd ffd9 	bl	8009cbc <_printf_float>
 800bd0a:	1c42      	adds	r2, r0, #1
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	d1d6      	bne.n	800bcbe <_svfiprintf_r+0x176>
 800bd10:	89ab      	ldrh	r3, [r5, #12]
 800bd12:	065b      	lsls	r3, r3, #25
 800bd14:	f53f af2c 	bmi.w	800bb70 <_svfiprintf_r+0x28>
 800bd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd1a:	b01d      	add	sp, #116	; 0x74
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	462a      	mov	r2, r5
 800bd26:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <_svfiprintf_r+0x1f8>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7fe fa6a 	bl	800a204 <_printf_i>
 800bd30:	e7eb      	b.n	800bd0a <_svfiprintf_r+0x1c2>
 800bd32:	bf00      	nop
 800bd34:	0800ce4c 	.word	0x0800ce4c
 800bd38:	0800ce56 	.word	0x0800ce56
 800bd3c:	08009cbd 	.word	0x08009cbd
 800bd40:	0800ba91 	.word	0x0800ba91
 800bd44:	0800ce52 	.word	0x0800ce52

0800bd48 <_sbrk_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d06      	ldr	r5, [pc, #24]	; (800bd64 <_sbrk_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f6 fc3a 	bl	80025cc <_sbrk>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_sbrk_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_sbrk_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	20001364 	.word	0x20001364

0800bd68 <__assert_func>:
 800bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <__assert_func+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	68d8      	ldr	r0, [r3, #12]
 800bd76:	b14c      	cbz	r4, 800bd8c <__assert_func+0x24>
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <__assert_func+0x30>)
 800bd7a:	9100      	str	r1, [sp, #0]
 800bd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <__assert_func+0x34>)
 800bd82:	462b      	mov	r3, r5
 800bd84:	f000 f80e 	bl	800bda4 <fiprintf>
 800bd88:	f000 faac 	bl	800c2e4 <abort>
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <__assert_func+0x38>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e7f3      	b.n	800bd7a <__assert_func+0x12>
 800bd92:	bf00      	nop
 800bd94:	2000006c 	.word	0x2000006c
 800bd98:	0800ce5d 	.word	0x0800ce5d
 800bd9c:	0800ce6a 	.word	0x0800ce6a
 800bda0:	0800ce98 	.word	0x0800ce98

0800bda4 <fiprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b503      	push	{r0, r1, lr}
 800bda8:	4601      	mov	r1, r0
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <fiprintf+0x20>)
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	6800      	ldr	r0, [r0, #0]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f000 f897 	bl	800bee8 <_vfiprintf_r>
 800bdba:	b002      	add	sp, #8
 800bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc0:	b003      	add	sp, #12
 800bdc2:	4770      	bx	lr
 800bdc4:	2000006c 	.word	0x2000006c

0800bdc8 <__ascii_mbtowc>:
 800bdc8:	b082      	sub	sp, #8
 800bdca:	b901      	cbnz	r1, 800bdce <__ascii_mbtowc+0x6>
 800bdcc:	a901      	add	r1, sp, #4
 800bdce:	b142      	cbz	r2, 800bde2 <__ascii_mbtowc+0x1a>
 800bdd0:	b14b      	cbz	r3, 800bde6 <__ascii_mbtowc+0x1e>
 800bdd2:	7813      	ldrb	r3, [r2, #0]
 800bdd4:	600b      	str	r3, [r1, #0]
 800bdd6:	7812      	ldrb	r2, [r2, #0]
 800bdd8:	1e10      	subs	r0, r2, #0
 800bdda:	bf18      	it	ne
 800bddc:	2001      	movne	r0, #1
 800bdde:	b002      	add	sp, #8
 800bde0:	4770      	bx	lr
 800bde2:	4610      	mov	r0, r2
 800bde4:	e7fb      	b.n	800bdde <__ascii_mbtowc+0x16>
 800bde6:	f06f 0001 	mvn.w	r0, #1
 800bdea:	e7f8      	b.n	800bdde <__ascii_mbtowc+0x16>

0800bdec <memmove>:
 800bdec:	4288      	cmp	r0, r1
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	eb01 0402 	add.w	r4, r1, r2
 800bdf4:	d902      	bls.n	800bdfc <memmove+0x10>
 800bdf6:	4284      	cmp	r4, r0
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	d807      	bhi.n	800be0c <memmove+0x20>
 800bdfc:	1e43      	subs	r3, r0, #1
 800bdfe:	42a1      	cmp	r1, r4
 800be00:	d008      	beq.n	800be14 <memmove+0x28>
 800be02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be0a:	e7f8      	b.n	800bdfe <memmove+0x12>
 800be0c:	4402      	add	r2, r0
 800be0e:	4601      	mov	r1, r0
 800be10:	428a      	cmp	r2, r1
 800be12:	d100      	bne.n	800be16 <memmove+0x2a>
 800be14:	bd10      	pop	{r4, pc}
 800be16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be1e:	e7f7      	b.n	800be10 <memmove+0x24>

0800be20 <__malloc_lock>:
 800be20:	4801      	ldr	r0, [pc, #4]	; (800be28 <__malloc_lock+0x8>)
 800be22:	f000 bc1f 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800be26:	bf00      	nop
 800be28:	20001368 	.word	0x20001368

0800be2c <__malloc_unlock>:
 800be2c:	4801      	ldr	r0, [pc, #4]	; (800be34 <__malloc_unlock+0x8>)
 800be2e:	f000 bc1a 	b.w	800c666 <__retarget_lock_release_recursive>
 800be32:	bf00      	nop
 800be34:	20001368 	.word	0x20001368

0800be38 <_realloc_r>:
 800be38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3c:	4680      	mov	r8, r0
 800be3e:	4614      	mov	r4, r2
 800be40:	460e      	mov	r6, r1
 800be42:	b921      	cbnz	r1, 800be4e <_realloc_r+0x16>
 800be44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be48:	4611      	mov	r1, r2
 800be4a:	f7ff bdad 	b.w	800b9a8 <_malloc_r>
 800be4e:	b92a      	cbnz	r2, 800be5c <_realloc_r+0x24>
 800be50:	f7ff fd3e 	bl	800b8d0 <_free_r>
 800be54:	4625      	mov	r5, r4
 800be56:	4628      	mov	r0, r5
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	f000 fc6a 	bl	800c734 <_malloc_usable_size_r>
 800be60:	4284      	cmp	r4, r0
 800be62:	4607      	mov	r7, r0
 800be64:	d802      	bhi.n	800be6c <_realloc_r+0x34>
 800be66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be6a:	d812      	bhi.n	800be92 <_realloc_r+0x5a>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4640      	mov	r0, r8
 800be70:	f7ff fd9a 	bl	800b9a8 <_malloc_r>
 800be74:	4605      	mov	r5, r0
 800be76:	2800      	cmp	r0, #0
 800be78:	d0ed      	beq.n	800be56 <_realloc_r+0x1e>
 800be7a:	42bc      	cmp	r4, r7
 800be7c:	4622      	mov	r2, r4
 800be7e:	4631      	mov	r1, r6
 800be80:	bf28      	it	cs
 800be82:	463a      	movcs	r2, r7
 800be84:	f7fd fe64 	bl	8009b50 <memcpy>
 800be88:	4631      	mov	r1, r6
 800be8a:	4640      	mov	r0, r8
 800be8c:	f7ff fd20 	bl	800b8d0 <_free_r>
 800be90:	e7e1      	b.n	800be56 <_realloc_r+0x1e>
 800be92:	4635      	mov	r5, r6
 800be94:	e7df      	b.n	800be56 <_realloc_r+0x1e>

0800be96 <__sfputc_r>:
 800be96:	6893      	ldr	r3, [r2, #8]
 800be98:	3b01      	subs	r3, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	b410      	push	{r4}
 800be9e:	6093      	str	r3, [r2, #8]
 800bea0:	da08      	bge.n	800beb4 <__sfputc_r+0x1e>
 800bea2:	6994      	ldr	r4, [r2, #24]
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	db01      	blt.n	800beac <__sfputc_r+0x16>
 800bea8:	290a      	cmp	r1, #10
 800beaa:	d103      	bne.n	800beb4 <__sfputc_r+0x1e>
 800beac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb0:	f000 b94a 	b.w	800c148 <__swbuf_r>
 800beb4:	6813      	ldr	r3, [r2, #0]
 800beb6:	1c58      	adds	r0, r3, #1
 800beb8:	6010      	str	r0, [r2, #0]
 800beba:	7019      	strb	r1, [r3, #0]
 800bebc:	4608      	mov	r0, r1
 800bebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <__sfputs_r>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	4614      	mov	r4, r2
 800becc:	18d5      	adds	r5, r2, r3
 800bece:	42ac      	cmp	r4, r5
 800bed0:	d101      	bne.n	800bed6 <__sfputs_r+0x12>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e007      	b.n	800bee6 <__sfputs_r+0x22>
 800bed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beda:	463a      	mov	r2, r7
 800bedc:	4630      	mov	r0, r6
 800bede:	f7ff ffda 	bl	800be96 <__sfputc_r>
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	d1f3      	bne.n	800bece <__sfputs_r+0xa>
 800bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bee8 <_vfiprintf_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	460d      	mov	r5, r1
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	4614      	mov	r4, r2
 800bef2:	4698      	mov	r8, r3
 800bef4:	4606      	mov	r6, r0
 800bef6:	b118      	cbz	r0, 800bf00 <_vfiprintf_r+0x18>
 800bef8:	6983      	ldr	r3, [r0, #24]
 800befa:	b90b      	cbnz	r3, 800bf00 <_vfiprintf_r+0x18>
 800befc:	f000 fb14 	bl	800c528 <__sinit>
 800bf00:	4b89      	ldr	r3, [pc, #548]	; (800c128 <_vfiprintf_r+0x240>)
 800bf02:	429d      	cmp	r5, r3
 800bf04:	d11b      	bne.n	800bf3e <_vfiprintf_r+0x56>
 800bf06:	6875      	ldr	r5, [r6, #4]
 800bf08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf0a:	07d9      	lsls	r1, r3, #31
 800bf0c:	d405      	bmi.n	800bf1a <_vfiprintf_r+0x32>
 800bf0e:	89ab      	ldrh	r3, [r5, #12]
 800bf10:	059a      	lsls	r2, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_vfiprintf_r+0x32>
 800bf14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf16:	f000 fba5 	bl	800c664 <__retarget_lock_acquire_recursive>
 800bf1a:	89ab      	ldrh	r3, [r5, #12]
 800bf1c:	071b      	lsls	r3, r3, #28
 800bf1e:	d501      	bpl.n	800bf24 <_vfiprintf_r+0x3c>
 800bf20:	692b      	ldr	r3, [r5, #16]
 800bf22:	b9eb      	cbnz	r3, 800bf60 <_vfiprintf_r+0x78>
 800bf24:	4629      	mov	r1, r5
 800bf26:	4630      	mov	r0, r6
 800bf28:	f000 f96e 	bl	800c208 <__swsetup_r>
 800bf2c:	b1c0      	cbz	r0, 800bf60 <_vfiprintf_r+0x78>
 800bf2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf30:	07dc      	lsls	r4, r3, #31
 800bf32:	d50e      	bpl.n	800bf52 <_vfiprintf_r+0x6a>
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf38:	b01d      	add	sp, #116	; 0x74
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	4b7b      	ldr	r3, [pc, #492]	; (800c12c <_vfiprintf_r+0x244>)
 800bf40:	429d      	cmp	r5, r3
 800bf42:	d101      	bne.n	800bf48 <_vfiprintf_r+0x60>
 800bf44:	68b5      	ldr	r5, [r6, #8]
 800bf46:	e7df      	b.n	800bf08 <_vfiprintf_r+0x20>
 800bf48:	4b79      	ldr	r3, [pc, #484]	; (800c130 <_vfiprintf_r+0x248>)
 800bf4a:	429d      	cmp	r5, r3
 800bf4c:	bf08      	it	eq
 800bf4e:	68f5      	ldreq	r5, [r6, #12]
 800bf50:	e7da      	b.n	800bf08 <_vfiprintf_r+0x20>
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	0598      	lsls	r0, r3, #22
 800bf56:	d4ed      	bmi.n	800bf34 <_vfiprintf_r+0x4c>
 800bf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf5a:	f000 fb84 	bl	800c666 <__retarget_lock_release_recursive>
 800bf5e:	e7e9      	b.n	800bf34 <_vfiprintf_r+0x4c>
 800bf60:	2300      	movs	r3, #0
 800bf62:	9309      	str	r3, [sp, #36]	; 0x24
 800bf64:	2320      	movs	r3, #32
 800bf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf6e:	2330      	movs	r3, #48	; 0x30
 800bf70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c134 <_vfiprintf_r+0x24c>
 800bf74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf78:	f04f 0901 	mov.w	r9, #1
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	469a      	mov	sl, r3
 800bf80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf84:	b10a      	cbz	r2, 800bf8a <_vfiprintf_r+0xa2>
 800bf86:	2a25      	cmp	r2, #37	; 0x25
 800bf88:	d1f9      	bne.n	800bf7e <_vfiprintf_r+0x96>
 800bf8a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf8e:	d00b      	beq.n	800bfa8 <_vfiprintf_r+0xc0>
 800bf90:	465b      	mov	r3, fp
 800bf92:	4622      	mov	r2, r4
 800bf94:	4629      	mov	r1, r5
 800bf96:	4630      	mov	r0, r6
 800bf98:	f7ff ff94 	bl	800bec4 <__sfputs_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f000 80aa 	beq.w	800c0f6 <_vfiprintf_r+0x20e>
 800bfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa4:	445a      	add	r2, fp
 800bfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 80a2 	beq.w	800c0f6 <_vfiprintf_r+0x20e>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfbc:	f10a 0a01 	add.w	sl, sl, #1
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800bfca:	4654      	mov	r4, sl
 800bfcc:	2205      	movs	r2, #5
 800bfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd2:	4858      	ldr	r0, [pc, #352]	; (800c134 <_vfiprintf_r+0x24c>)
 800bfd4:	f7f4 f91c 	bl	8000210 <memchr>
 800bfd8:	9a04      	ldr	r2, [sp, #16]
 800bfda:	b9d8      	cbnz	r0, 800c014 <_vfiprintf_r+0x12c>
 800bfdc:	06d1      	lsls	r1, r2, #27
 800bfde:	bf44      	itt	mi
 800bfe0:	2320      	movmi	r3, #32
 800bfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe6:	0713      	lsls	r3, r2, #28
 800bfe8:	bf44      	itt	mi
 800bfea:	232b      	movmi	r3, #43	; 0x2b
 800bfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bff0:	f89a 3000 	ldrb.w	r3, [sl]
 800bff4:	2b2a      	cmp	r3, #42	; 0x2a
 800bff6:	d015      	beq.n	800c024 <_vfiprintf_r+0x13c>
 800bff8:	9a07      	ldr	r2, [sp, #28]
 800bffa:	4654      	mov	r4, sl
 800bffc:	2000      	movs	r0, #0
 800bffe:	f04f 0c0a 	mov.w	ip, #10
 800c002:	4621      	mov	r1, r4
 800c004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c008:	3b30      	subs	r3, #48	; 0x30
 800c00a:	2b09      	cmp	r3, #9
 800c00c:	d94e      	bls.n	800c0ac <_vfiprintf_r+0x1c4>
 800c00e:	b1b0      	cbz	r0, 800c03e <_vfiprintf_r+0x156>
 800c010:	9207      	str	r2, [sp, #28]
 800c012:	e014      	b.n	800c03e <_vfiprintf_r+0x156>
 800c014:	eba0 0308 	sub.w	r3, r0, r8
 800c018:	fa09 f303 	lsl.w	r3, r9, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	9304      	str	r3, [sp, #16]
 800c020:	46a2      	mov	sl, r4
 800c022:	e7d2      	b.n	800bfca <_vfiprintf_r+0xe2>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	1d19      	adds	r1, r3, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	9103      	str	r1, [sp, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	bfbb      	ittet	lt
 800c030:	425b      	neglt	r3, r3
 800c032:	f042 0202 	orrlt.w	r2, r2, #2
 800c036:	9307      	strge	r3, [sp, #28]
 800c038:	9307      	strlt	r3, [sp, #28]
 800c03a:	bfb8      	it	lt
 800c03c:	9204      	strlt	r2, [sp, #16]
 800c03e:	7823      	ldrb	r3, [r4, #0]
 800c040:	2b2e      	cmp	r3, #46	; 0x2e
 800c042:	d10c      	bne.n	800c05e <_vfiprintf_r+0x176>
 800c044:	7863      	ldrb	r3, [r4, #1]
 800c046:	2b2a      	cmp	r3, #42	; 0x2a
 800c048:	d135      	bne.n	800c0b6 <_vfiprintf_r+0x1ce>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	1d1a      	adds	r2, r3, #4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	9203      	str	r2, [sp, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfb8      	it	lt
 800c056:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c05a:	3402      	adds	r4, #2
 800c05c:	9305      	str	r3, [sp, #20]
 800c05e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c144 <_vfiprintf_r+0x25c>
 800c062:	7821      	ldrb	r1, [r4, #0]
 800c064:	2203      	movs	r2, #3
 800c066:	4650      	mov	r0, sl
 800c068:	f7f4 f8d2 	bl	8000210 <memchr>
 800c06c:	b140      	cbz	r0, 800c080 <_vfiprintf_r+0x198>
 800c06e:	2340      	movs	r3, #64	; 0x40
 800c070:	eba0 000a 	sub.w	r0, r0, sl
 800c074:	fa03 f000 	lsl.w	r0, r3, r0
 800c078:	9b04      	ldr	r3, [sp, #16]
 800c07a:	4303      	orrs	r3, r0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c084:	482c      	ldr	r0, [pc, #176]	; (800c138 <_vfiprintf_r+0x250>)
 800c086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c08a:	2206      	movs	r2, #6
 800c08c:	f7f4 f8c0 	bl	8000210 <memchr>
 800c090:	2800      	cmp	r0, #0
 800c092:	d03f      	beq.n	800c114 <_vfiprintf_r+0x22c>
 800c094:	4b29      	ldr	r3, [pc, #164]	; (800c13c <_vfiprintf_r+0x254>)
 800c096:	bb1b      	cbnz	r3, 800c0e0 <_vfiprintf_r+0x1f8>
 800c098:	9b03      	ldr	r3, [sp, #12]
 800c09a:	3307      	adds	r3, #7
 800c09c:	f023 0307 	bic.w	r3, r3, #7
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a6:	443b      	add	r3, r7
 800c0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0aa:	e767      	b.n	800bf7c <_vfiprintf_r+0x94>
 800c0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	e7a5      	b.n	800c002 <_vfiprintf_r+0x11a>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	3401      	adds	r4, #1
 800c0ba:	9305      	str	r3, [sp, #20]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f04f 0c0a 	mov.w	ip, #10
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0c8:	3a30      	subs	r2, #48	; 0x30
 800c0ca:	2a09      	cmp	r2, #9
 800c0cc:	d903      	bls.n	800c0d6 <_vfiprintf_r+0x1ee>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0c5      	beq.n	800c05e <_vfiprintf_r+0x176>
 800c0d2:	9105      	str	r1, [sp, #20]
 800c0d4:	e7c3      	b.n	800c05e <_vfiprintf_r+0x176>
 800c0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0da:	4604      	mov	r4, r0
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e7f0      	b.n	800c0c2 <_vfiprintf_r+0x1da>
 800c0e0:	ab03      	add	r3, sp, #12
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	462a      	mov	r2, r5
 800c0e6:	4b16      	ldr	r3, [pc, #88]	; (800c140 <_vfiprintf_r+0x258>)
 800c0e8:	a904      	add	r1, sp, #16
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7fd fde6 	bl	8009cbc <_printf_float>
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	1c78      	adds	r0, r7, #1
 800c0f4:	d1d6      	bne.n	800c0a4 <_vfiprintf_r+0x1bc>
 800c0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0f8:	07d9      	lsls	r1, r3, #31
 800c0fa:	d405      	bmi.n	800c108 <_vfiprintf_r+0x220>
 800c0fc:	89ab      	ldrh	r3, [r5, #12]
 800c0fe:	059a      	lsls	r2, r3, #22
 800c100:	d402      	bmi.n	800c108 <_vfiprintf_r+0x220>
 800c102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c104:	f000 faaf 	bl	800c666 <__retarget_lock_release_recursive>
 800c108:	89ab      	ldrh	r3, [r5, #12]
 800c10a:	065b      	lsls	r3, r3, #25
 800c10c:	f53f af12 	bmi.w	800bf34 <_vfiprintf_r+0x4c>
 800c110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c112:	e711      	b.n	800bf38 <_vfiprintf_r+0x50>
 800c114:	ab03      	add	r3, sp, #12
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	462a      	mov	r2, r5
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <_vfiprintf_r+0x258>)
 800c11c:	a904      	add	r1, sp, #16
 800c11e:	4630      	mov	r0, r6
 800c120:	f7fe f870 	bl	800a204 <_printf_i>
 800c124:	e7e4      	b.n	800c0f0 <_vfiprintf_r+0x208>
 800c126:	bf00      	nop
 800c128:	0800cfc4 	.word	0x0800cfc4
 800c12c:	0800cfe4 	.word	0x0800cfe4
 800c130:	0800cfa4 	.word	0x0800cfa4
 800c134:	0800ce4c 	.word	0x0800ce4c
 800c138:	0800ce56 	.word	0x0800ce56
 800c13c:	08009cbd 	.word	0x08009cbd
 800c140:	0800bec5 	.word	0x0800bec5
 800c144:	0800ce52 	.word	0x0800ce52

0800c148 <__swbuf_r>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	460e      	mov	r6, r1
 800c14c:	4614      	mov	r4, r2
 800c14e:	4605      	mov	r5, r0
 800c150:	b118      	cbz	r0, 800c15a <__swbuf_r+0x12>
 800c152:	6983      	ldr	r3, [r0, #24]
 800c154:	b90b      	cbnz	r3, 800c15a <__swbuf_r+0x12>
 800c156:	f000 f9e7 	bl	800c528 <__sinit>
 800c15a:	4b21      	ldr	r3, [pc, #132]	; (800c1e0 <__swbuf_r+0x98>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	d12b      	bne.n	800c1b8 <__swbuf_r+0x70>
 800c160:	686c      	ldr	r4, [r5, #4]
 800c162:	69a3      	ldr	r3, [r4, #24]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	071a      	lsls	r2, r3, #28
 800c16a:	d52f      	bpl.n	800c1cc <__swbuf_r+0x84>
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	b36b      	cbz	r3, 800c1cc <__swbuf_r+0x84>
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	6820      	ldr	r0, [r4, #0]
 800c174:	1ac0      	subs	r0, r0, r3
 800c176:	6963      	ldr	r3, [r4, #20]
 800c178:	b2f6      	uxtb	r6, r6
 800c17a:	4283      	cmp	r3, r0
 800c17c:	4637      	mov	r7, r6
 800c17e:	dc04      	bgt.n	800c18a <__swbuf_r+0x42>
 800c180:	4621      	mov	r1, r4
 800c182:	4628      	mov	r0, r5
 800c184:	f000 f93c 	bl	800c400 <_fflush_r>
 800c188:	bb30      	cbnz	r0, 800c1d8 <__swbuf_r+0x90>
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	60a3      	str	r3, [r4, #8]
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	6022      	str	r2, [r4, #0]
 800c196:	701e      	strb	r6, [r3, #0]
 800c198:	6963      	ldr	r3, [r4, #20]
 800c19a:	3001      	adds	r0, #1
 800c19c:	4283      	cmp	r3, r0
 800c19e:	d004      	beq.n	800c1aa <__swbuf_r+0x62>
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	07db      	lsls	r3, r3, #31
 800c1a4:	d506      	bpl.n	800c1b4 <__swbuf_r+0x6c>
 800c1a6:	2e0a      	cmp	r6, #10
 800c1a8:	d104      	bne.n	800c1b4 <__swbuf_r+0x6c>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 f927 	bl	800c400 <_fflush_r>
 800c1b2:	b988      	cbnz	r0, 800c1d8 <__swbuf_r+0x90>
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <__swbuf_r+0x9c>)
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d101      	bne.n	800c1c2 <__swbuf_r+0x7a>
 800c1be:	68ac      	ldr	r4, [r5, #8]
 800c1c0:	e7cf      	b.n	800c162 <__swbuf_r+0x1a>
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <__swbuf_r+0xa0>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	bf08      	it	eq
 800c1c8:	68ec      	ldreq	r4, [r5, #12]
 800c1ca:	e7ca      	b.n	800c162 <__swbuf_r+0x1a>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f000 f81a 	bl	800c208 <__swsetup_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0cb      	beq.n	800c170 <__swbuf_r+0x28>
 800c1d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c1dc:	e7ea      	b.n	800c1b4 <__swbuf_r+0x6c>
 800c1de:	bf00      	nop
 800c1e0:	0800cfc4 	.word	0x0800cfc4
 800c1e4:	0800cfe4 	.word	0x0800cfe4
 800c1e8:	0800cfa4 	.word	0x0800cfa4

0800c1ec <__ascii_wctomb>:
 800c1ec:	b149      	cbz	r1, 800c202 <__ascii_wctomb+0x16>
 800c1ee:	2aff      	cmp	r2, #255	; 0xff
 800c1f0:	bf85      	ittet	hi
 800c1f2:	238a      	movhi	r3, #138	; 0x8a
 800c1f4:	6003      	strhi	r3, [r0, #0]
 800c1f6:	700a      	strbls	r2, [r1, #0]
 800c1f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c1fc:	bf98      	it	ls
 800c1fe:	2001      	movls	r0, #1
 800c200:	4770      	bx	lr
 800c202:	4608      	mov	r0, r1
 800c204:	4770      	bx	lr
	...

0800c208 <__swsetup_r>:
 800c208:	4b32      	ldr	r3, [pc, #200]	; (800c2d4 <__swsetup_r+0xcc>)
 800c20a:	b570      	push	{r4, r5, r6, lr}
 800c20c:	681d      	ldr	r5, [r3, #0]
 800c20e:	4606      	mov	r6, r0
 800c210:	460c      	mov	r4, r1
 800c212:	b125      	cbz	r5, 800c21e <__swsetup_r+0x16>
 800c214:	69ab      	ldr	r3, [r5, #24]
 800c216:	b913      	cbnz	r3, 800c21e <__swsetup_r+0x16>
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 f985 	bl	800c528 <__sinit>
 800c21e:	4b2e      	ldr	r3, [pc, #184]	; (800c2d8 <__swsetup_r+0xd0>)
 800c220:	429c      	cmp	r4, r3
 800c222:	d10f      	bne.n	800c244 <__swsetup_r+0x3c>
 800c224:	686c      	ldr	r4, [r5, #4]
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c22c:	0719      	lsls	r1, r3, #28
 800c22e:	d42c      	bmi.n	800c28a <__swsetup_r+0x82>
 800c230:	06dd      	lsls	r5, r3, #27
 800c232:	d411      	bmi.n	800c258 <__swsetup_r+0x50>
 800c234:	2309      	movs	r3, #9
 800c236:	6033      	str	r3, [r6, #0]
 800c238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c242:	e03e      	b.n	800c2c2 <__swsetup_r+0xba>
 800c244:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <__swsetup_r+0xd4>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d101      	bne.n	800c24e <__swsetup_r+0x46>
 800c24a:	68ac      	ldr	r4, [r5, #8]
 800c24c:	e7eb      	b.n	800c226 <__swsetup_r+0x1e>
 800c24e:	4b24      	ldr	r3, [pc, #144]	; (800c2e0 <__swsetup_r+0xd8>)
 800c250:	429c      	cmp	r4, r3
 800c252:	bf08      	it	eq
 800c254:	68ec      	ldreq	r4, [r5, #12]
 800c256:	e7e6      	b.n	800c226 <__swsetup_r+0x1e>
 800c258:	0758      	lsls	r0, r3, #29
 800c25a:	d512      	bpl.n	800c282 <__swsetup_r+0x7a>
 800c25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25e:	b141      	cbz	r1, 800c272 <__swsetup_r+0x6a>
 800c260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c264:	4299      	cmp	r1, r3
 800c266:	d002      	beq.n	800c26e <__swsetup_r+0x66>
 800c268:	4630      	mov	r0, r6
 800c26a:	f7ff fb31 	bl	800b8d0 <_free_r>
 800c26e:	2300      	movs	r3, #0
 800c270:	6363      	str	r3, [r4, #52]	; 0x34
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	2300      	movs	r3, #0
 800c27c:	6063      	str	r3, [r4, #4]
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0308 	orr.w	r3, r3, #8
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	b94b      	cbnz	r3, 800c2a2 <__swsetup_r+0x9a>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c298:	d003      	beq.n	800c2a2 <__swsetup_r+0x9a>
 800c29a:	4621      	mov	r1, r4
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 fa09 	bl	800c6b4 <__smakebuf_r>
 800c2a2:	89a0      	ldrh	r0, [r4, #12]
 800c2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2a8:	f010 0301 	ands.w	r3, r0, #1
 800c2ac:	d00a      	beq.n	800c2c4 <__swsetup_r+0xbc>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60a3      	str	r3, [r4, #8]
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	425b      	negs	r3, r3
 800c2b6:	61a3      	str	r3, [r4, #24]
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	b943      	cbnz	r3, 800c2ce <__swsetup_r+0xc6>
 800c2bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2c0:	d1ba      	bne.n	800c238 <__swsetup_r+0x30>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	0781      	lsls	r1, r0, #30
 800c2c6:	bf58      	it	pl
 800c2c8:	6963      	ldrpl	r3, [r4, #20]
 800c2ca:	60a3      	str	r3, [r4, #8]
 800c2cc:	e7f4      	b.n	800c2b8 <__swsetup_r+0xb0>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e7f7      	b.n	800c2c2 <__swsetup_r+0xba>
 800c2d2:	bf00      	nop
 800c2d4:	2000006c 	.word	0x2000006c
 800c2d8:	0800cfc4 	.word	0x0800cfc4
 800c2dc:	0800cfe4 	.word	0x0800cfe4
 800c2e0:	0800cfa4 	.word	0x0800cfa4

0800c2e4 <abort>:
 800c2e4:	b508      	push	{r3, lr}
 800c2e6:	2006      	movs	r0, #6
 800c2e8:	f000 fa54 	bl	800c794 <raise>
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f7f6 f8f5 	bl	80024dc <_exit>
	...

0800c2f4 <__sflush_r>:
 800c2f4:	898a      	ldrh	r2, [r1, #12]
 800c2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	0710      	lsls	r0, r2, #28
 800c2fe:	460c      	mov	r4, r1
 800c300:	d458      	bmi.n	800c3b4 <__sflush_r+0xc0>
 800c302:	684b      	ldr	r3, [r1, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dc05      	bgt.n	800c314 <__sflush_r+0x20>
 800c308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dc02      	bgt.n	800c314 <__sflush_r+0x20>
 800c30e:	2000      	movs	r0, #0
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c316:	2e00      	cmp	r6, #0
 800c318:	d0f9      	beq.n	800c30e <__sflush_r+0x1a>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c320:	682f      	ldr	r7, [r5, #0]
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	d032      	beq.n	800c38c <__sflush_r+0x98>
 800c326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	075a      	lsls	r2, r3, #29
 800c32c:	d505      	bpl.n	800c33a <__sflush_r+0x46>
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	1ac0      	subs	r0, r0, r3
 800c332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c334:	b10b      	cbz	r3, 800c33a <__sflush_r+0x46>
 800c336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c338:	1ac0      	subs	r0, r0, r3
 800c33a:	2300      	movs	r3, #0
 800c33c:	4602      	mov	r2, r0
 800c33e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c340:	6a21      	ldr	r1, [r4, #32]
 800c342:	4628      	mov	r0, r5
 800c344:	47b0      	blx	r6
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	d106      	bne.n	800c35a <__sflush_r+0x66>
 800c34c:	6829      	ldr	r1, [r5, #0]
 800c34e:	291d      	cmp	r1, #29
 800c350:	d82c      	bhi.n	800c3ac <__sflush_r+0xb8>
 800c352:	4a2a      	ldr	r2, [pc, #168]	; (800c3fc <__sflush_r+0x108>)
 800c354:	40ca      	lsrs	r2, r1
 800c356:	07d6      	lsls	r6, r2, #31
 800c358:	d528      	bpl.n	800c3ac <__sflush_r+0xb8>
 800c35a:	2200      	movs	r2, #0
 800c35c:	6062      	str	r2, [r4, #4]
 800c35e:	04d9      	lsls	r1, r3, #19
 800c360:	6922      	ldr	r2, [r4, #16]
 800c362:	6022      	str	r2, [r4, #0]
 800c364:	d504      	bpl.n	800c370 <__sflush_r+0x7c>
 800c366:	1c42      	adds	r2, r0, #1
 800c368:	d101      	bne.n	800c36e <__sflush_r+0x7a>
 800c36a:	682b      	ldr	r3, [r5, #0]
 800c36c:	b903      	cbnz	r3, 800c370 <__sflush_r+0x7c>
 800c36e:	6560      	str	r0, [r4, #84]	; 0x54
 800c370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c372:	602f      	str	r7, [r5, #0]
 800c374:	2900      	cmp	r1, #0
 800c376:	d0ca      	beq.n	800c30e <__sflush_r+0x1a>
 800c378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c37c:	4299      	cmp	r1, r3
 800c37e:	d002      	beq.n	800c386 <__sflush_r+0x92>
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff faa5 	bl	800b8d0 <_free_r>
 800c386:	2000      	movs	r0, #0
 800c388:	6360      	str	r0, [r4, #52]	; 0x34
 800c38a:	e7c1      	b.n	800c310 <__sflush_r+0x1c>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	2301      	movs	r3, #1
 800c390:	4628      	mov	r0, r5
 800c392:	47b0      	blx	r6
 800c394:	1c41      	adds	r1, r0, #1
 800c396:	d1c7      	bne.n	800c328 <__sflush_r+0x34>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0c4      	beq.n	800c328 <__sflush_r+0x34>
 800c39e:	2b1d      	cmp	r3, #29
 800c3a0:	d001      	beq.n	800c3a6 <__sflush_r+0xb2>
 800c3a2:	2b16      	cmp	r3, #22
 800c3a4:	d101      	bne.n	800c3aa <__sflush_r+0xb6>
 800c3a6:	602f      	str	r7, [r5, #0]
 800c3a8:	e7b1      	b.n	800c30e <__sflush_r+0x1a>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	e7ad      	b.n	800c310 <__sflush_r+0x1c>
 800c3b4:	690f      	ldr	r7, [r1, #16]
 800c3b6:	2f00      	cmp	r7, #0
 800c3b8:	d0a9      	beq.n	800c30e <__sflush_r+0x1a>
 800c3ba:	0793      	lsls	r3, r2, #30
 800c3bc:	680e      	ldr	r6, [r1, #0]
 800c3be:	bf08      	it	eq
 800c3c0:	694b      	ldreq	r3, [r1, #20]
 800c3c2:	600f      	str	r7, [r1, #0]
 800c3c4:	bf18      	it	ne
 800c3c6:	2300      	movne	r3, #0
 800c3c8:	eba6 0807 	sub.w	r8, r6, r7
 800c3cc:	608b      	str	r3, [r1, #8]
 800c3ce:	f1b8 0f00 	cmp.w	r8, #0
 800c3d2:	dd9c      	ble.n	800c30e <__sflush_r+0x1a>
 800c3d4:	6a21      	ldr	r1, [r4, #32]
 800c3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d8:	4643      	mov	r3, r8
 800c3da:	463a      	mov	r2, r7
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b0      	blx	r6
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	dc06      	bgt.n	800c3f2 <__sflush_r+0xfe>
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ea:	81a3      	strh	r3, [r4, #12]
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f0:	e78e      	b.n	800c310 <__sflush_r+0x1c>
 800c3f2:	4407      	add	r7, r0
 800c3f4:	eba8 0800 	sub.w	r8, r8, r0
 800c3f8:	e7e9      	b.n	800c3ce <__sflush_r+0xda>
 800c3fa:	bf00      	nop
 800c3fc:	20400001 	.word	0x20400001

0800c400 <_fflush_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	690b      	ldr	r3, [r1, #16]
 800c404:	4605      	mov	r5, r0
 800c406:	460c      	mov	r4, r1
 800c408:	b913      	cbnz	r3, 800c410 <_fflush_r+0x10>
 800c40a:	2500      	movs	r5, #0
 800c40c:	4628      	mov	r0, r5
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	b118      	cbz	r0, 800c41a <_fflush_r+0x1a>
 800c412:	6983      	ldr	r3, [r0, #24]
 800c414:	b90b      	cbnz	r3, 800c41a <_fflush_r+0x1a>
 800c416:	f000 f887 	bl	800c528 <__sinit>
 800c41a:	4b14      	ldr	r3, [pc, #80]	; (800c46c <_fflush_r+0x6c>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	d11b      	bne.n	800c458 <_fflush_r+0x58>
 800c420:	686c      	ldr	r4, [r5, #4]
 800c422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0ef      	beq.n	800c40a <_fflush_r+0xa>
 800c42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c42c:	07d0      	lsls	r0, r2, #31
 800c42e:	d404      	bmi.n	800c43a <_fflush_r+0x3a>
 800c430:	0599      	lsls	r1, r3, #22
 800c432:	d402      	bmi.n	800c43a <_fflush_r+0x3a>
 800c434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c436:	f000 f915 	bl	800c664 <__retarget_lock_acquire_recursive>
 800c43a:	4628      	mov	r0, r5
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7ff ff59 	bl	800c2f4 <__sflush_r>
 800c442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c444:	07da      	lsls	r2, r3, #31
 800c446:	4605      	mov	r5, r0
 800c448:	d4e0      	bmi.n	800c40c <_fflush_r+0xc>
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	059b      	lsls	r3, r3, #22
 800c44e:	d4dd      	bmi.n	800c40c <_fflush_r+0xc>
 800c450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c452:	f000 f908 	bl	800c666 <__retarget_lock_release_recursive>
 800c456:	e7d9      	b.n	800c40c <_fflush_r+0xc>
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_fflush_r+0x70>)
 800c45a:	429c      	cmp	r4, r3
 800c45c:	d101      	bne.n	800c462 <_fflush_r+0x62>
 800c45e:	68ac      	ldr	r4, [r5, #8]
 800c460:	e7df      	b.n	800c422 <_fflush_r+0x22>
 800c462:	4b04      	ldr	r3, [pc, #16]	; (800c474 <_fflush_r+0x74>)
 800c464:	429c      	cmp	r4, r3
 800c466:	bf08      	it	eq
 800c468:	68ec      	ldreq	r4, [r5, #12]
 800c46a:	e7da      	b.n	800c422 <_fflush_r+0x22>
 800c46c:	0800cfc4 	.word	0x0800cfc4
 800c470:	0800cfe4 	.word	0x0800cfe4
 800c474:	0800cfa4 	.word	0x0800cfa4

0800c478 <std>:
 800c478:	2300      	movs	r3, #0
 800c47a:	b510      	push	{r4, lr}
 800c47c:	4604      	mov	r4, r0
 800c47e:	e9c0 3300 	strd	r3, r3, [r0]
 800c482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c486:	6083      	str	r3, [r0, #8]
 800c488:	8181      	strh	r1, [r0, #12]
 800c48a:	6643      	str	r3, [r0, #100]	; 0x64
 800c48c:	81c2      	strh	r2, [r0, #14]
 800c48e:	6183      	str	r3, [r0, #24]
 800c490:	4619      	mov	r1, r3
 800c492:	2208      	movs	r2, #8
 800c494:	305c      	adds	r0, #92	; 0x5c
 800c496:	f7fd fb69 	bl	8009b6c <memset>
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <std+0x38>)
 800c49c:	6263      	str	r3, [r4, #36]	; 0x24
 800c49e:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <std+0x3c>)
 800c4a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <std+0x40>)
 800c4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4a6:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <std+0x44>)
 800c4a8:	6224      	str	r4, [r4, #32]
 800c4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800c7cd 	.word	0x0800c7cd
 800c4b4:	0800c7ef 	.word	0x0800c7ef
 800c4b8:	0800c827 	.word	0x0800c827
 800c4bc:	0800c84b 	.word	0x0800c84b

0800c4c0 <_cleanup_r>:
 800c4c0:	4901      	ldr	r1, [pc, #4]	; (800c4c8 <_cleanup_r+0x8>)
 800c4c2:	f000 b8af 	b.w	800c624 <_fwalk_reent>
 800c4c6:	bf00      	nop
 800c4c8:	0800c401 	.word	0x0800c401

0800c4cc <__sfmoreglue>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	2268      	movs	r2, #104	; 0x68
 800c4d0:	1e4d      	subs	r5, r1, #1
 800c4d2:	4355      	muls	r5, r2
 800c4d4:	460e      	mov	r6, r1
 800c4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4da:	f7ff fa65 	bl	800b9a8 <_malloc_r>
 800c4de:	4604      	mov	r4, r0
 800c4e0:	b140      	cbz	r0, 800c4f4 <__sfmoreglue+0x28>
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c4e8:	300c      	adds	r0, #12
 800c4ea:	60a0      	str	r0, [r4, #8]
 800c4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4f0:	f7fd fb3c 	bl	8009b6c <memset>
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}

0800c4f8 <__sfp_lock_acquire>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__sfp_lock_acquire+0x8>)
 800c4fa:	f000 b8b3 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	20001369 	.word	0x20001369

0800c504 <__sfp_lock_release>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__sfp_lock_release+0x8>)
 800c506:	f000 b8ae 	b.w	800c666 <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	20001369 	.word	0x20001369

0800c510 <__sinit_lock_acquire>:
 800c510:	4801      	ldr	r0, [pc, #4]	; (800c518 <__sinit_lock_acquire+0x8>)
 800c512:	f000 b8a7 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800c516:	bf00      	nop
 800c518:	2000136a 	.word	0x2000136a

0800c51c <__sinit_lock_release>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sinit_lock_release+0x8>)
 800c51e:	f000 b8a2 	b.w	800c666 <__retarget_lock_release_recursive>
 800c522:	bf00      	nop
 800c524:	2000136a 	.word	0x2000136a

0800c528 <__sinit>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	4604      	mov	r4, r0
 800c52c:	f7ff fff0 	bl	800c510 <__sinit_lock_acquire>
 800c530:	69a3      	ldr	r3, [r4, #24]
 800c532:	b11b      	cbz	r3, 800c53c <__sinit+0x14>
 800c534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c538:	f7ff bff0 	b.w	800c51c <__sinit_lock_release>
 800c53c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c540:	6523      	str	r3, [r4, #80]	; 0x50
 800c542:	4b13      	ldr	r3, [pc, #76]	; (800c590 <__sinit+0x68>)
 800c544:	4a13      	ldr	r2, [pc, #76]	; (800c594 <__sinit+0x6c>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	62a2      	str	r2, [r4, #40]	; 0x28
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	bf04      	itt	eq
 800c54e:	2301      	moveq	r3, #1
 800c550:	61a3      	streq	r3, [r4, #24]
 800c552:	4620      	mov	r0, r4
 800c554:	f000 f820 	bl	800c598 <__sfp>
 800c558:	6060      	str	r0, [r4, #4]
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f81c 	bl	800c598 <__sfp>
 800c560:	60a0      	str	r0, [r4, #8]
 800c562:	4620      	mov	r0, r4
 800c564:	f000 f818 	bl	800c598 <__sfp>
 800c568:	2200      	movs	r2, #0
 800c56a:	60e0      	str	r0, [r4, #12]
 800c56c:	2104      	movs	r1, #4
 800c56e:	6860      	ldr	r0, [r4, #4]
 800c570:	f7ff ff82 	bl	800c478 <std>
 800c574:	68a0      	ldr	r0, [r4, #8]
 800c576:	2201      	movs	r2, #1
 800c578:	2109      	movs	r1, #9
 800c57a:	f7ff ff7d 	bl	800c478 <std>
 800c57e:	68e0      	ldr	r0, [r4, #12]
 800c580:	2202      	movs	r2, #2
 800c582:	2112      	movs	r1, #18
 800c584:	f7ff ff78 	bl	800c478 <std>
 800c588:	2301      	movs	r3, #1
 800c58a:	61a3      	str	r3, [r4, #24]
 800c58c:	e7d2      	b.n	800c534 <__sinit+0xc>
 800c58e:	bf00      	nop
 800c590:	0800cc28 	.word	0x0800cc28
 800c594:	0800c4c1 	.word	0x0800c4c1

0800c598 <__sfp>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	4607      	mov	r7, r0
 800c59c:	f7ff ffac 	bl	800c4f8 <__sfp_lock_acquire>
 800c5a0:	4b1e      	ldr	r3, [pc, #120]	; (800c61c <__sfp+0x84>)
 800c5a2:	681e      	ldr	r6, [r3, #0]
 800c5a4:	69b3      	ldr	r3, [r6, #24]
 800c5a6:	b913      	cbnz	r3, 800c5ae <__sfp+0x16>
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff ffbd 	bl	800c528 <__sinit>
 800c5ae:	3648      	adds	r6, #72	; 0x48
 800c5b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	d503      	bpl.n	800c5c0 <__sfp+0x28>
 800c5b8:	6833      	ldr	r3, [r6, #0]
 800c5ba:	b30b      	cbz	r3, 800c600 <__sfp+0x68>
 800c5bc:	6836      	ldr	r6, [r6, #0]
 800c5be:	e7f7      	b.n	800c5b0 <__sfp+0x18>
 800c5c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5c4:	b9d5      	cbnz	r5, 800c5fc <__sfp+0x64>
 800c5c6:	4b16      	ldr	r3, [pc, #88]	; (800c620 <__sfp+0x88>)
 800c5c8:	60e3      	str	r3, [r4, #12]
 800c5ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c5d0:	f000 f847 	bl	800c662 <__retarget_lock_init_recursive>
 800c5d4:	f7ff ff96 	bl	800c504 <__sfp_lock_release>
 800c5d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5e0:	6025      	str	r5, [r4, #0]
 800c5e2:	61a5      	str	r5, [r4, #24]
 800c5e4:	2208      	movs	r2, #8
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5ec:	f7fd fabe 	bl	8009b6c <memset>
 800c5f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5fc:	3468      	adds	r4, #104	; 0x68
 800c5fe:	e7d9      	b.n	800c5b4 <__sfp+0x1c>
 800c600:	2104      	movs	r1, #4
 800c602:	4638      	mov	r0, r7
 800c604:	f7ff ff62 	bl	800c4cc <__sfmoreglue>
 800c608:	4604      	mov	r4, r0
 800c60a:	6030      	str	r0, [r6, #0]
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d1d5      	bne.n	800c5bc <__sfp+0x24>
 800c610:	f7ff ff78 	bl	800c504 <__sfp_lock_release>
 800c614:	230c      	movs	r3, #12
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	e7ee      	b.n	800c5f8 <__sfp+0x60>
 800c61a:	bf00      	nop
 800c61c:	0800cc28 	.word	0x0800cc28
 800c620:	ffff0001 	.word	0xffff0001

0800c624 <_fwalk_reent>:
 800c624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c628:	4606      	mov	r6, r0
 800c62a:	4688      	mov	r8, r1
 800c62c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c630:	2700      	movs	r7, #0
 800c632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c636:	f1b9 0901 	subs.w	r9, r9, #1
 800c63a:	d505      	bpl.n	800c648 <_fwalk_reent+0x24>
 800c63c:	6824      	ldr	r4, [r4, #0]
 800c63e:	2c00      	cmp	r4, #0
 800c640:	d1f7      	bne.n	800c632 <_fwalk_reent+0xe>
 800c642:	4638      	mov	r0, r7
 800c644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c648:	89ab      	ldrh	r3, [r5, #12]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d907      	bls.n	800c65e <_fwalk_reent+0x3a>
 800c64e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c652:	3301      	adds	r3, #1
 800c654:	d003      	beq.n	800c65e <_fwalk_reent+0x3a>
 800c656:	4629      	mov	r1, r5
 800c658:	4630      	mov	r0, r6
 800c65a:	47c0      	blx	r8
 800c65c:	4307      	orrs	r7, r0
 800c65e:	3568      	adds	r5, #104	; 0x68
 800c660:	e7e9      	b.n	800c636 <_fwalk_reent+0x12>

0800c662 <__retarget_lock_init_recursive>:
 800c662:	4770      	bx	lr

0800c664 <__retarget_lock_acquire_recursive>:
 800c664:	4770      	bx	lr

0800c666 <__retarget_lock_release_recursive>:
 800c666:	4770      	bx	lr

0800c668 <__swhatbuf_r>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	460e      	mov	r6, r1
 800c66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c670:	2900      	cmp	r1, #0
 800c672:	b096      	sub	sp, #88	; 0x58
 800c674:	4614      	mov	r4, r2
 800c676:	461d      	mov	r5, r3
 800c678:	da08      	bge.n	800c68c <__swhatbuf_r+0x24>
 800c67a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	602a      	str	r2, [r5, #0]
 800c682:	061a      	lsls	r2, r3, #24
 800c684:	d410      	bmi.n	800c6a8 <__swhatbuf_r+0x40>
 800c686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c68a:	e00e      	b.n	800c6aa <__swhatbuf_r+0x42>
 800c68c:	466a      	mov	r2, sp
 800c68e:	f000 f903 	bl	800c898 <_fstat_r>
 800c692:	2800      	cmp	r0, #0
 800c694:	dbf1      	blt.n	800c67a <__swhatbuf_r+0x12>
 800c696:	9a01      	ldr	r2, [sp, #4]
 800c698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c69c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6a0:	425a      	negs	r2, r3
 800c6a2:	415a      	adcs	r2, r3
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	e7ee      	b.n	800c686 <__swhatbuf_r+0x1e>
 800c6a8:	2340      	movs	r3, #64	; 0x40
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	b016      	add	sp, #88	; 0x58
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6b4 <__smakebuf_r>:
 800c6b4:	898b      	ldrh	r3, [r1, #12]
 800c6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6b8:	079d      	lsls	r5, r3, #30
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460c      	mov	r4, r1
 800c6be:	d507      	bpl.n	800c6d0 <__smakebuf_r+0x1c>
 800c6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	b002      	add	sp, #8
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	ab01      	add	r3, sp, #4
 800c6d2:	466a      	mov	r2, sp
 800c6d4:	f7ff ffc8 	bl	800c668 <__swhatbuf_r>
 800c6d8:	9900      	ldr	r1, [sp, #0]
 800c6da:	4605      	mov	r5, r0
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff f963 	bl	800b9a8 <_malloc_r>
 800c6e2:	b948      	cbnz	r0, 800c6f8 <__smakebuf_r+0x44>
 800c6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e8:	059a      	lsls	r2, r3, #22
 800c6ea:	d4ef      	bmi.n	800c6cc <__smakebuf_r+0x18>
 800c6ec:	f023 0303 	bic.w	r3, r3, #3
 800c6f0:	f043 0302 	orr.w	r3, r3, #2
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	e7e3      	b.n	800c6c0 <__smakebuf_r+0xc>
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	; (800c730 <__smakebuf_r+0x7c>)
 800c6fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	6020      	str	r0, [r4, #0]
 800c700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	9b00      	ldr	r3, [sp, #0]
 800c708:	6163      	str	r3, [r4, #20]
 800c70a:	9b01      	ldr	r3, [sp, #4]
 800c70c:	6120      	str	r0, [r4, #16]
 800c70e:	b15b      	cbz	r3, 800c728 <__smakebuf_r+0x74>
 800c710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c714:	4630      	mov	r0, r6
 800c716:	f000 f8d1 	bl	800c8bc <_isatty_r>
 800c71a:	b128      	cbz	r0, 800c728 <__smakebuf_r+0x74>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	f043 0301 	orr.w	r3, r3, #1
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	89a0      	ldrh	r0, [r4, #12]
 800c72a:	4305      	orrs	r5, r0
 800c72c:	81a5      	strh	r5, [r4, #12]
 800c72e:	e7cd      	b.n	800c6cc <__smakebuf_r+0x18>
 800c730:	0800c4c1 	.word	0x0800c4c1

0800c734 <_malloc_usable_size_r>:
 800c734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c738:	1f18      	subs	r0, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfbc      	itt	lt
 800c73e:	580b      	ldrlt	r3, [r1, r0]
 800c740:	18c0      	addlt	r0, r0, r3
 800c742:	4770      	bx	lr

0800c744 <_raise_r>:
 800c744:	291f      	cmp	r1, #31
 800c746:	b538      	push	{r3, r4, r5, lr}
 800c748:	4604      	mov	r4, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	d904      	bls.n	800c758 <_raise_r+0x14>
 800c74e:	2316      	movs	r3, #22
 800c750:	6003      	str	r3, [r0, #0]
 800c752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c75a:	b112      	cbz	r2, 800c762 <_raise_r+0x1e>
 800c75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c760:	b94b      	cbnz	r3, 800c776 <_raise_r+0x32>
 800c762:	4620      	mov	r0, r4
 800c764:	f000 f830 	bl	800c7c8 <_getpid_r>
 800c768:	462a      	mov	r2, r5
 800c76a:	4601      	mov	r1, r0
 800c76c:	4620      	mov	r0, r4
 800c76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c772:	f000 b817 	b.w	800c7a4 <_kill_r>
 800c776:	2b01      	cmp	r3, #1
 800c778:	d00a      	beq.n	800c790 <_raise_r+0x4c>
 800c77a:	1c59      	adds	r1, r3, #1
 800c77c:	d103      	bne.n	800c786 <_raise_r+0x42>
 800c77e:	2316      	movs	r3, #22
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	2001      	movs	r0, #1
 800c784:	e7e7      	b.n	800c756 <_raise_r+0x12>
 800c786:	2400      	movs	r4, #0
 800c788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c78c:	4628      	mov	r0, r5
 800c78e:	4798      	blx	r3
 800c790:	2000      	movs	r0, #0
 800c792:	e7e0      	b.n	800c756 <_raise_r+0x12>

0800c794 <raise>:
 800c794:	4b02      	ldr	r3, [pc, #8]	; (800c7a0 <raise+0xc>)
 800c796:	4601      	mov	r1, r0
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	f7ff bfd3 	b.w	800c744 <_raise_r>
 800c79e:	bf00      	nop
 800c7a0:	2000006c 	.word	0x2000006c

0800c7a4 <_kill_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d07      	ldr	r5, [pc, #28]	; (800c7c4 <_kill_r+0x20>)
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	f7f5 fe83 	bl	80024bc <_kill>
 800c7b6:	1c43      	adds	r3, r0, #1
 800c7b8:	d102      	bne.n	800c7c0 <_kill_r+0x1c>
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	b103      	cbz	r3, 800c7c0 <_kill_r+0x1c>
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	bd38      	pop	{r3, r4, r5, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20001364 	.word	0x20001364

0800c7c8 <_getpid_r>:
 800c7c8:	f7f5 be70 	b.w	80024ac <_getpid>

0800c7cc <__sread>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d4:	f000 f894 	bl	800c900 <_read_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	bfab      	itete	ge
 800c7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7de:	89a3      	ldrhlt	r3, [r4, #12]
 800c7e0:	181b      	addge	r3, r3, r0
 800c7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7e6:	bfac      	ite	ge
 800c7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7ea:	81a3      	strhlt	r3, [r4, #12]
 800c7ec:	bd10      	pop	{r4, pc}

0800c7ee <__swrite>:
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	05db      	lsls	r3, r3, #23
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	d505      	bpl.n	800c80c <__swrite+0x1e>
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	2302      	movs	r3, #2
 800c806:	2200      	movs	r2, #0
 800c808:	f000 f868 	bl	800c8dc <_lseek_r>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	4632      	mov	r2, r6
 800c81a:	463b      	mov	r3, r7
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	f000 b817 	b.w	800c854 <_write_r>

0800c826 <__sseek>:
 800c826:	b510      	push	{r4, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82e:	f000 f855 	bl	800c8dc <_lseek_r>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	bf15      	itete	ne
 800c838:	6560      	strne	r0, [r4, #84]	; 0x54
 800c83a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c83e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c842:	81a3      	strheq	r3, [r4, #12]
 800c844:	bf18      	it	ne
 800c846:	81a3      	strhne	r3, [r4, #12]
 800c848:	bd10      	pop	{r4, pc}

0800c84a <__sclose>:
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 b813 	b.w	800c878 <_close_r>
	...

0800c854 <_write_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d07      	ldr	r5, [pc, #28]	; (800c874 <_write_r+0x20>)
 800c858:	4604      	mov	r4, r0
 800c85a:	4608      	mov	r0, r1
 800c85c:	4611      	mov	r1, r2
 800c85e:	2200      	movs	r2, #0
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	f7f5 fe61 	bl	800252a <_write>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_write_r+0x1e>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_write_r+0x1e>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	20001364 	.word	0x20001364

0800c878 <_close_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	; (800c894 <_close_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f5 fe6d 	bl	8002562 <_close>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_close_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_close_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20001364 	.word	0x20001364

0800c898 <_fstat_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_fstat_r+0x20>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f7f5 fe68 	bl	800257a <_fstat>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <_fstat_r+0x1c>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b103      	cbz	r3, 800c8b4 <_fstat_r+0x1c>
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20001364 	.word	0x20001364

0800c8bc <_isatty_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	; (800c8d8 <_isatty_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f5 fe67 	bl	800259a <_isatty>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_isatty_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_isatty_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20001364 	.word	0x20001364

0800c8dc <_lseek_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	; (800c8fc <_lseek_r+0x20>)
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	602a      	str	r2, [r5, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f7f5 fe60 	bl	80025b0 <_lseek>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_lseek_r+0x1e>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_lseek_r+0x1e>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	20001364 	.word	0x20001364

0800c900 <_read_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_read_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f5 fdee 	bl	80024f0 <_read>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_read_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_read_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20001364 	.word	0x20001364

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
